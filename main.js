(window.webpackJsonp = window.webpackJsonp || []).push([
    [1], {
        0: function(t, e, s) {
            t.exports = s("zUnb")
        },
        JY8D: function(t) {
            t.exports = JSON.parse('{"a":{"direction":0,"camera":{"x":0,"y":0,"z":10},"canvases":[{"scale":"h","geometries":[{"id":"vertical","width":90,"height":130,"dx":0,"dy":0},{"id":"sitting","width":90,"height":130,"dx":0,"dy":0},{"id":"horizontal","width":128,"height":80,"dx":30,"dy":0},{"id":"swhorizontal","width":192,"height":120,"dx":0,"dy":-40}]},{"scale":"sh","geometries":[{"id":"vertical","width":45,"height":72,"dx":0,"dy":0},{"id":"sitting","width":45,"height":72,"dx":0,"dy":0},{"id":"horizontal","width":64,"height":50,"dx":15,"dy":-10},{"id":"swhorizontal","width":96,"height":70,"dx":0,"dy":-20},{"id":"swim","width":64,"height":70,"dx":25,"dy":10}]}],"avatarSets":[{"id":"full","avatarSets":[{"id":"body","main":true,"bodyParts":[{"id":"top"},{"id":"bottom"},{"id":"behind"},{"id":"torso"},{"id":"leftitem"},{"id":"rightitem"},{"id":"leftarm"},{"id":"rightarm"}]},{"id":"head","bodyParts":[{"id":"head"}]}]}],"types":[{"id":"vertical","bodyParts":[{"id":"top","x":0,"y":0,"z":0,"radius":2},{"id":"bottom","x":0,"y":0,"z":0,"radius":0.001},{"id":"behind","x":0,"y":0,"z":0.2,"radius":0.3},{"id":"torso","x":0,"y":0,"z":0,"radius":0.4,"items":[{"id":"bd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"bds","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"ch","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"sh","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lg","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ss","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"cp","x":0,"y":0,"z":0,"radius":0.045,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"wa","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"cc","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ca","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"leftitem","x":0,"y":0,"z":-0.29,"radius":0.3,"items":[{"id":"li","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"rightitem","x":0,"y":0,"z":-0.29,"radius":0.3,"items":[{"id":"ri","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"leftarm","x":-1,"y":0,"z":-0.51,"radius":0.5,"items":[{"id":"lh","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lhs","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ls","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lc","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"rightarm","x":1,"y":0,"z":-0.51,"radius":0.5,"items":[{"id":"rh","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rhs","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rs","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rc","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"head","x":0,"y":0,"z":0,"radius":0.5,"items":[{"id":"hd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fc","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ey","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"hr","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"hrb","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fa","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ea","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ha","x":0,"y":0,"z":0,"radius":0.08,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"he","x":0,"y":0,"z":0,"radius":0.09,"nx":0,"ny":0,"nz":-1,"double":false}]}]},{"id":"sitting","bodyParts":[{"id":"top","x":0,"y":0,"z":0,"radius":2},{"id":"bottom","x":0,"y":0,"z":0,"radius":0.001},{"id":"behind","x":0,"y":0,"z":0.2,"radius":0.3},{"id":"torso","x":0,"y":0,"z":0,"radius":0.4,"items":[{"id":"bd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"bds","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"ch","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"sh","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lg","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ss","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"cp","x":0,"y":0,"z":0,"radius":0.045,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"wa","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"cc","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ca","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"leftitem","x":0,"y":0,"z":-0.29,"radius":0.3,"items":[{"id":"li","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"rightitem","x":0,"y":0,"z":-0.29,"radius":0.3,"items":[{"id":"ri","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"leftarm","x":-1,"y":0,"z":-0.51,"radius":0.5,"items":[{"id":"lh","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lhs","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ls","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lc","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"rightarm","x":1,"y":0,"z":-0.51,"radius":0.5,"items":[{"id":"rh","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rhs","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rs","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rc","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"head","x":0,"y":0,"z":0,"radius":0.5,"items":[{"id":"hd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fc","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ey","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"hr","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"hrb","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fa","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ea","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ha","x":0,"y":0,"z":0,"radius":0.08,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"he","x":0,"y":0,"z":0,"radius":0.09,"nx":0,"ny":0,"nz":-1,"double":false}]}]},{"id":"horizontal","bodyParts":[{"id":"torso","x":0,"y":0,"z":0,"radius":0.4,"items":[{"id":"bd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"bds","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"ch","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"cp","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"sh","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lg","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ss","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"wa","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"cc","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ca","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"leftitem","x":0,"y":0,"z":-0.29,"radius":0.3,"items":[{"id":"li","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"rightitem","x":0,"y":0,"z":-0.29,"radius":0.3,"items":[{"id":"ri","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"leftarm","x":-1,"y":0,"z":-0.51,"radius":0.6,"items":[{"id":"lh","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lhs","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ls","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lc","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"rightarm","x":1,"y":0,"z":-0.51,"radius":0.6,"items":[{"id":"rh","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rhs","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rs","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rc","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"head","x":0,"y":0,"z":0,"radius":0.5,"items":[{"id":"hd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fc","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ey","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"hr","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"hrb","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fa","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ea","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ha","x":0,"y":0,"z":0,"radius":0.08,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"he","x":0,"y":0,"z":0,"radius":0.09,"nx":0,"ny":0,"nz":-1,"double":false}]}]},{"id":"swhorizontal","bodyParts":[{"id":"torso","x":0,"y":0,"z":0,"radius":0.4,"items":[{"id":"bd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"bds","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"ch","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"cp","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"sh","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lg","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ss","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"wa","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"cc","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ca","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"leftitem","x":0,"y":0,"z":-0.29,"radius":0.3,"items":[{"id":"li","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"rightitem","x":0,"y":0,"z":-0.29,"radius":0.3,"items":[{"id":"ri","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"leftarm","x":-1,"y":0,"z":-0.51,"radius":0.6,"items":[{"id":"lh","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lhs","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ls","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"lc","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"rightarm","x":1,"y":0,"z":-0.51,"radius":0.6,"items":[{"id":"rh","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rhs","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rs","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"rc","x":0,"y":0,"z":0,"radius":0.025,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"head","x":0,"y":0,"z":0,"radius":0.5,"items":[{"id":"hd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fc","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ey","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"hr","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"hrb","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fa","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ea","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ha","x":0,"y":0,"z":0,"radius":0.08,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"he","x":0,"y":0,"z":0,"radius":0.09,"nx":0,"ny":0,"nz":-1,"double":false}]}]},{"id":"swim","bodyParts":[{"id":"torso","x":0,"y":0,"z":0,"radius":0.4,"items":[{"id":"bds","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"ss","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false}]},{"id":"head","x":0,"y":0,"z":0,"radius":0.5,"items":[{"id":"hd","x":0,"y":0,"z":0,"radius":0.01,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fc","x":0,"y":0,"z":0,"radius":0.02,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ey","x":0,"y":0,"z":0,"radius":0.03,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"hr","x":0,"y":0,"z":0,"radius":0.04,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"hrb","x":0,"y":0,"z":0,"radius":0.05,"nx":0,"ny":0,"nz":-1,"double":true},{"id":"fa","x":0,"y":0,"z":0,"radius":0.06,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ea","x":0,"y":0,"z":0,"radius":0.07,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"ha","x":0,"y":0,"z":0,"radius":0.08,"nx":0,"ny":0,"nz":-1,"double":false},{"id":"he","x":0,"y":0,"z":0,"radius":0.09,"nx":0,"ny":0,"nz":-1,"double":false}]}]}]}}')
        },
        LPTP: function(t) {
            t.exports = JSON.parse('{"a":{"partSet":[{"setType":"ri","flippedSetType":"ri"},{"setType":"ri","flippedSetType":"ri"},{"setType":"rh","flippedSetType":"lh"},{"setType":"rhs","flippedSetType":"lhs"},{"setType":"rs","swim":"0","flippedSetType":"ls"},{"setType":"rc","flippedSetType":"lc"},{"setType":"bd"},{"setType":"bds"},{"setType":"ss"},{"setType":"sh"},{"setType":"lg"},{"setType":"ch"},{"setType":"cp"},{"setType":"cc"},{"setType":"hd"},{"setType":"fc"},{"setType":"ey"},{"setType":"hr"},{"setType":"hrb","removeSetType":"hr"},{"setType":"li","flippedSetType":"li"},{"setType":"lh","flippedSetType":"rh"},{"setType":"lhs","flippedSetType":"rhs"},{"setType":"ls","flippedSetType":"rs"},{"setType":"lc","flippedSetType":"rc"},{"setType":"wa"},{"setType":"ea"},{"setType":"ca"},{"setType":"fa"},{"setType":"ha"},{"setType":"he"}],"activePartSets":[{"id":"figure","activeParts":[{"setType":"rh"},{"setType":"rh"},{"setType":"rhs"},{"setType":"rs"},{"setType":"rc"},{"setType":"bd"},{"setType":"bds"},{"setType":"ss"},{"setType":"sh"},{"setType":"lg"},{"setType":"ch"},{"setType":"cp"},{"setType":"cc"},{"setType":"wa"},{"setType":"hd"},{"setType":"fc"},{"setType":"ey"},{"setType":"hr"},{"setType":"hrb"},{"setType":"lh"},{"setType":"lhs"},{"setType":"ls"},{"setType":"lc"},{"setType":"ea"},{"setType":"ca"},{"setType":"fa"},{"setType":"ha"},{"setType":"he"}]},{"id":"head","activeParts":[{"setType":"hd"},{"setType":"fc"},{"setType":"ey"},{"setType":"hr"},{"setType":"hrb"},{"setType":"ea"},{"setType":"fa"},{"setType":"ha"},{"setType":"he"}]},{"id":"speak","activeParts":[{"setType":"hd"},{"setType":"hr"},{"setType":"hrb"},{"setType":"fc"},{"setType":"fa"},{"setType":"ha"}]},{"id":"gesture","activeParts":[{"setType":"ey"},{"setType":"fc"}]},{"id":"eye","activeParts":[{"setType":"ey"}]},{"id":"handRight","activeParts":[{"setType":"rh"},{"setType":"rhs"},{"setType":"rs"},{"setType":"rc"},{"setType":"ri"}]},{"id":"handRightAndHead","activeParts":[{"setType":"rh"},{"setType":"rhs"},{"setType":"rs"},{"setType":"rc"},{"setType":"ri"},{"setType":"ey"},{"setType":"fc"},{"setType":"hd"}]},{"id":"handLeft","activeParts":[{"setType":"lh"},{"setType":"lhs"},{"setType":"ls"},{"setType":"lc"},{"setType":"li"}]},{"id":"walk","activeParts":[{"setType":"bd"},{"setType":"bds"},{"setType":"ss"},{"setType":"lg"},{"setType":"lh"},{"setType":"lhs"},{"setType":"rh"},{"setType":"rhs"},{"setType":"ls"},{"setType":"lc"},{"setType":"rs"},{"setType":"rc"},{"setType":"sh"}]},{"id":"sit","activeParts":[{"setType":"bd"},{"setType":"bds"},{"setType":"ss"},{"setType":"lg"},{"setType":"sh"},{"setType":"cc"}]},{"id":"itemRight","activeParts":[{"setType":"ri"}]}]}}')
        },
        yp5t: function(t) {
            t.exports = JSON.parse('{"a":[{"id":"Move","parts":[{"setType":"bd","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"bds","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"ss","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"lg","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"sh","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"lh","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"lhs","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"ls","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"lc","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"rh","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"rhs","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"rs","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"rc","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]},{"setType":"ch","frames":[{"number":0,"assetPartDefinition":"wlk"},{"number":1,"assetPartDefinition":"wlk"},{"number":2,"assetPartDefinition":"wlk"},{"number":3,"assetPartDefinition":"wlk"}]}]},{"id":"Wave","parts":[{"setType":"lh","frames":[{"number":0,"assetPartDefinition":"wav"},{"number":1,"assetPartDefinition":"wav"}]},{"setType":"lhs","frames":[{"number":0,"assetPartDefinition":"wav"},{"number":1,"assetPartDefinition":"wav"}]},{"setType":"ls","frames":[{"number":0,"assetPartDefinition":"wav"},{"number":1,"assetPartDefinition":"wav"}]},{"setType":"lc","frames":[{"number":0,"assetPartDefinition":"wav"},{"number":1,"assetPartDefinition":"wav"}]},{"setType":"ch","frames":[{"number":0,"assetPartDefinition":"wav"},{"number":1,"assetPartDefinition":"wav"},{"number":2,"assetPartDefinition":"wav"},{"number":3,"assetPartDefinition":"wav"}]}]},{"id":"Talk","parts":[{"setType":"hd","frames":[{"number":0,"assetPartDefinition":"spk"},{"number":1,"assetPartDefinition":"spk"}]},{"setType":"fc","frames":[{"number":0,"assetPartDefinition":"spk"},{"number":1,"assetPartDefinition":"spk"}]},{"setType":"fa","frames":[{"number":0,"assetPartDefinition":"spk"},{"number":1,"assetPartDefinition":"spk"}]}]},{"id":"Sign","parts":[{"setType":"lh","frames":[{"number":0,"assetPartDefinition":"sig"}]},{"setType":"li","frames":[{"number":0,"assetPartDefinition":"sig"}]},{"setType":"ls","frames":[{"number":0,"assetPartDefinition":"wav"}]},{"setType":"lc","frames":[{"number":0,"assetPartDefinition":"wav"}]}]},{"id":"Respect","parts":[{"setType":"lh","frames":[{"number":0,"assetPartDefinition":"respect","repeats":15},{"number":1,"assetPartDefinition":"respect","repeats":15}]},{"setType":"ls","frames":[{"number":0,"assetPartDefinition":"wav","repeats":15},{"number":1,"assetPartDefinition":"wav","repeats":15}]},{"setType":"lc","frames":[{"number":0,"assetPartDefinition":"wav","repeats":15},{"number":1,"assetPartDefinition":"wav","repeats":15}]}]},{"id":"Blow","parts":[{"setType":"rh","frames":[{"number":0,"assetPartDefinition":"blw","repeats":10},{"number":1,"assetPartDefinition":"blw","repeats":10}]},{"setType":"rs","frames":[{"number":0,"assetPartDefinition":"drk"}]},{"setType":"rc","frames":[{"number":0,"assetPartDefinition":"drk"}]},{"setType":"ri","frames":[{"number":0,"assetPartDefinition":""}]},{"setType":"ey","frames":[{"number":0,"assetPartDefinition":"std","repeats":10},{"number":0,"assetPartDefinition":"eyb","repeats":10}]},{"setType":"fc","frames":[{"number":0,"assetPartDefinition":"std","repeats":10},{"number":0,"assetPartDefinition":"blw","repeats":10}]}]},{"id":"Laugh","parts":[{"setType":"rh","frames":[{"number":0,"assetPartDefinition":"blw"}]},{"setType":"rs","frames":[{"number":0,"assetPartDefinition":"drk"}]},{"setType":"rc","frames":[{"number":0,"assetPartDefinition":"drk"}]},{"setType":"ri","frames":[{"number":0,"assetPartDefinition":""}]},{"setType":"ey","frames":[{"number":0,"assetPartDefinition":"std","repeats":2}]},{"setType":"fc","frames":[{"number":0,"assetPartDefinition":"sml"}]}],"offsets":{"frames":[{"id":0,"directions":[{"id":0,"bodyParts":[{"id":"head","dx":0,"dy":1}]},{"id":1,"bodyParts":[{"id":"head","dx":0,"dy":1}]},{"id":2,"bodyParts":[{"id":"head","dx":0,"dy":1}]},{"id":3,"bodyParts":[{"id":"head","dx":0,"dy":1}]},{"id":4,"bodyParts":[{"id":"head","dx":0,"dy":1}]},{"id":5,"bodyParts":[{"id":"head","dx":0,"dy":1}]},{"id":6,"bodyParts":[{"id":"head","dx":0,"dy":1}]},{"id":7,"bodyParts":[{"id":"head","dx":0,"dy":1}]}]},{"id":1,"directions":[{"id":0,"bodyParts":[{"id":"head","dx":0,"dy":0}]},{"id":1,"bodyParts":[{"id":"head","dx":0,"dy":0}]},{"id":2,"bodyParts":[{"id":"head","dx":0,"dy":0}]},{"id":3,"bodyParts":[{"id":"head","dx":0,"dy":0}]},{"id":4,"bodyParts":[{"id":"head","dx":0,"dy":0}]},{"id":5,"bodyParts":[{"id":"head","dx":0,"dy":0}]},{"id":6,"bodyParts":[{"id":"head","dx":0,"dy":0}]},{"id":7,"bodyParts":[{"id":"head","dx":0,"dy":0}]}]}]}}]}')
        },
        zUnb: function(t, e, s) {
            "use strict";
            s.r(e);
            var i = s("fXoL"),
                n = s("jhN1"),
                r = s("R1ws");
            let o = (() => {
                    class t extends Event {}
                    return t.COMPLETE = "NITRO_COMPLETE", t
                })(),
                a = (() => {
                    class t extends o {
                        constructor(t) {
                            super(t)
                        }
                    }
                    return t.LOADED = "NCE_LOADED", t.FAILED = "NCE_FAILED", t
                })(),
                c = (() => {
                    class t {}
                    return t.AVATAR_RENDER_READY = "AVATAR_RENDER_READY", t
                })(),
                _ = (() => {
                    class t extends o {
                        constructor(t, e) {
                            super(t), this._connection = e
                        }
                        get connection() {
                            return this._connection
                        }
                    }
                    return t.CONNECTION_ESTABLISHED = "NCE_ESTABLISHED", t.CONNECTION_CLOSED = "NCE_CLOSED", t.CONNECTION_ERROR = "NCE_ERROR", t.CONNECTION_HANDSHAKING = "NCE_HANDSHAKING", t.CONNECTION_HANDSHAKED = "NCE_HANDSHAKED", t.CONNECTION_HANDSHAKE_FAILED = "NCE_HANDSHAKE_FAILED", t.CONNECTION_AUTHENTICATED = "NCE_AUTHENTICATED", t
                })();
            class h {
                static get available() {
                    return !0
                }
                static call(t, ...e) {
                    if (window.top !== window && window.top.postMessage("Nitro_LegacyExternalInterface" + JSON.stringify({
                            method: t,
                            params: e
                        }), "*"), !("FlashExternalInterface" in window)) return;
                    const s = window.FlashExternalInterface[t];
                    return void 0 !== s ? s(...e) : void 0
                }
                static callGame(t, ...e) {
                    if (window.top !== window && window.top.postMessage("Nitro_LegacyExternalGameInterface" + JSON.stringify({
                            method: t,
                            params: e
                        }), "*"), !("FlashExternalGameInterface" in window)) return;
                    const s = window.FlashExternalGameInterface[t];
                    return void 0 !== s ? s(...e) : void 0
                }
            }
            let l = (() => {
                class t extends o {
                    constructor(t) {
                        super(t)
                    }
                }
                return t.LOADED = "NLE_LOADED", t.FAILED = "NLE_FAILED", t
            })();
            var u = s("IqKQ");
            class d {
                constructor() {
                    this._isDisposed = !1, this._isDisposing = !1
                }
                dispose() {
                    this._isDisposed || this._isDisposing || (this._isDisposing = !0, this.onDispose(), this._isDisposed = !0, this._isDisposing = !1)
                }
                onDispose() {}
                get disposed() {
                    return this._isDisposed
                }
                get isDisposing() {
                    return this._isDisposing
                }
            }
            let g = (() => {
                class t {
                    constructor(t, e = null) {
                        this._name = t, this._description = e, this._print = !0
                    }
                    log(t) {
                        this.printMessage(t, "log")
                    }
                    error(t, e) {
                        this.printMessage(e || t, "error")
                    }
                    warn(t) {
                        this.printMessage(t, "warn")
                    }
                    printMessage(e, s) {
                        this._print && t.log(e, this._name, s)
                    }
                    static log(t, e = "Nitro", s = null) {
                        const i = `[Nitro] ${(new Date).toDateString()} [${e}] ${t} ${this.getTimestamp()}`;
                        switch (s || console.log(i), s) {
                            case "error":
                                console.error(i);
                                break;
                            case "warn":
                                console.warn(i);
                                break;
                            default:
                            case "log":
                                console.log(i)
                        }
                    }
                    static getTimestamp() {
                        const e = Date.now(),
                            s = ` +${e-t.LAST_TIMESTAMP||0}ms`;
                        return this.LAST_TIMESTAMP = e, s
                    }
                    get description() {
                        return this._description
                    }
                    set description(t) {
                        this._description = t
                    }
                    get print() {
                        return this._print
                    }
                    set print(t) {
                        this._print = t
                    }
                }
                return t.LAST_TIMESTAMP = Date.now(), t
            })();
            class m extends d {
                constructor() {
                    super(), this._logger = new g(this.constructor.name), this._listeners = new Map
                }
                onDispose() {
                    this.removeAllListeners(), super.onDispose()
                }
                addEventListener(t, e) {
                    if (!t || !e) return;
                    const s = this._listeners.get(t);
                    s ? s.push(e) : this._listeners.set(t, [e])
                }
                removeEventListener(t, e) {
                    if (!t || !e) return;
                    const s = this._listeners.get(t);
                    if (s && s.length)
                        for (const [i, n] of s.entries())
                            if (n && n === e) return s.splice(i, 1), void(s.length || this._listeners.delete(t))
                }
                dispatchEvent(t) {
                    return !!t && (cp.instance.getConfiguration("system.dispatcher.log") && this._logger.log("DISPATCHED: " + t.type), this.processEvent(t), !0)
                }
                processEvent(t) {
                    const e = this._listeners.get(t.type);
                    if (!e || !e.length) return;
                    const s = [];
                    for (const n of e) n && s.push(n);
                    for (; s.length;) {
                        const e = s.shift();
                        try {
                            e(t)
                        } catch (i) {
                            return void this._logger.error(i)
                        }
                    }
                }
                removeAllListeners() {
                    this._listeners.clear()
                }
            }
            let p = (() => {
                class t {
                    static createAsset(e, s, i, n, r, o = !1, a = !1, c = !1) {
                        const _ = t.GRAPHIC_POOL.length ? t.GRAPHIC_POOL.pop() : new t;
                        return _._name = e, _._source = s || null, i ? (_._texture = i, _._initialized = !1) : (_._texture = null, _._initialized = !0), _._usesPalette = c, _._x = n, _._y = r, _._flipH = o, _._flipV = a, _._rectangle = null, _
                    }
                    recycle() {
                        this._texture = null, t.GRAPHIC_POOL.push(this)
                    }
                    initialize() {
                        !this._initialized && this._texture && (this._width = this._texture.width, this._height = this._texture.height, this._initialized = !0)
                    }
                    get name() {
                        return this._name
                    }
                    get source() {
                        return this._source
                    }
                    get texture() {
                        return this._texture
                    }
                    get usesPalette() {
                        return this._usesPalette
                    }
                    get x() {
                        return this._x
                    }
                    get y() {
                        return this._y
                    }
                    get width() {
                        return this.initialize(), this._width
                    }
                    get height() {
                        return this.initialize(), this._height
                    }
                    get offsetX() {
                        return this._flipH ? -this._x : this._x
                    }
                    get offsetY() {
                        return this._flipV ? -this._y : this._y
                    }
                    get flipH() {
                        return this._flipH
                    }
                    get flipV() {
                        return this._flipV
                    }
                    get rectangle() {
                        return this._rectangle || (this._rectangle = new u.k(0, 0, this.width, this.height)), this._rectangle
                    }
                }
                return t.GRAPHIC_POOL = [], t
            })();
            class b {
                constructor(t, e, s) {
                    for (this._palette = t; this._palette.length < 256;) this._palette.push([0, 0, 0]);
                    this._primaryColor = e, this._secondaryColor = s
                }
                dispose() {}
                applyPalette(t) {
                    const e = u.n.from(t),
                        s = cp.instance.renderer.extract.canvas(e),
                        i = s.getContext("2d"),
                        n = i.getImageData(0, 0, s.width, s.height),
                        r = n.data;
                    for (let o = 0; o < r.length; o += 4) {
                        let t = this._palette[r[o + 1]];
                        void 0 === t && (t = [0, 0, 0]), r[o] = t[0], r[o + 1] = t[1], r[o + 2] = t[2]
                    }
                    return i.putImageData(n, 0, 0), u.p.from(s)
                }
                get primaryColor() {
                    return this._primaryColor
                }
                get secondaryColor() {
                    return this._secondaryColor
                }
            }
            let E = (() => {
                class t {
                    constructor(t, e) {
                        if (!t) throw new Error("invalid_collection");
                        this._name = t.name, this._data = t, this._textures = new Map, this._assets = new Map, this._palettes = new Map, this._paletteAssetNames = [], e && this.addLibraryAsset(e.textures), this.define(t)
                    }
                    dispose() {
                        if (this._palettes) {
                            for (const t of this._palettes.values()) t.dispose();
                            this._palettes.clear()
                        }
                        if (this._paletteAssetNames && (this.disposePaletteAssets(), this._paletteAssetNames = null), this._assets) {
                            for (const t of this._assets.values()) t.recycle();
                            this._assets.clear()
                        }
                    }
                    addReference() {
                        this._referenceCount++, this._referenceTimestamp = cp.instance.time
                    }
                    removeReference() {
                        this._referenceCount--, this._referenceCount <= 0 && (this._referenceCount = 0, this._referenceTimestamp = cp.instance.time, this.disposePaletteAssets(!1))
                    }
                    define(t) {
                        const e = t.assets,
                            s = t.palettes;
                        e && this.defineAssets(e), s && this.definePalettes(s)
                    }
                    defineAssets(t) {
                        if (t)
                            for (const e in t) {
                                const s = t[e];
                                if (!s) continue;
                                const i = -s.x || 0,
                                    n = -s.y || 0;
                                let r = !1;
                                const o = !1,
                                    a = s.usesPalette || !1;
                                let c = s.source || "";
                                s.flipH && c.length && (r = !0), c.length || (c = e);
                                const _ = this.getLibraryAsset(c);
                                if (!_) continue;
                                let h = this.createAsset(e, c, _, r, o, i, n, a);
                                if (!h) {
                                    const t = this.getAsset(e);
                                    t && t.name !== t.source && (h = this.replaceAsset(e, c, _, r, o, i, n, a))
                                }
                            }
                    }
                    definePalettes(t) {
                        if (t)
                            for (const e in t) {
                                const s = t[e];
                                if (!s) continue;
                                const i = s.id.toString();
                                if (this._palettes.get(i)) continue;
                                let n = 16777215,
                                    r = 16777215,
                                    o = s.color1;
                                o && o.length > 0 && (n = parseInt(o, 16)), o = s.color2, o && o.length > 0 && (r = parseInt(o, 16)), this._palettes.set(i, new b(s.rgb, n, r))
                            }
                    }
                    createAsset(t, e, s, i, n, r, o, a) {
                        if (this._assets.get(t)) return !1;
                        const c = p.createAsset(t, e, s, r, o, i, n, a);
                        return this._assets.set(t, c), !0
                    }
                    replaceAsset(t, e, s, i, n, r, o, a) {
                        const c = this._assets.get(t);
                        return c && (this._assets.delete(t), c.recycle()), this.createAsset(t, e, s, i, n, r, o, a)
                    }
                    getAsset(t) {
                        return t && this._assets.get(t) || null
                    }
                    getAssetWithPalette(t, e) {
                        const s = t + "@" + e;
                        let i = this.getAsset(s);
                        if (!i) {
                            if (i = this.getAsset(t), !i || !i.usesPalette) return i;
                            const n = this.getPalette(e);
                            if (n) {
                                const t = n.applyPalette(i.texture);
                                t && (this._paletteAssetNames.push(s), this.createAsset(s, i.source + "@" + e, t, i.flipH, i.flipV, i.x, i.y, !1), i = this.getAsset(s))
                            }
                        }
                        return i
                    }
                    getPaletteNames() {
                        return Array.from(this._palettes.keys())
                    }
                    getPaletteColors(t) {
                        const e = this.getPalette(t);
                        return e ? [e.primaryColor, e.secondaryColor] : null
                    }
                    getPalette(t) {
                        return t && this._palettes.get(t) || null
                    }
                    addAsset(t, e, s, i = 0, n = 0, r = !1, o = !1) {
                        if (!t || !e) return !1;
                        const a = this.getLibraryAsset(t);
                        return a ? !!s && (a.baseTexture = e.baseTexture, a.frame = e.frame, a.trim = e.trim, a.updateUvs(), !0) : (this._textures.set(t, e), this.createAsset(t, t, e, r, o, i, n, !1))
                    }
                    disposeAsset(t) {
                        const e = this._assets.get(t);
                        if (!e) return;
                        this._assets.delete(t);
                        const s = this.getLibraryAsset(e.source);
                        s && (this._textures.delete(e.source), s.destroy(!0)), e.recycle()
                    }
                    getLibraryAsset(t) {
                        return t && this._textures.get(t = this._name + "_" + t) || null
                    }
                    addLibraryAsset(t) {
                        if (t)
                            for (const e in t) {
                                const s = t[e];
                                s && this._textures.set(R.removeFileExtension(e), s)
                            }
                    }
                    disposePaletteAssets(e = !0) {
                        if (this._paletteAssetNames && (e || this._paletteAssetNames.length > t.PALETTE_ASSET_DISPOSE_THRESHOLD)) {
                            for (const t of this._paletteAssetNames) this.disposeAsset(t);
                            this._paletteAssetNames = []
                        }
                    }
                    get referenceCount() {
                        return this._referenceCount
                    }
                    get referenceTimestamp() {
                        return this._referenceTimestamp
                    }
                    get name() {
                        return this._name
                    }
                    get data() {
                        return this._data
                    }
                    get textures() {
                        return this._textures
                    }
                    get assets() {
                        return this._assets
                    }
                }
                return t.PALETTE_ASSET_DISPOSE_THRESHOLD = 10, t
            })();
            var f = s("rP9a");
            class S {
                constructor(t) {
                    this._position = 0, this._dataView = new DataView(t)
                }
                readByte() {
                    const t = this._dataView.getInt8(this._position);
                    return this._position++, t
                }
                readBytes(t) {
                    const e = new S(this._dataView.buffer.slice(this._position, this._position + t));
                    return this._position += t, e
                }
                readShort() {
                    const t = this._dataView.getInt16(this._position);
                    return this._position += 2, t
                }
                readInt() {
                    const t = this._dataView.getInt32(this._position);
                    return this._position += 4, t
                }
                remaining() {
                    return this._dataView.byteLength - this._position
                }
                toString(t) {
                    return (new TextDecoder).decode(this._dataView.buffer)
                }
                toArrayBuffer() {
                    return this._dataView.buffer
                }
            }
            let I = (() => {
                class t {
                    constructor(t) {
                        this._jsonFile = null, this._image = null, this._imageData = null, this._baseTexture = null, this.parse(t)
                    }
                    static arrayBufferToBase64(t) {
                        let e = "";
                        const s = new Uint8Array(t),
                            i = s.byteLength;
                        for (let n = 0; n < i; n++) e += String.fromCharCode(s[n]);
                        return window.btoa(e)
                    }
                    parse(e) {
                        const s = new S(e);
                        let i = s.readShort();
                        for (; i > 0;) {
                            const e = s.readShort(),
                                n = s.readBytes(e).toString(),
                                r = s.readInt(),
                                o = s.readBytes(r);
                            if (n.endsWith(".json")) {
                                const e = Object(f.a)(o.toArrayBuffer());
                                this._jsonFile = JSON.parse(t.TEXT_DECODER.decode(e))
                            } else {
                                const e = Object(f.a)(o.toArrayBuffer());
                                this._imageData = e, this._image = t.arrayBufferToBase64(this._imageData), this._imageData = null
                            }
                            i--
                        }
                    }
                    buildTexture() {
                        if (!this._imageData) return;
                        const t = this._jsonFile;
                        if (t) {
                            console.log(t.spritesheet), console.log(t.spritesheet.meta.size.w, t.spritesheet.meta.size.h);
                            try {
                                const t = u.c.fromBuffer(this._imageData, 1, 1);
                                this._baseTexture = t
                            } catch (e) {
                                g.log(e)
                            }
                            this._imageData = null
                        }
                    }
                    get jsonFile() {
                        return this._jsonFile
                    }
                    get image() {
                        return this._image
                    }
                    get baseTexture() {
                        return this._baseTexture
                    }
                }
                return t.TEXT_DECODER = new TextDecoder("utf-8"), t
            })();
            class R extends d {
                constructor() {
                    super(), this._logger = new g(this.constructor.name), this._textures = new Map, this._collections = new Map, this._pendingUrls = new Map
                }
                static removeFileExtension(t) {
                    return t.substring(0, t.lastIndexOf(".")) || t
                }
                getTexture(t) {
                    return t && this._textures.get(t) || null
                }
                setTexture(t, e) {
                    t && e && this._textures.set(t, e)
                }
                getAsset(t) {
                    if (!t) return null;
                    for (const e of this._collections.values()) {
                        if (!e) continue;
                        const s = e.getAsset(t);
                        if (s) return s
                    }
                    return null
                }
                getCollection(t) {
                    return t && this._collections.get(t) || null
                }
                createCollection(t, e) {
                    if (!t) return null;
                    const s = new E(t, e);
                    if (s) {
                        for (const [t, e] of s.textures.entries()) this.setTexture(t, e);
                        this._collections.set(s.name, s)
                    }
                }
                downloadAsset(t, e) {
                    return this.downloadAssets([t], e)
                }
                downloadAssets(t, e) {
                    if (!t || !t.length) return e(!0), !0;
                    const s = t.length;
                    let i = 0;
                    const n = (t, n, r) => {
                        t && t.destroy(), r ? (i++, i === s && e(!0)) : this._logger.error("Failed to download asset: " + n.url)
                    };
                    for (const r of t) {
                        if (!r) continue;
                        const t = new u.g,
                            e = {
                                crossOrigin: !1,
                                xhrType: r.endsWith(".nitro") ? "arraybuffer" : "json"
                            };
                        t.use((e, s) => this.assetLoader(t, e, s, n)).add(r, e).load()
                    }
                    return !0
                }
                assetLoader(t, e, s, i) {
                    if (!e || e.error) return e && e.texture && e.texture.destroy(!0), void i(t, e, !1);
                    if ("nitro" === e.extension) {
                        const s = new I(e.data),
                            n = s.jsonFile;
                        if (!n.type) return void i(t, e, !1);
                        if (n.spritesheet && Object.keys(n.spritesheet).length) {
                            const r = s.image;
                            let o = s.baseTexture;
                            if (!o && (r && (o = new u.c("data:image/png;base64," + r)), !o)) return void i(t, e, !1);
                            if (o.valid) {
                                const s = new u.o(o, n.spritesheet);
                                s.parse(r => {
                                    this.createCollection(n, s), i(t, e, !0)
                                })
                            } else o.once("loaded", () => {
                                o.removeAllListeners();
                                const s = new u.o(o, n.spritesheet);
                                s.parse(r => {
                                    this.createCollection(n, s), i(t, e, !0)
                                })
                            }), o.once("error", () => {
                                o.removeAllListeners(), i(t, e, !1)
                            });
                            return
                        }
                        this.createCollection(n, null), i(t, !0)
                    } else if (e.type === u.h.TYPE.JSON) {
                        const s = e.data;
                        if (!s.type) return;
                        if (s.spritesheet && Object.keys(s.spritesheet).length) {
                            const n = s.spritesheet.meta && s.spritesheet.meta.image;
                            if (!n || !n.length) return void i(t, e, !1);
                            const r = e.url.substring(0, e.url.lastIndexOf("/") + 1) + n,
                                o = u.c.from(r);
                            if (o.valid) {
                                const n = new u.o(o, s.spritesheet);
                                n.parse(r => {
                                    this.createCollection(s, n), i(t, e, !0)
                                })
                            } else o.once("loaded", () => {
                                o.removeAllListeners();
                                const n = new u.o(o, s.spritesheet);
                                n.parse(r => {
                                    this.createCollection(s, n), i(t, e, !0)
                                })
                            }), o.once("error", () => {
                                o.removeAllListeners(), i(t, e, !1)
                            });
                            return
                        }
                        return this.createCollection(s, null), void i(t, e, !0)
                    }
                    e.type !== u.h.TYPE.IMAGE || (e.texture.valid ? (this.setTexture(e.name, e.texture), i(t, e, !0)) : i(t, e, !1))
                }
                get collections() {
                    return this._collections
                }
            }
            class v {
                constructor() {
                    this._buffer = new Uint8Array
                }
                writeByte(t) {
                    const e = new Uint8Array(1);
                    return e[0] = t, this.appendArray(e), this
                }
                writeBytes(t) {
                    const e = new Uint8Array(t);
                    return this.appendArray(e), this
                }
                writeShort(t) {
                    const e = new Uint8Array(2);
                    return e[0] = t >> 8, e[1] = 255 & t, this.appendArray(e), this
                }
                writeInt(t) {
                    const e = new Uint8Array(4);
                    return e[0] = t >> 24, e[1] = t >> 16, e[2] = t >> 8, e[3] = 255 & t, this.appendArray(e), this
                }
                writeString(t, e = !0) {
                    const s = (new TextEncoder).encode(t);
                    return e ? (this.writeShort(s.length), this.appendArray(s)) : this.appendArray(s), this
                }
                appendArray(t) {
                    if (!t) return;
                    const e = new Uint8Array(this._buffer.length + t.length);
                    e.set(this._buffer), e.set(t, this._buffer.length), this._buffer = e
                }
                getBuffer() {
                    return this._buffer.buffer
                }
                toString(t) {
                    return new TextDecoder(t).decode(this._buffer)
                }
            }
            class T {
                constructor(t) {
                    this._value = t
                }
                get value() {
                    return this._value
                }
            }
            class O {
                constructor(t) {
                    this._value = t
                }
                get value() {
                    return this._value
                }
            }
            class y {
                constructor(t, e) {
                    this._header = t, this._buffer = e
                }
                readByte() {
                    return this._buffer ? this._buffer.readByte() : -1
                }
                readBytes(t) {
                    return this._buffer ? this._buffer.readBytes(t) : null
                }
                readBoolean() {
                    return 1 === this.readByte()
                }
                readShort() {
                    return this._buffer ? this._buffer.readShort() : -1
                }
                readInt() {
                    return this._buffer ? this._buffer.readInt() : -1
                }
                readString() {
                    const t = this.readShort();
                    return this._buffer.readBytes(t).toString("utf8")
                }
                get header() {
                    return this._header
                }
                get bytesAvailable() {
                    return this._buffer && this._buffer.remaining() > 0
                }
            }
            class A {
                encode(t, e) {
                    const s = new v;
                    s.writeShort(t);
                    for (const n of e) {
                        let t = typeof n;
                        switch ("object" === t && (null === n ? t = "null" : n instanceof T ? t = "byte" : n instanceof O && (t = "short")), t) {
                            case "null":
                                s.writeShort(0);
                                break;
                            case "byte":
                                s.writeByte(n.value);
                                break;
                            case "short":
                                s.writeShort(n.value);
                                break;
                            case "number":
                                s.writeInt(n);
                                break;
                            case "boolean":
                                s.writeByte(n ? 1 : 0);
                                break;
                            case "string":
                                n ? s.writeString(n, !0) : s.writeShort(0)
                        }
                    }
                    const i = s.getBuffer();
                    return i ? (new v).writeInt(i.byteLength).writeBytes(i) : null
                }
                decode(t) {
                    if (!t || !t.dataBuffer || !t.dataBuffer.byteLength) return null;
                    const e = [];
                    for (; t.dataBuffer.byteLength && !(t.dataBuffer.byteLength < 4);) {
                        const s = new S(t.dataBuffer),
                            i = s.readInt();
                        if (i > t.dataBuffer.byteLength - 4) break;
                        const n = s.readBytes(i);
                        e.push(new y(n.readShort(), n)), t.dataBuffer = t.dataBuffer.slice(i + 4)
                    }
                    return e
                }
            }
            let C = (() => {
                class t extends o {
                    constructor(t, e, s) {
                        super(t), this._connection = e, this._originalEvent = event
                    }
                    get connection() {
                        return this._connection
                    }
                    get originalEvent() {
                        return this._originalEvent
                    }
                }
                return t.CONNECTION_OPENED = "SCE_OPEN", t.CONNECTION_CLOSED = "SCE_CLOSED", t.CONNECTION_ERROR = "SCE_ERROR", t.CONNECTION_MESSAGE = "SCE_MESSAGE", t
            })();
            class M {
                constructor(t, e) {
                    this._callBack = t, this._parserClass = e, this._parser = null, this._connection = null
                }
                dispose() {
                    this._callBack = null, this._parserClass = null, this._parser = null, this._connection = null
                }
                get callBack() {
                    return this._callBack
                }
                get parserClass() {
                    return this._parserClass
                }
                get parser() {
                    return this._parser
                }
                set parser(t) {
                    this._parser = t
                }
                get connection() {
                    return this._connection
                }
                set connection(t) {
                    this._connection = t
                }
            }
            class U {
                constructor() {
                    this._messageIdByEvent = new Map, this._messageIdByComposer = new Map, this._messageInstancesById = new Map
                }
                dispose() {
                    this._messageIdByEvent.clear(), this._messageIdByComposer.clear(), this._messageInstancesById.clear()
                }
                registerMessages(t) {
                    for (const [e, s] of t.events) this.registerMessageEventClass(e, s);
                    for (const [e, s] of t.composers) this.registerMessageComposerClass(e, s)
                }
                registerMessageEventClass(t, e) {
                    t && e && (this._messageIdByEvent.get(e) || this._messageIdByEvent.set(e, t))
                }
                registerMessageComposerClass(t, e) {
                    t && e && (this._messageIdByComposer.get(e) || this._messageIdByComposer.set(e, t))
                }
                registerMessageEvent(t) {
                    if (!t) return;
                    const e = this.getEventId(t);
                    if (!e) return;
                    let s = this._messageInstancesById.get(e);
                    s && s.length ? t.parser = s[0].parser : (s = [], this._messageInstancesById.set(e, s), t.parser = new t.parserClass), s.push(t)
                }
                removeMessageEvent(t) {
                    if (!t) return;
                    const e = this.getEventId(t);
                    if (!e) return;
                    const s = this._messageInstancesById.get(e);
                    if (s)
                        for (const [i, n] of s.entries())
                            if (n && n === t) return s.splice(i, 1), 0 === s.length && this._messageInstancesById.delete(e), void n.dispose()
                }
                getEvents(t) {
                    if (t) return this._messageInstancesById.get(t) || void 0
                }
                getEventId(t) {
                    return t && this._messageIdByEvent.get(t instanceof M ? t.constructor : t) || -1
                }
                getComposerId(t) {
                    return t && this._messageIdByComposer.get(t.constructor) || -1
                }
            }
            let D = (() => {
                class t {}
                return t.CONNECTION_OPENED = "open", t.CONNECTION_CLOSED = "close", t.CONNECTION_ERROR = "error", t.CONNECTION_MESSAGE = "message", t
            })();
            class N extends m {
                constructor(t, e) {
                    super(), this._communicationManager = t, this._stateListener = e, this._socket = null, this._messages = new U, this._codec = new A, this._dataBuffer = null, this._isReady = !1, this._pendingClientMessages = [], this._pendingServerMessages = [], this._isAuthenticated = !1, this.onOpen = this.onOpen.bind(this), this.onClose = this.onClose.bind(this), this.onError = this.onError.bind(this), this.onMessage = this.onMessage.bind(this)
                }
                init(t) {
                    this._stateListener && this._stateListener.connectionInit(t), this.createSocket(t)
                }
                onDispose() {
                    super.onDispose(), this.destroySocket(), this._communicationManager = null, this._stateListener = null, this._messages = null, this._codec = null, this._dataBuffer = null
                }
                onReady() {
                    this._isReady || (this._isReady = !0, this._pendingServerMessages && this._pendingServerMessages.length && this.processWrappers(...this._pendingServerMessages), this._pendingClientMessages && this._pendingClientMessages.length && this.send(...this._pendingClientMessages), this._pendingServerMessages = [], this._pendingClientMessages = [])
                }
                createSocket(t) {
                    t && (this.destroySocket(), this._dataBuffer = new ArrayBuffer(0), this._socket = new WebSocket(t), this._socket.addEventListener(D.CONNECTION_OPENED, this.onOpen), this._socket.addEventListener(D.CONNECTION_CLOSED, this.onClose), this._socket.addEventListener(D.CONNECTION_ERROR, this.onError), this._socket.addEventListener(D.CONNECTION_MESSAGE, this.onMessage))
                }
                destroySocket() {
                    this._socket && (this._socket.removeEventListener(D.CONNECTION_OPENED, this.onOpen), this._socket.removeEventListener(D.CONNECTION_CLOSED, this.onClose), this._socket.removeEventListener(D.CONNECTION_ERROR, this.onError), this._socket.removeEventListener(D.CONNECTION_MESSAGE, this.onMessage), this._socket.readyState === WebSocket.OPEN && this._socket.close(), this._socket = null)
                }
                onOpen(t) {
                    this.dispatchConnectionEvent(C.CONNECTION_OPENED, t)
                }
                onClose(t) {
                    this.dispatchConnectionEvent(C.CONNECTION_CLOSED, t)
                }
                onError(t) {
                    this.dispatchConnectionEvent(C.CONNECTION_ERROR, t)
                }
                onMessage(t) {
                    if (!t) return;
                    this.dispatchConnectionEvent(C.CONNECTION_MESSAGE, t);
                    const e = new FileReader;
                    e.readAsArrayBuffer(t.data), e.onloadend = () => {
                        this._dataBuffer = this.concatArrayBuffers(this._dataBuffer, e.result), this.processReceivedData()
                    }
                }
                dispatchConnectionEvent(t, e) {
                    this.dispatchEvent(new C(t, this, e))
                }
                authenticated() {
                    this._isAuthenticated = !0
                }
                send(...t) {
                    if (this.disposed || !t) return !1;
                    if (t = [...t], this._isAuthenticated && !this._isReady) return this._pendingClientMessages || (this._pendingClientMessages = []), this._pendingClientMessages.push(...t), !1;
                    for (const e of t) {
                        if (!e) continue;
                        const t = this._messages.getComposerId(e);
                        if (-1 === t) {
                            g.log("Unknown Composer: " + e.constructor.name);
                            continue
                        }
                        const s = this._codec.encode(t, e.getMessageArray());
                        s ? (cp.instance.getConfiguration("communication.packet.log") && g.log("OutgoingComposer: " + e.constructor.name), this.write(s.getBuffer())) : cp.instance.getConfiguration("communication.packet.log") && g.log("Encoding Failed: " + e.constructor.name)
                    }
                    return !0
                }
                write(t) {
                    this._socket.readyState === WebSocket.OPEN && this._socket.send(t)
                }
                processReceivedData() {
                    try {
                        this.processData()
                    } catch (t) {
                        g.log(t)
                    }
                }
                processData() {
                    const t = this.splitReceivedMessages();
                    if (t && t.length) return this._isAuthenticated && !this._isReady ? (this._pendingServerMessages || (this._pendingServerMessages = []), void this._pendingServerMessages.push(...t)) : void this.processWrappers(...t)
                }
                processWrappers(...t) {
                    if (t && t.length)
                        for (const e of t) {
                            if (!e) continue;
                            const t = this.getMessagesForWrapper(e);
                            t && t.length && (cp.instance.getConfiguration("communication.packet.log") && g.log(`IncomingMessage: ${t[0].constructor.name} [${e.header}]`), this.handleMessages(...t))
                        }
                }
                splitReceivedMessages() {
                    return this._dataBuffer && this._dataBuffer.byteLength ? this._codec.decode(this) : null
                }
                concatArrayBuffers(t, e) {
                    const s = new Uint8Array(t.byteLength + e.byteLength);
                    return s.set(new Uint8Array(t), 0), s.set(new Uint8Array(e), t.byteLength), s.buffer
                }
                getMessagesForWrapper(t) {
                    if (!t) return null;
                    const e = this._messages.getEvents(t.header);
                    if (!e || !e.length) return null;
                    try {
                        const s = e[0].parser;
                        if (!s || !s.flush() || !s.parse(t)) return null
                    } catch (s) {
                        return g.log("Error parsing message: " + s, e[0].constructor.name), null
                    }
                    return e
                }
                handleMessages(...t) {
                    t = [...t];
                    for (const e of t) e && (e.connection = this, e.callBack && e.callBack(e))
                }
                registerMessages(t) {
                    t && this._messages.registerMessages(t)
                }
                addMessageEvent(t) {
                    t && this._messages && this._messages.registerMessageEvent(t)
                }
                removeMessageEvent(t) {
                    t && this._messages && this._messages.removeMessageEvent(t)
                }
                get isAuthenticated() {
                    return this._isAuthenticated
                }
                get dataBuffer() {
                    return this._dataBuffer
                }
                set dataBuffer(t) {
                    this._dataBuffer = t
                }
            }
            class w extends d {
                constructor() {
                    super(), this._connections = []
                }
                onDispose() {
                    if (this._connections && this._connections.length)
                        for (const t of this._connections.values()) t && t.dispose()
                }
                createConnection(t = null) {
                    const e = new N(this, t);
                    if (e) return this._connections.push(e), e
                }
                update(t) {
                    let e = 0;
                    for (; e < this._connections.length;) {
                        const t = this._connections[e];
                        if (t.processReceivedData(), this.disposed) return;
                        t.disposed ? this._connections.splice(e, 1) : e++
                    }
                }
            }
            class L extends d {
                constructor(t = null) {
                    super(), this._logger = t instanceof g ? t : new g(this.constructor.name), this._events = new m, this._isLoaded = !1, this._isLoading = !1
                }
                init() {
                    this._isLoaded || this._isLoading || this.isDisposing || (this._isLoading = !0, this.onInit(), this._isLoaded = !0, this._isLoading = !1)
                }
                onInit() {}
                onDispose() {
                    this._events && this._events.dispose(), super.onDispose()
                }
                reload() {
                    this.dispose(), this.init()
                }
                get logger() {
                    return this._logger
                }
                get events() {
                    return this._events
                }
                get isLoaded() {
                    return this._isLoaded
                }
                get isLoading() {
                    return this._isLoading
                }
            }
            class x {
                constructor() {
                    this._length = 0, this._dictionary = new Map, this._array = [], this._keys = []
                }
                get length() {
                    return this._length
                }
                get disposed() {
                    return !this._dictionary
                }
                dispose() {
                    if (!this._dictionary) {
                        for (const t of this._dictionary.keys()) this._dictionary.delete(t);
                        this._dictionary = null
                    }
                    this._length = 0, this._array = null, this._keys = null
                }
                reset() {
                    for (const t of this._dictionary.keys()) this._dictionary.delete(t);
                    this._length = 0, this._array = [], this._keys = []
                }
                unshift(t, e) {
                    return null === this._dictionary.get(t) && (this._dictionary.set(t, e), this._array.unshift(e), this._keys.unshift(t), this._length++, !0)
                }
                add(t, e) {
                    return void 0 === this._dictionary.get(t) && (this._dictionary.set(t, e), this._array[this._length] = e, this._keys[this._length] = t, this._length++, !0)
                }
                remove(t) {
                    const e = this._dictionary.get(t);
                    if (!e) return null;
                    const s = this._array.indexOf(e);
                    return s >= 0 && (this._array.splice(s, 1), this._keys.splice(s, 1), this._length--), this._dictionary.delete(t), e
                }
                getWithIndex(t) {
                    return t < 0 || t >= this._length ? null : this._array[t]
                }
                getKey(t) {
                    return t < 0 || t >= this._length ? null : this._keys[t]
                }
                getKeys() {
                    return this._keys.slice()
                }
                hasKey(t) {
                    return this._keys.indexOf(t) > -1
                }
                getValue(t) {
                    return this._dictionary.get(t)
                }
                getValues() {
                    return this._array.slice()
                }
                hasValue(t) {
                    return this._array.indexOf(t) > -1
                }
                indexOf(t) {
                    return this._array.indexOf(t)
                }
                concatenate(t) {
                    for (const e of t._keys) this.add(e, t.getValue(e))
                }
                clone() {
                    const t = new x;
                    return t.concatenate(this), t
                }
            }
            class P extends L {
                constructor() {
                    super(), this._definitions = new x, this.onConfigurationLoaded = this.onConfigurationLoaded.bind(this)
                }
                onInit() {
                    this.loadConfigurationFromUrl(NitroConfig.configurationUrl)
                }
                loadConfigurationFromUrl(t) {
                    if (!t || "" === t) return void this.dispatchConfigurationEvent(a.FAILED);
                    const e = new XMLHttpRequest;
                    try {
                        e.open("GET", t), e.onloadend = this.onConfigurationLoaded, e.onerror = this.onConfigurationFailed, e.send()
                    } catch (s) {
                        this.logger.error(s)
                    }
                }
                onConfigurationLoaded(t) {
                    t && (this.parseConfiguration(t.target.response) ? this.dispatchConfigurationEvent(a.LOADED) : this.dispatchConfigurationEvent(a.FAILED))
                }
                onConfigurationFailed(t) {
                    this.dispatchConfigurationEvent(a.FAILED)
                }
                dispatchConfigurationEvent(t) {
                    this.events && this.events.dispatchEvent(new a(t))
                }
                parseConfiguration(t) {
                    if (!t || "" === t) return !1;
                    try {
                        const e = JSON.parse(t),
                            s = new RegExp(/\${(.*?)}/g);
                        for (const t in e) {
                            let i = e[t];
                            "string" == typeof i && (i = this.interpolate(i, s)), this._definitions.add(t, i)
                        }
                        return !0
                    } catch (e) {
                        return this.logger.error(e.stack), !1
                    }
                }
                interpolate(t, e = null) {
                    e || (e = new RegExp(/\${(.*?)}/g));
                    const s = t.match(e);
                    if (s && s.length)
                        for (const i of s) {
                            const e = this._definitions.getValue(this.removeInterpolateKey(i));
                            e && (t = t.replace(i, e))
                        }
                    return t
                }
                removeInterpolateKey(t) {
                    return t.replace("${", "").replace("}", "")
                }
                getValue(t, e = null) {
                    let s = this._definitions.getValue(t);
                    return void 0 === s && (this.logger.warn("Missing configuration key: " + t), s = e), s
                }
                setValue(t, e) {
                    this._definitions.add(t, e)
                }
            }
            class F extends d {
                constructor() {
                    super(), window.console.log.apply(console, ["\n%c       _   ___ __              \n      / | / (_) /__________    \n     /  |/ / / __/ ___/ __ \\   \n    / /|  / / /_/ /  / /_/ /   \n   /_/ |_/_/\\__/_/   \\____/    \n                               \n Thanks for using Nitro        \n To report bugs or issues      \n join us on Discord            \n https://discord.gg/66UR68FPgy \n                               \n", "color: #FFFFFF; background: #000000; padding:0px 0;"]), this._configuration = new P, this._communication = new w, this._asset = new R
                }
                onDispose() {
                    this._asset && (this._asset.dispose(), this._asset = null), this._communication && (this._communication.dispose(), this._communication = null)
                }
                get configuration() {
                    return this._configuration
                }
                get communication() {
                    return this._communication
                }
                get asset() {
                    return this._asset
                }
            }
            class G {
                constructor(t = 1) {
                    this._elapsedTime = 0, this._percision = t, this._timer = null, this.start()
                }
                start() {
                    this._elapsedTime = 0, this._timer || (this._timer = setInterval(() => this.increase(), this._percision))
                }
                stop() {
                    this._timer && clearTimeout(this._timer)
                }
                increase() {
                    this._elapsedTime += this._percision
                }
                getTimer() {
                    return this._elapsedTime
                }
            }
            let Y = (() => {
                class t extends o {
                    constructor(t, e) {
                        super(t), this._contentType = e
                    }
                    get contentType() {
                        return this._contentType
                    }
                }
                return t.RCLE_SUCCESS = "RCLE_SUCCESS", t.RCLE_FAILURE = "RCLE_FAILURE", t.RCLE_CANCEL = "RCLE_CANCEL", t
            })();
            var k = function(t) {
                return t.FLOOR = "S", t.WALL = "I", t.EFFECT = "E", t.BADGE = "B", t.ROBOT = "R", t.HABBO_CLUB = "H", t.PET = "P", t
            }({});
            let V = (() => {
                    class t {}
                    return t.MINIMUM = -2, t.ROOM = 0, t.FLOOR = 10, t.WALL = 20, t.UNIT = 100, t.CURSOR = 200, t
                })(),
                Z = (() => {
                    class t {
                        static getTypeNumber(e) {
                            return t.AVATAR_TYPES[e]
                        }
                        static getTypeString(e) {
                            for (const s in t.AVATAR_TYPES)
                                if (s && t.AVATAR_TYPES[s] === e) return s;
                            return null
                        }
                        static getRealType(e) {
                            switch (e) {
                                case t.BOT:
                                case t.RENTABLE_BOT:
                                    return t.USER;
                                default:
                                    return e
                            }
                        }
                    }
                    return t.USER = "user", t.PET = "pet", t.BOT = "bot", t.RENTABLE_BOT = "rentable_bot", t.MONSTER_PLANT = "monsterplant", t.AVATAR_TYPES = {
                        user: 1,
                        pet: 2,
                        bot: 3,
                        rentable_bot: 4
                    }, t
                })(),
                j = (() => {
                    class t {}
                    return t.OBJECT_ROOM_ID = "object_room_id", t.OBJECT_ACCURATE_Z_VALUE = "object_accurate_z_value", t.TILE_CURSOR_HEIGHT = "tile_cursor_height", t.FIGURE = "figure", t.GENDER = "gender", t.OWN_USER = "own_user", t.FIGURE_CAN_STAND_UP = "figure_can_stand_up", t.FIGURE_VERTICAL_OFFSET = "figure_vertical_offset", t.FIGURE_TALK = "figure_talk", t.FIGURE_DANCE = "figure_dance", t.FIGURE_SLEEP = "figure_sleep", t.FIGURE_BLINK = "figure_blink", t.FIGURE_EFFECT = "figure_effect", t.FIGURE_CARRY_OBJECT = "figure_carry_object", t.FIGURE_USE_OBJECT = "figure_use_object", t.FIGURE_GESTURE = "figure_gesture", t.FIGURE_POSTURE = "figure_posture", t.FIGURE_POSTURE_PARAMETER = "figure_posture_parameter", t.FIGURE_HIGHLIGHT_ENABLE = "figure_highlight_enable", t.FIGURE_HIGHLIGHT = "figure_highlight", t.STD = "std", t.FIGURE_SIGN = "figure_sign", t.FIGURE_FLAT_CONTROL = "figure_flat_control", t.FIGURE_IS_TYPING = "figure_is_typing", t.FIGURE_IS_MUTED = "figure_is_muted", t.FIGURE_GAINED_EXPERIENCE = "figure_gained_experience", t.FIGURE_NUMBER_VALUE = "figure_number_value", t.FIGURE_IS_PLAYING_GAME = "figure_is_playing_game", t.FIGURE_GUIDE_STATUS = "figure_guide_status", t.FIGURE_EXPRESSION = "figure_expression", t.HEAD_DIRECTION = "head_direction", t.FURNITURE_AUTOMATIC_STATE_INDEX = "furniture_automatic_state_index", t.FURNITURE_ALWAYS_STACKABLE = "furniture_always_stackable", t.FURNITURE_DISABLE_PICKING_ANIMATION = "furniture_disable_picking_animation", t.FURNITURE_DATA_FORMAT = "furniture_data_format", t.FURNITURE_UNIQUE_SERIAL_NUMBER = "furniture_unique_serial_number", t.FURNITURE_UNIQUE_EDITION_SIZE = "furniture_unique_edition_size", t.FURNITURE_CRACKABLE_STATE = "furniture_crackable_state", t.FURNITURE_CRACKABLE_HITS = "furniture_crackable_hits", t.FURNITURE_CRACKABLE_TARGET = "furniture_crackable_target", t.FURNITURE_CREDIT_VALUE = "furniture_credit_value", t.FURNITURE_DATA = "furniture_data", t.FURNITURE_ITEMDATA = "furniture_itemdata", t.FURNITURE_COLOR = "furniture_color", t.FURNITURE_LIFT_AMOUNT = "furniure_lift_amount", t.FURNITURE_GUILD_CUSTOMIZED_GUILD_ID = "furniture_guild_customized_guild_id", t.FURNITURE_GUILD_CUSTOMIZED_BADGE = "furniture_guild_customized_badge", t.FURNITURE_GUILD_CUSTOMIZED_COLOR_1 = "furniture_guild_customized_color_1", t.FURNITURE_GUILD_CUSTOMIZED_COLOR_2 = "furniture_guild_customized_color_2", t.FURNITURE_STATE_UPDATE_TIME = "furniture_state_update_time", t.FURNITURE_SELECTION_DISABLED = "furniture_selection_disabled", t.FURNITURE_SIZE_X = "furniture_size_x", t.FURNITURE_SIZE_Y = "furniture_size_y", t.FURNITURE_SIZE_Z = "furniture_size_z", t.FURNITURE_CENTER_X = "furniture_center_x", t.FURNITURE_CENTER_Y = "furniture_center_y", t.FURNITURE_CENTER_Z = "furniture_center_z", t.FURNITURE_ALLOWED_DIRECTIONS = "furniture_allowed_directions", t.FURNITURE_AD_URL = "furniture_ad_url", t.FURNITURE_TYPE_ID = "furniture_type_id", t.FURNITURE_EXTRAS = "furniture_extras", t.FURNITURE_EXPIRY_TIME = "furniture_expiry_time", t.FURNITURE_EXPIRTY_TIMESTAMP = "furniture_expiry_timestamp", t.FURNITURE_REAL_ROOM_OBJECT = "furniture_real_room_object", t.FURNITURE_IS_STICKIE = "furniture_is_stickie", t.FURNITURE_BRANDING_IMAGE_STATUS = "furniture_branding_image_status", t.FURNITURE_BRANDING_IMAGE_URL = "furniture_branding_image_url", t.FURNITURE_BRANDING_URL = "furniture_branding_url", t.FURNITURE_BRANDING_OFFSET_X = "furniture_branding_offset_x", t.FURNITURE_BRANDING_OFFSET_Y = "furniture_branding_offset_y", t.FURNITURE_BRANDING_OFFSET_Z = "furniture_branding_offset_z", t.FURNITURE_BADGE_IMAGE_STATUS = "furniture_badge_image_status", t.FURNITURE_BADGE_ASSET_NAME = "furniture_badge_asset_name", t.FURNITURE_BADGE_VISIBLE_IN_STATE = "furniture_badge_visible_in_state", t.FURNITURE_ALPHA_MULTIPLIER = "furniture_alpha_multiplier", t.FURNITURE_USAGE_POLICY = "furniture_usage_policy", t.FURNITURE_OWNER_ID = "furniture_owner_id", t.FURNITURE_OWNER_NAME = "furniture_owner_name", t.FURNITURE_ROOM_BACKGROUND_COLOR_HUE = "furniture_room_background_color_hue", t.FURNITURE_ROOM_BACKGROUND_COLOR_SATURATION = "furniture_room_background_color_saturation", t.FURNITURE_ROOM_BACKGROUND_COLOR_LIGHTNESS = "furniture_room_background_color_lightness", t.FURNITURE_USES_PLANE_MASK = "furniture_uses_plane_mask", t.FURNITURE_PLANE_MASK_TYPE = "furniture_plane_mask_type", t.FURNITURE_IS_VARIABLE_HEIGHT = "furniture_is_variable_height", t.FURNITURE_VOTE_MAJORITY_RESULT = "furniture_vote_majority_result", t.FURNITURE_VOTE_COUNTER_COUNT = "furniture_vote_counter_count", t.FURNITURE_MANNEQUIN_NAME = "furniture_mannequin_name", t.FURNITURE_MANNEQUIN_GENDER = "furniture_mannequin_gender", t.FURNITURE_MANNEQUIN_FIGURE = "furniture_mannequin_figure", t.FURNITURE_HIGHSCORE_SCORE_TYPE = "furniture_highscore_score_type", t.FURNITURE_HIGHSCORE_CLEAR_TYPE = "furniture_highscore_clear_type", t.FURNITURE_HIGHSCORE_DATA_ENTRY_COUNT = "furniture_highscore_data_entry_count", t.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_USERS_ = "furniture_highscore_data_entry_base_users_", t.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_SCORE_ = "furniture_highscore_data_entry_base_score_", t.FURNITURE_INTERNAL_LINK = "furniture_internal_link", t.PET_PALETTE_INDEX = "pet_palette_index", t.PET_COLOR = "pet_color", t.PET_HEAD_ONLY = "pet_head_only", t.PET_CUSTOM_LAYER_IDS = "pet_custom_layer_ids", t.PET_CUSTOM_PARTS_IDS = "pet_custom_part_ids", t.PET_CUSTOM_PALETTE_IDS = "pet_custom_palette_ids", t.PET_IS_RIDING = "pet_is_riding", t.PET_TYPE = "pet_type", t.PET_ALLOWED_DIRECTIONS = "pet_allowed_directions", t.RACE = "race", t.ROOM_MAP_DATA = "room_map_data", t.ROOM_PLANE_MASK_XML = "room_plane_mask_xml", t.ROOM_FLOOR_TYPE = "room_floor_type", t.ROOM_WALL_TYPE = "room_wall_type", t.ROOM_LANDSCAPE_TYPE = "room_landscape_type", t.ROOM_WALL_THICKNESS = "room_wall_thickness", t.ROOM_FLOOR_THICKNESS = "room_floor_thickness", t.ROOM_FLOOR_HOLE_UPDATE_TIME = "room_floor_hole_update_time", t.ROOM_FLOOR_VISIBILITY = "room_floor_visibility", t.ROOM_WALL_VISIBILITY = "room_wall_visibility", t.ROOM_LANDSCAPE_VISIBILITY = "room_landscape_visibility", t.ROOM_DOOR_X = "room_door_x", t.ROOM_DOOR_Y = "room_door_y", t.ROOM_DOOR_Z = "room_door_z", t.ROOM_DOOR_DIR = "room_door_dir", t.ROOM_BACKGROUND_COLOR = "room_background_color", t.ROOM_COLORIZE_BG_ONLY = "room_colorize_bg_only", t.ROOM_RANDOM_SEED = "room_random_seed", t.ROOM_WORLD_TYPE = "room_world_type", t.ROOM_SELECTED_X = "room_selected_x", t.ROOM_SELECTED_Y = "room_selected_y", t.ROOM_SELECTED_Z = "room_selected_z", t.ROOM_SELECTED_PLANE = "room_selected_plane", t.IMAGE_QUERY_SCALE = "image_query_scale", t.FURNITURE_FRIENDFURNI_ENGRAVING = "furniture_friendfurni_engraving_type", t
                })(),
                B = (() => {
                    class t {}
                    return t.FURNITURE_STATIC = "furniture_static", t.FURNITURE_ANIMATED = "furniture_animated", t.FURNITURE_RESETTING_ANIMATED = "furniture_resetting_animated", t.FURNITURE_POSTER = "furniture_poster", t.FURNITURE_EXTERNAL_IMAGE = "furniture_external_image", t.FURNITURE_HABBOWHEEL = "furniture_habbowheel", t.FURNITURE_VAL_RANDOMIZER = "furniture_val_randomizer", t.FURNITURE_BOTTLE = "furniture_bottle", t.FURNITURE_PLANET_SYSTEM = "furniture_planet_system", t.FURNITURE_QUEUE_TILE = "furniture_queue_tile", t.FURNITURE_PARTY_BEAMER = "furniture_party_beamer", t.FURNITURE_CUBOID = "furniture_cuboid", t.FURNITURE_GIFT_WRAPPED = "furniture_gift_wrapped", t.FURNITURE_GIFT_WRAPPED_FIREWORKS = "furniture_gift_wrapped_fireworks", t.FURNITURE_COUNTER_CLOCK = "furniture_counter_clock", t.FURNITURE_WATER_AREA = "furniture_water_area", t.FURNITURE_SCORE_BOARD = "furniture_score_board", t.FURNITURE_FIREWORKS = "furniture_fireworks", t.FURNITURE_BB = "furniture_bb", t.FURNITURE_BG = "furniture_bg", t.FURNITURE_STICKIE = "furniture_stickie", t.FURNITURE_MANNEQUIN = "furniture_mannequin", t.FURNITURE_GUILD_CUSTOMIZED = "furniture_guild_customized", t.FURNITURE_GUILD_ISOMETRIC_BADGE = "furniture_guild_isometric_badge", t.FURNITURE_VOTE_COUNTER = "furniture_vote_counter", t.FURNITURE_VOTE_MAJORITY = "furniture_vote_majority", t.FURNITURE_SOUNDBLOCK = "furniture_soundblock", t.FURNITURE_BADGE_DISPLAY = "furniture_badge_display", t.FURNITURE_YOUTUBE = "furniture_youtube", t.FURNITURE_BUILDER_PLACEHOLDER = "furniture_builder_placeholder", t.ROOM = "room", t.USER = "user", t.PET_ANIMATED = "pet_animated", t.BOT = "bot", t.RENTABLE_BOT = "rentable_bot", t.TILE_CURSOR = "tile_cursor", t
                })(),
                H = (() => {
                    class t {
                        constructor() {
                            this._logger = new g(this.constructor.name), this._stateEvents = null, this._sessionDataManager = null, this._waitingForSessionDataManager = !1, this._iconListener = null, this._collections = new Map, this._images = new Map, this._events = new Map, this._activeObjects = {}, this._activeObjectTypes = new Map, this._activeObjectTypeIds = new Map, this._objectTypeAdUrls = new Map, this._wallItems = {}, this._wallItemTypes = new Map, this._wallItemTypeIds = new Map, this._pets = {}, this._objectAliases = new Map, this._objectOriginalNames = new Map, this._pendingContentTypes = []
                        }
                        initialize(t) {
                            this._stateEvents = t, this.setFurnitureData();
                            for (const [e, s] of cp.instance.getConfiguration("pet.types").entries()) this._pets[s] = e
                        }
                        dispose() {}
                        setSessionDataManager(t) {
                            this._sessionDataManager = t, this._waitingForSessionDataManager && (this._waitingForSessionDataManager = !1, this.setFurnitureData())
                        }
                        loadFurnitureData() {
                            this.setFurnitureData()
                        }
                        setFurnitureData() {
                            if (!this._sessionDataManager) return void(this._waitingForSessionDataManager = !0);
                            const t = this._sessionDataManager.getAllFurnitureData(this);
                            t && (this._sessionDataManager.removePendingFurniDataListener(this), this.processFurnitureData(t))
                        }
                        processFurnitureData(t) {
                            if (t)
                                for (const e of t) {
                                    if (!e) continue;
                                    const t = e.id;
                                    let s = e.className,
                                        i = e.className;
                                    e.colorId && (s = s + "*" + e.colorId);
                                    const n = e.adUrl;
                                    n && n.length > 0 && this._objectTypeAdUrls.set(s, n), e.type === k.FLOOR ? (this._activeObjectTypes.set(t, s), this._activeObjectTypeIds.set(s, t), this._activeObjects[i] || (this._activeObjects[i] = 1)) : e.type === k.WALL && ("post.it" === s && (s = "post_it", i = "post_it"), "post.it.vd" === s && (s = "post_it_vd", i = "post_id_vd"), this._wallItemTypes.set(t, s), this._wallItemTypeIds.set(s, t), this._wallItems[i] || (this._wallItems[i] = 1))
                                }
                        }
                        getFurnitureFloorNameForTypeId(t) {
                            const e = this._activeObjectTypes.get(t);
                            return this.removeColorIndex(e)
                        }
                        getFurnitureWallNameForTypeId(t, e = null) {
                            let s = this._wallItemTypes.get(t);
                            return "poster" === s && null !== e && (s += e), this.removeColorIndex(s)
                        }
                        getFurnitureFloorColorIndex(t) {
                            const e = this._activeObjectTypes.get(t);
                            return e ? this.getColorIndexFromName(e) : -1
                        }
                        getFurnitureWallColorIndex(t) {
                            const e = this._wallItemTypes.get(t);
                            return e ? this.getColorIndexFromName(e) : -1
                        }
                        getColorIndexFromName(t) {
                            if (!t) return -1;
                            const e = t.indexOf("*");
                            return -1 === e ? 0 : parseInt(t.substr(e + 1))
                        }
                        removeColorIndex(t) {
                            if (!t) return null;
                            const e = t.indexOf("*");
                            return -1 === e ? t : t.substr(0, e)
                        }
                        getCollection(t) {
                            if (!t) return null;
                            const e = this._collections.get(t);
                            if (!e) {
                                const e = cp.instance.core.asset.getCollection(t);
                                return e ? (this._collections.set(t, e), e) : null
                            }
                            return e
                        }
                        getImage(t) {
                            if (!t) return null;
                            const e = this._images.get(t);
                            if (!e) return null;
                            const s = new Image;
                            return s.src = e.src, s
                        }
                        addAssetToCollection(t, e, s) {
                            const i = this.getCollection(t);
                            return !!i && i.addAsset(e, s, !0, 0, 0, !1, !1)
                        }
                        createCollection(t, e) {
                            if (!t || !e) return null;
                            const s = new E(t, e);
                            this._collections.set(s.name, s)
                        }
                        getPlaceholderName(e) {
                            return void 0 !== this._activeObjects[e] ? t.PLACE_HOLDER : void 0 !== this._wallItems[e] ? t.PLACE_HOLDER_WALL : void 0 !== this._pets[e] ? t.PLACE_HOLDER_PET : t.PLACE_HOLDER_DEFAULT
                        }
                        getCategoryForType(t) {
                            return t ? void 0 !== this._activeObjects[t] ? V.FLOOR : void 0 !== this._wallItems[t] ? V.WALL : void 0 !== this._pets[t] ? V.UNIT : 0 === t.indexOf("poster") ? V.WALL : "room" === t ? V.ROOM : t === Z.USER || t === Z.PET || t === Z.BOT || t === Z.RENTABLE_BOT ? V.UNIT : "tile_cursor" === t || "selection_arrow" === t ? V.CURSOR : V.MINIMUM : V.MINIMUM
                        }
                        getPetNameForType(t) {
                            return cp.instance.getConfiguration("pet.types")[t] || null
                        }
                        isLoaderType(t) {
                            return (t = Z.getRealType(t)) !== B.USER
                        }
                        downloadImage(t, e, s, i = null) {
                            let n = null,
                                r = [];
                            if (e && e.indexOf(",") >= 0 && (n = e, e = n.split(",")[0]), r = this.getAssetUrls(n || e, s, !0), r && r.length) {
                                const i = r[0],
                                    n = new Image;
                                return n.src = i, n.onload = () => {
                                    n.onerror = null, this._images.set([e, s].join("_"), n), this._iconListener.onRoomContentLoaded(t, [e, s].join("_"), !0)
                                }, n.onerror = () => {
                                    n.onload = null, this._logger.error("Failed to download asset: " + i), this._iconListener.onRoomContentLoaded(t, [e, s].join("_"), !1)
                                }, !0
                            }
                            return !1
                        }
                        downloadAsset(t, e) {
                            const s = this.getAssetUrls(t);
                            if (!s || !s.length) return !1;
                            if (this._pendingContentTypes.indexOf(t) >= 0 || this.getOrRemoveEventDispatcher(t)) return !1;
                            this._pendingContentTypes.push(t), this._events.set(t, e);
                            const i = s.length;
                            let n = 0;
                            const r = (s, r, o) => {
                                if (s && s.destroy(), !o) return this._logger.error("Failed to download asset: " + r.url), void e.dispatchEvent(new Y(Y.RCLE_FAILURE, t));
                                if (n++, n === i) {
                                    const e = this._events.get(t);
                                    if (!e) return;
                                    e.dispatchEvent(new Y(Y.RCLE_SUCCESS, t))
                                }
                            };
                            for (const o of s) {
                                if (!o) continue;
                                const t = new u.g,
                                    e = {
                                        crossOrigin: !1
                                    };
                                t.use((e, s) => this.assetLoader(t, e, s, r)).add(s, e).load()
                            }
                            return !0
                        }
                        assetLoader(t, e, s, i) {
                            if (!e || e.error) return e && e.texture && e.texture.destroy(!0), void i(t, e, !1);
                            if (e.type === u.h.TYPE.JSON) {
                                const s = e.data;
                                if (!s.type) return void i(t, e, !1);
                                if (s.spritesheet && Object.keys(s.spritesheet).length) {
                                    const n = s.spritesheet.meta && s.spritesheet.meta.image;
                                    if (!n || !n.length) return void i(t, e, !1);
                                    const r = e.url.substring(0, e.url.lastIndexOf("/") + 1) + n,
                                        o = u.c.from(r);
                                    if (o.valid) {
                                        const n = new u.o(o, s.spritesheet);
                                        n.parse(r => {
                                            this.createCollection(s, n), i(t, e, !0)
                                        })
                                    } else o.once("loaded", () => {
                                        o.removeAllListeners();
                                        const n = new u.o(o, s.spritesheet);
                                        n.parse(r => {
                                            this.createCollection(s, n), i(t, e, !0)
                                        })
                                    }), o.once("error", () => {
                                        o.removeAllListeners(), i(t, e, !1)
                                    });
                                    return
                                }
                                this.createCollection(s, null), i(t, e, !0)
                            } else i(t, e, !1)
                        }
                        _Str_12966(t, e) {
                            this._objectAliases.set(t, e), this._objectOriginalNames.set(e, t)
                        }
                        getAssetAliasName(t) {
                            return this._objectAliases.get(t) || t
                        }
                        getAssetOriginalName(t) {
                            return this._objectOriginalNames.get(t) || t
                        }
                        getAssetUrls(e, s = null, i = !1) {
                            switch (e) {
                                case t.PLACE_HOLDER:
                                    return [this.getAssetUrlWithRoomBase("place_holder")];
                                case t.PLACE_HOLDER_WALL:
                                    return [this.getAssetUrlWithRoomBase("place_holder_wall")];
                                case t.PLACE_HOLDER_PET:
                                    return [this.getAssetUrlWithRoomBase("place_holder_pet")];
                                case t.ROOM:
                                    return [this.getAssetUrlWithRoomBase("room")];
                                case t.TILE_CURSOR:
                                    return [this.getAssetUrlWithRoomBase("tile_cursor")];
                                case t.SELECTION_ARROW:
                                    return [this.getAssetUrlWithRoomBase("selection_arrow")];
                                default:
                                    {
                                        const t = this.getCategoryForType(e);
                                        if (t === V.FLOOR || t === V.WALL) {
                                            const t = this.getAssetAliasName(e);
                                            let n = i ? this.getAssetUrlWithFurniIconBase(t) : this.getAssetUrlWithFurniBase(e);
                                            if (i) {
                                                const e = s && "" !== s && "0" !== s && null !== this._activeObjectTypeIds.get(t + "*" + s);
                                                n = n.replace(/%param%/gi, e ? "_" + s : "")
                                            }
                                            return [n]
                                        }
                                        return t === V.UNIT ? [this.getAssetUrlWithPetBase(e)] : null
                                    }
                            }
                        }
                        getAssetIconUrl(t, e) {
                            let s = null,
                                i = [];
                            return t && t.indexOf(",") >= 0 && (s = t, t = s.split(",")[0]), i = this.getAssetUrls(s || t, e, !0), i.length ? i[0] : null
                        }
                        getAssetUrlWithRoomBase(t) {
                            return cp.instance.getConfiguration("room.asset.url").replace(/%libname%/gi, t)
                        }
                        getAssetUrlWithFurniBase(t) {
                            return cp.instance.getConfiguration("furni.asset.url").replace(/%libname%/gi, t)
                        }
                        getAssetUrlWithFurniIconBase(t) {
                            return cp.instance.getConfiguration("furni.asset.icon.url").replace(/%libname%/gi, t)
                        }
                        getAssetUrlWithPetBase(t) {
                            return cp.instance.getConfiguration("pet.asset.url").replace(/%libname%/gi, t)
                        }
                        setRoomObjectRoomId(t, e) {
                            const s = t && t.model;
                            s && s.setValue(j.OBJECT_ROOM_ID, e)
                        }
                        getOrRemoveEventDispatcher(t, e = !1) {
                            const s = this._events.get(t);
                            return e && this._events.delete(t), s
                        }
                        setIconListener(t) {
                            this._iconListener = t
                        }
                    }
                    return t.PLACE_HOLDER = "place_holder", t.PLACE_HOLDER_WALL = "place_holder_wall", t.PLACE_HOLDER_PET = "place_holder_pet", t.PLACE_HOLDER_DEFAULT = t.PLACE_HOLDER, t.ROOM = "room", t.TILE_CURSOR = "tile_cursor", t.SELECTION_ARROW = "selection_arrow", t.MANDATORY_LIBRARIES = [t.PLACE_HOLDER, t.PLACE_HOLDER_WALL, t.PLACE_HOLDER_PET, t.ROOM, t.TILE_CURSOR, t.SELECTION_ARROW], t
                })();
            class W {
                constructor() {
                    this._map = new Map, this._updateCounter = 0
                }
                dispose() {
                    this._map.clear(), this._updateCounter = 0
                }
                getValue(t) {
                    return this._map.get(t)
                }
                setValue(t, e) {
                    this._map.set(t, e), this._updateCounter++
                }
                removeKey(t) {
                    t && (this._map.delete(t), this._updateCounter++)
                }
                get updateCounter() {
                    return this._updateCounter
                }
            }
            class z extends d {
                constructor(t, e) {
                    super(), this._id = t, this._container = e, this._renderer = null, this._managers = new Map, this._updateCategories = [], this._model = new W
                }
                onDispose() {
                    this.removeAllManagers(), this.destroyRenderer(), this._container = null, this._model.dispose()
                }
                setRenderer(t) {
                    if (t !== this._renderer && (this._renderer && this.destroyRenderer(), this._renderer = t, this._renderer && (this._renderer.reset(), this._managers.size)))
                        for (const e of this._managers.values()) {
                            if (!e) continue;
                            const t = e.objects;
                            if (t.length)
                                for (const e of t.getValues()) e && this._renderer.addObject(e)
                        }
                }
                destroyRenderer() {
                    this._renderer && (this._renderer.dispose(), this._renderer = null)
                }
                getManager(t) {
                    return this._managers.get(t) || null
                }
                getManagerOrCreate(t) {
                    let e = this.getManager(t);
                    return e || (e = this._container.createRoomObjectManager(t), e ? (this._managers.set(t, e), e) : null)
                }
                getTotalObjectsForManager(t) {
                    const e = this.getManager(t);
                    return e ? e.totalObjects : 0
                }
                getRoomObject(t, e) {
                    const s = this.getManager(e);
                    return s && s.getObject(t) || null
                }
                getRoomObjectsForCategory(t) {
                    const e = this.getManager(t);
                    return e ? e.objects.getValues() : []
                }
                getRoomObjectByIndex(t, e) {
                    const s = this.getManager(e);
                    return s && s.getObjectByIndex(t) || null
                }
                createRoomObject(t, e, s, i) {
                    const n = this.getManagerOrCreate(i);
                    if (!n) return null;
                    const r = n.createObject(t, e, s);
                    return r ? (this._renderer && this._renderer.addObject(r), r) : null
                }
                createRoomObjectAndInitalize(t, e, s) {
                    return this._container ? this._container.createRoomObjectAndInitalize(this._id, t, e, s) : null
                }
                removeRoomObject(t, e) {
                    const s = this.getManager(e);
                    if (!s) return;
                    const i = s.getObject(t);
                    i && (i.tearDown(), this._renderer && this._renderer.removeObject(i), s.removeObject(t))
                }
                removeAllManagers() {
                    for (const t of this._managers.values())
                        if (t) {
                            if (this._renderer) {
                                const e = t.objects;
                                if (e.length)
                                    for (const t of e.getValues()) t && this._renderer.removeObject(t)
                            }
                            t.dispose()
                        }
                    this._managers.clear()
                }
                addUpdateCategory(t) {
                    this._updateCategories.indexOf(t) >= 0 || this._updateCategories.push(t)
                }
                removeUpdateCategory(t) {
                    const e = this._updateCategories.indexOf(t); - 1 !== e && this._updateCategories.splice(e, 1)
                }
                update(t, e = !1) {
                    for (const s of this._updateCategories) {
                        const e = this.getManager(s);
                        if (!e) continue;
                        const i = e.objects;
                        if (i.length)
                            for (const s of i.getValues()) {
                                if (!s) continue;
                                const e = s.logic;
                                e && e.update(t)
                            }
                    }
                    this._renderer && this._renderer.update(t, e)
                }
                hasUninitializedObjects() {
                    for (const t of this._managers.values())
                        if (t)
                            for (const e of t.objects.getValues())
                                if (e && !e.isReady) return !0;
                    return !1
                }
                get id() {
                    return this._id
                }
                get container() {
                    return this._container
                }
                get renderer() {
                    return this._renderer
                }
                get managers() {
                    return this._managers
                }
                get model() {
                    return this._model
                }
            }
            class K {
                constructor(t = 0, e = 0, s = 0) {
                    this._x = t, this._y = e, this._z = s, this._length = NaN
                }
                static sum(t, e) {
                    return t && e ? new K(t.x + e.x, t.y + e.y, t.z + e.z) : null
                }
                static dif(t, e) {
                    return t && e ? new K(t.x - e.x, t.y - e.y, t.z - e.z) : null
                }
                static product(t, e) {
                    return t ? new K(t.x * e, t.y * e, t.z * e) : null
                }
                static dotProduct(t, e) {
                    return t && e ? t.x * e.x + t.y * e.y + t.z * e.z : 0
                }
                static crossProduct(t, e) {
                    return t && e ? new K(t.y * e.z - t.z * e.y, t.z * e.x - t.x * e.z, t.x * e.y - t.y * e.x) : null
                }
                static scalarProjection(t, e) {
                    if (!t || !e) return -1;
                    const s = e.length;
                    return s > 0 ? (t.x * e.x + t.y * e.y + t.z * e.z) / s : -1
                }
                static cosAngle(t, e) {
                    if (!t || !e) return 0;
                    const s = t.length * e.length;
                    return s ? K.dotProduct(t, e) / s : 0
                }
                static isEqual(t, e) {
                    return !(!t || !e) && t.x === e.x && t.y === e.y && t.z === e.z
                }
                negate() {
                    this._x = -this._x, this._y = -this._y, this._z = -this._z
                }
                add(t) {
                    t && (this._x += t.x, this._y += t.y, this._z += t.z, this._length = NaN)
                }
                subtract(t) {
                    t && (this._x -= t.x, this._y -= t.y, this._z -= t.z, this._length = NaN)
                }
                multiply(t) {
                    this._x *= t, this._y *= t, this._z *= t, this._length = NaN
                }
                divide(t) {
                    this._x /= t, this._y /= t, this._z /= t, this._length = NaN
                }
                assign(t) {
                    t && (this._x = t.x, this._y = t.y, this._z = t.z, this._length = NaN)
                }
                get x() {
                    return this._x
                }
                set x(t) {
                    this._x = t, this._length = NaN
                }
                get y() {
                    return this._y
                }
                set y(t) {
                    this._y = t, this._length = NaN
                }
                get z() {
                    return this._z
                }
                set z(t) {
                    this._z = t, this._length = NaN
                }
                get length() {
                    return isNaN(this._length) && (this._length = Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z)), this._length
                }
                toString() {
                    return `[Vector3d: ${this._x}, ${this._y}, ${this._z}]`
                }
            }
            let X = (() => {
                class t extends d {
                    constructor(e, s, i) {
                        super(), this._id = e, this._instanceId = t.OBJECT_COUNTER++, this._type = i, this._model = new W, this._location = new K, this._direction = new K, this._states = [], this._visualization = null, this._logic = null, this._pendingLogicMessages = [], this._updateCounter = 0, this._isReady = !1;
                        let n = s - 1;
                        for (; n >= 0;) this._states[n] = 0, n--
                    }
                    onDispose() {
                        this._pendingLogicMessages = [], this.setVisualization(null), this.setLogic(null), this._model && this._model.dispose(), super.onDispose()
                    }
                    getLocation() {
                        return this._location
                    }
                    setLocation(t) {
                        t && (t.x === this._location.x && t.y === this._location.y && t.z === this._location.z || (this._location.x = t.x, this._location.y = t.y, this._location.z = t.z, this._updateCounter++))
                    }
                    getDirection() {
                        return this._direction
                    }
                    setDirection(t) {
                        t && (t.x === this._direction.x && t.y === this._direction.y && t.z === this._direction.z || (this._direction.x = (t.x % 360 + 360) % 360, this._direction.y = (t.y % 360 + 360) % 360, this._direction.z = (t.z % 360 + 360) % 360, this._updateCounter++))
                    }
                    getState(t = 0) {
                        return t >= 0 && t < this._states.length ? this._states[t] : -1
                    }
                    setState(t, e = 0) {
                        return e >= 0 && e < this._states.length && (this._states[e] !== t && (this._states[e] = t, this._updateCounter++), !0)
                    }
                    setVisualization(t) {
                        this._visualization !== t && (this._visualization && this._visualization.dispose(), this._visualization = t, this._visualization && (this._visualization.object = this))
                    }
                    setLogic(t) {
                        if (this._logic === t) return;
                        const e = this._logic;
                        if (e && (this._logic = null, e.setObject(null)), this._logic = t, this._logic)
                            for (this._logic.setObject(this); this._pendingLogicMessages.length;) {
                                const t = this._pendingLogicMessages.shift();
                                this._logic.processUpdateMessage(t)
                            }
                    }
                    processUpdateMessage(t) {
                        if (this._logic) return this._logic.processUpdateMessage(t);
                        this._pendingLogicMessages.push(t)
                    }
                    tearDown() {
                        this._logic && this._logic.tearDown()
                    }
                    get id() {
                        return this._id
                    }
                    get instanceId() {
                        return this._instanceId
                    }
                    get type() {
                        return this._type
                    }
                    get model() {
                        return this._model
                    }
                    get visualization() {
                        return this._visualization
                    }
                    get mouseHandler() {
                        return this._logic
                    }
                    get logic() {
                        return this._logic
                    }
                    get location() {
                        return this._location
                    }
                    get direction() {
                        return this._direction
                    }
                    get updateCounter() {
                        return this._updateCounter
                    }
                    set updateCounter(t) {
                        this._updateCounter = t
                    }
                    get isReady() {
                        return this._isReady
                    }
                    set isReady(t) {
                        this._isReady = t
                    }
                }
                return t.OBJECT_COUNTER = 0, t
            })();
            class q {
                constructor() {
                    this._objects = new x, this._objectsPerType = new x
                }
                dispose() {
                    this.removeAllObjects()
                }
                getObject(t) {
                    return this._objects.getValue(t) || null
                }
                getObjectByIndex(t) {
                    return this._objects.getWithIndex(t) || null
                }
                createObject(t, e, s) {
                    const i = new X(t, e, s);
                    return this.addObject(t, s, i)
                }
                addObject(t, e, s) {
                    if (this._objects.getValue(t)) return s.dispose(), null;
                    this._objects.add(t, s);
                    const i = this.getTypeMap(e);
                    return i && i.add(t, s), s
                }
                removeObject(t) {
                    const e = this._objects.remove(t);
                    if (e) {
                        const t = this.getTypeMap(e.type);
                        t && t.remove(e.id), e.dispose()
                    }
                }
                removeAllObjects() {
                    let t = 0;
                    for (; t < this._objects.length;) {
                        const e = this._objects.getWithIndex(t);
                        e && e.dispose(), t++
                    }
                    for (this._objects.reset(), t = 0; t < this._objectsPerType.length;) {
                        const e = this._objectsPerType.getWithIndex(t);
                        e && e.dispose(), t++
                    }
                    this._objectsPerType.reset()
                }
                getTypeMap(t, e = !0) {
                    let s = this._objectsPerType.getValue(t);
                    return !s && e && (s = new x, this._objectsPerType.add(t, s)), s
                }
                get objects() {
                    return this._objects
                }
                get totalObjects() {
                    return this._objects.length
                }
            }
            let J = (() => {
                class t extends L {
                    constructor(e, s, i) {
                        super(), this._state = t._Str_16443, this._rooms = new Map, this._contentLoader = null, this._updateCategories = [], this._listener = e, this._visualizationFactory = s, this._logicFactory = i, this._initialLoadList = [], this._pendingContentTypes = [], this._skipContentProcessing = !1, this._disposed = !1, this.onRoomContentLoadedEvent = this.onRoomContentLoadedEvent.bind(this), this.events.addEventListener(Y.RCLE_SUCCESS, this.onRoomContentLoadedEvent), this.events.addEventListener(Y.RCLE_FAILURE, this.onRoomContentLoadedEvent), this.events.addEventListener(Y.RCLE_CANCEL, this.onRoomContentLoadedEvent)
                    }
                    onInit() {
                        if (this._state >= t._Str_13904 || !this._contentLoader) return;
                        const e = H.MANDATORY_LIBRARIES;
                        for (const t of e) t && -1 === this._initialLoadList.indexOf(t) && (this._contentLoader.downloadAsset(t, this.events), this._initialLoadList.push(t));
                        this._state = t._Str_13904
                    }
                    getRoomInstance(t) {
                        return this._rooms.get(t) || null
                    }
                    createRoomInstance(t) {
                        if (this._rooms.get(t)) return null;
                        const e = new z(t, this);
                        if (this._rooms.set(e.id, e), this._updateCategories.length)
                            for (const s of this._updateCategories) e.addUpdateCategory(s);
                        return e
                    }
                    removeRoomInstance(t) {
                        const e = this._rooms.get(t);
                        return !!e && (this._rooms.delete(t), e.dispose(), !0)
                    }
                    createRoomObjectAndInitalize(t, e, s, i) {
                        const n = this.getRoomInstance(t);
                        if (!n) return null;
                        let r = s,
                            o = s,
                            a = s,
                            c = null,
                            _ = !1;
                        if (this._contentLoader.isLoaderType(s)) {
                            if (c = this._contentLoader.getCollection(s), !c && (_ = !0, this._contentLoader.downloadAsset(s, this.events), a = this._contentLoader.getPlaceholderName(s), c = this._contentLoader.getCollection(a), !c)) return null;
                            r = c.data.visualizationType, o = c.data.logicType
                        }
                        const h = n.createRoomObject(e, 1, s, i);
                        if (!h) return null;
                        if (this._visualizationFactory) {
                            const t = this._visualizationFactory.getVisualization(r);
                            if (!t) return n.removeRoomObject(e, i), null;
                            t.asset = c;
                            const s = this._visualizationFactory.getVisualizationData(a, r, c && c.data || null);
                            if (!s || !t.initialize(s)) return n.removeRoomObject(e, i), null;
                            h.setVisualization(t)
                        }
                        if (this._logicFactory) {
                            const t = this._logicFactory.getLogic(o);
                            h.setLogic(t), t && t.initialize(c && c.data || null)
                        }
                        return _ || (h.isReady = !0), this._contentLoader.setRoomObjectRoomId(h, t), h
                    }
                    reinitializeRoomObjectsByType(t) {
                        if (!(t && this._contentLoader && this._visualizationFactory && this._logicFactory)) return;
                        const e = this._contentLoader.getCollection(t);
                        if (!e) return;
                        const s = e.data.visualizationType,
                            i = e.data.logicType,
                            n = this._visualizationFactory.getVisualizationData(t, s, e.data);
                        for (const r of this._rooms.values())
                            if (r)
                                for (const [o, a] of r.managers.entries())
                                    if (a)
                                        for (const c of a.objects.getValues()) {
                                            if (!c || c.type !== t) continue;
                                            const _ = this._visualizationFactory.getVisualization(s);
                                            if (_)
                                                if (_.asset = e, n && _.initialize(n)) {
                                                    c.setVisualization(_);
                                                    const t = this._logicFactory.getLogic(i);
                                                    c.setLogic(t), t && t.initialize(e.data), c.isReady = !0, this._listener && this._listener.objectInitialized(r.id, c.id, o)
                                                } else a.removeObject(c.id);
                                            else a.removeObject(c.id)
                                        }
                    }
                    addUpdateCategory(t) {
                        if (!(this._updateCategories.indexOf(t) >= 0) && (this._updateCategories.push(t), this._rooms.size))
                            for (const e of this._rooms.values()) e && e.addUpdateCategory(t)
                    }
                    removeUpdateCategory(t) {
                        const e = this._updateCategories.indexOf(t);
                        if (-1 !== e && (this._updateCategories.splice(e, 1), this._rooms.size))
                            for (const s of this._rooms.values()) s && s.removeUpdateCategory(t)
                    }
                    setContentLoader(t) {
                        this._contentLoader && this._contentLoader.dispose(), this._contentLoader = t
                    }
                    processPendingContentTypes(t) {
                        if (this._skipContentProcessing) this._skipContentProcessing = !1;
                        else
                            for (; this._pendingContentTypes.length;) {
                                const t = this._pendingContentTypes.shift();
                                this._contentLoader.getCollection(t) ? (this.reinitializeRoomObjectsByType(t), this._listener && this._listener.initalizeTemporaryObjectsByType(t, !0), this._initialLoadList.length > 0 && this.removeFromInitialLoad(t)) : (this._listener && this._listener.initalizeTemporaryObjectsByType(t, !1), this.logger.log("Invalid Collection: " + t))
                            }
                    }
                    removeFromInitialLoad(e) {
                        if (e && this._state !== t._Str_9994)
                            if (this._contentLoader || (this._state = t._Str_9994), this._contentLoader.getCollection(e)) {
                                const s = this._initialLoadList.indexOf(e);
                                s >= 0 && this._initialLoadList.splice(s, 1), this._initialLoadList.length || (this._state = t._Str_9846, this._listener && this._listener.onRoomEngineInitalized(!0))
                            } else this._state = t._Str_9994, this._listener && this._listener.onRoomEngineInitalized(!1)
                    }
                    onRoomContentLoadedEvent(t) {
                        if (!this._contentLoader) return;
                        const e = t.contentType;
                        this._pendingContentTypes.indexOf(e) >= 0 || this._pendingContentTypes.push(e)
                    }
                    update(t, e = !1) {
                        if (this.processPendingContentTypes(t), this._rooms.size)
                            for (const s of this._rooms.values()) s && s.update(t, e)
                    }
                    createRoomObjectManager(t) {
                        return new q
                    }
                    get rooms() {
                        return this._rooms
                    }
                    get disposed() {
                        return this._disposed
                    }
                }
                return t._Str_9994 = -1, t._Str_16337 = 0, t._Str_16443 = 1, t._Str_13904 = 2, t._Str_9846 = 3, t._Str_18280 = 40, t
            })();
            var Q = s("CDzl");
            let $ = (() => {
                class t {
                    constructor() {
                        this._gender = "M", this._avatarEffectType = -1
                    }
                    _Str_2153(t, e) {
                        this._data = new Map, this._colors = new Map, this._gender = e, this._Str_958(t)
                    }
                    dispose() {
                        this._data = null, this._colors = null, this._isDisposed = !0
                    }
                    get disposed() {
                        return this._isDisposed
                    }
                    _Str_958(t) {
                        if (t)
                            for (const e of t.split(".")) {
                                const t = e.split("-");
                                if (t.length > 0) {
                                    const e = t[0],
                                        s = parseInt(t[1]),
                                        i = [];
                                    let n = 2;
                                    for (; n < t.length;) i.push(parseInt(t[n])), n++;
                                    i.length || i.push(0), this._Str_1876(e, s, !1), this.savePartSetColourId(e, i, !1)
                                }
                            }
                    }
                    _Str_2131(t) {
                        return !!this._data.get(t)
                    }
                    getPartSetId(t) {
                        return this._Str_2131(t) ? this._data.get(t) : -1
                    }
                    getColourIds(t) {
                        return this._colors.get(t) ? this._colors.get(t) : []
                    }
                    _Str_1008() {
                        let t = "";
                        const e = [];
                        for (const [i, n] of this._data.entries()) {
                            let t = i + "-" + n;
                            const s = this._colors.get(i);
                            if (s)
                                for (const e of s) t = t + "-" + e;
                            e.push(t)
                        }
                        let s = 0;
                        for (; s < e.length;) t += e[s], s < e.length - 1 && (t += "."), s++;
                        return t
                    }
                    _Str_2088(t, e, s, i = !1) {
                        this._Str_1876(t, e, i), this.savePartSetColourId(t, s, i)
                    }
                    _Str_1876(e, s, i = !0) {
                        switch (e) {
                            case t.HD:
                            case t.HR:
                            case t.HA:
                            case t.HE:
                            case t.EA:
                            case t.FA:
                            case t.CH:
                            case t.CC:
                            case t.CA:
                            case t.CP:
                            case t.LG:
                            case t.SH:
                            case t.WA:
                                s >= 0 ? this._data.set(e, s) : this._data.delete(e)
                        }
                    }
                    savePartSetColourId(e, s, i = !0) {
                        switch (e) {
                            case t.HD:
                            case t.HR:
                            case t.HA:
                            case t.HE:
                            case t.EA:
                            case t.FA:
                            case t.CH:
                            case t.CC:
                            case t.CA:
                            case t.CP:
                            case t.LG:
                            case t.SH:
                            case t.WA:
                                return void this._colors.set(e, s)
                        }
                    }
                    getFigureStringWithFace(e) {
                        const s = [t.HD];
                        let i = "";
                        const n = [];
                        for (const o of s) {
                            const s = this._colors.get(o);
                            if (s) {
                                let i = this._data.get(o);
                                o === t.HD && (i = e);
                                let r = o + "-" + i;
                                if (i >= 0) {
                                    let t = 0;
                                    for (; t < s.length;) r = r + "-" + s[t], t++
                                }
                                n.push(r)
                            }
                        }
                        let r = 0;
                        for (; r < n.length;) i += n[r], r < n.length - 1 && (i += "."), r++;
                        return i
                    }
                    get gender() {
                        return this._gender
                    }
                }
                return t.M = "M", t.F = "F", t.U = "U", t.H = "h", t.STD = "std", t._Str_2028 = "0", t.HD = "hd", t.HR = "hr", t.HA = "ha", t.HE = "he", t.EA = "ea", t.FA = "fa", t.CC = "cc", t.CH = "ch", t.CA = "ca", t.CP = "cp", t.LG = "lg", t.SH = "sh", t.WA = "wa", t._Str_1329 = [28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 68], t
            })();
            class tt {
                constructor(t, e) {
                    this._name = t, this._link = e.link, this._flipH = 1 === e.fliph, this._flipV = 1 === e.flipv
                }
                get name() {
                    return this._name
                }
                get link() {
                    return this._link
                }
                get flipH() {
                    return this._flipH
                }
                get flipV() {
                    return this._flipV
                }
            }
            class et {
                constructor(t, e) {
                    this._avatarRenderManager = t, this._aliases = new Map, this._assets = e, this._missingAssetNames = []
                }
                dispose() {
                    this._assets = null, this._aliases = null
                }
                reset() {
                    this.init()
                }
                init() {
                    for (const t of this._assets.collections.values()) {
                        if (!t) continue;
                        const e = t.data && t.data.aliases;
                        if (e)
                            for (const t in e) {
                                const s = e[t];
                                s && this._aliases.set(t, new tt(t, s))
                            }
                    }
                }
                _Str_1044(t) {
                    return !!this._aliases.get(t)
                }
                _Str_2125(t) {
                    let e = t,
                        s = 5;
                    for (; this._Str_1044(e) && s >= 0;) e = this._aliases.get(e).link, s--;
                    return e
                }
                getAsset(t) {
                    return this._assets ? (t = this._Str_2125(t), this._assets.getAsset(t) || null) : null
                }
            }
            let st = (() => {
                    class t extends o {
                        constructor(t, e) {
                            super(t), this._library = e
                        }
                        get library() {
                            return this._library
                        }
                    }
                    return t.DOWNLOAD_COMPLETE = "ARLE_DOWNLOAD_COMPLETE", t
                })(),
                it = (() => {
                    class t extends m {
                        constructor(e, s, i, n) {
                            super(), this._state = t.NOT_LOADED, this._libraryName = e, this._revision = s, this._downloadUrl = n, this._assets = i, this._downloadUrl = this._downloadUrl.replace(/%libname%/gi, this._libraryName), this._downloadUrl = this._downloadUrl.replace(/%revision%/gi, this._revision), this._assets.getCollection(this._libraryName) && (this._state = t.LOADED)
                        }
                        downloadAsset() {
                            if (this._assets && this._state !== t.LOADING && this._state !== t.LOADED) return this._assets.getCollection(this._libraryName) ? (this._state = t.LOADED, void this.dispatchEvent(new st(st.DOWNLOAD_COMPLETE, this))) : (this._state = t.LOADING, void this._assets.downloadAsset(this._downloadUrl, e => {
                                e && (this._state = t.LOADED, this.dispatchEvent(new st(st.DOWNLOAD_COMPLETE, this)))
                            }))
                        }
                        get libraryName() {
                            return this._libraryName
                        }
                        get isLoaded() {
                            return this._state === t.LOADED
                        }
                    }
                    return t.DOWNLOAD_COMPLETE = "AADL_DOWNLOAD_COMPLETE", t.NOT_LOADED = 0, t.LOADING = 1, t.LOADED = 2, t
                })(),
                nt = (() => {
                    class t extends m {
                        constructor(t, e) {
                            super(), this._assets = t, this._structure = e, this._missingMandatoryLibs = cp.instance.getConfiguration("avatar.mandatory.libraries"), this._figureMap = new Map, this._pendingContainers = [], this._figureListeners = new Map, this._incompleteFigures = new Map, this._pendingDownloadQueue = [], this._currentDownloads = [], this._libraryNames = [], this._isReady = !1, this.onLibraryLoaded = this.onLibraryLoaded.bind(this), this.onAvatarRenderReady = this.onAvatarRenderReady.bind(this), this.loadFigureMap(), this._structure.renderManager.events.addEventListener(c.AVATAR_RENDER_READY, this.onAvatarRenderReady)
                        }
                        loadFigureMap() {
                            const e = new XMLHttpRequest;
                            try {
                                e.open("GET", cp.instance.getConfiguration("avatar.figuremap.url")), e.send(), e.onloadend = s => {
                                    if (e.responseText) {
                                        const s = JSON.parse(e.responseText);
                                        this.processFigureMap(s.libraries), this.processMissingLibraries(), this._isReady = !0, this.dispatchEvent(new o(t.DOWNLOADER_READY))
                                    }
                                }, e.onerror = t => {
                                    throw new Error("invalid_avatar_figure_map")
                                }
                            } catch (s) {
                                g.log(s)
                            }
                        }
                        processFigureMap(t) {
                            if (t)
                                for (const e of t) {
                                    if (!e) continue;
                                    const t = e.id,
                                        s = e.revision || "";
                                    if (this._libraryNames.indexOf(t) >= 0) continue;
                                    this._libraryNames.push(t);
                                    const i = new it(t, s, this._assets, cp.instance.getConfiguration("avatar.asset.url"));
                                    i.addEventListener(st.DOWNLOAD_COMPLETE, this.onLibraryLoaded);
                                    for (const n of e.parts) {
                                        const t = n.type + ":" + n.id;
                                        let e = this._figureMap.get(t);
                                        e || (e = []), e.push(i), this._figureMap.set(t, e)
                                    }
                                }
                        }
                        onAvatarRenderReady(t) {
                            if (t) {
                                for (const [t, e] of this._pendingContainers) this.downloadAvatarFigure(t, e);
                                this._pendingContainers = []
                            }
                        }
                        onLibraryLoaded(e) {
                            if (!e || !e.library) return;
                            const s = [];
                            for (const [n, r] of this._incompleteFigures.entries()) {
                                let e = !0;
                                for (const t of r)
                                    if (t && !t.isLoaded) {
                                        e = !1;
                                        break
                                    }
                                if (e) {
                                    s.push(n);
                                    const e = this._figureListeners.get(n);
                                    if (e)
                                        for (const t of e) t && !t.disposed && t.resetFigure(n);
                                    this._figureListeners.delete(n), this.dispatchEvent(new o(t.LIBRARY_LOADED))
                                }
                            }
                            for (const t of s) t && this._incompleteFigures.delete(t);
                            let i = 0;
                            for (; i < this._currentDownloads.length;) {
                                const t = this._currentDownloads[i];
                                t && t.libraryName === e.library.libraryName && this._currentDownloads.splice(i, 1), i++
                            }
                        }
                        processMissingLibraries() {
                            const t = this._missingMandatoryLibs.slice();
                            for (const e of t) {
                                if (!e) continue;
                                const t = this._figureMap.get(e);
                                if (t)
                                    for (const e of t) e && this.downloadLibrary(e)
                            }
                        }
                        isAvatarFigureContainerReady(t) {
                            return !(!this._isReady || !this._structure.renderManager.isReady || this.getAvatarFigurePendingLibraries(t).length)
                        }
                        getAvatarFigurePendingLibraries(t) {
                            const e = [];
                            if (!t || !this._structure) return e;
                            const s = this._structure.figureData;
                            if (!s) return e;
                            const i = t._Str_1016();
                            for (const n of i) {
                                const i = s._Str_740(n);
                                if (!i) continue;
                                const r = i._Str_1020(t.getPartSetId(n));
                                if (r)
                                    for (const t of r._Str_806) {
                                        if (!t) continue;
                                        const s = this._figureMap.get(t.type + ":" + t.id);
                                        if (void 0 !== s)
                                            for (const t of s) t && !t.isLoaded && (e.indexOf(t) >= 0 || e.push(t))
                                    }
                            }
                            return e
                        }
                        downloadAvatarFigure(t, e) {
                            if (!this._isReady || !this._structure.renderManager.isReady) return void this._pendingContainers.push([t, e]);
                            const s = t._Str_1008(),
                                i = this.getAvatarFigurePendingLibraries(t);
                            if (i && i.length) {
                                if (e && !e.disposed) {
                                    let t = this._figureListeners.get(s);
                                    t || (t = [], this._figureListeners.set(s, t)), t.push(e)
                                }
                                this._incompleteFigures.set(s, i);
                                for (const t of i) t && this.downloadLibrary(t)
                            } else e && !e.disposed && e.resetFigure(s)
                        }
                        downloadLibrary(t) {
                            t && !t.isLoaded && (this._pendingDownloadQueue.indexOf(t) >= 0 || this._currentDownloads.indexOf(t) >= 0 || (this._pendingDownloadQueue.push(t), this.processDownloadQueue()))
                        }
                        processDownloadQueue() {
                            for (; this._pendingDownloadQueue.length;) this._pendingDownloadQueue[0].downloadAsset(), this._currentDownloads.push(this._pendingDownloadQueue.shift())
                        }
                    }
                    return t.DOWNLOADER_READY = "AADM_DOWNLOADER_READY", t.LIBRARY_LOADED = "AADM_LIBRARY_LOADED", t.MAX_DOWNLOADS = 2, t
                })();
            class rt {
                constructor(t) {
                    this._parts = new Map, this.parseFigure(t)
                }
                _Str_1016() {
                    return this.partSets().keys()
                }
                _Str_744(t) {
                    return null !== this.partSets().get(t)
                }
                getPartSetId(t) {
                    const e = this.partSets().get(t);
                    return e ? e.get("setid") : 0
                }
                _Str_815(t) {
                    const e = this.partSets().get(t);
                    return e ? e.get("colorids") : null
                }
                _Str_830(t, e, s) {
                    const i = new Map;
                    i.set("type", t), i.set("setid", e), i.set("colorids", s);
                    const n = this.partSets();
                    n.delete(t), n.set(t, i)
                }
                _Str_923(t) {
                    this.partSets().delete(t)
                }
                _Str_1008() {
                    const t = [];
                    for (const e of this.partSets().keys()) {
                        if (!e) continue;
                        let s = [];
                        s.push(e), s.push(this.getPartSetId(e)), s = s.concat(this._Str_815(e)), t.push(s.join("-"))
                    }
                    return t.join(".")
                }
                partSets() {
                    return this._parts || (this._parts = new Map), this._parts
                }
                parseFigure(t) {
                    t || (t = "");
                    for (const e of t.split(".")) {
                        const t = e.split("-");
                        if (t.length >= 2) {
                            const e = t[0],
                                s = parseInt(t[1]),
                                i = [];
                            let n = 2;
                            for (; n < t.length;) i.push(parseInt(t[n])), n++;
                            this._Str_830(e, s, i)
                        }
                    }
                }
            }
            let ot = (() => {
                class t {
                    static generateTexture(e, s = null, i = u.m.NEAREST, n = 1) {
                        return e ? t.getRenderer().generateTexture(e, i, n, s) : null
                    }
                    static generateTextureFromImage(t) {
                        return t ? u.p.from(t) : null
                    }
                    static generateImage(e) {
                        return e ? t.getRenderer().extract.image(e) : null
                    }
                    static generateImageUrl(e) {
                        return e ? t.getRenderer().extract.base64(e) : null
                    }
                    static getRenderer() {
                        return t._renderer ? t._renderer : cp.instance.renderer
                    }
                    static setRenderer(e) {
                        t._renderer = e
                    }
                }
                return t._renderer = null, t
            })();
            class at {
                constructor(t, e = "", s = 0) {
                    this._actionType = t || "", this._actionParameter = e || "", this._definition = null, this._startFrame = s || 0, this._overridingAction = null
                }
                dispose() {
                    this._actionType = null, this._actionParameter = null, this._definition = null
                }
                get id() {
                    return this._definition ? this._definition.id + "_" + this._actionParameter : ""
                }
                get _Str_695() {
                    return this._actionType
                }
                get _Str_727() {
                    return this._actionParameter
                }
                set _Str_727(t) {
                    this._actionParameter = t
                }
                get _Str_742() {
                    return this._definition
                }
                set _Str_742(t) {
                    this._definition = t
                }
                get _Str_664() {
                    return this._startFrame
                }
                get _Str_707() {
                    return this._overridingAction
                }
                set _Str_707(t) {
                    this._overridingAction = t
                }
            }
            class ct {}
            let _t = (() => {
                class t {
                    constructor(t, e, s) {
                        if (this._id = t.id, this._animationFrame = parseInt(t.frame) || 0, this._dx = void 0 !== t.dx ? parseInt(t.dx) : 0, this._dy = void 0 !== t.dy ? parseInt(t.dy) : 0, this._dz = void 0 !== t.dz ? parseInt(t.dz) : 0, this._directionOffset = void 0 !== t.dd ? parseInt(t.dd) : 0, this._type = e, this._base = t.base || "", this._items = new Map, t.items)
                            for (const i of t.items) this._items.set(i.id, i.base);
                        "" !== this._base && this._Str_2108().toString(), s && (this._action = new at(s.state, this.base), this._action._Str_742 = s)
                    }
                    get items() {
                        return this._items
                    }
                    _Str_2108() {
                        let t = 0,
                            e = 0;
                        for (; e < this._base.length;) t += this._base.charCodeAt(e), e++;
                        return t
                    }
                    get id() {
                        return this._id
                    }
                    get _Str_891() {
                        return this._animationFrame
                    }
                    get dx() {
                        return this._dx
                    }
                    get dy() {
                        return this._dy
                    }
                    get dz() {
                        return this._dz
                    }
                    get dd() {
                        return this._directionOffset
                    }
                    get type() {
                        return this._type
                    }
                    get base() {
                        return this._base
                    }
                    get action() {
                        return this._action
                    }
                }
                return t.BODYPART = "bodypart", t.FX = "fx", t
            })();
            class ht {
                constructor(t, e, s) {
                    this._image = t, this._regPoint = e, this._offset = new u.j(0, 0), this._regPoint = e, this._isCacheable = s, this._Str_1225()
                }
                dispose() {
                    this._image && this._image.destroy({
                        children: !0
                    }), this._image = null, this._regPoint = null, this._offset = null
                }
                _Str_1225() {}
                _Str_1387(t) {
                    this._regPoint = t, this._Str_1225()
                }
                get image() {
                    return this._image
                }
                set image(t) {
                    this._image && this._image !== t && this._image.destroy({
                        children: !0
                    }), this._image = t
                }
                get _Str_1076() {
                    const t = this._regPoint.clone();
                    return t.x += this._offset.x, t.y += this._offset.y, t
                }
                set offset(t) {
                    this._offset = t, this._Str_1225()
                }
                get _Str_1807() {
                    return this._isCacheable
                }
            }
            let lt = (() => {
                    class t {}
                    return t.DIRECTION_TO_ANGLE = [45, 90, 135, 180, 225, 270, 315, 0], t.DIRECTION_IS_FLIPPED = [!1, !1, !1, !1, !0, !0, !0, !1], t.MIN_DIRECTION = 0, t.MAX_DIRECTION = 7, t
                })(),
                ut = (() => {
                    class t {}
                    return t.BODY = "bd", t.SHOES = "sh", t.LEGS = "lg", t.CHEST = "ch", t.WAIST_ACCESSORY = "wa", t.CHEST_ACCESSORY = "ca", t.HEAD = "hd", t.HAIR = "hr", t.FACE_ACCESSORY = "fa", t.EYE_ACCESSORY = "ea", t.HEAD_ACCESSORY = "ha", t.HEAD_ACCESSORY_EXTRA = "he", t.COAT_CHEST = "cc", t.CHEST_PRINT = "cp", t.LEFT_HAND_ITEM = "li", t.LEFT_HAND = "lh", t.LEFT_SLEEVE = "ls", t.RIGHT_HAND = "rh", t.RIGHT_SLEEVE = "rs", t.FACE = "fc", t.EYES = "ey", t.HAIR_BIG = "hrb", t.RIGHT_HAND_ITEM = "ri", t.LEFT_COAT_SLEEVE = "lc", t.RIGHT_COAT_SLEEVE = "rc", t._Str_1286 = [t.SHOES, t.LEGS, t.CHEST, t.WAIST_ACCESSORY, t.CHEST_ACCESSORY, t.HEAD, t.HAIR, t.FACE_ACCESSORY, t.EYE_ACCESSORY, t.HEAD_ACCESSORY, t.HEAD_ACCESSORY_EXTRA, t.COAT_CHEST, t.CHEST_PRINT], t
                })(),
                dt = (() => {
                    class t {}
                    return t.LARGE = "h", t.SMALL = "sh", t
                })(),
                gt = (() => {
                    class t {}
                    return t.VERTICAL = "vertical", t.SITTING = "sitting", t.HORIZONTAL = "horizontal", t.SWIM = "swim", t.SNOWWARS_HORIZONTAL = "swhorizontal", t
                })();
            class mt {
                constructor() {
                    this._Str_586 = new Map
                }
                _Str_1565(t, e) {
                    this._Str_1233 || (this._Str_1233 = t);
                    const s = this._Str_1961(this._Str_1233);
                    s && s._Str_1108(e), this._Str_1233 = t
                }
                dispose() {
                    if (!this._disposed) {
                        if (!this._Str_586) return;
                        this._Str_2089(0, 2147483647), this._Str_586.clear(), this._Str_586 = null, this._disposed = !0
                    }
                }
                _Str_2089(t, e) {
                    if (this._Str_586 && !this._disposed)
                        for (const [s, i] of this._Str_586.entries()) i && e - i._Str_1815() >= t && (i.dispose(), this._Str_586.delete(s))
                }
                _Str_2244() {
                    return this._Str_1233
                }
                setDirection(t) {
                    this._Str_1188 = t
                }
                getDirection() {
                    return this._Str_1188
                }
                _Str_1961(t = null) {
                    return this._Str_1233 ? (t || (t = this._Str_1233), this._Str_586.get(t._Str_707 ? t._Str_707 : t.id)) : null
                }
                _Str_1765(t, e) {
                    this._Str_586.set(t._Str_707 ? t._Str_707 : t.id, e)
                }
                _Str_587(t) {}
            }
            class pt {
                constructor() {
                    this._Str_586 = new Map, this._Str_1108(cp.instance.time)
                }
                dispose() {
                    if (this._Str_587("[dispose]"), this._Str_586) {
                        for (const t of this._Str_586.values()) t && t.dispose();
                        this._Str_586.clear()
                    }
                }
                _Str_2070(t) {
                    return this._Str_586.get(t.toString()) || null
                }
                _Str_2168(t, e) {
                    this._Str_586.set(t.toString(), e)
                }
                _Str_1108(t) {
                    this._Str_1509 = t
                }
                _Str_1815() {
                    return this._Str_1509
                }
                _Str_587(t) {}
            }
            class bt {
                constructor(t) {
                    this._partList = t, this._images = new Map
                }
                dispose() {
                    for (const t of this._images.values()) t && t.dispose();
                    this._images = null
                }
                _Str_1699() {
                    return this._partList
                }
                _Str_1629(t) {
                    return this._images.get(this._Str_2219(t)) || null
                }
                _Str_1924(t, e) {
                    const s = this._Str_2219(e),
                        i = this._images.get(s);
                    i && i.dispose(), this._images.set(s, t)
                }
                _Str_2219(t) {
                    let e = "";
                    for (const s of this._partList) e += s._Str_1206(t) + "/";
                    return e
                }
                _Str_587(t) {}
            }
            class Et {
                constructor(t, e, s, i, n, r = null) {
                    this._texture = t, this._container = r, this._rect = e, this._regPoint = s, this._flipH = i, this._color = n, i && (this._regPoint.x = -this._regPoint.x + e.width)
                }
                dispose() {
                    this._texture = null, this._regPoint = null, this._color = null
                }
                get texture() {
                    return this._texture
                }
                get container() {
                    return this._container
                }
                get rect() {
                    return this._rect
                }
                get _Str_1076() {
                    return this._regPoint
                }
                get flipH() {
                    return this._flipH
                }
                get color() {
                    return this._color
                }
                get _Str_1567() {
                    return new u.k(-this._regPoint.x, -this._regPoint.y, this._rect.width, this._rect.height)
                }
            }
            let ft = (() => {
                    class t {
                        constructor(t, e, s, i) {
                            this._structure = t, this._avatar = e, this._assets = s, this._scale = i, this._cache = new Map, this._canvas = null, this._disposed = !1, this._unionImages = [], this._matrix = new u.i, this._serverRenderData = []
                        }
                        dispose() {
                            if (!this._disposed) {
                                if (this._structure = null, this._avatar = null, this._assets = null, this._canvas = null, this._disposed = !0, this._cache) {
                                    for (const t of this._cache.values()) t && t.dispose();
                                    this._cache = null
                                }
                                if (this._unionImages) {
                                    for (const t of this._unionImages) t && t.dispose();
                                    this._unionImages = []
                                }
                            }
                        }
                        _Str_1086(t = 6e4) {
                            const e = cp.instance.time;
                            if (this._cache)
                                for (const s of this._cache.values()) s && s._Str_2089(t, e)
                        }
                        _Str_741(t) {
                            if (this._cache)
                                for (const e of this._cache.values()) e && e._Str_1565(t, 0)
                        }
                        setDirection(t, e) {
                            const s = this._structure._Str_1695(t);
                            if (s)
                                for (const i of s) {
                                    const t = this._Str_1050(i);
                                    t && t.setDirection(e)
                                }
                        }
                        _Str_1565(t, e) {
                            const s = this._structure._Str_2021(t, this._avatar);
                            for (const i of s) {
                                const s = this._Str_1050(i);
                                s && s._Str_1565(t, e)
                            }
                        }
                        _Str_2014(t) {
                            if (this._geometryType !== t) {
                                if (this._geometryType === gt.SITTING && t === gt.VERTICAL || this._geometryType === gt.VERTICAL && t === gt.SITTING || this._geometryType === gt.SNOWWARS_HORIZONTAL && (t = gt.SNOWWARS_HORIZONTAL)) return this._geometryType = t, void(this._canvas = null);
                                this._Str_1086(0), this._geometryType = t, this._canvas = null
                            }
                        }
                        _Str_1629(t, e, s = !1) {
                            let i = this._Str_1050(t);
                            i || (i = new mt, this._cache.set(t, i));
                            let n = i.getDirection(),
                                r = i._Str_2244(),
                                o = e;
                            r._Str_742._Str_812 && (o -= r._Str_664);
                            let a = r,
                                c = [],
                                _ = new Map;
                            const h = new u.j;
                            if (r && r._Str_742 && r._Str_742._Str_861) {
                                let s = n;
                                const i = this._structure._Str_720(r._Str_742.state + "." + r._Str_727),
                                    l = e - r._Str_664;
                                if (i) {
                                    const e = i._Str_607(l, t, r._Str_707);
                                    e && (s = n + e.dd, e.dd < 0 ? s < 0 ? s = 8 + s : s > 7 && (s = 8 - s) : s < 0 ? s += 8 : s > 7 && (s -= 8), this._scale === dt.LARGE ? (h.x = e.dx, h.y = e.dy) : (h.x = e.dx / 2, h.y = e.dy / 2), o = e._Str_891, e.action && (r = e.action), e.type === _t.BODYPART ? (null != e.action && (a = e.action), n = s) : e.type === _t.FX && (n = s), _ = e.items), c = i._Str_652
                                }
                            }
                            let l = i._Str_1961(a);
                            l && !s || (l = new pt, i._Str_1765(a, l));
                            let d = l._Str_2070(n);
                            if (!d || s) {
                                const e = this._structure._Str_713(t, this._avatar.getFigure(), a, this._geometryType, n, c, this._avatar, _);
                                d = new bt(e), l._Str_2168(n, d)
                            }
                            let g = d._Str_1629(o);
                            if (!g || s) {
                                const t = d._Str_1699();
                                if (g = this._Str_1834(n, t, o, r, s), !g || s) return null;
                                g._Str_1807 && d._Str_1924(g, o)
                            }
                            const m = this._structure._Str_1888(a, n, o, t);
                            return h.x += m.x, h.y += m.y, g.offset = h, g
                        }
                        _Str_1009() {
                            return this._serverRenderData = [], this._serverRenderData
                        }
                        _Str_1050(t) {
                            let e = this._cache.get(t);
                            return e || (e = new mt, this._cache.set(t, e)), e
                        }
                        _Str_1834(t, e, s, i, n = !1) {
                            if (!e || !e.length) return null;
                            if (!this._canvas && (this._canvas = this._structure._Str_1664(this._scale, this._geometryType), !this._canvas)) return null;
                            const r = lt.DIRECTION_IS_FLIPPED[t] || !1;
                            let o = i._Str_742._Str_778,
                                a = !0,
                                c = e.length - 1;
                            for (; c >= 0;) {
                                const i = e[c];
                                let _ = 16777215;
                                if ((7 != t || "fc" !== i._Str_1669 && "ey" !== i._Str_1669) && ("ri" !== i._Str_1669 || i._Str_1502)) {
                                    const e = i._Str_1502,
                                        c = i._Str_2258(s);
                                    let h = i._Str_1669,
                                        l = 0;
                                    c ? (l = c.number, c._Str_778 && "" !== c._Str_778 && (o = c._Str_778)) : l = i._Str_1674(s);
                                    let d = t,
                                        g = !1;
                                    r && ("wav" === o && (h === ut.LEFT_HAND || h === ut.LEFT_SLEEVE || h === ut.LEFT_COAT_SLEEVE) || "drk" === o && (h === ut.RIGHT_HAND || h === ut.RIGHT_SLEEVE || h === ut.RIGHT_COAT_SLEEVE) || "blw" === o && h === ut.RIGHT_HAND || "sig" === o && h === ut.LEFT_HAND || "respect" === o && h === ut.LEFT_HAND || h === ut.RIGHT_HAND_ITEM || h === ut.LEFT_HAND_ITEM || h === ut.CHEST_PRINT ? g = !0 : (4 === t ? d = 2 : 5 === t ? d = 1 : 6 === t && (d = 0), i._Str_1666 !== h && (h = i._Str_1666)));
                                    let m = this._scale + "_" + o + "_" + h + "_" + e + "_" + d + "_" + l,
                                        p = this._assets.getAsset(m);
                                    if (p || (m = this._scale + "_std_" + h + "_" + e + "_" + d + "_0", p = this._assets.getAsset(m)), p) {
                                        const t = p.texture;
                                        if (t && t.valid && t.baseTexture) {
                                            i.isColorable && i.color && (_ = i.color._Str_915);
                                            const e = new u.j(-p.x, -p.y);
                                            if (g && (e.x = e.x + (this._scale === dt.LARGE ? 65 : 31)), n) {
                                                const s = new ct;
                                                s.name = this._assets._Str_2125(m), s.x = -e.x - 33, s.y = -e.y, s.z = -1e-4 * this._serverRenderData.length, s.width = p.rectangle.width, s.height = p.rectangle.height, s.flipH = g, "lay" === o && (s.x = s.x + 53), r && (s.flipH = !s.flipH, s.x = s.flipH ? -s.x - t.width : s.x + 65), i.isColorable && (s.color = "" + _), this._serverRenderData.push(s)
                                            }
                                            this._unionImages.push(new Et(t, p.rectangle, e, g, _))
                                        } else a = !1
                                    }
                                }
                                c--
                            }
                            if (!this._unionImages.length) return null;
                            const _ = this._Str_1236(this._unionImages, r),
                                h = new u.j(-_._Str_1076.x, (this._scale === dt.LARGE ? this._canvas.height - 16 : this._canvas.height - 8) - _._Str_1076.y);
                            r && "lay" !== o && (h.x = h.x + (this._scale === dt.LARGE ? 67 : 31));
                            let l = this._unionImages.length - 1;
                            for (; l >= 0;) {
                                const t = this._unionImages.pop();
                                t && t.dispose(), l--
                            }
                            return new ht(_.container, h, a)
                        }
                        _Str_1652(t) {
                            let e = (255 * t).toString(16);
                            return e.length < 2 && (e = "0" + e), e
                        }
                        _Str_1236(t, e) {
                            const s = new u.k;
                            for (const o of t) o && s.enlarge(o._Str_1567);
                            const i = new u.j(-s.x, -s.y),
                                n = new u.d,
                                r = new u.n(u.p.EMPTY);
                            r.width = s.width, r.height = s.height, n.addChild(r);
                            for (const o of t) {
                                if (!o) continue;
                                const t = o.texture,
                                    s = o.color,
                                    r = !(e && o.flipH) && (e || o.flipH),
                                    a = i.clone();
                                a.x -= o._Str_1076.x, a.y -= o._Str_1076.y, e && (a.x = n.width - (a.x + o.rect.width)), r ? (this._matrix.a = -1, this._matrix.tx = o.rect.x + o.rect.width + a.x, this._matrix.ty = a.y - o.rect.y) : (this._matrix.a = 1, this._matrix.tx = a.x - o.rect.x, this._matrix.ty = a.y - o.rect.y);
                                const c = new u.n(t);
                                c.tint = s, c.transform.setFromMatrix(this._matrix), n.addChild(c)
                            }
                            return new Et(null, n.getLocalBounds(), i, e, null, n)
                        }
                    }
                    return t._Str_2189 = 6e4, t
                })(),
                St = (() => {
                    class t {
                        static getExpressionTimeout(t) {
                            switch (t = parseInt(t)) {
                                case 1:
                                    return 5e3;
                                case 2:
                                    return 1400;
                                case 3:
                                case 4:
                                    return 2e3;
                                case 5:
                                    return 0;
                                case 6:
                                    return 700;
                                case 7:
                                    return 2e3;
                                case 8:
                                case 9:
                                case 10:
                                    return 1500;
                                default:
                                    return 0
                            }
                        }
                        static getExpressionId(e) {
                            return t.EXPRESSION_MAP.indexOf(e)
                        }
                        static getExpression(e) {
                            return e > t.EXPRESSION_MAP.length ? null : t.EXPRESSION_MAP[e]
                        }
                        static getGestureId(e) {
                            return t.GESTURE_MAP.indexOf(e)
                        }
                        static getGesture(e) {
                            return e > t.GESTURE_MAP.length ? null : t.GESTURE_MAP[e]
                        }
                        static idToAvatarActionState(t) {
                            return "Lay" === t ? "lay" : "Float" === t ? "float" : "Swim" === t ? "swim" : "Sit" === t ? "sit" : "Respect" === t ? "respect" : "Wave" === t ? "wave" : "Idle" === t ? "idle" : "Dance" === t ? "dance" : "UseItem" === t ? "usei" : "CarryItem" === t ? "cri" : "Talk" === t ? "talk" : "Sleep" === t ? "Sleep" : "Move" === t ? "mv" : "std"
                        }
                    }
                    return t.CARRY_OBJECT = "cri", t.DANCE = "dance", t.EFFECT = "fx", t.EXPRESSION = "expression", t.EXPRESSION_BLOW_A_KISS = "blow", t.EXPRESSION_CRY = "cry", t.EXPRESSION_IDLE = "idle", t.EXPRESSION_LAUGH = "laugh", t.EXPRESSION_RESPECT = "respect", t.EXPRESSION_RIDE_JUMP = "ridejump", t.EXPRESSION_SNOWBOARD_OLLIE = "sbollie", t.EXPRESSION_SNOWBORD_360 = "sb360", t.EXPRESSION_WAVE = "wave", t.GESTURE = "gest", t.GESTURE_AGGRAVATED = "agr", t.GESTURE_SAD = "sad", t.GESTURE_SMILE = "sml", t.GESTURE_SURPRISED = "srp", t.GUIDE_STATUS = "guide", t.MUTED = "muted", t.PET_GESTURE_BLINK = "eyb", t.PET_GESTURE_CRAZY = "crz", t.PET_GESTURE_JOY = "joy", t.PET_GESTURE_MISERABLE = "mis", t.PET_GESTURE_PUZZLED = "puz", t.PET_GESTURE_TONGUE = "tng", t.PLAYING_GAME = "playing_game", t.POSTURE = "posture", t.POSTURE_FLOAT = "float", t.POSTURE_LAY = "lay", t.POSTURE_SIT = "sit", t.POSTURE_STAND = "std", t.POSTURE_SWIM = "swim", t.POSTURE_WALK = "mv", t.SIGN = "sign", t.SLEEP = "sleep", t.SNOWWAR_DIE_BACK = "swdieback", t.SNOWWAR_DIE_FRONT = "swdiefront", t.SNOWWAR_PICK = "swpick", t.SNOWWAR_RUN = "swrun", t.SNOWWAR_THROW = "swthrow", t.TALK = "talk", t.BLINK = "blink", t.TYPING = "typing", t.USE_OBJECT = "usei", t.VOTE = "vote", t.GESTURE_MAP = ["", t.GESTURE_SMILE, t.GESTURE_AGGRAVATED, t.GESTURE_SURPRISED, t.GESTURE_SAD, t.PET_GESTURE_JOY, t.PET_GESTURE_CRAZY, t.PET_GESTURE_TONGUE, t.PET_GESTURE_BLINK, t.PET_GESTURE_MISERABLE, t.PET_GESTURE_PUZZLED], t.EXPRESSION_MAP = ["", t.EXPRESSION_WAVE, t.EXPRESSION_BLOW_A_KISS, t.EXPRESSION_LAUGH, t.EXPRESSION_CRY, t.EXPRESSION_IDLE, t.DANCE, t.EXPRESSION_RESPECT, t.EXPRESSION_SNOWBOARD_OLLIE, t.EXPRESSION_SNOWBORD_360, t.EXPRESSION_RIDE_JUMP], t
                })(),
                It = (() => {
                    class t {}
                    return t.FULL = "full", t.HEAD = "head", t.BODY = "body", t
                })(),
                Rt = (() => {
                    class t {
                        constructor(e, s, i, n, r, o = null) {
                            this._frameCounter = 0, this._directionOffset = 0, this._isAnimating = !1, this._animationHasResetOnToggle = !1, this._actionsSorted = !1, this._fullImageCacheSize = 5, this._isCachedImage = !1, this._useFullImageCache = !1, this._effectIdInUse = -1, this._cachedBodyPartsDirection = -1, this._cachedBodyPartsGeometryType = null, this._cachedBodyPartsAvatarSet = null, this._canvasOffsets = [], this._actions = [], this._cachedBodyParts = [], this._changes = !0, this._disposed = !1, this._effectManager = r, this._structure = e, this._assets = s, this._scale = n, this._effectListener = o, null == this._scale && (this._scale = dt.LARGE), null == i && (i = new rt("hr-893-45.hd-180-2.ch-210-66.lg-270-82.sh-300-91.wa-2007-.ri-1-")), this._figure = i, this._cache = new ft(this._structure, this, this._assets, this._scale), this.setDirection(t.DEFAULT_AVATAR_SET, t.DEFAULT_DIRECTION), this._actions = [], this._defaultAction = new at(St.POSTURE_STAND), this._defaultAction._Str_742 = this._structure._Str_1675(t.DEFAULT_ACTION), this.resetActions(), this._fullImageCache = new x, this._animationFrameCount = 0
                        }
                        getServerRenderData() {
                            return this.getAvatarPartsForCamera(It.FULL), this._cache._Str_1009()
                        }
                        dispose() {
                            if (!this._disposed) {
                                if (this._structure = null, this._assets = null, this._mainAction = null, this._figure = null, this._avatarSpriteData = null, this._actions = null, this._image && (this._image.destroy(), this._image = null), this._cache && (this._cache.dispose(), this._cache = null), this._fullImageCache) {
                                    for (const t of this._fullImageCache.getValues()) t && t.destroy();
                                    this._fullImageCache = null
                                }
                                this._image = null, this._canvasOffsets = null, this._disposed = !0
                            }
                        }
                        get disposed() {
                            return this._disposed
                        }
                        getFigure() {
                            return this._figure
                        }
                        getScale() {
                            return this._scale
                        }
                        getPartColor(t) {
                            return this._structure._Str_867(this._figure, t)
                        }
                        setDirection(t, e) {
                            (e += this._directionOffset) < lt.MIN_DIRECTION && (e = lt.MAX_DIRECTION + (e + 1)), e > lt.MAX_DIRECTION && (e -= lt.MAX_DIRECTION + 1), this._structure._Str_1939(t) && (this._mainDirection = e), t !== It.HEAD && t !== It.FULL || (t === It.HEAD && this.isHeadTurnPreventedByAction() && (e = this._mainDirection), this._headDirection = e), this._cache.setDirection(t, e), this._changes = !0
                        }
                        setDirectionAngle(t, e) {
                            this.setDirection(t, Math.floor(e / 45))
                        }
                        getSprites() {
                            return this._sprites
                        }
                        getCanvasOffsets() {
                            return this._canvasOffsets
                        }
                        getLayerData(t) {
                            return this._structure._Str_1881(t.animation.id, this._frameCounter, t.id)
                        }
                        updateAnimationByFrames(t = 1) {
                            this._frameCounter += t, this._changes = !0
                        }
                        resetAnimationFrameCounter() {
                            this._frameCounter = 0, this._changes = !0
                        }
                        getFullImageCacheKey() {
                            if (!this._useFullImageCache) return null;
                            if (1 == this._sortedActions.length && this._mainDirection == this._headDirection) return this._mainDirection + this._currentActionsString + this._frameCounter % 4;
                            if (2 == this._sortedActions.length)
                                for (const t of this._sortedActions) {
                                    if ("fx" == t._Str_695 && ("33" == t._Str_727 || "34" == t._Str_727 || "35" == t._Str_727 || "36" == t._Str_727)) return this._mainDirection + this._currentActionsString + 0;
                                    if ("fx" == t._Str_695 && ("38" == t._Str_727 || "39" == t._Str_727)) return this._mainDirection + "_" + this._headDirection + this._currentActionsString + this._frameCounter % 11;
                                    if ("dance" === t._Str_695 && ("1" === t._Str_727 || "2" === t._Str_727 || "3" === t._Str_727 || "4" === t._Str_727)) {
                                        let e = this._frameCounter % 8;
                                        return "3" === t._Str_727 && (e = this._frameCounter % 10), "4" === t._Str_727 && (e = this._frameCounter % 16), this._mainDirection + t._Str_695 + t._Str_727 + e
                                    }
                                }
                            return null
                        }
                        getBodyParts(t, e, s) {
                            return s == this._cachedBodyPartsDirection && e == this._cachedBodyPartsGeometryType && t == this._cachedBodyPartsAvatarSet || (this._cachedBodyPartsDirection = s, this._cachedBodyPartsGeometryType = e, this._cachedBodyPartsAvatarSet = t, this._cachedBodyParts = this._structure._Str_755(t, e, s)), this._cachedBodyParts
                        }
                        getAvatarPartsForCamera(t) {
                            let e;
                            if (null == this._mainAction) return;
                            if (null == this._structure._Str_1664(this._scale, this._mainAction._Str_742._Str_868)) return;
                            const s = this.getBodyParts(t, this._mainAction._Str_742._Str_868, this._mainDirection);
                            let i = s.length - 1;
                            for (; i >= 0;) e = s[i], this._cache._Str_1629(e, this._frameCounter, !0), i--
                        }
                        getImage(t, e, s = 1, i = !0) {
                            if (!this._changes) return this._image;
                            if (!this._mainAction) return null;
                            this._actionsSorted || this.endActionAppends();
                            const n = this._structure._Str_1664(this._scale, this._mainAction._Str_742._Str_868);
                            if (!n) return null;
                            !this._image || this._image.width === n.width && this._image.height === n.height || (this._reusableTexture && (this._reusableTexture.destroy(!0), this._reusableTexture = null), this._image = null, this._isCachedImage = !1);
                            const r = this.getBodyParts(t, this._mainAction._Str_742._Str_868, this._mainDirection);
                            this._image = null;
                            const o = new u.d;
                            let a = !0,
                                c = r.length - 1;
                            for (; c >= 0;) {
                                const t = this._cache._Str_1629(r[c], this._frameCounter);
                                if (t) {
                                    const e = t.image;
                                    if (!e) return o.destroy({
                                        children: !0
                                    }), null;
                                    a = a && t._Str_1807;
                                    const s = t._Str_1076.clone();
                                    if (s) {
                                        s.x += n.offset.x, s.y += n.offset.y, s.x += n._Str_1076.x, s.y += n._Str_1076.y;
                                        const t = new u.d;
                                        t.addChild(e), t && (t.position.set(s.x, s.y), o.addChild(t))
                                    }
                                }
                                c--
                            }
                            return this._avatarSpriteData && this._avatarSpriteData._Str_832 && this.convertToGrayscale(o), i ? (this._reusableTexture ? cp.instance.renderer.render(o, this._reusableTexture, !0) : this._reusableTexture = ot.generateTexture(o, new u.k(0, 0, n.width, n.height)), this._reusableTexture ? (this._image = this._reusableTexture, this._changes = !1, this._image) : null) : ot.generateTexture(o, new u.k(0, 0, n.width, n.height))
                        }
                        getImageAsSprite(t, e = 1) {
                            if (!this._mainAction) return null;
                            this._actionsSorted || this.endActionAppends();
                            const s = this._structure._Str_1664(this._scale, this._mainAction._Str_742._Str_868);
                            if (!s) return null;
                            const i = this.getBodyParts(t, this._mainAction._Str_742._Str_868, this._mainDirection),
                                n = new u.n,
                                r = new u.n(u.p.EMPTY);
                            r.width = s.width, r.height = s.height, n.addChild(r);
                            let o = i.length - 1;
                            for (; o >= 0;) {
                                const t = this._cache._Str_1629(i[o], this._frameCounter);
                                if (t) {
                                    const e = t.image;
                                    if (!e) return n.destroy({
                                        children: !0
                                    }), null;
                                    const i = t._Str_1076.clone();
                                    if (i) {
                                        i.x += s.offset.x, i.y += s.offset.y, i.x += s._Str_1076.x, i.y += s._Str_1076.y;
                                        const t = new u.d;
                                        t.addChild(e), t.position.set(i.x, i.y), n.addChild(t)
                                    }
                                }
                                o--
                            }
                            return n
                        }
                        getCroppedImage(t, e = 1) {
                            if (!this._mainAction) return null;
                            this._actionsSorted || this.endActionAppends();
                            const s = this._structure._Str_1664(this._scale, this._mainAction._Str_742._Str_868);
                            if (!s) return null;
                            const i = this.getBodyParts(t, this._mainAction._Str_742._Str_868, this._mainDirection),
                                n = new u.d,
                                r = new u.n(u.p.EMPTY);
                            r.width = s.width, r.height = s.height, n.addChild(r);
                            let o = i.length - 1;
                            for (; o >= 0;) {
                                const t = this._cache._Str_1629(i[o], this._frameCounter);
                                if (t) {
                                    const e = t.image;
                                    if (!e) return n.destroy({
                                        children: !0
                                    }), null;
                                    const i = t._Str_1076.clone();
                                    if (i) {
                                        i.x += s.offset.x, i.y += s.offset.y, i.x += s._Str_1076.x, i.y += s._Str_1076.y;
                                        const t = new u.d;
                                        t.addChild(e), t && (t.position.set(i.x, i.y), n.addChild(t))
                                    }
                                }
                                o--
                            }
                            return cp.instance.renderer.extract.image(n) || null
                        }
                        getFullImage(t) {
                            const e = this._fullImageCache.getValue(t);
                            return e ? (e.valid || (this._fullImageCache.remove(t), e.destroy(!0)), e) : null
                        }
                        cacheFullImage(t, e) {
                            const s = this._fullImageCache.getValue(t);
                            if (s && (this._fullImageCache.remove(t), s.destroy(!0)), this._fullImageCache.length === this._fullImageCacheSize) {
                                const t = this._fullImageCache.getKey(0);
                                t && this._fullImageCache.remove(t).destroy(!0)
                            }
                            this._fullImageCache.add(t, e)
                        }
                        getAsset(t) {
                            return this._assets.getAsset(t)
                        }
                        getDirection() {
                            return this._mainDirection
                        }
                        initActionAppends() {
                            this._actions = [], this._actionsSorted = !1, this._currentActionsString = "", this._useFullImageCache = !1
                        }
                        endActionAppends() {
                            if (this.sortActions()) {
                                for (const t of this._sortedActions) t._Str_695 === St.EFFECT && (this._effectManager.isAvatarEffectReady(parseInt(t._Str_727)) || this._effectManager.downloadAvatarEffect(parseInt(t._Str_727), this));
                                this.resetActions(), this.setActionsToParts()
                            }
                        }
                        appendAction(t, ...e) {
                            let s = "";
                            switch (this._actionsSorted = !1, e && e.length > 0 && (s = e[0]), null != s && (s = s.toString()), t) {
                                case St.POSTURE:
                                    switch (s) {
                                        case St.POSTURE_LAY:
                                            this.setDirection(It.FULL, 0 == this._mainDirection ? 4 : 2);
                                        case St.POSTURE_WALK:
                                        case St.POSTURE_STAND:
                                            this._useFullImageCache = !0, this._useFullImageCache = !0;
                                        case St.POSTURE_SWIM:
                                        case St.POSTURE_FLOAT:
                                        case St.POSTURE_SIT:
                                        case St.SNOWWAR_RUN:
                                        case St.SNOWWAR_DIE_FRONT:
                                        case St.SNOWWAR_DIE_BACK:
                                        case St.SNOWWAR_PICK:
                                        case St.SNOWWAR_THROW:
                                            this.addActionData(s)
                                    }
                                    break;
                                case St.GESTURE:
                                    switch (s) {
                                        case St.GESTURE_AGGRAVATED:
                                        case St.GESTURE_SAD:
                                        case St.GESTURE_SMILE:
                                        case St.GESTURE_SURPRISED:
                                            this.addActionData(s)
                                    }
                                    break;
                                case St.EFFECT:
                                    "33" !== s && "34" !== s && "35" !== s && "36" !== s && "38" !== s && "39" !== s || (this._useFullImageCache = !0);
                                case St.DANCE:
                                case St.TALK:
                                case St.EXPRESSION_WAVE:
                                case St.SLEEP:
                                case St.SIGN:
                                case St.EXPRESSION_RESPECT:
                                case St.EXPRESSION_BLOW_A_KISS:
                                case St.EXPRESSION_LAUGH:
                                case St.EXPRESSION_CRY:
                                case St.EXPRESSION_IDLE:
                                case St.EXPRESSION_SNOWBOARD_OLLIE:
                                case St.EXPRESSION_SNOWBORD_360:
                                case St.EXPRESSION_RIDE_JUMP:
                                    this.addActionData(t, s);
                                    break;
                                case St.CARRY_OBJECT:
                                case St.USE_OBJECT:
                                    {
                                        const e = this._structure._Str_2018(t);e && (s = e._Str_1350(s)),
                                        this.addActionData(t, s);
                                        break
                                    }
                            }
                            return !0
                        }
                        addActionData(t, e = "") {
                            let s;
                            this._actions || (this._actions = []);
                            let i = 0;
                            for (; i < this._actions.length;) {
                                if (s = this._actions[i], s._Str_695 == t && s._Str_727 == e) return;
                                i++
                            }
                            this._actions.push(new at(t, e, this._frameCounter))
                        }
                        isAnimating() {
                            return this._isAnimating || this._animationFrameCount > 1
                        }
                        resetActions() {
                            return this._animationHasResetOnToggle = !1, this._isAnimating = !1, this._sprites = [], this._avatarSpriteData = null, this._directionOffset = 0, this._structure._Str_2101(this), this._mainAction = this._defaultAction, this._mainAction._Str_742 = this._defaultAction._Str_742, this.resetBodyPartCache(this._defaultAction), !0
                        }
                        isHeadTurnPreventedByAction() {
                            let t, e;
                            if (null == this._sortedActions) return !1;
                            for (const s of this._sortedActions) t = this._structure._Str_2018(s._Str_695), null != t && t._Str_715(s._Str_727) && (e = !0);
                            return e
                        }
                        sortActions() {
                            let t, e, s;
                            if (this._currentActionsString = "", this._sortedActions = this._structure._Str_711(this._actions), this._animationFrameCount = this._structure._Str_1936(this._sortedActions), this._sortedActions) {
                                this._canvasOffsets = this._structure._Str_781(this._sortedActions, this._scale, this._mainDirection);
                                for (const s of this._sortedActions)
                                    if (this._currentActionsString = this._currentActionsString + (s._Str_695 + s._Str_727), s._Str_695 === St.EFFECT) {
                                        const i = parseInt(s._Str_727);
                                        this._effectIdInUse !== i && (t = !0), this._effectIdInUse = i, e = !0
                                    }
                                e || (this._effectIdInUse > -1 && (t = !0), this._effectIdInUse = -1), t && this._cache._Str_1086(0), this._lastActionsString != this._currentActionsString && (s = !0, this._lastActionsString = this._currentActionsString)
                            } else this._canvasOffsets = [0, 0, 0], "" !== this._lastActionsString && (s = !0, this._lastActionsString = "");
                            return this._actionsSorted = !0, s
                        }
                        setActionsToParts() {
                            if (null == !this._sortedActions) return;
                            const t = cp.instance.time,
                                e = [];
                            for (const s of this._sortedActions) e.push(s._Str_695);
                            for (const s of this._sortedActions)
                                if (s && s._Str_742 && s._Str_742._Str_861) {
                                    const t = this._structure._Str_720(s._Str_742.state + "." + s._Str_727);
                                    if (t && t._Str_1892()) {
                                        const i = t._Str_1571();
                                        if (i)
                                            for (const n of i) e.indexOf(n) >= 0 && (s._Str_707 = t._Str_707(n))
                                    }
                                    t && t.resetOnToggle && (this._animationHasResetOnToggle = !0)
                                }
                            for (const s of this._sortedActions)
                                if (s && s._Str_742 && (s._Str_742._Str_861 && "" === s._Str_727 && (s._Str_727 = "1"), this.setActionToParts(s, t), s._Str_742._Str_861)) {
                                    this._isAnimating = s._Str_742._Str_801(s._Str_727);
                                    const t = this._structure._Str_720(s._Str_742.state + "." + s._Str_727);
                                    t && (this._sprites = this._sprites.concat(t._Str_786), t._Str_776() && (this._directionOffset = t._Str_1493.offset), t._Str_872() && (this._avatarSpriteData = t._Str_1475))
                                }
                        }
                        setActionToParts(t, e) {
                            null != t && null != t._Str_742 && "" != t._Str_742._Str_778 && (t._Str_742._Str_779 && (this._mainAction = t, this._cache._Str_2014(t._Str_742._Str_868)), this._cache._Str_1565(t, e), this._changes = !0)
                        }
                        resetBodyPartCache(t) {
                            t && "" !== t._Str_742._Str_778 && (t._Str_742._Str_779 && (this._mainAction = t, this._cache._Str_2014(t._Str_742._Str_868)), this._cache._Str_741(t), this._changes = !0)
                        }
                        get avatarSpriteData() {
                            return this._avatarSpriteData
                        }
                        convertToGrayscale(e, s = "CHANNELS_EQUAL") {
                            let i = .33,
                                n = .33,
                                r = .33;
                            switch (s) {
                                case t.CHANNELS_UNIQUE:
                                    i = .3, n = .59, r = .11;
                                    break;
                                case t.CHANNELS_RED:
                                    i = 1, n = 0, r = 0;
                                    break;
                                case t.CHANNELS_GREEN:
                                    i = 0, n = 1, r = 0;
                                    break;
                                case t.CHANNELS_BLUE:
                                    i = 0, n = 0, r = 1;
                                    break;
                                case t.CHANNELS_DESATURATED:
                                    i = .3086, n = .6094, r = .082
                            }
                            const o = new u.r.ColorMatrixFilter;
                            return o.matrix = [i, n, r, 0, 0, i, n, r, 0, 0, i, n, r, 0, 0, 0, 0, 0, 1, 0], e.filters = [o], e
                        }
                        errorThis(t) {}
                        logThis(t) {}
                        isPlaceholder() {
                            return !1
                        }
                        forceActionUpdate() {
                            this._lastActionsString = ""
                        }
                        get animationHasResetOnToggle() {
                            return this._animationHasResetOnToggle
                        }
                        get mainAction() {
                            return this._mainAction._Str_695
                        }
                        resetEffect(t) {
                            t === this._effectIdInUse && (this.resetActions(), this.setActionsToParts(), this._animationHasResetOnToggle = !0, this._changes = !0, this._effectListener && this._effectListener.resetEffect(t))
                        }
                    }
                    return t.CHANNELS_EQUAL = "CHANNELS_EQUAL", t.CHANNELS_UNIQUE = "CHANNELS_UNIQUE", t.CHANNELS_RED = "CHANNELS_RED", t.CHANNELS_GREEN = "CHANNELS_GREEN", t.CHANNELS_BLUE = "CHANNELS_BLUE", t.CHANNELS_DESATURATED = "CHANNELS_DESATURATED", t.DEFAULT_ACTION = "Default", t.DEFAULT_DIRECTION = 2, t.DEFAULT_AVATAR_SET = It.FULL, t
                })();
            class vt {
                constructor(t) {
                    this._id = parseInt(t.id), this._value = parseInt(t.id), this._prevents = t.prevents || [], this._preventHeadTurn = t.preventHeadTurn || !1, this._isAnimated = !0, void 0 !== t.animated && !1 === t.animated && (this._isAnimated = !1)
                }
                get id() {
                    return this._id
                }
                get value() {
                    return this._value
                }
                get prevents() {
                    return this._prevents
                }
                get _Str_1891() {
                    return this._preventHeadTurn
                }
                get _Str_801() {
                    return this._isAnimated
                }
            }
            class Tt {
                constructor(t) {
                    if (this._id = t.id, this._state = t.state, this._precedence = t.precedence, this._activePartSet = t.activePartSet, this._assetPartDefinition = t.assetPartDefinition, this._lay = t.lay, this._geometryType = t.geometryType, this._isMain = t.main || !1, this._isDefault = t.isDefault || !1, this._isAnimation = t.animation || !1, this._startFromFrameZero = t.startFromFrameZero || !1, this._prevents = t.prevents || [], this._preventHeadTurn = t.preventHeadTurn || !1, this._types = new Map, this._params = new Map, this._defaultParameterValue = "", this._canvasOffsets = null, t.params && t.params.length > 0)
                        for (const e of t.params) e && ("default" === e.id ? this._defaultParameterValue = e.value : this._params.set(e.id, e.value));
                    if (t.types && t.types.length > 0)
                        for (const e of t.types) {
                            if (!e) continue;
                            const t = new vt(e);
                            this._types.set(t.id, t)
                        }
                }
                _Str_772(t, e, s) {
                    this._canvasOffsets || (this._canvasOffsets = new Map);
                    let i = this._canvasOffsets.get(t);
                    i || (i = new Map, this._canvasOffsets.set(t, i)), i.set(e, s)
                }
                _Str_805(t, e) {
                    if (!this._canvasOffsets) return null;
                    const s = this._canvasOffsets.get(t);
                    return s ? s.get(e) : null
                }
                getType(t) {
                    return t && this._types.get(parseInt(t)) || null
                }
                _Str_1350(t) {
                    return t ? this._params.get(t) || this._defaultParameterValue : ""
                }
                _Str_733(t) {
                    return this._prevents.concat(this._Str_1889(t))
                }
                _Str_1889(t) {
                    if (!t) return [];
                    const e = this._types.get(parseInt(t));
                    return e ? e.prevents : []
                }
                _Str_715(t) {
                    if (!t) return this._preventHeadTurn;
                    const e = this.getType(t);
                    return e ? e._Str_1891 : this._preventHeadTurn
                }
                _Str_801(t) {
                    if (!t) return !0;
                    const e = this.getType(t);
                    return !e || e._Str_801
                }
                get id() {
                    return this._id
                }
                get state() {
                    return this._state
                }
                get precedence() {
                    return this._precedence
                }
                get activePartSet() {
                    return this._activePartSet
                }
                get _Str_778() {
                    return this._assetPartDefinition
                }
                get lay() {
                    return this._lay
                }
                get _Str_868() {
                    return this._geometryType
                }
                get _Str_779() {
                    return this._isMain
                }
                get _Str_804() {
                    return this._isDefault
                }
                get _Str_861() {
                    return this._isAnimation
                }
                get _Str_812() {
                    return this._startFromFrameZero
                }
                get prevents() {
                    return this._prevents
                }
                get preventHeadTurn() {
                    return this._preventHeadTurn
                }
                get params() {
                    return this._params
                }
            }
            class Ot {
                constructor(t, e) {
                    this._assets = t, this._actions = new Map, this._defaultAction = null, this._Str_1620(e)
                }
                _Str_1620(t) {
                    if (t) {
                        for (const e of t.actions) {
                            if (!e || !e.state) continue;
                            const t = new Tt(e);
                            this._actions.set(t.state, t)
                        }
                        t.actionOffsets && this._Str_1767(t.actionOffsets)
                    }
                }
                _Str_1767(t) {
                    if (t && t.length)
                        for (const e of t) {
                            const t = this._actions.get(e.action);
                            if (t)
                                for (const s of e.offsets) {
                                    const e = s.size || "",
                                        i = s.direction;
                                    "" !== e && void 0 !== i && t._Str_772(e, i, [s.x || 0, s.y || 0, s.z || 0])
                                }
                        }
                }
                _Str_1675(t) {
                    if (!t) return null;
                    for (const e of this._actions.values())
                        if (e && e.id === t) return e;
                    return null
                }
                _Str_2018(t) {
                    return this._actions.get(t) || null
                }
                _Str_1027() {
                    if (this._defaultAction) return this._defaultAction;
                    for (const t of this._actions.values())
                        if (t && t._Str_804) return this._defaultAction = t, t;
                    return null
                }
                _Str_781(t, e, s) {
                    let i = [];
                    for (const n of t) {
                        if (!n) continue;
                        const t = this._actions.get(n._Str_695),
                            r = t && t._Str_805(e, s);
                        r && (i = r)
                    }
                    return i
                }
                _Str_711(t) {
                    if (!t) return null;
                    t = this._Str_1247(t);
                    const e = [];
                    for (const s of t) {
                        if (!s) continue;
                        const t = this._actions.get(s._Str_695);
                        t && (s._Str_742 = t, e.push(s))
                    }
                    return e.sort(this.sortByPrecedence), e
                }
                _Str_1247(t) {
                    let e = [];
                    const s = [];
                    for (const i of t) {
                        if (!i) continue;
                        const t = this._actions.get(i._Str_695);
                        t && (e = e.concat(t._Str_733(i._Str_727)))
                    }
                    for (const i of t) {
                        if (!i) continue;
                        let t = i._Str_695;
                        "fx" === i._Str_695 && (t = t + "." + i._Str_727), e.indexOf(t) >= 0 || s.push(i)
                    }
                    return s
                }
                sortByPrecedence(t, e) {
                    if (!t || !e) return 0;
                    const s = t._Str_742.precedence,
                        i = e._Str_742.precedence;
                    return s < i ? 1 : s > i ? -1 : 0
                }
            }
            class yt {
                constructor(t) {
                    this._id = t.id || "", this._align = t.align || "", this._base = t.base || "", this._ink = t.ink || 0, this._blend = 0;
                    const e = t.blend;
                    e && e.length > 0 && (this._blend = parseInt(e), this._blend > 1 && (this._blend = this._blend / 100))
                }
                get id() {
                    return this._id
                }
                get align() {
                    return this._align
                }
                get base() {
                    return this._base
                }
                get ink() {
                    return this._ink
                }
                get blend() {
                    return this._blend
                }
                get _Str_1096() {
                    return 1 !== this._blend
                }
            }
            class At {
                constructor(t) {
                    this._ink = parseInt(t.ink);
                    let e = t.foreground,
                        s = t.background;
                    e = e.replace("#", ""), s = s.replace("#", ""), this._foreGround = parseInt(e, 16), this._backGround = parseInt(s, 16), this._colorTransform = null, this._rgb = parseInt(e, 16), this._r = this._rgb >> 16 & 255, this._g = this._rgb >> 8 & 255, this._b = this._rgb >> 0 & 255, this._redMultiplier = this._r / 255 * 1, this._greenMultiplier = this._g / 255 * 1, this._blueMultiplier = this._b / 255 * 1, this._alphaMultiplier = 1, this._paletteIsGrayscale = !0, 37 === this._ink && (this._alphaMultiplier = .5, this._paletteIsGrayscale = !1), this._colorMap = this._Str_1181(this._backGround, this._foreGround)
                }
                get ink() {
                    return this._ink
                }
                get colorTransform() {
                    return this._colorTransform
                }
                get reds() {
                    return this._colorMap.get("reds")
                }
                get greens() {
                    return this._colorMap.get("greens")
                }
                get blues() {
                    return this._colorMap.get("blues")
                }
                get alphas() {
                    return this._colorMap.get("alphas")
                }
                get _Str_832() {
                    return this._paletteIsGrayscale
                }
                _Str_1181(t, e) {
                    const s = t >> 24 & 255,
                        i = t >> 16 & 255,
                        n = t >> 8 & 255,
                        r = t >> 0 & 255,
                        o = ((e >> 24 & 255) - s) / 255,
                        a = ((e >> 16 & 255) - i) / 255,
                        c = ((e >> 8 & 255) - n) / 255,
                        _ = ((e >> 0 & 255) - r) / 255,
                        h = new Map,
                        l = [],
                        u = [],
                        d = [],
                        g = [];
                    let m = s,
                        p = i,
                        b = n,
                        E = r,
                        f = 0;
                    for (; f < 256;) p == i && b == n && E == r && (m = 0), m += o, p += a, b += c, E += _, g.push(m << 24), l.push(m << 24 | p << 16 | b << 8 | E), u.push(m << 24 | p << 16 | b << 8 | E), d.push(m << 24 | p << 16 | b << 8 | E), f++;
                    return h.set("alphas", l), h.set("reds", l), h.set("greens", u), h.set("blues", d), h
                }
            }
            class Ct {
                constructor(t) {
                    this._offset = parseInt(t.offset)
                }
                get offset() {
                    return this._offset
                }
            }
            class Mt {
                constructor(t, e) {
                    this._animation = t, this._id = e.id, this._ink = e.ink, this._member = e.member, this._hasStaticY = !!e.staticY, this._hasDirections = !!e.directions, this._dx = [], this._dy = [], this._dz = [];
                    const s = e.directionList;
                    if (s && s.length)
                        for (const i of s) {
                            const t = i.id;
                            void 0 !== t && (this._dx[t] = i.dx || 0, this._dy[t] = i.dy || 0, this._dz[t] = i.dz || 0)
                        }
                }
                _Str_809(t) {
                    return t < this._dx.length ? this._dx[t] : 0
                }
                _Str_739(t) {
                    return t < this._dy.length ? this._dy[t] : 0
                }
                _Str_839(t) {
                    return t < this._dz.length ? this._dz[t] : 0
                }
                get animation() {
                    return this._animation
                }
                get id() {
                    return this._id
                }
                get ink() {
                    return this._ink
                }
                get member() {
                    return this._member
                }
                get _Str_949() {
                    return this._hasDirections
                }
                get _Str_767() {
                    return this._hasStaticY
                }
            }
            let Ut = (() => {
                class t {
                    constructor(t, e) {
                        if (this._id = e.name, this._description = this._id, this._frames = [], this._spriteData = null, this._avatarData = null, this._directionData = null, this._removeData = null, this._addData = null, this._overriddenActions = null, this._overrideFrames = null, this._resetOnToggle = e.resetOnToggle || !1, e.sprites && e.sprites.length) {
                            this._spriteData = [];
                            for (const t of e.sprites) this._spriteData.push(new Mt(this, t))
                        }
                        if (e.avatars && e.avatars.length && (this._avatarData = new At(e.avatars[0])), e.directions && e.directions.length && (this._directionData = new Ct(e.directions[0])), e.removes && e.removes.length) {
                            this._removeData = [];
                            for (const t of e.removes) this._removeData.push(t.id)
                        }
                        if (e.adds && e.adds.length) {
                            this._addData = [];
                            for (const t of e.adds) this._addData.push(new yt(t))
                        }
                        if (e.overrides && e.overrides.length) {
                            this._overrideFrames = new Map, this._overriddenActions = new Map;
                            for (const s of e.overrides) {
                                const e = s.name;
                                this._overriddenActions.set(s.override, e);
                                const i = [];
                                this._Str_1031(i, s.frames, t), this._overrideFrames.set(e, i)
                            }
                        }
                        this._Str_1031(this._frames, e.frames, t)
                    }
                    _Str_1031(t, e, s) {
                        if (e && e.length)
                            for (const i of e) {
                                let e = 1;
                                i.repeats && i.repeats > 1 && (e = i.repeats);
                                let n = 0;
                                for (; n < e;) {
                                    const e = [];
                                    if (i.bodyparts && i.bodyparts.length)
                                        for (const t of i.bodyparts) {
                                            const i = s._Str_1675(t.action),
                                                n = new _t(t, _t.BODYPART, i);
                                            e.push(n)
                                        }
                                    if (i.fxs && i.fxs.length)
                                        for (const t of i.fxs) {
                                            const i = s._Str_1675(t.action),
                                                n = new _t(t, _t.FX, i);
                                            e.push(n)
                                        }
                                    t.push(e), n++
                                }
                            }
                    }
                    _Str_2185(t = null) {
                        if (!t) return this._frames.length;
                        if (this._overrideFrames) {
                            const e = this._overrideFrames.get(t);
                            if (e) return e.length
                        }
                        return 0
                    }
                    _Str_1892() {
                        return !!this._overriddenActions && this._overriddenActions.size > 0
                    }
                    _Str_1571() {
                        if (!this._overriddenActions) return null;
                        const t = [];
                        for (const e of this._overriddenActions.keys()) t.push(e);
                        return t
                    }
                    _Str_707(t) {
                        return this._overriddenActions ? this._overriddenActions.get(t) : null
                    }
                    _Str_2259(t, e = null) {
                        t < 0 && (t = 0);
                        let s = [];
                        if (e) {
                            const i = this._overrideFrames.get(e);
                            i && i.length > 0 && (s = i[t % i.length])
                        } else this._frames.length > 0 && (s = this._frames[t % this._frames.length]);
                        return s
                    }
                    _Str_1065(t, e = null) {
                        const s = [];
                        for (const i of this._Str_2259(t, e))
                            if (i.type === _t.BODYPART) s.push(i.id);
                            else if (i.type === _t.FX && this._addData && this._addData.length)
                            for (const t of this._addData) t.id === i.id && s.push(t.align);
                        return s
                    }
                    _Str_607(t, e, s = null) {
                        for (const i of this._Str_2259(t, s)) {
                            if (i.id === e) return i;
                            if (i.type === _t.FX && this._addData && this._addData.length)
                                for (const t of this._addData)
                                    if (t.align === e && t.id === i.id) return i
                        }
                        return null
                    }
                    _Str_872() {
                        return null !== this._avatarData
                    }
                    _Str_776() {
                        return null !== this._directionData
                    }
                    _Str_706() {
                        return null !== this._addData
                    }
                    _Str_1550(t) {
                        if (this._addData)
                            for (const e of this._addData)
                                if (e.id === t) return e;
                        return null
                    }
                    get id() {
                        return this._id
                    }
                    get _Str_786() {
                        return this._spriteData || t._Str_2211
                    }
                    get _Str_1475() {
                        return this._avatarData
                    }
                    get _Str_1493() {
                        return this._directionData
                    }
                    get _Str_652() {
                        return this._removeData || t._Str_2211
                    }
                    get _Str_687() {
                        return this._addData || t._Str_2211
                    }
                    toString() {
                        return this._description
                    }
                    get resetOnToggle() {
                        return this._resetOnToggle
                    }
                }
                return t._Str_2211 = [], t
            })();
            class Dt {
                constructor() {
                    this._animations = new Map
                }
                _Str_2061(t, e) {
                    const s = e[Object.keys(e)[0]],
                        i = new Ut(t, s);
                    return this._animations.set(s.name, i), !0
                }
                _Str_720(t) {
                    return this._animations.get(t) || null
                }
                _Str_607(t, e, s) {
                    const i = this._Str_720(t);
                    return i ? i._Str_607(e, s) : null
                }
                get animations() {
                    return this._animations
                }
            }
            class Nt {
                constructor(t) {
                    this._number = t.number, this._assetPartDefinition = t.assetPartDefinition || null
                }
                get number() {
                    return this._number
                }
                get _Str_778() {
                    return this._assetPartDefinition
                }
            }
            class wt {
                constructor(t, e, s, i, n, r, o, a, c = "", _ = !1, h = 1) {
                    this._bodyPartId = t, this._partType = e, this._partId = s, this._color = i, this._frames = n, this._action = r, this._isColorable = o, this._paletteMapId = a, this._flippedPartType = c, this._isBlendable = _, this._blendTransform = null, "ey" === this._partType && (this._isColorable = !1)
                }
                _Str_1674(t) {
                    if (!this._frames || !this._frames.length) return 0;
                    const e = t % this._frames.length;
                    return this._frames[e] instanceof Nt ? this._frames[e].number : e
                }
                _Str_2258(t) {
                    const e = t % this._frames.length;
                    return this._frames && this._frames.length > e && this._frames[e] instanceof Nt ? this._frames[e] : null
                }
                _Str_1206(t) {
                    const e = t % this._frames.length;
                    if (this._frames && this._frames.length > e && this._frames[e] instanceof Nt) {
                        const t = this._frames[e];
                        return this._Str_1502 + ":" + t._Str_778 + ":" + t.number
                    }
                    return this._Str_1502 + ":" + e
                }
                get _Str_1360() {
                    return this._bodyPartId
                }
                get _Str_1669() {
                    return this._partType
                }
                get _Str_1502() {
                    return this._partId
                }
                get color() {
                    return this._color
                }
                get action() {
                    return this._action
                }
                get isColorable() {
                    return this._isColorable
                }
                set isColorable(t) {
                    this._isColorable = t
                }
                get _Str_1406() {
                    return this._paletteMapId
                }
                get _Str_1666() {
                    return this._flippedPartType
                }
                get _Str_1184() {
                    return this._isBlendable
                }
                toString() {
                    return [this._bodyPartId, this._partType, this._partId].join(":")
                }
            }
            class Lt {
                constructor(t, e) {
                    this._id = t.id, this._width = t.width, this._height = t.height, this._offset = new u.j(t.dx, t.dy), this._regPoint = new u.j(e == dt.LARGE ? (this._width - 64) / 2 : (this._width - 32) / 2, 0)
                }
                get width() {
                    return this._width
                }
                get height() {
                    return this._height
                }
                get offset() {
                    return this._offset
                }
                get id() {
                    return this._id
                }
                get _Str_1076() {
                    return this._regPoint
                }
            }
            class xt {
                constructor(t) {
                    if (this._id = t.id, this._isMain = t.main || !1, this._avatarSets = new Map, this._bodyParts = [], this._allBodyParts = [], t.avatarSets && t.avatarSets.length > 0)
                        for (const s of t.avatarSets) {
                            if (!s) continue;
                            const t = new xt(s);
                            this._avatarSets.set(t.id, t)
                        }
                    if (t.bodyParts && t.bodyParts.length > 0)
                        for (const s of t.bodyParts) s && this._bodyParts.push(s.id);
                    let e = this._bodyParts.concat();
                    for (const s of this._avatarSets.values()) s && (e = e.concat(s._Str_755()));
                    this._allBodyParts = e
                }
                _Str_1498(t) {
                    if (t === this._id) return this;
                    for (const e of this._avatarSets.values())
                        if (e && e._Str_1498(t)) return e;
                    return null
                }
                _Str_755() {
                    return this._allBodyParts.concat()
                }
                get id() {
                    return this._id
                }
                get _Str_779() {
                    if (this._isMain) return !0;
                    for (const t of this._avatarSets.values())
                        if (t && t._Str_779) return !0;
                    return !1
                }
            }
            class Pt {
                constructor(t = 0, e = 0, s = 0) {
                    this._x = t, this._y = e, this._z = s
                }
                static _Str_2224(t, e) {
                    return t.x * e.x + t.y * e.y + t.z * e.z
                }
                static _Str_1645(t, e) {
                    const s = new Pt;
                    return s.x = t.y * e.z - t.z * e.y, s.y = t.z * e.x - t.x * e.z, s.z = t.x * e.y - t.y * e.x, s
                }
                static subtract(t, e) {
                    return new Pt(t.x - e.x, t.y - e.y, t.z - e.z)
                }
                _Str_2224(t) {
                    return this._x * t.x + this._y * t.y + this._z * t.z
                }
                _Str_1645(t) {
                    const e = new Pt;
                    return e.x = this._y * t.z - this._z * t.y, e.y = this._z * t.x - this._x * t.z, e.z = this._x * t.y - this._y * t.x, e
                }
                subtract(t) {
                    this._x = this._x - t.x, this._y = this._y - t.y, this._z = this._z - t.z
                }
                add(t) {
                    this._x = this._x + t.x, this._y = this._y + t.y, this._z = this._z + t.z
                }
                normalize() {
                    const t = 1 / this.length();
                    this._x = this._x * t, this._y = this._y * t, this._z = this._z * t
                }
                length() {
                    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z)
                }
                toString() {
                    return "Vector3D: (" + this._x + "," + this._y + "," + this._z + ")"
                }
                get x() {
                    return this._x
                }
                set x(t) {
                    this._x = t
                }
                get y() {
                    return this._y
                }
                set y(t) {
                    this._y = t
                }
                get z() {
                    return this._z
                }
                set z(t) {
                    this._z = t
                }
            }
            class Ft {
                constructor(t, e, s) {
                    this._location = new Pt(t, e, s), this._transformedLocation = new Pt, this._needsTransformation = !1, 0 == t && 0 == e && 0 == s || (this._needsTransformation = !0)
                }
                get location() {
                    return this._location
                }
                get _Str_1604() {
                    return this._transformedLocation
                }
                _Str_1101(t) {
                    this._needsTransformation && (this._transformedLocation = t._Str_2186(this._location))
                }
            }
            class Gt extends Ft {
                constructor(t, e = !1) {
                    super(parseFloat(t.x), parseFloat(t.y), parseFloat(t.z)), this._id = t.id, this._radius = parseFloat(t.radius), this._normal = new Pt(parseFloat(t.nx), parseFloat(t.ny), parseFloat(t.nz)), this._isDoubleSided = t.double || !1, this._isDynamic = e
                }
                _Str_1522(t) {
                    const e = Math.abs(t.z - this._Str_1604.z - this._radius),
                        s = Math.abs(t.z - this._Str_1604.z + this._radius);
                    return Math.min(e, s)
                }
                get id() {
                    return this._id
                }
                get normal() {
                    return this._normal
                }
                get _Str_2207() {
                    return this._isDoubleSided
                }
                toString() {
                    return this._id + ": " + this.location + " - " + this._Str_1604
                }
                get _Str_1457() {
                    return this._isDynamic
                }
            }
            class Yt extends Ft {
                constructor(t) {
                    if (super(parseFloat(t.x), parseFloat(t.y), parseFloat(t.z)), this._id = t.id, this._radius = parseFloat(t.radius), this._parts = new Map, this._dynamicParts = new Map, t.items && t.items.length > 0)
                        for (const e of t.items) {
                            if (!e) continue;
                            const t = new Gt(e);
                            this._parts.set(t.id, t)
                        }
                }
                _Str_1883(t) {
                    const e = this._dynamicParts.get(t),
                        s = [];
                    if (e)
                        for (const i in e) {
                            const t = e[i];
                            t && s.push(t)
                        }
                    return s
                }
                _Str_1456(t) {
                    const e = [];
                    for (const s of this._parts.values()) s && e.push(s.id);
                    if (t) {
                        const s = this._dynamicParts.get(t);
                        if (s)
                            for (const t in s) {
                                const i = s[t];
                                i && e.push(i.id)
                            }
                    }
                    return e
                }
                _Str_2004(t) {
                    return this._dynamicParts.delete(t), !0
                }
                _Str_2020(t, e) {
                    if (this._Str_2030(t.id, e)) return !1;
                    let s = this._dynamicParts.get(e);
                    return s || (s = {}, this._dynamicParts.set(e, s)), s[t.id] = new Gt(t, !0), !0
                }
                _Str_2030(t, e) {
                    let s = this._parts.get(t) || null;
                    return s || void 0 === this._dynamicParts.get(e) || (s = this._dynamicParts.get(e)[t] || null), null !== s
                }
                _Str_713(t, e, s, i) {
                    const n = [];
                    for (const a of this._parts.values()) a && (a._Str_1101(t), n.push([a._Str_1522(e), a]));
                    const r = this._dynamicParts.get(i);
                    if (r)
                        for (const a in r) {
                            const s = r[a];
                            s && (s._Str_1101(t), n.push([s._Str_1522(e), s]))
                        }
                    n.sort((t, e) => {
                        const s = t[0],
                            i = e[0];
                        return s < i ? -1 : s > i ? 1 : 0
                    });
                    const o = [];
                    for (const a of n) a && o.push(a[1].id);
                    return o
                }
                _Str_1522(t) {
                    const e = Math.abs(t.z - this._Str_1604.z - this._radius),
                        s = Math.abs(t.z - this._Str_1604.z + this._radius);
                    return Math.min(e, s)
                }
                get id() {
                    return this._id
                }
                get radius() {
                    return this._radius
                }
            }
            let kt = (() => {
                class t {
                    constructor(t = 0, e = 0, s = 0, i = 0, n = 0, r = 0, o = 0, a = 0, c = 0) {
                        this._data = [t, e, s, i, n, r, o, a, c]
                    }
                    static _Str_1869(e) {
                        const s = e * Math.PI / 180,
                            i = Math.cos(s),
                            n = Math.sin(s);
                        return new t(1, 0, 0, 0, i, -n, 0, n, i)
                    }
                    static _Str_1560(e) {
                        const s = e * Math.PI / 180,
                            i = Math.cos(s),
                            n = Math.sin(s);
                        return new t(i, 0, n, 0, 1, 0, -n, 0, i)
                    }
                    static _Str_1368(e) {
                        const s = e * Math.PI / 180,
                            i = Math.cos(s),
                            n = Math.sin(s);
                        return new t(i, -n, 0, n, i, 0, 0, 0, 1)
                    }
                    identity() {
                        return this._data = [1, 0, 0, 0, 1, 0, 0, 0, 1], this
                    }
                    _Str_2186(t) {
                        return new Pt(t.x * this._data[0] + t.y * this._data[3] + t.z * this._data[6], t.x * this._data[1] + t.y * this._data[4] + t.z * this._data[7], t.x * this._data[2] + t.y * this._data[5] + t.z * this._data[8])
                    }
                    _Str_1186(e) {
                        return new t(this._data[0] * e.data[0] + this._data[1] * e.data[3] + this._data[2] * e.data[6], this._data[0] * e.data[1] + this._data[1] * e.data[4] + this._data[2] * e.data[7], this._data[0] * e.data[2] + this._data[1] * e.data[5] + this._data[2] * e.data[8], this._data[3] * e.data[0] + this._data[4] * e.data[3] + this._data[5] * e.data[6], this._data[3] * e.data[1] + this._data[4] * e.data[4] + this._data[5] * e.data[7], this._data[3] * e.data[2] + this._data[4] * e.data[5] + this._data[5] * e.data[8], this._data[6] * e.data[0] + this._data[7] * e.data[3] + this._data[8] * e.data[6], this._data[6] * e.data[1] + this._data[7] * e.data[4] + this._data[8] * e.data[7], this._data[6] * e.data[2] + this._data[7] * e.data[5] + this._data[8] * e.data[8])
                    }
                    _Str_1157(t) {
                        let e = 0;
                        for (; e < this._data.length;) this._data[e] = this._data[e] * t, e++
                    }
                    _Str_1089(e) {
                        const s = e * Math.PI / 180,
                            i = Math.cos(s),
                            n = Math.sin(s);
                        return new t(1, 0, 0, 0, i, -n, 0, n, i)._Str_1186(this)
                    }
                    _Str_2123(e) {
                        const s = e * Math.PI / 180,
                            i = Math.cos(s),
                            n = Math.sin(s);
                        return new t(i, 0, n, 0, 1, 0, -n, 0, i)._Str_1186(this)
                    }
                    _Str_2232(e) {
                        const s = e * Math.PI / 180,
                            i = Math.cos(s),
                            n = Math.sin(s);
                        return new t(i, -n, 0, n, i, 0, 0, 0, 1)._Str_1186(this)
                    }
                    skew() {}
                    _Str_1779() {
                        return new t(this._data[0], this._data[3], this._data[6], this._data[1], this._data[4], this._data[7], this._data[2], this._data[5], this._data[8])
                    }
                    _Str_1451(t) {
                        return !1
                    }
                    get data() {
                        return this._data
                    }
                }
                return t.IDENTITY = new t(1, 0, 0, 0, 1, 0, 0, 0, 1), t.TOLERANS = 1e-18, t
            })();
            class Vt {
                constructor(t) {
                    this._camera = new Pt(0, 0, 10), this._avatarSet = new xt(t.avatarSets[0]), this._geometryTypes = new Map, this._itemIdToBodyPartMap = new Map, this._transformation = new kt, this._canvases = new Map;
                    const e = t.camera;
                    if (e && (this._camera.x = parseFloat(e.x), this._camera.y = parseFloat(e.y), this._camera.z = parseFloat(e.z)), t.canvases && t.canvases.length > 0)
                        for (const s of t.canvases) {
                            if (!s) continue;
                            const t = s.scale,
                                e = new Map;
                            if (s.geometries && s.geometries.length > 0)
                                for (const i of s.geometries) {
                                    if (!i) continue;
                                    const s = new Lt(i, t);
                                    e.set(s.id, s)
                                }
                            this._canvases.set(t, e)
                        }
                    if (t.types && t.types.length > 0)
                        for (const s of t.types) {
                            if (!s) continue;
                            const t = new Map,
                                e = new Map;
                            if (s.bodyParts && s.bodyParts.length > 0)
                                for (const i of s.bodyParts) {
                                    if (!i) continue;
                                    const s = new Yt(i);
                                    t.set(s.id, s);
                                    for (const t of s._Str_1456(null)) e.set(t, s)
                                }
                            this._geometryTypes.set(s.id, t), this._itemIdToBodyPartMap.set(s.id, e)
                        }
                }
                _Str_2101(t) {
                    for (const e of this._geometryTypes.values())
                        if (e)
                            for (const s of e.values()) s && s._Str_2004(t)
                }
                _Str_1307(t) {
                    const e = this._avatarSet._Str_1498(t);
                    return e ? e._Str_755() : []
                }
                _Str_1939(t) {
                    const e = this._avatarSet._Str_1498(t);
                    return !!e && e._Str_779
                }
                _Str_1664(t, e) {
                    const s = this._canvases.get(t);
                    return s && s.get(e) || null
                }
                _Str_1342(t) {
                    return !!this._geometryTypes.get(t)
                }
                _Str_1332(t, e) {
                    if (this._Str_1342(t)) {
                        const s = this._geometryTypes.get(t);
                        if (s && s.get(e)) return !0
                    }
                    return !1
                }
                _Str_2072(t) {
                    const e = this._Str_1280(t),
                        s = [];
                    if (e)
                        for (const i of e.values()) i && s.push(i.id);
                    return s
                }
                _Str_1280(t) {
                    return this._Str_1342(t) ? this._geometryTypes.get(t) : new Map
                }
                _Str_1919(t, e) {
                    return this._Str_1280(t).get(e) || null
                }
                _Str_1701(t, e, s) {
                    const i = this._itemIdToBodyPartMap.get(t);
                    if (i) {
                        const n = i.get(e);
                        if (n) return n;
                        const r = this._Str_1280(t);
                        if (r)
                            for (const t of r.values())
                                if (t && t._Str_2030(e, s)) return t
                    }
                    return null
                }
                _Str_1787(t, e) {
                    const s = this._Str_1307(e),
                        i = [];
                    for (const n of s) {
                        if (!n) continue;
                        const e = t.get(n);
                        e && i.push(e)
                    }
                    return i
                }
                _Str_2250(t, e, s) {
                    if (!s) return [];
                    const i = this._Str_1280(s),
                        n = this._Str_1787(i, t),
                        r = [],
                        o = [];
                    this._transformation = kt._Str_1560(e);
                    for (const a of n.values()) a && (a._Str_1101(this._transformation), r.push([a._Str_1522(this._camera), a]));
                    r.sort((t, e) => {
                        const s = t[0],
                            i = e[0];
                        return s < i ? -1 : s > i ? 1 : 0
                    });
                    for (const a of r) a && o.push(a[1].id);
                    return o
                }
                _Str_713(t, e, s, i, n) {
                    if (this._Str_1332(t, e)) {
                        const r = this._Str_1280(t).get(e);
                        return this._transformation = kt._Str_1560(s), r._Str_713(this._transformation, this._camera, i, n)
                    }
                    return []
                }
            }
            class Zt {
                constructor(t) {
                    if (this._frames = [], t.frames && t.frames.length > 0)
                        for (const e of t.frames) {
                            if (!e) continue;
                            this._frames.push(new Nt(e));
                            let t = e.repeats || 0;
                            if (t > 1)
                                for (; --t > 0;) this._frames.push(this._frames[this._frames.length - 1])
                        }
                }
                get frames() {
                    return this._frames
                }
            }
            let jt = (() => {
                class t {
                    constructor(t) {
                        if (this._id = t.id, this._actionParts = new Map, this._bodyPartOffsets = new Map, this._frameCount = 0, this._frameIndexes = [], t.parts && t.parts.length > 0)
                            for (const e of t.parts) {
                                if (!e) continue;
                                const t = new Zt(e);
                                this._actionParts.set(e.setType, t), this._frameCount = Math.max(this._frameCount, t.frames.length)
                            }
                        if (t.offsets && t.offsets.frames && t.offsets.frames.length > 0)
                            for (const e of t.offsets.frames) {
                                if (!e) continue;
                                const t = e.id;
                                this._frameCount = Math.max(this._frameCount, t);
                                const s = new Map;
                                if (this._bodyPartOffsets.set(t, s), e.directions && e.directions.length > 0)
                                    for (const i of e.directions) {
                                        if (!i) continue;
                                        const t = i.id,
                                            e = new Map;
                                        if (s.set(t, e), i.bodyParts && i.bodyParts.length > 0)
                                            for (const s of i.bodyParts) {
                                                if (!s) continue;
                                                let t = 0,
                                                    i = 0;
                                                void 0 !== s.dx && (t = s.dx), void 0 !== s.dy && (i = s.dy), e.set(s.id, new u.j(t, i))
                                            }
                                    }
                                if (this._frameIndexes.push(t), void 0 !== e.repeats) {
                                    let s = e.repeats || 0;
                                    if (s > 1)
                                        for (; --s > 0;) this._frameIndexes.push(t)
                                }
                            }
                    }
                    _Str_989(t) {
                        return t && this._actionParts.get(t) || null
                    }
                    _Str_1888(e, s, i) {
                        const n = this._bodyPartOffsets.get(this._frameIndexes[s % this._frameIndexes.length]);
                        if (!n) return t._Str_1934;
                        const r = n.get(e);
                        return r && r.get(i) || t._Str_1934
                    }
                    get id() {
                        return this._id
                    }
                    get _Str_806() {
                        return this._actionParts
                    }
                    get _Str_2185() {
                        return this._frameCount
                    }
                }
                return t._Str_1934 = new u.j(0, 0), t
            })();
            class Bt {
                constructor() {
                    this._actions = new Map
                }
                parse(t) {
                    if (t && t.length > 0)
                        for (const e of t) {
                            if (!e) continue;
                            const t = new jt(e);
                            this._actions.set(t.id, t)
                        }
                    return !0
                }
                _Str_1017(t) {
                    for (const e of t.action) this._actions.set(e.id, new jt(e));
                    return !0
                }
                _Str_2244(t) {
                    return this._actions.get(t.id) || null
                }
                _Str_1408(t) {
                    const e = this._Str_2244(t);
                    return e ? e._Str_2185 : 0
                }
            }
            class Ht {
                constructor(t) {
                    if (!t) throw new Error("invalid_data");
                    this._id = parseInt(t.$.id), this._index = parseInt(t.$.index), this._clubLevel = parseInt(t.$.club), this._isSelectable = 1 === parseInt(t.$.selectable), this._rgb = parseInt("0x" + t._, 16)
                }
                get id() {
                    return this._id
                }
                get index() {
                    return this._index
                }
                get clubLevel() {
                    return this._clubLevel
                }
                get isSelectable() {
                    return this._isSelectable
                }
                get _Str_915() {
                    return this._rgb
                }
            }
            class Wt {
                constructor(t) {
                    if (!t) throw new Error("invalid_data");
                    this._id = parseInt(t.$.id), this._colors = new Map, this._Str_2015(t)
                }
                _Str_2015(t) {
                    for (const e of t.color) {
                        const t = new Ht(e);
                        this._colors.set(e.$.id.toString(), t)
                    }
                }
                _Str_751(t) {
                    return void 0 === t || t < 0 ? null : this._colors.get(t.toString()) || null
                }
                get id() {
                    return this._id
                }
                get colors() {
                    return this._colors
                }
            }
            class zt {
                constructor(t) {
                    if (!t) throw new Error("invalid_data");
                    this._id = parseInt(t.$.id), this._type = t.$.type, this._index = parseInt(t.$.index), this._colorLayerIndex = parseInt(t.$.colorindex);
                    const e = t.$.palettemapid;
                    this._paletteMapId = isNaN(e) ? -1 : parseInt(e);
                    const s = t.$.palettemapid;
                    this._breed = isNaN(s) ? -1 : parseInt(s)
                }
                dispose() {}
                get id() {
                    return this._id
                }
                get type() {
                    return this._type
                }
                get breed() {
                    return this._breed
                }
                get index() {
                    return this._index
                }
                get _Str_827() {
                    return this._colorLayerIndex
                }
                get paletteMap() {
                    return this._paletteMapId
                }
            }
            class Kt {
                constructor(t, e) {
                    if (!t || !e) throw new Error("invalid_data");
                    this._id = parseInt(e.$.id), this._type = t, this._gender = e.$.gender, this._clubLevel = parseInt(e.$.club), this._isColorable = 1 === parseInt(e.$.colorable), this._isSelectable = 1 === parseInt(e.$.selectable), this._parts = [], this._hiddenLayers = [], this._isPreSelectable = 1 === parseInt(e.$.preselectable), this._isSellable = 1 === parseInt(e.$.sellable);
                    for (const s of e.part) {
                        const t = new zt(s),
                            e = this.getPartIndex(t); - 1 !== e ? this._parts.splice(e, 0, t) : this._parts.push(t)
                    }
                    if (e.hiddenlayers) {
                        const t = e.hiddenlayers[0];
                        for (const e of t.layer) this._hiddenLayers.push(e.$.parttype)
                    }
                }
                dispose() {
                    for (const t of this._parts) t.dispose();
                    this._parts = null, this._hiddenLayers = null
                }
                getPartIndex(t) {
                    const e = this._parts.length;
                    if (!e) return -1;
                    for (let s = 0; s < e; s++) {
                        const e = this._parts[s];
                        if (e && !(e.type !== t.type || e.index > t.index)) return s
                    }
                    return -1
                }
                _Str_989(t, e) {
                    for (const s of this._parts)
                        if (s.type === t && s.id === e) return s;
                    return null
                }
                get id() {
                    return this._id
                }
                get type() {
                    return this._type
                }
                get gender() {
                    return this._gender
                }
                get clubLevel() {
                    return this._clubLevel
                }
                get isColorable() {
                    return this._isColorable
                }
                get _Str_608() {
                    return this._isSelectable
                }
                get _Str_806() {
                    return this._parts
                }
                get _Str_790() {
                    return this._hiddenLayers
                }
                get _Str_653() {
                    return this._isPreSelectable
                }
                get _Str_651() {
                    return this._isSellable
                }
            }
            class Xt {
                constructor(t) {
                    if (!t) throw new Error("invalid_data");
                    this._type = t.$.type, this._paletteId = parseInt(t.$.paletteid), this._isMandatory = {}, this._isMandatory.F = [1 === parseInt(t.$.mand_f_0), 1 === parseInt(t.$.mand_f_1)], this._isMandatory.M = [1 === parseInt(t.$.mand_m_0), 1 === parseInt(t.$.mand_m_1)], this._partSets = new x, this._Str_2015(t)
                }
                dispose() {
                    for (const t of this._partSets.getValues()) t.dispose();
                    this._partSets = null
                }
                _Str_1874(t) {
                    for (const e of t) {
                        const t = e.id,
                            s = this._partSets.getValue(t);
                        s && (s.dispose(), this._partSets.remove(t))
                    }
                }
                _Str_2015(t) {
                    if (t && t.set)
                        for (const e of t.set) this._partSets.add(e.$.id, new Kt(this._type, e))
                }
                _Str_2264(t) {
                    for (const e of this._partSets.getValues())
                        if (e && 0 === e.clubLevel && (e.gender === t || "U" === e.gender)) return e;
                    return null
                }
                _Str_1020(t) {
                    return this._partSets.getValue(t.toString())
                }
                get type() {
                    return this._type
                }
                get _Str_734() {
                    return this._paletteId
                }
                _Str_895(t, e) {
                    return this._isMandatory[t.toUpperCase()][Math.min(e, 1)]
                }
                _Str_1002(t) {
                    return this._isMandatory[t.toUpperCase()].indexOf(!1)
                }
                get _Str_710() {
                    return this._partSets
                }
            }
            class qt {
                constructor() {
                    this._palettes = new Map, this._setTypes = new Map
                }
                dispose() {}
                parse(t) {
                    if (!t) return !1;
                    for (const e of t.colors[0].palette) {
                        const t = new Wt(e);
                        t && this._palettes.set(t.id.toString(), t)
                    }
                    for (const e of t.sets[0].settype) {
                        const t = new Xt(e);
                        t && this._setTypes.set(t.type, t)
                    }
                    return !0
                }
                _Str_1133(t) {
                    for (const e of t.sets[0].settype) {
                        const t = this._setTypes.get(e.$.type);
                        t ? t._Str_1874(e) : this._setTypes.set(e.$.type, new Xt(e))
                    }
                    this._Str_1017(t)
                }
                _Str_1017(t) {
                    if (!t) return !1;
                    for (const e of t.colors[0].palette) {
                        const t = e.$.id.toString(),
                            s = this._palettes.get(t);
                        s ? s._Str_2015(e) : this._palettes.set(t, new Wt(e))
                    }
                    for (const e of t.sets[0].settype) {
                        const t = e.$.type,
                            s = this._setTypes.get(t);
                        s ? s._Str_2015(e) : this._setTypes.set(t, new Xt(e))
                    }
                    return !1
                }
                _Str_1733(t, e) {
                    const s = [];
                    for (const i of this._setTypes.values()) i && i._Str_895(t, e) && s.push(i.type);
                    return s
                }
                _Str_2264(t, e) {
                    const s = this._setTypes.get(t);
                    return s ? s._Str_2264(e) : null
                }
                _Str_740(t) {
                    return this._setTypes.get(t) || null
                }
                _Str_783(t) {
                    return this._palettes.get(t.toString()) || null
                }
                _Str_938(t) {
                    for (const e of this._setTypes.values()) {
                        const s = e._Str_1020(t);
                        if (s) return s
                    }
                    return null
                }
            }
            class Jt {
                constructor(t) {
                    if (this._id = t.id, this._parts = [], t.activeParts && t.activeParts.length > 0)
                        for (const e of t.activeParts) e && this._parts.push(e.setType)
                }
                get _Str_806() {
                    return this._parts
                }
            }
            class Qt {
                constructor(t) {
                    if (!t) throw new Error("invalid_data");
                    this._setType = t.setType, this._flippedSetType = t.flippedSetType || null, this._removeSetType = t.removeSetType || null, this._appendToFigure = !1, this._staticId = -1
                }
                _Str_2234() {
                    return this._staticId >= 0
                }
                get _Str_1734() {
                    return this._staticId
                }
                set _Str_1734(t) {
                    this._staticId = t
                }
                get _Str_2174() {
                    return this._setType
                }
                get _Str_1693() {
                    return this._flippedSetType
                }
                set _Str_1693(t) {
                    this._flippedSetType = t
                }
                get _Str_1209() {
                    return this._removeSetType
                }
                get _Str_1583() {
                    return this._appendToFigure
                }
                set _Str_1583(t) {
                    this._appendToFigure = t
                }
            }
            class $t {
                constructor() {
                    this._parts = new Map, this._activePartSets = new Map
                }
                parse(t) {
                    if (t.partSet && t.partSet.length > 0)
                        for (const e of t.partSet) e && this._parts.set(e.setType, new Qt(e));
                    if (t.activePartSets && t.activePartSets.length > 0)
                        for (const e of t.activePartSets) e && this._activePartSets.set(e.id, new Jt(e));
                    return !0
                }
                _Str_1017(t) {
                    if (t.partSet && t.partSet.length > 0)
                        for (const e of t.partSet) e && this._parts.set(e.setType, new Qt(e));
                    if (t.activePartSets && t.activePartSets.length > 0)
                        for (const e of t.activePartSets) e && this._activePartSets.set(e.id, new Jt(e));
                    return !1
                }
                _Str_1795(t) {
                    const e = this._activePartSets.get(t.activePartSet);
                    return e ? e._Str_806 : []
                }
                _Str_1102(t) {
                    return this._parts.get(t) || null
                }
                _Str_1520(t) {
                    const e = t.setType;
                    let s = this._parts.get(e);
                    return s || (s = new Qt(t), this._parts.set(e, s)), s
                }
                _Str_1113(t) {
                    return this._activePartSets.get(t.activePartSet) || null
                }
                get _Str_806() {
                    return this._parts
                }
                get _Str_1979() {
                    return this._activePartSets
                }
            }
            class te extends m {
                constructor(t) {
                    super(), this._renderManager = t, this._geometry = null, this._figureData = new qt, this._partSetsData = new $t, this._animationData = new Bt, this._animationManager = new Dt, this._mandatorySetTypeIds = {}, this._actionManager = null, this._defaultAction = null
                }
                init() {}
                dispose() {
                    this.disposed || (super.dispose(), this._renderManager = null, this._figureData = null, this._partSetsData = null, this._animationData = null, this._mandatorySetTypeIds = null)
                }
                _Str_1825(t) {
                    t && (this._geometry = new Vt(t))
                }
                _Str_1060(t, e) {
                    e && (this._actionManager = new Ot(t, e), this._defaultAction = this._actionManager._Str_1027())
                }
                _Str_1620(t) {
                    this._actionManager._Str_1620(t), this._defaultAction = this._actionManager._Str_1027()
                }
                _Str_1296(t) {
                    return !!t && !!this._partSetsData.parse(t) && (this._partSetsData._Str_1102("ri")._Str_1583 = !0, this._partSetsData._Str_1102("li")._Str_1583 = !0, !0)
                }
                _Str_2229(t) {
                    return !!t && this._animationData.parse(t)
                }
                _Str_1569(t) {
                    return !!t && this._figureData.parse(t)
                }
                _Str_882(t) {
                    this._figureData._Str_1133(t)
                }
                _Str_1849(t, e = "fx", s = 200) {
                    let i = 0;
                    for (; i < s;) {
                        const s = t.getCollection(e + i);
                        s && this._animationManager._Str_2061(this, s.data), i++
                    }
                }
                _Str_2061(t) {
                    this._animationManager._Str_2061(this, t)
                }
                _Str_867(t, e, s = 0) {
                    const i = t._Str_815(e);
                    if (!i || i.length < s) return null;
                    const n = this._figureData._Str_740(e);
                    if (null == n) return null;
                    const r = this._figureData._Str_783(n._Str_734);
                    return r ? r._Str_751(i[s]) : null
                }
                _Str_1881(t, e, s) {
                    return this._animationManager._Str_607(t, e, s)
                }
                _Str_720(t) {
                    return this._animationManager._Str_720(t)
                }
                _Str_1675(t) {
                    return this._actionManager._Str_1675(t)
                }
                _Str_2018(t) {
                    return this._actionManager._Str_2018(t)
                }
                _Str_1939(t) {
                    return this._geometry._Str_1939(t)
                }
                _Str_711(t) {
                    return this._actionManager._Str_711(t)
                }
                _Str_1936(t) {
                    let e = 0;
                    for (const s of t) e = Math.max(e, this._animationData._Str_1408(s._Str_742));
                    return e
                }
                _Str_1733(t, e) {
                    return this._mandatorySetTypeIds[t] || (this._mandatorySetTypeIds[t] = []), this._mandatorySetTypeIds[t][e] || (this._mandatorySetTypeIds[t][e] = this._figureData._Str_1733(t, e)), this._mandatorySetTypeIds[t][e]
                }
                _Str_2264(t, e) {
                    return this._figureData._Str_2264(t, e)
                }
                _Str_781(t, e, s) {
                    return this._actionManager._Str_781(t, e, s)
                }
                _Str_1664(t, e) {
                    return this._geometry._Str_1664(t, e)
                }
                _Str_2101(t) {
                    this._geometry._Str_2101(t)
                }
                _Str_2021(t, e) {
                    let s = [];
                    const i = [],
                        n = t._Str_742._Str_868;
                    if (t._Str_742._Str_861) {
                        const r = this._animationManager._Str_720(t._Str_742.state + "." + t._Str_727);
                        if (r && (s = r._Str_1065(0, t._Str_707), r._Str_706())) {
                            const t = {
                                    id: "",
                                    x: 0,
                                    y: 0,
                                    z: 0,
                                    radius: .01,
                                    nx: 0,
                                    ny: 0,
                                    nz: -1,
                                    double: 1
                                },
                                s = {
                                    setType: ""
                                };
                            for (const o of r._Str_687) {
                                const r = this._geometry._Str_1919(n, o.align);
                                if (r) {
                                    t.id = o.id, r._Str_2020(t, e), s.setType = o.id;
                                    const n = this._partSetsData._Str_1520(s);
                                    n._Str_1583 = !0, "" === o.base && (n._Str_1734 = 1), -1 === i.indexOf(r.id) && i.push(r.id)
                                }
                            }
                        }
                        for (const t of s) {
                            const e = this._geometry._Str_1919(n, t);
                            e && -1 === i.indexOf(e.id) && i.push(e.id)
                        }
                    } else {
                        s = this._partSetsData._Str_1795(t._Str_742);
                        for (const t of s) {
                            const s = this._geometry._Str_1701(n, t, e);
                            s && -1 === i.indexOf(s.id) && i.push(s.id)
                        }
                    }
                    return i
                }
                _Str_1695(t) {
                    return this._geometry._Str_1307(t)
                }
                _Str_755(t, e, s) {
                    return this._geometry._Str_2250(t, lt.DIRECTION_TO_ANGLE[s], e)
                }
                _Str_1888(t, e, s, i) {
                    const n = this._animationData._Str_2244(t._Str_742);
                    return n ? n._Str_1888(e, s, i) : jt._Str_1934
                }
                _Str_713(t, e, s, i, n, r, o, a = null) {
                    let c = null,
                        _ = [],
                        h = null;
                    if (null == !s) return [];
                    const l = this._partSetsData._Str_1795(s._Str_742),
                        u = [];
                    let d = [0];
                    const g = this._animationData._Str_2244(s._Str_742);
                    if (s._Str_742._Str_861) {
                        const e = this._animationManager._Str_720(s._Str_742.state + "." + s._Str_727);
                        if (e) {
                            d = this._Str_1768(e._Str_2185(s._Str_707));
                            for (const n of e._Str_1065(0, s._Str_707))
                                if (n === t) {
                                    const t = this._geometry._Str_1919(i, n);
                                    if (t)
                                        for (const e of t._Str_1883(o)) l.push(e.id)
                                }
                        }
                    }
                    const m = this._geometry._Str_713(i, t, n, l, o),
                        p = e._Str_1016();
                    for (const E of p) {
                        if (a && a.get(E)) continue;
                        const i = e.getPartSetId(E),
                            n = e._Str_815(E),
                            o = this._figureData._Str_740(E);
                        if (o) {
                            const e = this._figureData._Str_783(o._Str_734);
                            if (e) {
                                const a = o._Str_1020(i);
                                if (a) {
                                    r = r.concat(a._Str_790);
                                    for (const i of a._Str_806)
                                        if (m.indexOf(i.type) > -1) {
                                            if (g) {
                                                const t = g._Str_989(i.type);
                                                _ = t ? t.frames : d
                                            } else _ = d;
                                            c = s._Str_742, -1 === l.indexOf(i.type) && (c = this._defaultAction);
                                            const r = this._partSetsData._Str_1102(i.type);
                                            let o = r ? r._Str_1693 : i.type;
                                            o && "" !== o || (o = i.type), n && n.length > i._Str_827 - 1 && (h = e._Str_751(n[i._Str_827 - 1]));
                                            const a = i._Str_827 > 0,
                                                m = new wt(t, i.type, i.id.toString(), h, _, c, a, i.paletteMap, o);
                                            u.push(m)
                                        }
                                }
                            }
                        }
                    }
                    const b = [];
                    for (const E of m) {
                        let e = null,
                            n = !1;
                        const c = a && a.get(E);
                        for (const t of u) t._Str_1669 === E && (c ? e = t.color : (n = !0, -1 === r.indexOf(E) && b.push(t)));
                        if (!n)
                            if (c) {
                                const i = a.get(E);
                                let n = 0,
                                    r = 0;
                                for (; r < i.length;) n += i.charCodeAt(r), r++;
                                if (g) {
                                    const t = g._Str_989(E);
                                    _ = t ? t.frames : d
                                } else _ = d;
                                const o = new wt(t, E, i, e, _, s._Str_742, !(null == e), -1, E, !1, 1);
                                b.push(o)
                            } else if (l.indexOf(E) > -1)
                            if (t !== this._geometry._Str_1701(i, E, o).id);
                            else {
                                const e = this._partSetsData._Str_1102(E);
                                let i = !1,
                                    n = 1;
                                if (e._Str_1583) {
                                    let r = "1";
                                    if ("" !== s._Str_727 && (r = s._Str_727), e._Str_2234() && (r = e._Str_1734.toString()), g) {
                                        const t = g._Str_989(E);
                                        _ = t ? t.frames : d
                                    } else _ = d;
                                    const o = new wt(t, E, r, null, _, s._Str_742, !1, -1, E, i, n);
                                    b.push(o)
                                }
                            }
                    }
                    return b
                }
                _Str_1768(t) {
                    const e = [];
                    let s = 0;
                    for (; s < t;) e.push(s), s++;
                    return e
                }
                _Str_672() {
                    if (this._actionManager) {
                        const t = this._actionManager._Str_1675("CarryItem").params,
                            e = [];
                        for (const s of t.values()) e.push(s);
                        return e
                    }
                    return []
                }
                get renderManager() {
                    return this._renderManager
                }
                get figureData() {
                    return this._figureData
                }
                get partData() {
                    return this._partSetsData
                }
                get animationManager() {
                    return this._animationManager
                }
            }
            var ee = s("yp5t"),
                se = s("JY8D"),
                ie = s("LPTP");
            let ne = (() => {
                    class t extends o {
                        constructor(t, e) {
                            super(t), this._library = e
                        }
                        get library() {
                            return this._library
                        }
                    }
                    return t.DOWNLOAD_COMPLETE = "ARELE_DOWNLOAD_COMPLETE", t
                })(),
                re = (() => {
                    class t extends m {
                        constructor(e, s, i, n) {
                            super(), this._state = t.NOT_LOADED, this._libraryName = e, this._revision = s, this._downloadUrl = n, this._assets = i, this._animation = null, this._downloadUrl = this._downloadUrl.replace(/%libname%/gi, this._libraryName), this._downloadUrl = this._downloadUrl.replace(/%revision%/gi, this._revision), this._assets.getCollection(this._libraryName) && (this._state = t.LOADED)
                        }
                        downloadAsset() {
                            if (this._assets && this._state !== t.LOADING && this._state !== t.LOADED) return this._assets.getCollection(this._libraryName) ? (this._state = t.LOADED, void this.dispatchEvent(new ne(ne.DOWNLOAD_COMPLETE, this))) : (this._state = t.LOADING, void this._assets.downloadAsset(this._downloadUrl, e => {
                                if (e) {
                                    this._state = t.LOADED;
                                    const e = this._assets.getCollection(this._libraryName);
                                    e && (this._animation = e.data.animations), this.dispatchEvent(new ne(ne.DOWNLOAD_COMPLETE, this))
                                }
                            }))
                        }
                        get libraryName() {
                            return this._libraryName
                        }
                        get animation() {
                            return this._animation
                        }
                        get isLoaded() {
                            return this._state === t.LOADED
                        }
                    }
                    return t.DOWNLOAD_COMPLETE = "EADL_DOWNLOAD_COMPLETE", t.NOT_LOADED = 0, t.LOADING = 1, t.LOADED = 2, t
                })(),
                oe = (() => {
                    class t extends m {
                        constructor(t, e) {
                            super(), this._assets = t, this._structure = e, this._missingMandatoryLibs = cp.instance.getConfiguration("avatar.mandatory.effect.libraries"), this._effectMap = new Map, this._effectListeners = new Map, this._incompleteEffects = new Map, this._initDownloadBuffer = [], this._pendingDownloadQueue = [], this._currentDownloads = [], this._libraryNames = [], this._isReady = !1, this.onLibraryLoaded = this.onLibraryLoaded.bind(this), this.onAvatarRenderReady = this.onAvatarRenderReady.bind(this), this.loadEffectMap(), this._structure.renderManager.events.addEventListener(c.AVATAR_RENDER_READY, this.onAvatarRenderReady)
                        }
                        loadEffectMap() {
                            const e = new XMLHttpRequest;
                            try {
                                e.open("GET", cp.instance.getConfiguration("avatar.effectmap.url")), e.send(), e.onloadend = s => {
                                    if (e.responseText) {
                                        const s = JSON.parse(e.responseText);
                                        this.processEffectMap(s.effects), this.processMissingLibraries(), this._isReady = !0, this.dispatchEvent(new o(t.DOWNLOADER_READY))
                                    }
                                }, e.onerror = t => {
                                    throw new Error("invalid_avatar_effect_map")
                                }
                            } catch (s) {
                                g.log(s)
                            }
                        }
                        processEffectMap(t) {
                            if (t)
                                for (const e of t) {
                                    if (!e) continue;
                                    const t = e.id,
                                        s = e.lib,
                                        i = e.revision || "";
                                    if (this._libraryNames.indexOf(s) >= 0) continue;
                                    this._libraryNames.push(s);
                                    const n = new re(s, i, this._assets, cp.instance.getConfiguration("avatar.asset.effect.url"));
                                    n.addEventListener(ne.DOWNLOAD_COMPLETE, this.onLibraryLoaded);
                                    let r = this._effectMap.get(t);
                                    r || (r = []), r.push(n), this._effectMap.set(t, r)
                                }
                        }
                        downloadAvatarEffect(t, e) {
                            if (!this._isReady || !this._structure.renderManager.isReady) return void this._initDownloadBuffer.push([t, e]);
                            const s = this.getAvatarEffectPendingLibraries(t);
                            if (s && s.length) {
                                if (e && !e.disposed) {
                                    let s = this._effectListeners.get(t.toString());
                                    s || (s = []), s.push(e), this._effectListeners.set(t.toString(), s)
                                }
                                this._incompleteEffects.set(t.toString(), s);
                                for (const t of s) t && this.downloadLibrary(t)
                            } else e && !e.disposed && e.resetEffect(t)
                        }
                        onAvatarRenderReady(t) {
                            if (t) {
                                for (const [t, e] of this._initDownloadBuffer) this.downloadAvatarEffect(t, e);
                                this._initDownloadBuffer = []
                            }
                        }
                        onLibraryLoaded(e) {
                            if (!e || !e.library) return;
                            const s = [];
                            this._structure._Str_2061(e.library.animation);
                            for (const [n, r] of this._incompleteEffects.entries()) {
                                let e = !0;
                                for (const t of r)
                                    if (t && !t.isLoaded) {
                                        e = !1;
                                        break
                                    }
                                if (e) {
                                    s.push(n);
                                    const e = this._effectListeners.get(n);
                                    for (const t of e) t && !t.disposed && t.resetEffect(parseInt(n));
                                    this._effectListeners.delete(n), this.dispatchEvent(new o(t.LIBRARY_LOADED))
                                }
                            }
                            for (const t of s) this._incompleteEffects.delete(t);
                            let i = 0;
                            for (; i < this._currentDownloads.length;) {
                                const t = this._currentDownloads[i];
                                t && t.libraryName === e.library.libraryName && this._currentDownloads.splice(i, 1), i++
                            }
                        }
                        processMissingLibraries() {
                            const t = this._missingMandatoryLibs.slice();
                            for (const e of t) {
                                if (!e) continue;
                                const t = this._effectMap.get(e);
                                if (t)
                                    for (const e of t) e && this.downloadLibrary(e)
                            }
                        }
                        isAvatarEffectReady(t) {
                            return !(!this._isReady || !this._structure.renderManager.isReady || this.getAvatarEffectPendingLibraries(t).length)
                        }
                        getAvatarEffectPendingLibraries(t) {
                            const e = [];
                            if (!this._structure) return e;
                            const s = this._effectMap.get(t.toString());
                            if (s)
                                for (const i of s) i && !i.isLoaded && -1 === e.indexOf(i) && e.push(i);
                            return e
                        }
                        downloadLibrary(t) {
                            t && !t.isLoaded && (this._pendingDownloadQueue.indexOf(t) >= 0 || this._currentDownloads.indexOf(t) >= 0 || (this._pendingDownloadQueue.push(t), this.processDownloadQueue()))
                        }
                        processDownloadQueue() {
                            for (; this._pendingDownloadQueue.length;) this._pendingDownloadQueue[0].downloadAsset(), this._currentDownloads.push(this._pendingDownloadQueue.shift())
                        }
                    }
                    return t.DOWNLOADER_READY = "EADM_DOWNLOADER_READY", t.LIBRARY_LOADED = "EADM_LIBRARY_LOADED", t.MAX_DOWNLOADS = 2, t
                })();
            class ae extends Rt {
                constructor(t, e, s, i, n) {
                    super(t, e, s, i, n, null)
                }
                isPlaceholder() {
                    return !0
                }
            }
            let ce = (() => {
                    class t extends m {
                        constructor(t, e) {
                            super(), this._dataReceiver = e, this.download(t)
                        }
                        download(e) {
                            const s = new XMLHttpRequest;
                            try {
                                s.open("GET", e), s.send(), s.onloadend = e => {
                                    (new Q.Parser).parseString(s.responseText, (e, s) => {
                                        if (e || !s || !s.figuredata) throw new Error("invalid_figure_data");
                                        this._dataReceiver && this._dataReceiver._Str_1017(s.figuredata), this.dispatchEvent(new o(t.AVATAR_STRUCTURE_DONE))
                                    })
                                }, s.onerror = t => {
                                    throw new Error("invalid_avatar_figure_data")
                                }
                            } catch (i) {
                                g.log(i)
                            }
                        }
                    }
                    return t.AVATAR_STRUCTURE_DONE = "AVATAR_STRUCTURE_DONE", t
                })(),
                _e = (() => {
                    class t extends L {
                        constructor() {
                            super(), this._structure = null, this._avatarAssetDownloadManager = null, this._placeHolderFigure = null, this._figureMapReady = !1, this._effectMapReady = !1, this._actionsReady = !1, this._geometryReady = !1, this._partSetsReady = !1, this._animationsReady = !1, this._isReady = !1, this.onAvatarAssetDownloaderReady = this.onAvatarAssetDownloaderReady.bind(this), this.onAvatarAssetDownloaded = this.onAvatarAssetDownloaded.bind(this), this.onEffectAssetDownloaderReady = this.onEffectAssetDownloaderReady.bind(this), this.onEffectAssetDownloaded = this.onEffectAssetDownloaded.bind(this), this.onAvatarStructureDownloadDone = this.onAvatarStructureDownloadDone.bind(this)
                        }
                        onInit() {
                            this._structure = new te(this), this.loadGeometry(), this.loadPartSets(), this.loadActions(), this.loadAnimations(), this.loadFigureData(), this._aliasCollection = new et(this, cp.instance.core.asset), this._aliasCollection.init(), this._avatarAssetDownloadManager || (this._avatarAssetDownloadManager = new nt(cp.instance.core.asset, this._structure), this._avatarAssetDownloadManager.addEventListener(nt.DOWNLOADER_READY, this.onAvatarAssetDownloaderReady), this._avatarAssetDownloadManager.addEventListener(nt.LIBRARY_LOADED, this.onAvatarAssetDownloaded)), this._effectAssetDownloadManager || (this._effectAssetDownloadManager = new oe(cp.instance.core.asset, this._structure), this._effectAssetDownloadManager.addEventListener(oe.DOWNLOADER_READY, this.onEffectAssetDownloaderReady), this._effectAssetDownloadManager.addEventListener(oe.LIBRARY_LOADED, this.onEffectAssetDownloaded)), this.checkReady()
                        }
                        onDispose() {
                            this._avatarAssetDownloadManager && (this._avatarAssetDownloadManager.removeEventListener(nt.DOWNLOADER_READY, this.onAvatarAssetDownloaderReady), this._avatarAssetDownloadManager.removeEventListener(nt.LIBRARY_LOADED, this.onAvatarAssetDownloaded)), this._effectAssetDownloadManager && (this._effectAssetDownloadManager.removeEventListener(oe.DOWNLOADER_READY, this.onEffectAssetDownloaderReady), this._effectAssetDownloadManager.removeEventListener(oe.LIBRARY_LOADED, this.onEffectAssetDownloaded))
                        }
                        loadGeometry() {
                            this._structure && (this._structure._Str_1825(se.a), this._geometryReady = !0, this.checkReady())
                        }
                        loadPartSets() {
                            this._structure && (this._structure._Str_1296(ie.a), this._partSetsReady = !0, this.checkReady())
                        }
                        loadActions() {
                            const t = cp.instance.getConfiguration("avatar.default.actions");
                            t && this._structure._Str_1060(cp.instance.core.asset, t);
                            const e = new XMLHttpRequest;
                            try {
                                e.open("GET", cp.instance.getConfiguration("avatar.actions.url")), e.send(), e.onloadend = t => {
                                    this._structure && (this._structure._Str_1620(JSON.parse(e.responseText)), this._actionsReady = !0, this.checkReady())
                                }, e.onerror = t => {
                                    throw new Error("invalid_avatar_actions")
                                }
                            } catch (s) {
                                this.logger.error(s)
                            }
                        }
                        loadAnimations() {
                            this._structure && (this._structure._Str_2229(ee.a), this._animationsReady = !0, this.checkReady())
                        }
                        loadFigureData() {
                            const t = cp.instance.getConfiguration("avatar.default.figuredata");
                            t && (new Q.Parser).parseString(t, (t, e) => {
                                if (t || !e || !e.figuredata) throw new Error("invalid_default_figure_data");
                                this._structure && this._structure._Str_1569(e.figuredata)
                            }), new ce(cp.instance.getConfiguration("avatar.figuredata.url"), this._structure.figureData).addEventListener(ce.AVATAR_STRUCTURE_DONE, this.onAvatarStructureDownloadDone)
                        }
                        onAvatarStructureDownloadDone(t) {
                            this._structureReady = !0, this._structure.init(), this.checkReady()
                        }
                        onAvatarAssetDownloaderReady(t) {
                            t && (this._figureMapReady = !0, this.checkReady())
                        }
                        onAvatarAssetDownloaded(t) {
                            t && this._aliasCollection.reset()
                        }
                        onEffectAssetDownloaderReady(t) {
                            t && (this._effectMapReady = !0, this.checkReady())
                        }
                        onEffectAssetDownloaded(t) {
                            t && this._aliasCollection.reset()
                        }
                        checkReady() {
                            this._isReady || this._geometryReady && this._partSetsReady && this._actionsReady && this._animationsReady && this._figureMapReady && this._effectMapReady && this._structureReady && (this._isReady = !0, this.events && this.events.dispatchEvent(new o(c.AVATAR_RENDER_READY)))
                        }
                        createFigureContainer(t) {
                            return new rt(t)
                        }
                        isFigureContainerReady(t) {
                            return !!this._avatarAssetDownloadManager && this._avatarAssetDownloadManager.isAvatarFigureContainerReady(t)
                        }
                        createAvatarImage(e, s, i, n = null, r = null) {
                            if (!this._structure || !this._avatarAssetDownloadManager) return null;
                            const o = new rt(e);
                            return i && this.validateAvatarFigure(o, i), this._avatarAssetDownloadManager.isAvatarFigureContainerReady(o) ? new Rt(this._structure, this._aliasCollection, o, s, this._effectAssetDownloadManager, r) : (this._placeHolderFigure || (this._placeHolderFigure = new rt(t.DEFAULT_FIGURE)), this._avatarAssetDownloadManager.downloadAvatarFigure(o, n), new ae(this._structure, this._aliasCollection, this._placeHolderFigure, s, this._effectAssetDownloadManager))
                        }
                        downloadAvatarFigure(t, e) {
                            this._avatarAssetDownloadManager && this._avatarAssetDownloadManager.downloadAvatarFigure(t, e)
                        }
                        validateAvatarFigure(t, e) {
                            let s = !1;
                            const i = this._structure._Str_1733(e, 2);
                            if (i) {
                                const n = this._structure.figureData;
                                for (const r of i)
                                    if (t._Str_744(r)) {
                                        const i = n._Str_740(r);
                                        if (i && !i._Str_1020(t.getPartSetId(r))) {
                                            const i = this._structure._Str_2264(r, e);
                                            i && (t._Str_830(r, i.id, [0]), s = !0)
                                        }
                                    } else {
                                        const i = this._structure._Str_2264(r, e);
                                        i && (t._Str_830(r, i.id, [0]), s = !0)
                                    }
                            }
                            return !s
                        }
                        isValidFigureSetForGender(t, e) {
                            const s = this.structureData._Str_938(t);
                            return !(!s || "U" !== s.gender.toUpperCase() && s.gender.toUpperCase() !== e.toUpperCase())
                        }
                        getFigureStringWithFigureIds(t, e, s) {
                            const i = new $;
                            i._Str_2153(t, e);
                            const n = this._Str_1667(s);
                            for (const r of n) i._Str_2088(r.type, r.id, i.getColourIds(r.type));
                            return i._Str_1008()
                        }
                        _Str_1667(t) {
                            const e = this.structureData,
                                s = [];
                            for (const i of t) {
                                const t = e._Str_938(i);
                                t && s.push(t)
                            }
                            return s
                        }
                        _Str_838(t, e) {
                            return this._structure ? this._structure._Str_1733(t, e) : null
                        }
                        getAssetByName(t) {
                            return this._aliasCollection.getAsset(t)
                        }
                        get assets() {
                            return cp.instance.core.asset
                        }
                        get isReady() {
                            return this._isReady
                        }
                        get structure() {
                            return this._structure
                        }
                        get structureData() {
                            return this._structure ? this._structure.figureData : null
                        }
                        get downloadManager() {
                            return this._avatarAssetDownloadManager
                        }
                    }
                    return t.DEFAULT_FIGURE = "hd-99999-99999", t
                })();
            class he {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class le extends M {
                constructor(t) {
                    super(t, he)
                }
                getParser() {
                    return this.parser
                }
            }
            class ue {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class de extends M {
                constructor(t) {
                    super(t, ue)
                }
                getParser() {
                    return this.parser
                }
            }
            class ge {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            let me = (() => {
                    class t {}
                    return t.UNKNOWN = 0, t.BROWSER = 1, t
                })(),
                pe = (() => {
                    class t {}
                    return t.UNKNOWN = 0, t.FLASH = 1, t.HTML5 = 2, t
                })();
            class be {
                constructor(t, e, s, i) {
                    this._data = [cp.RELEASE_VERSION, "HTML5", pe.HTML5, me.BROWSER]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Ee {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class fe {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Se extends L {
                constructor(t) {
                    super(), this._communication = t, this._sso = null, this._handShaking = !1, this._didConnect = !1, this._pongInterval = null, this.onConnectionOpenedEvent = this.onConnectionOpenedEvent.bind(this), this.onConnectionClosedEvent = this.onConnectionClosedEvent.bind(this), this.onConnectionErrorEvent = this.onConnectionErrorEvent.bind(this), this.sendPong = this.sendPong.bind(this)
                }
                onInit() {
                    const t = this._communication.connection;
                    t && (t.addEventListener(C.CONNECTION_OPENED, this.onConnectionOpenedEvent), t.addEventListener(C.CONNECTION_CLOSED, this.onConnectionClosedEvent), t.addEventListener(C.CONNECTION_ERROR, this.onConnectionErrorEvent)), this._communication.registerMessageEvent(new le(this.onClientPingEvent.bind(this))), this._communication.registerMessageEvent(new de(this.onAuthenticatedEvent.bind(this)))
                }
                onDispose() {
                    const t = this._communication.connection;
                    t && (t.removeEventListener(C.CONNECTION_OPENED, this.onConnectionOpenedEvent), t.removeEventListener(C.CONNECTION_CLOSED, this.onConnectionClosedEvent), t.removeEventListener(C.CONNECTION_ERROR, this.onConnectionErrorEvent)), this._sso = null, this._handShaking = !1, this.stopPonging(), super.onDispose()
                }
                onConnectionOpenedEvent(t) {
                    const e = this._communication.connection;
                    e && (this._didConnect = !0, this.dispatchCommunicationDemoEvent(_.CONNECTION_ESTABLISHED, e), cp.instance.getConfiguration("communication.pong.manually", !1) && this.startPonging(), this.startHandshake(e), e.send(new be(null, null, null, null)), this.tryAuthentication(e))
                }
                onConnectionClosedEvent(t) {
                    const e = this._communication.connection;
                    e && (this.stopPonging(), this._didConnect && this.dispatchCommunicationDemoEvent(_.CONNECTION_CLOSED, e))
                }
                onConnectionErrorEvent(t) {
                    const e = this._communication.connection;
                    e && (this.stopPonging(), this.dispatchCommunicationDemoEvent(_.CONNECTION_ERROR, e))
                }
                tryAuthentication(t) {
                    if (!t || !this._sso) return this._sso || g.log("Login without an SSO ticket is not supported"), void this.dispatchCommunicationDemoEvent(_.CONNECTION_HANDSHAKE_FAILED, t);
                    t.send(new fe(this._sso, cp.instance.time))
                }
                onClientPingEvent(t) {
                    t instanceof le && t.connection && this.sendPong(t.connection)
                }
                onAuthenticatedEvent(t) {
                    t instanceof de && t.connection && (this.completeHandshake(t.connection), this.dispatchCommunicationDemoEvent(_.CONNECTION_AUTHENTICATED, t.connection), t.connection.send(new Ee))
                }
                setSSO(t) {
                    t && "" !== t && !this._sso && (this._sso = t)
                }
                startHandshake(t) {
                    this.dispatchCommunicationDemoEvent(_.CONNECTION_HANDSHAKING, t), this._handShaking = !0
                }
                completeHandshake(t) {
                    this.dispatchCommunicationDemoEvent(_.CONNECTION_HANDSHAKED, t), this._handShaking = !1
                }
                startPonging() {
                    this.stopPonging(), this._pongInterval = setInterval(this.sendPong, cp.instance.getConfiguration("communication.pong.interval.ms", 2e4))
                }
                stopPonging() {
                    this._pongInterval && (clearInterval(this._pongInterval), this._pongInterval = null)
                }
                sendPong(t = null) {
                    (t = t || this._communication.connection || null) && t.send(new ge)
                }
                dispatchCommunicationDemoEvent(t, e) {
                    cp.instance.events.dispatchEvent(new _(t, e))
                }
            }
            class Ie {
                flush() {
                    return this._isOpen = !1, this._onShutdown = !1, this._isAuthenticUser = !1, !0
                }
                parse(t) {
                    return !!t && (this._isOpen = t.readBoolean(), this._onShutdown = t.readBoolean(), t.bytesAvailable && (this._isAuthenticUser = t.readBoolean()), !0)
                }
                get isOpen() {
                    return this._isOpen
                }
                get onShutdown() {
                    return this._onShutdown
                }
                get isAuthenticUser() {
                    return this._isAuthenticUser
                }
            }
            class Re extends M {
                constructor(t) {
                    super(t, Ie)
                }
                getParser() {
                    return this.parser
                }
            }
            class ve {
                flush() {
                    return this._resultCode = -1, this._name = "", this._nameSuggestions = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._resultCode = t.readInt(), this._name = t.readString();
                    let e = t.readInt();
                    for (; e > 0;) this._nameSuggestions.push(t.readString()), e--;
                    return !0
                }
                get resultCode() {
                    return this._resultCode
                }
                get name() {
                    return this._name
                }
                get nameSuggestions() {
                    return this._nameSuggestions
                }
            }
            let Te = (() => {
                class t extends M {
                    constructor(t) {
                        super(t, ve)
                    }
                    getParser() {
                        return this.parser
                    }
                }
                return t._Str_5797 = 0, t._Str_7005 = 1, t._Str_7389 = 2, t._Str_7137 = 3, t._Str_7836 = 4, t._Str_7721 = 5, t._Str_8620 = 6, t._Str_9429 = 7, t
            })();
            class Oe {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._offerId = -1, this._productCode = null, this._priceCredits = 0, this._priceActivityPoints = 0, this._priceActivityPointsType = 0, this._vip = !1, this._months = 0, this._extraDays = 0, this._daysLeftAfterPurchase = 0, this._year = 0, this._month = 0, this._day = 0, this._giftable = !1, !0
                }
                parse(t) {
                    return !!t && (this._offerId = t.readInt(), this._productCode = t.readString(), t.readBoolean(), this._priceCredits = t.readInt(), this._priceActivityPoints = t.readInt(), this._priceActivityPointsType = t.readInt(), this._vip = t.readBoolean(), this._months = t.readInt(), this._extraDays = t.readInt(), this._giftable = t.readBoolean(), this._daysLeftAfterPurchase = t.readInt(), this._year = t.readInt(), this._month = t.readInt(), this._day = t.readInt(), !0)
                }
                get offerId() {
                    return this._offerId
                }
                get productCode() {
                    return this._productCode
                }
                get priceCredits() {
                    return this._priceCredits
                }
                get priceActivityPoints() {
                    return this._priceActivityPoints
                }
                get priceActivityPointsType() {
                    return this._priceActivityPointsType
                }
                get vip() {
                    return this._vip
                }
                get months() {
                    return this._months
                }
                get extraDays() {
                    return this._extraDays
                }
                get daysLeftAfterPurchase() {
                    return this._daysLeftAfterPurchase
                }
                get year() {
                    return this._year
                }
                get month() {
                    return this._month
                }
                get day() {
                    return this._day
                }
                get giftable() {
                    return this._giftable
                }
            }
            class ye {
                flush() {
                    return this._offers = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._offers.push(new Oe(t)), e--;
                    return !0
                }
                get offers() {
                    return this._offers
                }
            }
            class Ae extends M {
                constructor(t) {
                    super(t, ye)
                }
                getParser() {
                    return this.parser
                }
            }
            let Ce = (() => {
                class t {
                    constructor(t) {
                        if (!t) throw new Error("invalid_wrapper");
                        this.flush(), this.parse(t)
                    }
                    flush() {
                        return this._productType = null, this._furniClassId = -1, this._extraParam = null, this._productCount = 0, this._uniqueLimitedItem = !1, this._uniqueLimitedItemSeriesSize = 0, this._uniqueLimitedItemsLeft = 0, !0
                    }
                    parse(e) {
                        switch (this._productType = e.readString(), this._productType) {
                            case t.B:
                                return this._extraParam = e.readString(), this._productCount = 1, !0;
                            default:
                                return this._furniClassId = e.readInt(), this._extraParam = e.readString(), this._productCount = e.readInt(), this._uniqueLimitedItem = e.readBoolean(), this._uniqueLimitedItem && (this._uniqueLimitedItemSeriesSize = e.readInt(), this._uniqueLimitedItemsLeft = e.readInt()), !0
                        }
                    }
                    get productType() {
                        return this._productType
                    }
                    get furniClassId() {
                        return this._furniClassId
                    }
                    get extraParam() {
                        return this._extraParam
                    }
                    get productCount() {
                        return this._productCount
                    }
                    get uniqueLimitedItem() {
                        return this._uniqueLimitedItem
                    }
                    get uniqueLimitedSeriesSize() {
                        return this._uniqueLimitedItemSeriesSize
                    }
                    get uniqueLimitedItemsLeft() {
                        return this._uniqueLimitedItemsLeft
                    }
                }
                return t.I = "i", t.S = "s", t.E = "e", t.B = "b", t
            })();
            class Me {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._offerId = -1, this._localizationId = null, this._rent = !1, this._priceCredits = 0, this._priceActivityPoints = 0, this._priceActivityPointsType = 0, this._clubLevel = 0, this._giftable = !1, this._bundlePurchaseAllowed = !1, this._isPet = !1, this._previewImage = null, this._products = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._offerId = t.readInt(), this._localizationId = t.readString(), this._rent = t.readBoolean(), this._priceCredits = t.readInt(), this._priceActivityPoints = t.readInt(), this._priceActivityPointsType = t.readInt(), this._giftable = t.readBoolean();
                    let e = t.readInt();
                    for (; e > 0;) this._products.push(new Ce(t)), e--;
                    return this._clubLevel = t.readInt(), this._bundlePurchaseAllowed = t.readBoolean(), this._isPet = t.readBoolean(), this._previewImage = t.readString(), !0
                }
                get offerId() {
                    return this._offerId
                }
                get localizationId() {
                    return this._localizationId
                }
                get rent() {
                    return this._rent
                }
                get priceCredits() {
                    return this._priceCredits
                }
                get priceActivityPoints() {
                    return this._priceActivityPoints
                }
                get priceActivityPointsType() {
                    return this._priceActivityPointsType
                }
                get clubLevel() {
                    return this._clubLevel
                }
                get giftable() {
                    return this._giftable
                }
                get bundlePurchaseAllowed() {
                    return this._bundlePurchaseAllowed
                }
                get isPet() {
                    return this._isPet
                }
                get previewImage() {
                    return this._previewImage
                }
                get products() {
                    return this._products
                }
            }
            class Ue {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.parse(t)
                }
                parse(t) {
                    return !!t && (this._Str_2507 = t.readInt(), this._Str_6052 = t.readBoolean(), this._Str_19803 = t.readInt(), this._Str_693 = t.readBoolean(), !0)
                }
                get offerId() {
                    return this._Str_2507
                }
                get _Str_12313() {
                    return this._Str_6052
                }
                get isSelectable() {
                    return this._Str_693
                }
                get _Str_21146() {
                    return this._Str_19803
                }
            }
            class De {
                flush() {
                    return !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._offers = [], this._Str_5759 = new Map, this._Str_10647 = t.readInt(), this._Str_5369 = t.readInt();
                    let e = t.readInt(),
                        s = 0;
                    for (; s < e;) this._offers.push(new Me(t)), s++;
                    for (e = t.readInt(), s = 0; s < e;) {
                        const e = new Ue(t);
                        this._Str_5759.set(e.offerId, e), s++
                    }
                    return !0
                }
                get offers() {
                    return this._offers
                }
                get _Str_12860() {
                    return this._Str_10647
                }
                get _Str_7574() {
                    return this._Str_5369
                }
                get _Str_24398() {
                    return this._Str_5759
                }
            }
            class Ne extends M {
                constructor(t) {
                    super(t, De)
                }
                getParser() {
                    return this.parser
                }
            }
            class we {
                constructor() {
                    this._isEnabled = !1, this._price = null, this._giftWrappers = null, this._boxTypes = null, this._ribbonTypes = null, this._giftFurnis = null
                }
                flush() {
                    return this._boxTypes = null, this._giftFurnis = null, this._giftWrappers = null, this._ribbonTypes = null, this._isEnabled = null, this._price = null, !0
                }
                parse(t) {
                    if (!t) return !1;
                    const e = [],
                        s = [],
                        i = [],
                        n = [];
                    this._isEnabled = t.readBoolean(), this._price = t.readInt();
                    let r = t.readInt(),
                        o = 0;
                    for (; o < r;) e.push(t.readInt()), o++;
                    for (r = t.readInt(), o = 0; o < r;) s.push(t.readInt()), o++;
                    for (r = t.readInt(), o = 0; o < r;) i.push(t.readInt()), o++;
                    for (r = t.readInt(), o = 0; o < r;) n.push(t.readInt()), o++;
                    return this._giftWrappers = e, this._ribbonTypes = i, this._giftFurnis = n, this._boxTypes = s, !0
                }
                get giftWrappers() {
                    return this._giftWrappers
                }
                get ribbonTypes() {
                    return this._ribbonTypes
                }
                get giftFurnis() {
                    return this._giftFurnis
                }
                get boxTypes() {
                    return this._boxTypes
                }
                get isEnabled() {
                    return this._isEnabled
                }
                get price() {
                    return this._price
                }
            }
            class Le extends M {
                constructor(t) {
                    super(t, we)
                }
                getParser() {
                    return this.parser
                }
            }
            class xe {
                flush() {
                    return this._mode = -1, !0
                }
                parse(t) {
                    return !!t && (this._mode = t.readInt(), !0)
                }
                get mode() {
                    return this._mode
                }
            }
            class Pe extends M {
                constructor(t) {
                    super(t, xe)
                }
                getParser() {
                    return this.parser
                }
            }
            let Fe = (() => {
                class t {
                    constructor(t) {
                        if (!t) throw new Error("invalid_wrapper");
                        this.flush(), this.parse(t)
                    }
                    flush() {
                        return this._type = -1, this._position = null, this._itemName = null, this._itemPromoImage = null, this._catalogPageLocation = null, this._productCode = null, this._productOfferId = 0, this._expirationTime = 0, !0
                    }
                    parse(e) {
                        if (!e) return !1;
                        switch (this._position = e.readInt(), this._itemName = e.readString(), this._itemPromoImage = e.readString(), this._type = e.readInt(), this._type) {
                            case t.ITEM_CATALOGUE_PAGE:
                                this._catalogPageLocation = e.readString();
                                break;
                            case t.ITEM_PRODUCT_OFFER:
                                this._productOfferId = e.readInt();
                                break;
                            case t.ITEM_IAP:
                                this._productCode = e.readString()
                        }
                        const s = e.readInt();
                        return this._expirationTime = s > 0 ? 1e3 * s + cp.instance.time : 0, !0
                    }
                    get type() {
                        return this._type
                    }
                    get position() {
                        return this._position
                    }
                    get itemName() {
                        return this._itemName
                    }
                    get itemPromoImage() {
                        return this._itemPromoImage
                    }
                    get catalogPageLocation() {
                        return this._catalogPageLocation
                    }
                    get productCode() {
                        return this._productCode
                    }
                    get productOfferId() {
                        return this._productOfferId
                    }
                    get expirationTime() {
                        return this._expirationTime
                    }
                }
                return t.ITEM_CATALOGUE_PAGE = 0, t.ITEM_PRODUCT_OFFER = 1, t.ITEM_IAP = 2, t
            })();
            class Ge {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._images = [], this._texts = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._images.push(t.readString()), e--;
                    let s = t.readInt();
                    for (; s > 0;) this._texts.push(t.readString()), s--;
                    return !0
                }
                get images() {
                    return this._images
                }
                get texts() {
                    return this._texts
                }
            }
            class Ye {
                flush() {
                    return this._pageId = -1, this._catalogType = null, this._layoutCode = null, this._localization = null, this._offers = [], this._offerId = -1, this._acceptSeasonCurrencyAsCredits = !1, this._frontPageItems = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._pageId = t.readInt(), this._catalogType = t.readString(), this._layoutCode = t.readString(), this._localization = new Ge(t);
                    let e = t.readInt();
                    for (; e > 0;) this._offers.push(new Me(t)), e--;
                    if (this._offerId = t.readInt(), this._acceptSeasonCurrencyAsCredits = t.readBoolean(), t.bytesAvailable) {
                        let e = t.readInt();
                        for (; e > 0;) this._frontPageItems.push(new Fe(t)), e--
                    }
                    return !0
                }
                get pageId() {
                    return this._pageId
                }
                get catalogType() {
                    return this._catalogType
                }
                get layoutCode() {
                    return this._layoutCode
                }
                get localization() {
                    return this._localization
                }
                get offers() {
                    return this._offers
                }
                get offerId() {
                    return this._offerId
                }
                get acceptSeasonCurrencyAsCredits() {
                    return this._acceptSeasonCurrencyAsCredits
                }
                get frontPageItems() {
                    return this._frontPageItems
                }
            }
            class ke extends M {
                constructor(t) {
                    super(t, Ye)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ve {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._visible = !1, this._icon = 0, this._pageId = -1, this._pageName = null, this._localization = null, this._children = [], this._offerIds = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._visible = t.readBoolean(), this._icon = t.readInt(), this._pageId = t.readInt(), this._pageName = t.readString(), this._localization = t.readString();
                    let e = t.readInt();
                    for (; e > 0;) this._offerIds.push(t.readInt()), e--;
                    let s = t.readInt();
                    for (; s > 0;) this._children.push(new Ve(t)), s--;
                    return !0
                }
                get visible() {
                    return this._visible
                }
                get icon() {
                    return this._icon
                }
                get pageId() {
                    return this._pageId
                }
                get pageName() {
                    return this._pageName
                }
                get localization() {
                    return this._localization
                }
                get children() {
                    return this._children
                }
                get offerIds() {
                    return this._offerIds
                }
            }
            class Ze {
                flush() {
                    return this._root = null, !0
                }
                parse(t) {
                    return !!t && (this._root = new Ve(t), this._newAdditionsAvailable = t.readBoolean(), this._catalogType = t.readString(), !0)
                }
                get root() {
                    return this._root
                }
                get newAdditionsAvailable() {
                    return this._newAdditionsAvailable
                }
                get catalogType() {
                    return this._catalogType
                }
            }
            class je extends M {
                constructor(t) {
                    super(t, Ze)
                }
                getParser() {
                    return this.parser
                }
            }
            class Be {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._offerId = -1, this._localizationId = null, this._rent = !1, this._priceCredits = 0, this._priceActivityPoints = 0, this._priceActivityPointsType = 0, this._clubLevel = 0, this._giftable = !1, this._bundlePurchaseAllowed = !1, this._products = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._offerId = t.readInt(), this._localizationId = t.readString(), this._rent = t.readBoolean(), this._priceCredits = t.readInt(), this._priceActivityPoints = t.readInt(), this._priceActivityPointsType = t.readInt(), this._giftable = t.readBoolean();
                    let e = t.readInt();
                    for (; e > 0;) this._products.push(new Ce(t)), e--;
                    return this._clubLevel = t.readInt(), this._bundlePurchaseAllowed = t.readBoolean(), !0
                }
                get offerId() {
                    return this._offerId
                }
                get localizationId() {
                    return this._localizationId
                }
                get rent() {
                    return this._rent
                }
                get priceCredits() {
                    return this._priceCredits
                }
                get priceActivityPoints() {
                    return this._priceActivityPoints
                }
                get priceActivityPointsType() {
                    return this._priceActivityPointsType
                }
                get clubLevel() {
                    return this._clubLevel
                }
                get giftable() {
                    return this._giftable
                }
                get bundlePurchaseAllowed() {
                    return this._bundlePurchaseAllowed
                }
                get products() {
                    return this._products
                }
            }
            class He {
                flush() {
                    return this._offer = null, !0
                }
                parse(t) {
                    return !!t && (this._offer = new Be(t), !0)
                }
                get offer() {
                    return this._offer
                }
            }
            class We extends M {
                constructor(t) {
                    super(t, He)
                }
                getParser() {
                    return this.parser
                }
            }
            class ze {
                flush() {
                    return this._code = 0, !0
                }
                parse(t) {
                    return !!t && (this._code = t.readInt(), !0)
                }
                get code() {
                    return this._code
                }
            }
            class Ke extends M {
                constructor(t) {
                    super(t, ze)
                }
                getParser() {
                    return this.parser
                }
            }
            class Xe {
                flush() {
                    return this._code = 0, !0
                }
                parse(t) {
                    return !!t && (this._code = t.readInt(), !0)
                }
                get code() {
                    return this._code
                }
            }
            class qe extends M {
                constructor(t) {
                    super(t, Xe)
                }
                getParser() {
                    return this.parser
                }
            }
            class Je {
                flush() {
                    return this._offer = null, !0
                }
                parse(t) {
                    return !!t && (this._offer = new Me(t), !0)
                }
                get offer() {
                    return this._offer
                }
            }
            class Qe extends M {
                constructor(t) {
                    super(t, Je)
                }
                getParser() {
                    return this.parser
                }
            }
            class $e {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class ts extends M {
                constructor(t) {
                    super(t, $e)
                }
                getParser() {
                    return this.parser
                }
            }
            class es {
                flush() {
                    return this._instantlyRefreshCatalogue = !1, this._newFurniDataHash = null, !0
                }
                parse(t) {
                    return !!t && (this._instantlyRefreshCatalogue = t.readBoolean(), t.bytesAvailable && (this._newFurniDataHash = t.readString()), !0)
                }
                get instantlyRefreshCatalogue() {
                    return this._instantlyRefreshCatalogue
                }
                get newFurniDataHash() {
                    return this._newFurniDataHash
                }
            }
            class ss extends M {
                constructor(t) {
                    super(t, es)
                }
                getParser() {
                    return this.parser
                }
            }
            class is {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class ns extends M {
                constructor(t) {
                    super(t, is)
                }
                getParser() {
                    return this.parser
                }
            }
            class rs {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this._senderId = t.readInt(), this._errorCode = t.readInt()
                }
                get senderId() {
                    return this._senderId
                }
                get errorCode() {
                    return this._errorCode
                }
            }
            class os {
                flush() {
                    return this._failuers = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._failuers.push(new rs(t)), e--;
                    return !0
                }
                get failures() {
                    return this._failuers
                }
            }
            class as extends M {
                constructor(t) {
                    super(t, os)
                }
                getParser() {
                    return this.parser
                }
            }
            class cs {
                flush() {
                    return this._success = !1, !0
                }
                parse(t) {
                    return !!t && (this._success = t.readBoolean(), !0)
                }
                get success() {
                    return this._success
                }
            }
            class _s extends M {
                constructor(t) {
                    super(t, cs)
                }
                getParser() {
                    return this.parser
                }
            }
            class hs {
                flush() {
                    return this._errorCode = 0, !0
                }
                parse(t) {
                    return !!t && (this._errorCode = t.readInt(), !0)
                }
                get errorCode() {
                    return this._errorCode
                }
            }
            class ls extends M {
                constructor(t) {
                    super(t, hs)
                }
                getParser() {
                    return this.parser
                }
            }
            class us {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this._id = t.readInt(), this._name = t.readString(), this._gender = t.readInt(), this._online = t.readBoolean(), this._followingAllowed = t.readBoolean(), this._figure = t.readString(), this._categoryId = t.readInt(), this._motto = t.readString(), this._realName = t.readString(), this._lastAccess = t.readString(), this._persistedMessageUser = t.readBoolean(), this._vipMember = t.readBoolean(), this._pocketHabboUser = t.readBoolean(), this._relationshipStatus = t.readShort()
                }
                get id() {
                    return this._id
                }
                get name() {
                    return this._name
                }
                get gender() {
                    return this._gender
                }
                get online() {
                    return this._online
                }
                get followingAllowed() {
                    return this._followingAllowed
                }
                get figure() {
                    return this._figure
                }
                get categoryId() {
                    return this._categoryId
                }
                get motto() {
                    return this._motto
                }
                get lastAccess() {
                    return this._lastAccess
                }
                get realName() {
                    return this._realName
                }
                get persistedMessageUser() {
                    return this._persistedMessageUser
                }
                get vipMember() {
                    return this._vipMember
                }
                get pocketHabboUser() {
                    return this._pocketHabboUser
                }
                get relationshipStatus() {
                    return this._relationshipStatus
                }
            }
            class ds {
                flush() {
                    return this._totalFragments = 0, this._fragmentNumber = 0, this._fragment = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._totalFragments = t.readInt(), this._fragmentNumber = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) this._fragment.push(new us(t)), e--;
                    return !0
                }
                get totalFragments() {
                    return this._totalFragments
                }
                get fragmentNumber() {
                    return this._fragmentNumber
                }
                get fragment() {
                    return this._fragment
                }
            }
            class gs extends M {
                constructor(t) {
                    super(t, ds)
                }
                getParser() {
                    return this.parser
                }
            }
            class ms {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this._id = t.readInt(), this._name = t.readString()
                }
                get id() {
                    return this._id
                }
                get name() {
                    return this._name
                }
            }
            class ps {
                flush() {
                    return this._categories = [], this._removedFriendIds = [], this._addedFriends = [], this._updatedFriends = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._categories.push(new ms(t)), e--;
                    let s = t.readInt();
                    for (; s > 0;) {
                        const e = t.readInt(); - 1 === e ? this._removedFriendIds.push(t.readInt()) : 0 === e ? this._updatedFriends.push(new us(t)) : 1 === e && this._addedFriends.push(new us(t)), s--
                    }
                    return !0
                }
                get categories() {
                    return this._categories
                }
                get removedFriendIds() {
                    return this._removedFriendIds
                }
                get addedFriends() {
                    return this._addedFriends
                }
                get updatedFriends() {
                    return this._updatedFriends
                }
            }
            class bs extends M {
                constructor(t) {
                    super(t, ps)
                }
                getParser() {
                    return this.parser
                }
            }
            class Es {
                flush() {
                    return this._typeCode = -1, this._avatarId = 0, this._message = null, !0
                }
                parse(t) {
                    return !!t && (this._typeCode = t.readInt(), this._avatarId = t.readInt(), this._message = t.readString(), !0)
                }
                get typeCode() {
                    return this._typeCode
                }
                get avatarId() {
                    return this._avatarId
                }
                get message() {
                    return this._message
                }
            }
            class fs extends M {
                constructor(t) {
                    super(t, Es)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ss {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this._requestId = t.readInt(), this._requesterName = t.readString(), this._figureString = t.readString(), this._requesterUserId = this._requestId
                }
                get requestId() {
                    return this._requestId
                }
                get requesterName() {
                    return this._requesterName
                }
                get requesterUserId() {
                    return this._requesterUserId
                }
                get figureString() {
                    return this._figureString
                }
            }
            class Is {
                flush() {
                    return this._totalRequests = 0, this._requests = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._totalRequests = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) this._requests.push(new Ss(t)), e--;
                    return !0
                }
                get totalRequests() {
                    return this._totalRequests
                }
                get requests() {
                    return this._requests
                }
            }
            class Rs extends M {
                constructor(t) {
                    super(t, Is)
                }
                getParser() {
                    return this.parser
                }
            }
            class vs {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this._avatarId = t.readInt(), this._avatarName = t.readString(), this._avatarMotto = t.readString(), this._isAvatarOnline = t.readBoolean(), this._canFollow = t.readBoolean(), this._avatarGender = t.readInt(), this._avatarFigure = t.readString(), this._lastOnlineData = t.readString(), this._realName = t.readString()
                }
                get avatarId() {
                    return this._avatarId
                }
                get avatarName() {
                    return this._avatarName
                }
                get avatarMotto() {
                    return this._avatarMotto
                }
                get isAvatarOnline() {
                    return this._isAvatarOnline
                }
                get canFollow() {
                    return this._canFollow
                }
                get avatarGender() {
                    return this._avatarGender
                }
                get avatarFigure() {
                    return this._avatarFigure
                }
                get lastOnlineData() {
                    return this._lastOnlineData
                }
                get realName() {
                    return this._realName
                }
            }
            class Ts {
                flush() {
                    return this._friends = [], this._others = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._friends.push(new vs(t)), e--;
                    let s = t.readInt();
                    for (; s > 0;) this._others.push(new vs(t)), s--;
                    return !0
                }
                get friends() {
                    return this._friends
                }
                get others() {
                    return this._others
                }
            }
            class Os extends M {
                constructor(t) {
                    super(t, Ts)
                }
                getParser() {
                    return this.parser
                }
            }
            class ys {
                flush() {
                    return this._errorCode = 0, this._userId = 0, this._message = null, !0
                }
                parse(t) {
                    return !!t && (this._errorCode = t.readInt(), this._userId = t.readInt(), this._message = t.readString(), !0)
                }
                get errorCode() {
                    return this._errorCode
                }
                get userId() {
                    return this._userId
                }
                get message() {
                    return this._message
                }
            }
            class As extends M {
                constructor(t) {
                    super(t, ys)
                }
                getParser() {
                    return this.parser
                }
            }
            class Cs {
                flush() {
                    return this._clientMessageId = 0, this._errorCode = 0, !0
                }
                parse(t) {
                    return !!t && (this._clientMessageId = t.readInt(), this._errorCode = t.readInt(), !0)
                }
                get clientMessageId() {
                    return this._clientMessageId
                }
                get errorCode() {
                    return this._errorCode
                }
            }
            class Ms extends M {
                constructor(t) {
                    super(t, Cs)
                }
                getParser() {
                    return this.parser
                }
            }
            class Us {
                flush() {
                    return this._userFriendLimit = 0, this._normalFriendLimit = 0, this._extendedFriendLimit = 0, this._categories = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._userFriendLimit = t.readInt(), this._normalFriendLimit = t.readInt(), this._extendedFriendLimit = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) this._categories.push(new ms(t)), e--;
                    return !0
                }
                get userFriendLimit() {
                    return this._userFriendLimit
                }
                get normalFriendLimit() {
                    return this._normalFriendLimit
                }
                get extendedFriendLimit() {
                    return this._extendedFriendLimit
                }
                get categories() {
                    return this._categories
                }
            }
            class Ds extends M {
                constructor(t) {
                    super(t, Us)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ns {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class ws extends M {
                constructor(t) {
                    super(t, Ns)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ls {
                flush() {
                    return this._senderId = 0, this._messageText = null, this._secondsSinceSent = 0, this._extraData = null, !0
                }
                parse(t) {
                    return !!t && (this._senderId = t.readInt(), this._messageText = t.readString(), this._secondsSinceSent = t.readInt(), t.bytesAvailable && (this._extraData = t.readString()), !0)
                }
                get senderId() {
                    return this._senderId
                }
                get messageText() {
                    return this._messageText
                }
                get secondsSinceSent() {
                    return this._secondsSinceSent
                }
                get extraData() {
                    return this._extraData
                }
            }
            class xs extends M {
                constructor(t) {
                    super(t, Ls)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ps {
                flush() {
                    return this._request = null, !0
                }
                parse(t) {
                    return !!t && (this._request = new Ss(t), !0)
                }
                get request() {
                    return this._request
                }
            }
            class Fs extends M {
                constructor(t) {
                    super(t, Ps)
                }
                getParser() {
                    return this.parser
                }
            }
            class Gs {
                flush() {
                    return this._errorCode = 0, this._failedRecipients = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._errorCode = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) this._failedRecipients.push(t.readInt()), e--;
                    return !0
                }
                get errorCode() {
                    return this._errorCode
                }
                get failedRecipients() {
                    return this._failedRecipients
                }
            }
            class Ys extends M {
                constructor(t) {
                    super(t, Gs)
                }
                getParser() {
                    return this.parser
                }
            }
            class ks {
                flush() {
                    return this._senderId = 0, this._messageText = null, !0
                }
                parse(t) {
                    return !!t && (this._senderId = t.readInt(), this._messageText = t.readString(), !0)
                }
                get senderId() {
                    return this._senderId
                }
                get messageText() {
                    return this._messageText
                }
            }
            class Vs extends M {
                constructor(t) {
                    super(t, ks)
                }
                getParser() {
                    return this.parser
                }
            }
            class Zs {
                flush() {
                    return this._gameTypeId = 0, this._url = null, this._gameClientId = null, !0
                }
                parse(t) {
                    return !!t && (this._gameTypeId = t.readInt(), this._gameClientId = t.readString(), this._url = t.readString(), !0)
                }
                get gameTypeId() {
                    return this._gameTypeId
                }
                get url() {
                    return this._url
                }
                get gameClientId() {
                    return this._gameClientId
                }
            }
            class js extends M {
                constructor(t) {
                    super(t, Zs)
                }
                getParser() {
                    return this.parser
                }
            }
            class Bs {
                flush() {
                    return this._errorCode = 0, !0
                }
                parse(t) {
                    return !!t && (this._errorCode = t.readInt(), !0)
                }
                get errorCode() {
                    return this._errorCode
                }
            }
            class Hs extends M {
                constructor(t) {
                    super(t, Bs)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ws {
                flush() {
                    return this._id = 0, this._type = 0, this._title = null, this._description = null, this._badge = null, this._roomId = 0, this._roomName = null, this._membershipType = 0, this._membersCount = 0, this._createdAt = null, this._isOwner = !1, this._isAdmin = !1, this._ownerName = null, this._flag = !1, this._canMembersDecorate = !1, this._pendingRequestsCount = 0, !0
                }
                parse(t) {
                    return !!t && (this._id = t.readInt(), t.readBoolean(), this._type = t.readInt(), this._title = t.readString(), this._description = t.readString(), this._badge = t.readString(), this._roomId = t.readInt(), this._roomName = t.readString(), this._membershipType = t.readInt(), this._membersCount = t.readInt(), t.readBoolean(), this._createdAt = t.readString(), this._isOwner = t.readBoolean(), this._isAdmin = t.readBoolean(), this._ownerName = t.readString(), this._flag = t.readBoolean(), this._canMembersDecorate = t.readBoolean(), this._pendingRequestsCount = t.readInt(), !0)
                }
                get id() {
                    return this._id
                }
                get type() {
                    return this._type
                }
                get title() {
                    return this._title
                }
                get description() {
                    return this._description
                }
                get badge() {
                    return this._badge
                }
                get roomId() {
                    return this._roomId
                }
                get roomName() {
                    return this._roomName
                }
                get membershipType() {
                    return this._membershipType
                }
                get membersCount() {
                    return this._membersCount
                }
                get createdAt() {
                    return this._createdAt
                }
                get isOwner() {
                    return this._isOwner
                }
                get isAdmin() {
                    return this._isAdmin
                }
                get ownerName() {
                    return this._ownerName
                }
                get flag() {
                    return this._flag
                }
                get canMembersDecorate() {
                    return this._canMembersDecorate
                }
                get pendingRequestsCount() {
                    return this._pendingRequestsCount
                }
            }
            class zs extends M {
                constructor(t) {
                    super(t, Ws)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ks {
                flush() {
                    return this._resultType = 0, this._messageText = null, !0
                }
                parse(t) {
                    return !!t && (this._resultType = t.readInt(), this._messageText = t.readString(), !0)
                }
                get resultType() {
                    return this._resultType
                }
                get messageText() {
                    return this._messageText
                }
            }
            class Xs extends M {
                constructor(t) {
                    super(t, Ks)
                }
                getParser() {
                    return this.parser
                }
            }
            let qs = (() => {
                    class t {}
                    return t.ACHIEVEMENT_LIST = 305, t.AUTHENTICATED = 2491, t.AVAILABILITY_STATUS = 2033, t.BUILDERS_CLUB_EXPIRED = 1452, t.CAMERA_PRICE = 3878, t.CAMERA_THUMBNAIL_SAVED = 3595, t.CAMERA_URL = 3696, t.CATALOG_CLUB = 2405, t.CATALOG_MODE = 3828, t.CATALOG_PAGE = 804, t.CATALOG_PAGES = 1032, t.CATALOG_PURCHASE = 869, t.CATALOG_PURCHASE_FAILED = 1404, t.CATALOG_PURCHASE_UNAVAILABLE = 3770, t.CATALOG_SEARCH = 3388, t.CATALOG_SOLD_OUT = 377, t.CATALOG_UPDATED = 1866, t.CFH_RESULT_MESSAGE = 934, t.CLIENT_LATENCY = 10, t.CLIENT_PING = 3928, t.DESKTOP_CAMPAIGN = 1745, t.DESKTOP_NEWS = 286, t.DESKTOP_VIEW = 122, t.DISCOUNT_CONFIG = 2347, t.FIRST_LOGIN_OF_DAY = 793, t.FURNITURE_ALIASES = 1723, t.FURNITURE_DATA = 2547, t.FURNITURE_FLOOR = 1778, t.FURNITURE_FLOOR_ADD = 1534, t.FURNITURE_FLOOR_REMOVE = 2703, t.FURNITURE_FLOOR_UPDATE = 3776, t.FURNITURE_ITEMDATA = 2202, t.FURNITURE_STATE = 2376, t.GAME_CENTER_ACHIEVEMENTS = 2265, t.GAME_CENTER_GAME_LIST = 222, t.GAME_CENTER_STATUS = 2893, t.GENERIC_ALERT = 3801, t.GENERIC_ALERT_LINK = 2030, t.GENERIC_ERROR = 1600, t.GIFT_CONFIG = 2234, t.GROUP_BADGES = 2402, t.GROUP_CREATE_OPTIONS = 2159, t.GROUP_FORUM_INFO = 3011, t.GROUP_FORUM_LIST = 3001, t.GROUP_FORUM_THREADS = 1073, t.GROUP_INFO = 1702, t.GROUP_LIST = 420, t.GROUP_MEMBER = 265, t.GROUP_MEMBERS = 1200, t.GROUP_MEMBERS_REFRESH = 2445, t.GROUP_SETTINGS = 3965, t.ITEM_DIMMER_SETTINGS = 2710, t.ITEM_STACK_HELPER = 2816, t.ITEM_WALL = 1369, t.ITEM_WALL_ADD = 2187, t.ITEM_WALL_REMOVE = 3208, t.ITEM_WALL_UPDATE = 2009, t.LOAD_GAME_URL = 2624, t.MARKETPLACE_CONFIG = 1823, t.MESSENGER_ACCEPT_FRIENDS = 896, t.MESSENGER_CHAT = 1587, t.MESSENGER_FIND_FRIENDS = 1210, t.MESSENGER_FOLLOW_FAILED = 3048, t.MESSENGER_FRIEND_NOTIFICATION = 3082, t.MESSENGER_FRIENDS = 3130, t.MESSENGER_INIT = 1605, t.MESSENGER_INSTANCE_MESSAGE_ERROR = 3359, t.MESSENGER_INVITE = 3870, t.MESSENGER_INVITE_ERROR = 462, t.MESSENGER_MESSAGE_ERROR = 892, t.MESSENGER_MINIMAIL_COUNT = 2803, t.MESSENGER_MINIMAIL_NEW = 1911, t.MESSENGER_RELATIONSHIPS = 2016, t.MESSENGER_REQUEST = 2219, t.MESSENGER_REQUEST_ERROR = 892, t.MESSENGER_REQUESTS = 280, t.MESSENGER_ROOM_INVITE = 3870, t.MESSENGER_SEARCH = 973, t.MESSENGER_UPDATE = 2800, t.MODERATION_REPORT_DISABLED = 1651, t.MODERATION_TOOL = 2696, t.MODERATION_TOPICS = 325, t.MODERATION_USER_INFO = 2866, t.MOTD_MESSAGES = 2035, t.NAVIGATOR_CATEGORIES = 1562, t.NAVIGATOR_COLLAPSED = 1543, t.NAVIGATOR_EVENT_CATEGORIES = 3244, t.NAVIGATOR_LIFTED = 3104, t.NAVIGATOR_METADATA = 3052, t.NAVIGATOR_OPEN_ROOM_CREATOR = 2064, t.NAVIGATOR_SEARCH = 2690, t.NAVIGATOR_SEARCHES = 3984, t.NAVIGATOR_SETTINGS = 518, t.NOTIFICATION_LIST = 1992, t.PET_FIGURE_UPDATE = 1924, t.PET_INFO = 2901, t.RECYCLER_PRIZES = 3164, t.ROOM_BAN_LIST = 1869, t.ROOM_BAN_REMOVE = 3429, t.ROOM_CREATED = 1304, t.ROOM_DOORBELL = 2309, t.ROOM_DOORBELL_ACCEPTED = 3783, t.ROOM_DOORBELL_REJECTED = 878, t.ROOM_ENTER = 758, t.ROOM_ENTER_ERROR = 899, t.ROOM_FORWARD = 160, t.ROOM_HEIGHT_MAP = 2753, t.ROOM_HEIGHT_MAP_UPDATE = 558, t.ROOM_INFO = 687, t.ROOM_INFO_OWNER = 749, t.ROOM_MODEL = 1301, t.ROOM_MODEL_BLOCKED_TILES = 3990, t.ROOM_MODEL_DOOR = 1664, t.ROOM_MODEL_NAME = 2031, t.ROOM_MUTED = 2533, t.ROOM_MUTE_USER = 826, t.ROOM_PAINT = 2454, t.ROOM_PROMOTION = 2274, t.ROOM_QUEUE_STATUS = 2208, t.ROOM_RIGHTS = 780, t.ROOM_RIGHTS_CLEAR = 2392, t.ROOM_RIGHTS_LIST = 1284, t.ROOM_RIGHTS_LIST_ADD = 2088, t.ROOM_RIGHTS_LIST_REMOVE = 1327, t.ROOM_RIGHTS_OWNER = 339, t.ROOM_ROLLING = 3207, t.ROOM_SCORE = 482, t.ROOM_SETTINGS = 1498, t.ROOM_SETTINGS_CHAT = 1191, t.ROOM_SETTINGS_SAVE = 948, t.ROOM_SETTINGS_SAVE_ERROR = 1555, t.ROOM_SETTINGS_UPDATED = 3297, t.ROOM_SPECTATOR = 1033, t.ROOM_THICKNESS = 3547, t.SECURITY_DEBUG = 3284, t.SECURITY_MACHINE = 1488, t.SECURITY_UNKNOWN2 = 2833, t.TRADE_ACCEPTED = 2568, t.TRADE_CLOSED = 1373, t.TRADE_COMPLETED = 1001, t.TRADE_CONFIRMATION = 2720, t.TRADE_LIST_ITEM = 2024, t.TRADE_NOT_OPEN = 3128, t.TRADE_OPEN = 2505, t.TRADE_OPEN_FAILED = 217, t.TRADE_OTHER_NOT_ALLOWED = 2154, t.TRADE_YOU_NOT_ALLOWED = 3058, t.UNIT = 374, t.UNIT_CHANGE_NAME = 2182, t.UNIT_CHAT = 1446, t.UNIT_CHAT_SHOUT = 1036, t.UNIT_CHAT_WHISPER = 2704, t.UNIT_DANCE = 2233, t.UNIT_EFFECT = 1167, t.UNIT_EXPRESSION = 1631, t.UNIT_HAND_ITEM = 1474, t.UNIT_IDLE = 1797, t.UNIT_INFO = 3920, t.UNIT_NUMBER = 2324, t.UNIT_REMOVE = 2661, t.UNIT_STATUS = 1640, t.UNIT_TYPING = 1717, t.UNSEEN_ITEMS = 2103, t.USER_ACHIEVEMENT_SCORE = 1968, t.USER_BADGES = 717, t.USER_BADGES_ADD = 2493, t.USER_BADGES_CURRENT = 1087, t.USER_BOT_ADD = 1352, t.USER_BOT_REMOVE = 233, t.USER_BOTS = 3086, t.USER_CHANGE_NAME = 118, t.USER_CLOTHING = 1450, t.USER_CREDITS = 3475, t.USER_CURRENCY = 2018, t.USER_CURRENCY_UPDATE = 2275, t.USER_EFFECTS = 340, t.USER_FAVORITE_ROOM = 2524, t.USER_FAVORITE_ROOM_COUNT = 151, t.USER_FIGURE = 2429, t.USER_FURNITURE = 994, t.USER_FURNITURE_ADD = 104, t.USER_FURNITURE_POSTIT_PLACED = 1501, t.USER_FURNITURE_REFRESH = 3151, t.USER_FURNITURE_REMOVE = 159, t.USER_HOME_ROOM = 2875, t.USER_IGNORED = 126, t.USER_INFO = 2725, t.USER_OUTFITS = 3315, t.USER_PERKS = 2586, t.USER_PERMISSIONS = 411, t.USER_PET_ADD = 2101, t.USER_PET_REMOVE = 3253, t.USER_PETS = 3522, t.USER_PROFILE = 3898, t.USER_RESPECT = 2815, t.USER_SANCTION_STATUS = 3679, t.USER_SETTINGS = 513, t.USER_SUBSCRIPTION = 954, t.WIRED_ACTION = 1434, t.WIRED_CONDITION = 1108, t.WIRED_ERROR = 156, t.WIRED_OPEN = 1830, t.WIRED_REWARD = 178, t.WIRED_SAVE = 1155, t.WIRED_TRIGGER = 383, t.PLAYING_GAME = 448, t.FURNITURE_STATE_2 = 3431, t.REMOVE_BOT_FROM_INVENTORY = 233, t.ADD_BOT_TO_INVENTORY = 1352, t.ACHIEVEMENT_PROGRESSED = 2107, t.MODTOOL_ROOM_INFO = 1333, t.MODTOOL_USER_CHATLOG = 3377, t.MODTOOL_ROOM_CHATLOG = 3434, t.LOVELOCK_FURNI_START = 3753, t.LOVELOCK_FURNI_FRIEND_COMFIRMED = 382, t.LOVELOCK_FURNI_FINISHED = 770, t.CATALOG_CLUB_GIFTS = 619, t
                })(),
                Js = (() => {
                    class t {
                        constructor(t) {
                            if (this._unseen = 0, !t) throw new Error("invalid_parser");
                            this._achievementId = t.readInt(), this._level = t.readInt(), this._badgeId = t.readString(), this._Str_6791 = t.readInt(), this._Str_18274 = Math.max(1, t.readInt()), this._Str_10280 = t.readInt(), this._Str_12282 = t.readInt(), this._Str_19007 = t.readInt(), this._Str_16081 = t.readBoolean(), this._category = t.readString(), this._Str_21707 = t.readString(), this._Str_20339 = t.readInt(), this._Str_19099 = t.readInt()
                        }
                        get achievementId() {
                            return this._achievementId
                        }
                        get badgeId() {
                            return this._badgeId
                        }
                        get level() {
                            return this._level
                        }
                        get _Str_25209() {
                            return this._Str_6791
                        }
                        get _Str_24142() {
                            return this._Str_18274 - this._Str_6791
                        }
                        get rewardAmount() {
                            return this._Str_10280
                        }
                        get rewardType() {
                            return this._Str_12282
                        }
                        get _Str_22939() {
                            return this._Str_19007 - this._Str_6791
                        }
                        get _Str_7518() {
                            return this._Str_16081
                        }
                        get category() {
                            return this._category
                        }
                        get _Str_25896() {
                            return this._Str_21707
                        }
                        get totalLevels() {
                            return this._Str_20339
                        }
                        get _Str_10438() {
                            return this._level > 1 || this._Str_16081
                        }
                        _Str_24410() {
                            this._Str_19007 = this._Str_18274
                        }
                        get _Str_24874() {
                            return this._Str_19099
                        }
                        get progress() {
                            return this._Str_19007
                        }
                        get toNextProgress() {
                            return this._Str_18274
                        }
                        set unseen(t) {
                            this._unseen = t
                        }
                        get unseen() {
                            return this._unseen
                        }
                        reset(t) {
                            this._achievementId = t._achievementId, this._level = t._level, this._badgeId = t._badgeId, this._Str_6791 = t._Str_6791, this._Str_18274 = t._Str_18274, this._Str_10280 = t._Str_10280, this._Str_12282 = t._Str_12282, this._Str_19007 = t._Str_19007, this._Str_16081 = t._Str_16081, this._category = t.category, this._Str_21707 = t._Str_21707, this._Str_20339 = t._Str_20339, this._Str_19099 = t._Str_19099
                        }
                    }
                    return t._Str_21736 = -1, t._Str_21318 = 0, t._Str_15908 = 1, t._Str_20384 = 2, t
                })();
            class Qs {
                flush() {
                    return this._achievement = null, !0
                }
                parse(t) {
                    return !!t && (this._achievement = new Js(t), !0)
                }
                get achievement() {
                    return this._achievement
                }
            }
            class $s extends M {
                constructor(t) {
                    super(t, Qs)
                }
                getParser() {
                    return this.parser
                }
            }
            class ti {
                flush() {
                    return this._achievements = [], this._Str_19269 = null, !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._achievements = [];
                    let e = t.readInt();
                    for (; e > 0;) this._achievements.push(new Js(t)), e--;
                    return this._Str_19269 = t.readString(), !0
                }
                get achievements() {
                    return this._achievements
                }
                get _Str_16300() {
                    return this._Str_19269
                }
            }
            class ei extends M {
                constructor(t) {
                    super(t, ti)
                }
                getParser() {
                    return this.parser
                }
            }
            class si {
                flush() {
                    return this._score = 0, !0
                }
                parse(t) {
                    return !!t && (this._score = t.readInt(), !0)
                }
                get score() {
                    return this._score
                }
            }
            class ii extends M {
                constructor(t) {
                    super(t, si)
                }
                getParser() {
                    return this.parser
                }
            }
            class ni {
                constructor(t) {
                    if (!t) throw new Error("invalid_parser");
                    this._id = t.readInt(), this._name = t.readString(), this._motto = t.readString(), this._gender = t.readString(), this._figure = t.readString()
                }
                get id() {
                    return this._id
                }
                get name() {
                    return this._name
                }
                get motto() {
                    return this._motto
                }
                get figure() {
                    return this._figure
                }
                get gender() {
                    return this._gender
                }
            }
            class ri {
                flush() {
                    return this._item = null, this._openInventory = !1, !0
                }
                parse(t) {
                    return !!t && (this._item = new ni(t), this._openInventory = t.readBoolean(), !0)
                }
                get item() {
                    return this._item
                }
                openInventory() {
                    return this._openInventory
                }
            }
            class oi extends M {
                constructor(t) {
                    super(t, ri)
                }
                getParser() {
                    return this.parser
                }
            }
            class ai {
                flush() {
                    return this._items && (this._items.dispose(), this._items = null), !0
                }
                parse(t) {
                    this._items = new x;
                    let e = t.readInt();
                    for (; e > 0;) {
                        const s = new ni(t);
                        this._items.add(s.id, s), e--
                    }
                    return !0
                }
                get items() {
                    return this._items
                }
            }
            class ci extends M {
                constructor(t) {
                    super(t, ai)
                }
                getParser() {
                    return this.parser
                }
            }
            class _i {
                flush() {
                    return this._itemId = 0, !0
                }
                parse(t) {
                    return !!t && (this._itemId = t.readInt(), !0)
                }
                get itemId() {
                    return this._itemId
                }
            }
            class hi extends M {
                constructor(t) {
                    super(t, _i)
                }
                getParser() {
                    return this.parser
                }
            }
            class li {
                flush() {
                    return this._figureSetIds = [], this._boundFurnitureNames = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._figureSetIds.push(t.readInt()), e--;
                    let s = t.readInt();
                    for (; s > 0;) this._boundFurnitureNames.push(t.readString()), s--;
                    return !0
                }
                get figureSetIds() {
                    return this._figureSetIds
                }
                get boundsFurnitureNames() {
                    return this._boundFurnitureNames
                }
            }
            class ui extends M {
                constructor(t) {
                    super(t, li)
                }
                getParser() {
                    return this.parser
                }
            }
            let di = (() => {
                class t {}
                return t.UNIQUE_SET = 256, t
            })();
            class gi {
                constructor() {
                    this._flags = 0, this._uniqueNumber = 0, this._uniqueSeries = 0
                }
                parseWrapper(t) {
                    (this._flags & di.UNIQUE_SET) > 0 && (this._uniqueNumber = t.readInt(), this._uniqueSeries = t.readInt())
                }
                initializeFromRoomObjectModel(t) {
                    this._uniqueNumber = t.getValue(j.FURNITURE_UNIQUE_SERIAL_NUMBER), this._uniqueSeries = t.getValue(j.FURNITURE_UNIQUE_EDITION_SIZE)
                }
                writeRoomObjectModel(t) {
                    t && (t.setValue(j.FURNITURE_UNIQUE_SERIAL_NUMBER, this._uniqueNumber), t.setValue(j.FURNITURE_UNIQUE_EDITION_SIZE, this._uniqueSeries))
                }
                getLegacyString() {
                    return ""
                }
                compare(t) {
                    return !1
                }
                get state() {
                    const t = parseInt(this.getLegacyString());
                    return isNaN(t) ? 0 : t
                }
                get isUnique() {
                    return this._uniqueSeries > 0
                }
                get uniqueNumber() {
                    return this._uniqueNumber
                }
                get uniqueSeries() {
                    return this._uniqueSeries
                }
                get flags() {
                    return this._flags
                }
                set flags(t) {
                    this._flags = t
                }
            }
            let mi = (() => {
                    class t {}
                    return t.LEGACY_KEY = 0, t.MAP_KEY = 1, t.STRING_KEY = 2, t.VOTE_KEY = 3, t.EMPTY_KEY = 4, t.NUMBER_KEY = 5, t.HIGHSCORE_KEY = 6, t.CRACKABLE_KEY = 7, t
                })(),
                pi = (() => {
                    class t extends gi {
                        constructor() {
                            super(), this._state = "", this._hits = 0, this._target = 0
                        }
                        parseWrapper(t) {
                            t && (this._state = t.readString(), this._hits = t.readInt(), this._target = t.readInt(), super.parseWrapper(t))
                        }
                        initializeFromRoomObjectModel(t) {
                            super.initializeFromRoomObjectModel(t), this._state = t.getValue(j.FURNITURE_CRACKABLE_STATE), this._hits = t.getValue(j.FURNITURE_CRACKABLE_HITS), this._target = t.getValue(j.FURNITURE_CRACKABLE_TARGET)
                        }
                        writeRoomObjectModel(e) {
                            super.writeRoomObjectModel(e), e.setValue(j.FURNITURE_DATA_FORMAT, t.FORMAT_KEY), e.setValue(j.FURNITURE_CRACKABLE_STATE, this._state), e.setValue(j.FURNITURE_CRACKABLE_HITS, this._hits), e.setValue(j.FURNITURE_CRACKABLE_TARGET, this._target)
                        }
                        getLegacyString() {
                            return this._state
                        }
                        compare(t) {
                            return !0
                        }
                        get hits() {
                            return this._hits
                        }
                        get target() {
                            return this._target
                        }
                    }
                    return t.FORMAT_KEY = mi.CRACKABLE_KEY, t
                })(),
                bi = (() => {
                    class t extends gi {
                        parseWrapper(t) {
                            t && (this._state = "", super.parseWrapper(t))
                        }
                        writeRoomObjectModel(e) {
                            super.writeRoomObjectModel(e), e.setValue(j.FURNITURE_DATA_FORMAT, t.FORMAT_KEY)
                        }
                        getLegacyString() {
                            return this._state
                        }
                        compare(t) {
                            return super.compare(t)
                        }
                    }
                    return t.FORMAT_KEY = mi.EMPTY_KEY, t
                })();
            class Ei {
                constructor() {
                    this._score = -1, this._users = []
                }
                get score() {
                    return this._score
                }
                set score(t) {
                    this._score = t
                }
                get users() {
                    return this._users
                }
                set users(t) {
                    this._users = t
                }
                addUsername(t) {
                    this._users.push(t)
                }
            }
            let fi = (() => {
                    class t extends gi {
                        constructor() {
                            super(), this._state = "", this._scoreType = -1, this._clearType = -1, this._entries = []
                        }
                        parseWrapper(t) {
                            if (!t) return;
                            this._state = t.readString(), this._scoreType = t.readInt(), this._clearType = t.readInt();
                            let e = t.readInt();
                            for (; e > 0;) {
                                const s = new Ei;
                                s.score = t.readInt();
                                let i = t.readInt();
                                for (; i > 0;) s.addUsername(t.readString()), i--;
                                this._entries.push(s), e--
                            }
                            super.parseWrapper(t)
                        }
                        initializeFromRoomObjectModel(t) {
                            this._scoreType = t.getValue(j.FURNITURE_HIGHSCORE_SCORE_TYPE), this._clearType = t.getValue(j.FURNITURE_HIGHSCORE_CLEAR_TYPE), this._entries = [];
                            const e = t.getValue(j.FURNITURE_HIGHSCORE_DATA_ENTRY_COUNT);
                            let s = 0;
                            for (; s < e;) {
                                const e = new Ei;
                                e.score = t.getValue(j.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_SCORE_ + s), e.users = t.getValue(j.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_USERS_ + s), this._entries.push(e), s++
                            }
                            super.initializeFromRoomObjectModel(t)
                        }
                        writeRoomObjectModel(e) {
                            if (super.writeRoomObjectModel(e), e.setValue(j.FURNITURE_DATA_FORMAT, t.FORMAT_KEY), e.setValue(j.FURNITURE_HIGHSCORE_SCORE_TYPE, this._scoreType), e.setValue(j.FURNITURE_HIGHSCORE_CLEAR_TYPE, this._clearType), this._entries) {
                                e.setValue(j.FURNITURE_HIGHSCORE_DATA_ENTRY_COUNT, this._entries.length);
                                let t = 0;
                                for (; t < this._entries.length;) {
                                    const s = this._entries[t];
                                    e.setValue(j.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_SCORE_ + t, s.score), e.setValue(j.FURNITURE_HIGHSCORE_DATA_ENTRY_BASE_USERS_ + t, s.users), t++
                                }
                            }
                        }
                        getLegacyString() {
                            return this._state
                        }
                        get entries() {
                            return this._entries
                        }
                    }
                    return t.FORMAT_KEY = mi.HIGHSCORE_KEY, t
                })(),
                Si = (() => {
                    class t extends gi {
                        constructor() {
                            super(), this._data = ""
                        }
                        parseWrapper(t) {
                            t && (this._data = t.readString(), super.parseWrapper(t))
                        }
                        initializeFromRoomObjectModel(t) {
                            super.initializeFromRoomObjectModel(t), this._data = t.getValue(j.FURNITURE_DATA)
                        }
                        writeRoomObjectModel(e) {
                            super.writeRoomObjectModel(e), e.setValue(j.FURNITURE_DATA_FORMAT, t.FORMAT_KEY), e.setValue(j.FURNITURE_DATA, this._data)
                        }
                        getLegacyString() {
                            return this._data
                        }
                        compare(t) {
                            return this._data === t.getLegacyString()
                        }
                        setString(t) {
                            this._data = t
                        }
                    }
                    return t.FORMAT_KEY = mi.LEGACY_KEY, t
                })(),
                Ii = (() => {
                    class t extends gi {
                        constructor() {
                            super(), this._data = {}
                        }
                        parseWrapper(t) {
                            if (!t) return;
                            this._data = {};
                            const e = t.readInt();
                            if (e)
                                for (let s = 0; s < e; s++) this._data[t.readString()] = t.readString();
                            super.parseWrapper(t)
                        }
                        initializeFromRoomObjectModel(t) {
                            super.initializeFromRoomObjectModel(t), this._data = t.getValue(j.FURNITURE_DATA) || {}
                        }
                        writeRoomObjectModel(e) {
                            super.writeRoomObjectModel(e), e.setValue(j.FURNITURE_DATA_FORMAT, t.FORMAT_KEY), e.setValue(j.FURNITURE_DATA, this._data)
                        }
                        getLegacyString() {
                            if (!this._data || !this._data.length) return "";
                            const e = this._data[t.STATE];
                            return null == e ? "" : e
                        }
                        compare(t) {
                            return !1
                        }
                        getValue(t) {
                            return this._data[t]
                        }
                        get data() {
                            return this._data
                        }
                    }
                    return t.FORMAT_KEY = mi.MAP_KEY, t.STATE = "state", t.RARITY = "rarity", t
                })(),
                Ri = (() => {
                    class t extends gi {
                        constructor() {
                            super(), this._data = []
                        }
                        parseWrapper(t) {
                            if (!t) return;
                            this._data = [];
                            const e = t.readInt();
                            if (e)
                                for (let s = 0; s < e; s++) this._data.push(t.readInt());
                            super.parseWrapper(t)
                        }
                        initializeFromRoomObjectModel(t) {
                            super.initializeFromRoomObjectModel(t), this._data = t.getValue(j.FURNITURE_DATA)
                        }
                        writeRoomObjectModel(e) {
                            super.writeRoomObjectModel(e), e.setValue(j.FURNITURE_DATA_FORMAT, t.FORMAT_KEY), e.setValue(j.FURNITURE_DATA, this._data)
                        }
                        getLegacyString() {
                            return this._data && this._data.length ? this._data[t.STATE].toString() : ""
                        }
                        compare(e) {
                            if (!(e instanceof t)) return !1;
                            let s = 0;
                            for (; s < this._data.length;) {
                                if (0 === s);
                                else if (this._data[s] !== e.getValue(s)) return !1;
                                s++
                            }
                            return !0
                        }
                        getValue(t) {
                            if (!this._data || !this._data.length) return -1;
                            const e = this._data[t];
                            return null == e ? -1 : e
                        }
                    }
                    return t.FORMAT_KEY = mi.NUMBER_KEY, t.STATE = 0, t
                })(),
                vi = (() => {
                    class t extends gi {
                        constructor() {
                            super(), this._data = []
                        }
                        parseWrapper(t) {
                            if (!t) return;
                            this._data = [];
                            const e = t.readInt();
                            if (e)
                                for (let s = 0; s < e; s++) this._data.push(t.readString());
                            super.parseWrapper(t)
                        }
                        initializeFromRoomObjectModel(t) {
                            super.initializeFromRoomObjectModel(t), this._data = t.getValue(j.FURNITURE_DATA)
                        }
                        writeRoomObjectModel(e) {
                            super.writeRoomObjectModel(e), e.setValue(j.FURNITURE_DATA_FORMAT, t.FORMAT_KEY), e.setValue(j.FURNITURE_DATA, this._data)
                        }
                        getLegacyString() {
                            return this._data && this._data.length ? this._data[t.STATE] : ""
                        }
                        compare(e) {
                            if (!(e instanceof t)) return !1;
                            let s = 0;
                            for (; s < this._data.length;) {
                                if (0 === s);
                                else if (this._data[s] !== e.getValue(s)) return !1;
                                s++
                            }
                            return !0
                        }
                        getValue(t) {
                            return this._data[t] || ""
                        }
                    }
                    return t.FORMAT_KEY = mi.STRING_KEY, t.STATE = 0, t
                })(),
                Ti = (() => {
                    class t extends gi {
                        constructor() {
                            super(), this._state = "", this._result = 0
                        }
                        parseWrapper(t) {
                            t && (this._state = t.readString(), this._result = t.readInt(), super.parseWrapper(t))
                        }
                        writeRoomObjectModel(e) {
                            super.writeRoomObjectModel(e), e.setValue(j.FURNITURE_DATA_FORMAT, t.FORMAT_KEY);
                            const s = {};
                            s.S = this._state, s.R = this._result.toString(), e.setValue(j.FURNITURE_DATA, s)
                        }
                        getLegacyString() {
                            return this._state
                        }
                        compare(t) {
                            return !0
                        }
                        setString(t) {
                            this._state = t
                        }
                        get result() {
                            return this._result
                        }
                    }
                    return t.FORMAT_KEY = mi.VOTE_KEY, t
                })();
            class Oi {
                static getData(t) {
                    let e = null;
                    switch (255 & t) {
                        case pi.FORMAT_KEY:
                            e = new pi;
                            break;
                        case bi.FORMAT_KEY:
                            e = new bi;
                            break;
                        case fi.FORMAT_KEY:
                            e = new fi;
                            break;
                        case Si.FORMAT_KEY:
                            e = new Si;
                            break;
                        case Ii.FORMAT_KEY:
                            e = new Ii;
                            break;
                        case Ri.FORMAT_KEY:
                            e = new Ri;
                            break;
                        case vi.FORMAT_KEY:
                            e = new vi;
                            break;
                        case Ti.FORMAT_KEY:
                            e = new Ti
                    }
                    return e ? (e.flags = 65280 & t, e) : null
                }
            }
            class yi {
                flush() {
                    return this._itemId = 0, this._data = null, !0
                }
                parse(t) {
                    return !!t && (this._itemId = parseInt(t.readString()), this._data = yi.parseObjectData(t), !0)
                }
                static parseObjectData(t) {
                    if (!t) return null;
                    const e = Oi.getData(t.readInt());
                    return e ? (e.parseWrapper(t), e) : null
                }
                static parseWallStuffData(t) {
                    if (!t) return null;
                    const e = new Si;
                    return e.setString(t.readString()), e
                }
                get furnitureId() {
                    return this._itemId
                }
                get objectData() {
                    return this._data
                }
            }
            let Ai = (() => {
                class t {
                    constructor(t) {
                        if (!t) throw new Error("invalid_wrapper");
                        this.flush(), this.parse(t)
                    }
                    flush() {
                        return this._rentable = !1, this._itemId = 0, this._furniType = null, this._ref = 0, this._spriteId = 0, this._category = 0, this._stuffData = null, this._isGroupable = !1, this._isRecyclable = !1, this._tradable = !1, this._sellable = !1, this._secondsToExpiration = 0, this._Str_3182 = 0, this._flatId = 0, this._isWallItem = !1, this._hasRentPeriodStarted = !1, this._Str_5390 = 0, this._slotId = "", this._Str_2808 = -1, !0
                    }
                    parse(e) {
                        return !!e && (this._itemId = e.readInt(), this._furniType = e.readString(), this._ref = e.readInt(), this._spriteId = e.readInt(), this._category = e.readInt(), this._stuffData = yi.parseObjectData(e), this._isRecyclable = e.readBoolean(), this._tradable = e.readBoolean(), this._isGroupable = e.readBoolean(), this._sellable = e.readBoolean(), this._secondsToExpiration = e.readInt(), this._Str_5390 = cp.instance.time, this.secondsToExpiration > -1 ? this._rentable = !0 : (this._rentable = !1, this._secondsToExpiration = -1), this._hasRentPeriodStarted = e.readBoolean(), this._flatId = e.readInt(), this._isWallItem = this._furniType === t.WALL_ITEM, this._furniType === t.FLOOR_ITEM && (this._slotId = e.readString(), this._Str_3182 = e.readInt()), !0)
                    }
                    get itemId() {
                        return this._itemId
                    }
                    get furniType() {
                        return this._furniType
                    }
                    get ref() {
                        return this._ref
                    }
                    get spriteId() {
                        return this._spriteId
                    }
                    get category() {
                        return this._category
                    }
                    get stuffData() {
                        return this._stuffData
                    }
                    get isGroupable() {
                        return this._isGroupable
                    }
                    get isRecycleable() {
                        return this._isRecyclable
                    }
                    get tradable() {
                        return this._tradable
                    }
                    get sellable() {
                        return this._sellable
                    }
                    get secondsToExpiration() {
                        return this._secondsToExpiration
                    }
                    get flatId() {
                        return this._flatId
                    }
                    get slotId() {
                        return this._slotId
                    }
                    get _Str_3951() {
                        return this._Str_2808
                    }
                    get _Str_2794() {
                        return this._Str_3182
                    }
                    get rentable() {
                        return this._rentable
                    }
                    get isWallItem() {
                        return this._isWallItem
                    }
                    get hasRentPeriodStarted() {
                        return this._hasRentPeriodStarted
                    }
                    get _Str_10616() {
                        return this._Str_5390
                    }
                    get _Str_8932() {
                        return 0
                    }
                    get _Str_9050() {
                        return 0
                    }
                    get _Str_9408() {
                        return 0
                    }
                    get _Str_19297() {
                        return !(-1 === this._furniType.indexOf("external_image"))
                    }
                }
                return t.WALL_ITEM = "I", t.FLOOR_ITEM = "S", t
            })();
            class Ci {
                flush() {
                    return this._items = [], !0
                }
                parse(t) {
                    return !!t && (this._items.push(new Ai(t)), !0)
                }
                get items() {
                    return this._items
                }
            }
            class Mi extends M {
                constructor(t) {
                    super(t, Ci)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ui {
                flush() {
                    return this._totalFragments = 0, this._fragmentNumber = 0, this._fragment = new Map, !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._totalFragments = t.readInt(), this._fragmentNumber = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) {
                        const s = new Ai(t);
                        s && this._fragment.set(s.itemId, s), e--
                    }
                    return !0
                }
                get totalFragments() {
                    return this._totalFragments
                }
                get fragmentNumber() {
                    return this._fragmentNumber
                }
                get fragment() {
                    return this._fragment
                }
            }
            class Di extends M {
                constructor(t) {
                    super(t, Ui)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ni {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class wi extends M {
                constructor(t) {
                    super(t, Ni)
                }
                getParser() {
                    return this.parser
                }
            }
            class Li {
                flush() {
                    return this._itemId = 0, !0
                }
                parse(t) {
                    return !!t && (this._itemId = t.readInt(), !0)
                }
                get itemId() {
                    return this._itemId
                }
            }
            class xi extends M {
                constructor(t) {
                    super(t, Li)
                }
                getParser() {
                    return this.parser
                }
            }
            class Pi {
                flush() {
                    return this._itemId = 0, this._itemsLeft = 0, !0
                }
                parse(t) {
                    return !!t && (this._itemId = t.readInt(), this._itemsLeft = t.readInt(), !0)
                }
                get itemId() {
                    return this._itemId
                }
                get itemsLeft() {
                    return this._itemsLeft
                }
            }
            class Fi extends M {
                constructor(t) {
                    super(t, Pi)
                }
                getParser() {
                    return this.parser
                }
            }
            class Gi {
                flush() {
                    return this._userID = -1, this._userAccepts = !1, !0
                }
                parse(t) {
                    return !!t && (this._userID = t.readInt(), this._userAccepts = t.readInt() > 0, !0)
                }
                get _Str_4963() {
                    return this._userID
                }
                get _Str_15794() {
                    return this._userAccepts
                }
            }
            class Yi extends M {
                constructor(t) {
                    super(t, Gi)
                }
                get _Str_4963() {
                    return this.getParser()._Str_4963
                }
                get _Str_15794() {
                    return this.getParser()._Str_15794
                }
                getParser() {
                    return this.parser
                }
            }
            let ki = (() => {
                class t {
                    flush() {
                        return !0
                    }
                    parse(t) {
                        return !!t && (this._userId = t.readInt(), this._reason = t.readInt(), !0)
                    }
                    get _Str_4963() {
                        return this._userId
                    }
                    get reason() {
                        return this._reason
                    }
                }
                return t._Str_16410 = 1, t
            })();
            class Vi extends M {
                constructor(t) {
                    super(t, ki)
                }
                get _Str_4963() {
                    return this.getParser()._Str_4963
                }
                getParser() {
                    return this.parser
                }
            }
            class Zi {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class ji extends M {
                constructor(t) {
                    super(t, Zi)
                }
                getParser() {
                    return this.parser
                }
            }
            class Bi {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class Hi extends M {
                constructor(t) {
                    super(t, Bi)
                }
                getParser() {
                    return this.parser
                }
            }
            class Wi {
                constructor(t) {
                    this._itemId = t.readInt(), this._furniType = t.readString().toUpperCase(), this._ref = t.readInt(), this._spriteId = t.readInt(), this._category = t.readInt(), this._isGroupable = t.readBoolean(), this._stuffData = yi.parseObjectData(t), this._secondsToExpiration = -1, this._Str_5390 = cp.instance.time, this._hasRentPeriodStarted = !1, this._Str_9291 = t.readInt(), this._Str_8744 = t.readInt(), this._Str_9700 = t.readInt(), this._Str_3182 = "S" === this.furniType ? t.readInt() : -1, this._flatId = -1, this._rentable = !1, this._isWallItem = "I" === this._furniType
                }
                get itemId() {
                    return this._itemId
                }
                get furniType() {
                    return this._furniType
                }
                get ref() {
                    return this._ref
                }
                get spriteId() {
                    return this._spriteId
                }
                get category() {
                    return this._category
                }
                get stuffData() {
                    return this._stuffData
                }
                get _Str_2794() {
                    return this._Str_3182
                }
                get secondsToExpiration() {
                    return this._secondsToExpiration
                }
                get _Str_8932() {
                    return this._Str_9291
                }
                get _Str_9050() {
                    return this._Str_8744
                }
                get _Str_9408() {
                    return this._Str_9700
                }
                get isGroupable() {
                    return this._isGroupable
                }
                get _Str_3951() {
                    return this._Str_3182
                }
                get flatId() {
                    return this._flatId
                }
                get rentable() {
                    return this._rentable
                }
                get isWallItem() {
                    return this._isWallItem
                }
                get hasRentPeriodStarted() {
                    return this._hasRentPeriodStarted
                }
                get _Str_10616() {
                    return this._Str_5390
                }
                get isRecycleable() {
                    return !0
                }
                get tradable() {
                    return !0
                }
                get sellable() {
                    return !0
                }
                get slotId() {
                    return null
                }
                get _Str_19297() {
                    return -1 !== this._furniType.indexOf("external_image")
                }
            }
            class zi {
                flush() {
                    return this._firstUserID = -1, this._firstUserItemArray = null, this._firstUserNumItems = 0, this._firstUserNumCredits = 0, this._secondUserID = -1, this._secondUserItemArray = null, this._secondUserNumItems = 0, this._secondUserNumCredits = 0, !0
                }
                parse(t) {
                    return !(!t || (this._firstUserID = t.readInt(), this._firstUserItemArray = [], !this.parseItems(t, this._firstUserItemArray) || (this._firstUserNumItems = t.readInt(), this._firstUserNumCredits = t.readInt(), this._secondUserID = t.readInt(), this._secondUserItemArray = [], !this.parseItems(t, this._secondUserItemArray) || (this._secondUserNumItems = t.readInt(), this._secondUserNumCredits = t.readInt(), 0))))
                }
                parseItems(t, e) {
                    let s = t.readInt();
                    for (; s > 0;) e.push(new Wi(t)), s--;
                    return !0
                }
                get _Str_15162() {
                    return this._firstUserID
                }
                get _Str_17841() {
                    return this._firstUserItemArray
                }
                get _Str_14946() {
                    return this._firstUserNumItems
                }
                get _Str_15709() {
                    return this._firstUserNumCredits
                }
                get _Str_18215() {
                    return this._secondUserID
                }
                get _Str_17465() {
                    return this._secondUserItemArray
                }
                get _Str_13801() {
                    return this._secondUserNumItems
                }
                get _Str_9138() {
                    return this._secondUserNumCredits
                }
            }
            class Ki extends M {
                constructor(t) {
                    super(t, zi)
                }
                get _Str_15162() {
                    return this.getParser()._Str_15162
                }
                get _Str_18215() {
                    return this.getParser()._Str_18215
                }
                get _Str_14946() {
                    return this.getParser()._Str_14946
                }
                get _Str_13801() {
                    return this.getParser()._Str_13801
                }
                get _Str_15709() {
                    return this.getParser()._Str_15709
                }
                get _Str_9138() {
                    return this.getParser()._Str_9138
                }
                get _Str_17841() {
                    return this.getParser()._Str_17841
                }
                get _Str_17465() {
                    return this.getParser()._Str_17465
                }
                getParser() {
                    return this.parser
                }
            }
            class Xi {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class qi extends M {
                constructor(t) {
                    super(t, Xi)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ji {
                flush() {
                    return this._userId = -1, this._userCanTrade = !1, this._otherUserId = -1, this._otherUserCanTrade = !1, !0
                }
                parse(t) {
                    return !!t && (this._userId = t.readInt(), this._userCanTrade = 1 === t.readInt(), this._otherUserId = t.readInt(), this._otherUserCanTrade = 1 === t.readInt(), !0)
                }
                get _Str_4963() {
                    return this._userId
                }
                get _Str_16764() {
                    return this._userCanTrade
                }
                get _Str_17613() {
                    return this._otherUserId
                }
                get _Str_13374() {
                    return this._otherUserCanTrade
                }
            }
            class Qi extends M {
                constructor(t) {
                    super(t, Ji)
                }
                get _Str_4963() {
                    return this.getParser()._Str_4963
                }
                get _Str_16764() {
                    return this.getParser()._Str_16764
                }
                get _Str_17613() {
                    return this.getParser()._Str_17613
                }
                get _Str_13374() {
                    return this.getParser()._Str_13374
                }
                getParser() {
                    return this.parser
                }
            }
            let $i = (() => {
                class t {
                    flush() {
                        return !0
                    }
                    parse(t) {
                        return !!t && (this._reason = t.readInt(), this._Str_10068 = t.readString(), !0)
                    }
                    get reason() {
                        return this._reason
                    }
                    get _Str_17035() {
                        return this._Str_10068
                    }
                }
                return t._Str_18150 = 7, t._Str_18383 = 8, t
            })();
            class tn extends M {
                constructor(t) {
                    super(t, $i)
                }
                getParser() {
                    return this.parser
                }
            }
            class en {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class sn extends M {
                constructor(t) {
                    super(t, en)
                }
                getParser() {
                    return this.parser
                }
            }
            class nn {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class rn extends M {
                constructor(t) {
                    super(t, nn)
                }
                getParser() {
                    return this.parser
                }
            }
            class on {
                flush() {
                    return this._message = null, this._link = null, !0
                }
                parse(t) {
                    return !!t && (this._message = t.readString(), this._link = t.readString(), !0)
                }
                get message() {
                    return this._message
                }
                get link() {
                    return this._link
                }
            }
            class an extends M {
                constructor(t) {
                    super(t, on)
                }
                getParser() {
                    return this.parser
                }
            }
            class cn {
                constructor(t, e, s, i, n) {
                    this._timestamp = t, this._habboId = e, this._username = s, this._message = i, this._boolean = n
                }
                get timestamp() {
                    return this._timestamp
                }
                get habboId() {
                    return this._habboId
                }
                get username() {
                    return this._username
                }
                get message() {
                    return this._message
                }
            }
            class _n {
                constructor() {
                    this._chatlogs = []
                }
                flush() {
                    return this._id = null, this._name = null, this._chatlogCount = 0, this._chatlogs = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    t.readByte(), t.readShort(), t.readString(), t.readByte(), this._name = t.readString(), t.readString(), t.readByte(), this._id = t.readInt(), this._chatlogCount = t.readShort();
                    for (let e = 0; e < this._chatlogCount; e++) {
                        const e = t.readString(),
                            s = t.readInt(),
                            i = t.readString(),
                            n = t.readString(),
                            r = t.readBoolean();
                        this._chatlogs.push(new cn(e, s, i, n, r))
                    }
                    return !0
                }
                get id() {
                    return this._id
                }
                get name() {
                    return this._name
                }
                get chatlogs() {
                    return this._chatlogs
                }
            }
            class hn extends M {
                constructor(t) {
                    super(t, _n)
                }
                getParser() {
                    return this.parser
                }
            }
            class ln {
                flush() {
                    return this._id = null, !0
                }
                parse(t) {
                    return !!t && (this._id = t.readInt(), this._playerAmount = t.readInt(), this._owner = t.readBoolean(), this._ownerId = t.readInt(), this._ownerName = t.readString(), this._bool = t.readBoolean(), this._name = t.readString(), this._description = t.readString(), this._tagsTotal = t.readInt(), !0)
                }
                get id() {
                    return this._id
                }
                get playerAmount() {
                    return this._playerAmount
                }
                get owner() {
                    return this._owner
                }
                get ownerId() {
                    return this._ownerId
                }
                get ownerName() {
                    return this._ownerName
                }
                get name() {
                    return this._name
                }
                get description() {
                    return this._description
                }
            }
            class un extends M {
                constructor(t) {
                    super(t, ln)
                }
                getParser() {
                    return this.parser
                }
            }
            class dn {
                constructor(t, e, s) {
                    this._roomName = t, this._roomId = e, this._chatlogs = s
                }
                get roomName() {
                    return this._roomName
                }
                get roomId() {
                    return this._roomId
                }
                get chatlogs() {
                    return this._chatlogs
                }
            }
            class gn {
                constructor(t, e, s, i, n) {
                    this._timestamp = t, this._userId = e, this._userName = s, this._message = i, this._bool = n
                }
                get timestamp() {
                    return this._timestamp
                }
                get userId() {
                    return this._userId
                }
                get userName() {
                    return this._userName
                }
                get message() {
                    return this._message
                }
                get bool() {
                    return this._bool
                }
            }
            class mn {
                constructor() {
                    this._roomVisits = []
                }
                flush() {
                    return this._id = null, this._username = null, this._size = null, this._roomVisits = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._id = t.readInt(), this._username = t.readString(), this._size = t.readInt();
                    for (let e = 0; e < this._size; e++) {
                        t.readByte(), t.readShort(), t.readString(), t.readByte();
                        const e = t.readString();
                        t.readString(), t.readByte();
                        const s = t.readInt(),
                            i = [],
                            n = t.readShort();
                        for (let r = 0; r < n; r++) {
                            const e = t.readString(),
                                s = t.readInt(),
                                n = t.readString(),
                                r = t.readString(),
                                o = t.readBoolean();
                            i.push(new gn(e, s, n, r, o))
                        }
                        this._roomVisits.push(new dn(e, s, i))
                    }
                    return !0
                }
                get id() {
                    return this._id
                }
                get username() {
                    return this._username
                }
                get roomVisits() {
                    return this._roomVisits
                }
            }
            class pn extends M {
                constructor(t) {
                    super(t, mn)
                }
                getParser() {
                    return this.parser
                }
            }
            class bn {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._id = -1, this._name = null, this._visible = !1, this._automatic = !1, this._automaticCategoryKey = null, this._globalCategoryKey = null, this._staffOnly = !1, !0
                }
                parse(t) {
                    return !!t && (this._id = t.readInt(), this._name = t.readString(), this._visible = t.readBoolean(), this._automatic = t.readBoolean(), this._automaticCategoryKey = t.readString(), this._globalCategoryKey = t.readString(), this._staffOnly = t.readBoolean(), !0)
                }
                get id() {
                    return this._id
                }
                get name() {
                    return this._name
                }
                get visible() {
                    return this._visible
                }
                get automatic() {
                    return this._automatic
                }
                get automaticCategoryKey() {
                    return this._automaticCategoryKey
                }
                get globalCategoryKey() {
                    return this._globalCategoryKey
                }
                get staffOnly() {
                    return this._staffOnly
                }
            }
            class En {
                flush() {
                    return this._categories = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._categories.push(new bn(t)), e--;
                    return !0
                }
                get categories() {
                    return this._categories
                }
            }
            class fn extends M {
                constructor(t) {
                    super(t, En)
                }
                getParser() {
                    return this.parser
                }
            }
            class Sn {
                flush() {
                    return this._categories = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._categories.push(t.readString()), e--;
                    return !0
                }
                get categories() {
                    return this._categories
                }
            }
            class In extends M {
                constructor(t) {
                    super(t, Sn)
                }
                getParser() {
                    return this.parser
                }
            }
            class Rn {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._id = -1, this._name = null, this._visible = !1, !0
                }
                parse(t) {
                    return !!t && (this._id = t.readInt(), this._name = t.readString(), this._visible = t.readBoolean(), !0)
                }
                get id() {
                    return this._id
                }
                get name() {
                    return this._name
                }
                get visible() {
                    return this._visible
                }
            }
            class vn {
                flush() {
                    return this._categories = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._categories.push(new Rn(t)), e--;
                    return !0
                }
                get categories() {
                    return this._categories
                }
            }
            class Tn extends M {
                constructor(t) {
                    super(t, vn)
                }
                getParser() {
                    return this.parser
                }
            }
            class On {
                flush() {
                    return this._homeRoomId = -1, this._roomIdToEnter = -1, !0
                }
                parse(t) {
                    return !!t && (this._homeRoomId = t.readInt(), this._roomIdToEnter = t.readInt(), !0)
                }
                get homeRoomId() {
                    return this._homeRoomId
                }
                get roomIdToEnter() {
                    return this._roomIdToEnter
                }
            }
            class yn extends M {
                constructor(t) {
                    super(t, On)
                }
                getParser() {
                    return this.parser
                }
            }
            class An {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._roomId = -1, this._areaId = -1, this._image = null, this._caption = null, !0
                }
                parse(t) {
                    return !!t && (this._roomId = t.readInt(), this._areaId = t.readInt(), this._image = t.readString(), this._caption = t.readString(), !0)
                }
                get roomId() {
                    return this._roomId
                }
                get areaId() {
                    return this._areaId
                }
                get image() {
                    return this._image
                }
                get caption() {
                    return this._caption
                }
            }
            class Cn {
                flush() {
                    return this._rooms = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._rooms.push(new An(t)), e--;
                    return !0
                }
                get rooms() {
                    return this._rooms
                }
            }
            class Mn extends M {
                constructor(t) {
                    super(t, Cn)
                }
                getParser() {
                    return this.parser
                }
            }
            class Un {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._id = -1, this._code = null, this._filter = null, this._localization = null, !0
                }
                parse(t) {
                    return !!t && (this._id = t.readInt(), this._code = t.readString(), this._filter = t.readString(), this._localization = t.readString(), !0)
                }
                get id() {
                    return this._id
                }
                get code() {
                    return this._code
                }
                get filter() {
                    return this._filter
                }
                get localization() {
                    return this._localization
                }
            }
            class Dn {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._code = null, this._savedSearches = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._code = t.readString();
                    let e = t.readInt();
                    for (; e > 0;) this._savedSearches.push(new Un(t)), e--;
                    return !0
                }
                get code() {
                    return this._code
                }
                get savedSearches() {
                    return this._savedSearches
                }
            }
            class Nn {
                flush() {
                    return this._topLevelContexts = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._topLevelContexts.push(new Dn(t)), e--;
                    return !0
                }
                get topLevelContexts() {
                    return this._topLevelContexts
                }
            }
            class wn extends M {
                constructor(t) {
                    super(t, Nn)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ln {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class xn extends M {
                constructor(t) {
                    super(t, Ln)
                }
                getParser() {
                    return this.parser
                }
            }
            class Pn {
                flush() {
                    return this._searches = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._searches.push(new Un(t)), e--;
                    return !0
                }
                get searches() {
                    return this._searches
                }
            }
            class Fn extends M {
                constructor(t) {
                    super(t, Pn)
                }
                getParser() {
                    return this.parser
                }
            }
            let Gn = (() => {
                class t {
                    constructor(t) {
                        if (!t) throw new Error("invalid_wrapper");
                        this.flush(), this.parse(t)
                    }
                    flush() {
                        return this._roomId = 0, this._roomName = null, this._ownerId = 0, this._ownerName = null, this._doorMode = 0, this._userCount = 0, this._maxUserCount = 0, this._description = null, this._tradeMode = 2, this._score = 0, this._ranking = 0, this._categoryId = 0, this._totalStars = 0, this._groupId = 0, this._groupName = null, this._groupBadge = null, this._tags = [], this._bitMask = 0, this._thumbnail = null, this._allowPets = !1, this._showOwner = !0, this._displayAd = !1, this._adName = null, this._adDescription = null, this._adExpiresIn = 0, this._allInRoomMuted = !1, this._canMute = !1, this._officialRoomPicRef = null, !0
                    }
                    parse(t) {
                        return !!t && (this._roomId = t.readInt(), this._roomName = t.readString(), this._ownerId = t.readInt(), this._ownerName = t.readString(), this._doorMode = t.readInt(), this._userCount = t.readInt(), this._maxUserCount = t.readInt(), this._description = t.readString(), this._tradeMode = t.readInt(), this._score = t.readInt(), this._ranking = t.readInt(), this._categoryId = t.readInt(), this.parseTags(t), this.parseBitMask(t), !0)
                    }
                    parseTags(t) {
                        if (!t) return !1;
                        this._tags = [];
                        let e = t.readInt();
                        for (; e > 0;) this._tags.push(t.readString()), e--;
                        return !0
                    }
                    parseBitMask(e) {
                        return !!e && (this._bitMask = e.readInt(), this._bitMask & t.THUMBNAIL_BITMASK && (this._officialRoomPicRef = e.readString()), this._bitMask & t.GROUPDATA_BITMASK && (this._groupId = e.readInt(), this._groupName = e.readString(), this._groupBadge = e.readString()), this._bitMask & t.ROOMAD_BITMASK && (this._adName = e.readString(), this._adDescription = e.readString(), this._adExpiresIn = e.readInt()), this._showOwner = (this._bitMask & t.SHOWOWNER_BITMASK) > 0, this._allowPets = (this._bitMask & t.ALLOW_PETS_BITMASK) > 0, this._displayAd = (this._bitMask & t.DISPLAY_ROOMAD_BITMASK) > 0, this._thumbnail = null, !0)
                    }
                    get roomId() {
                        return this._roomId
                    }
                    get roomName() {
                        return this._roomName
                    }
                    get ownerId() {
                        return this._ownerId
                    }
                    get ownerName() {
                        return this._ownerName
                    }
                    get doorMode() {
                        return this._doorMode
                    }
                    get userCount() {
                        return this._userCount
                    }
                    get maxUserCount() {
                        return this._maxUserCount
                    }
                    get description() {
                        return this._description
                    }
                    get tradeMode() {
                        return this._tradeMode
                    }
                    get score() {
                        return this._score
                    }
                    get ranking() {
                        return this._ranking
                    }
                    get categoryId() {
                        return this._categoryId
                    }
                    get tags() {
                        return this._tags
                    }
                    get officialRoomPicRef() {
                        return this._officialRoomPicRef
                    }
                    get habboGroupId() {
                        return this._groupId
                    }
                    get groupName() {
                        return this._groupName
                    }
                    get groupBadgeCode() {
                        return this._groupBadge
                    }
                    get roomAdName() {
                        return this._adName
                    }
                    get roomAdDescription() {
                        return this._adDescription
                    }
                    get roomAdExpiresInMin() {
                        return this._adExpiresIn
                    }
                    get showOwner() {
                        return this._showOwner
                    }
                    get allowPets() {
                        return this._allowPets
                    }
                    get displayRoomEntryAd() {
                        return this._displayAd
                    }
                    get canMute() {
                        return this._canMute
                    }
                    set canMute(t) {
                        this._canMute = t
                    }
                    get allInRoomMuted() {
                        return this._allInRoomMuted
                    }
                    set allInRoomMuted(t) {
                        this._allInRoomMuted = t
                    }
                }
                return t.THUMBNAIL_BITMASK = 1, t.GROUPDATA_BITMASK = 2, t.ROOMAD_BITMASK = 4, t.SHOWOWNER_BITMASK = 8, t.ALLOW_PETS_BITMASK = 16, t.DISPLAY_ROOMAD_BITMASK = 32, t.OPEN_STATE = 0, t.DOORBELL_STATE = 1, t.PASSWORD_STATE = 2, t
            })();
            class Yn {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._code = null, this._data = null, this._action = -1, this._closed = !1, this._mode = -1, this._rooms = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._code = t.readString(), this._data = t.readString(), this._action = t.readInt(), this._closed = t.readBoolean(), this._mode = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) this._rooms.push(new Gn(t)), e--;
                    return !0
                }
                get code() {
                    return this._code
                }
                get data() {
                    return this._data
                }
                get action() {
                    return this._action
                }
                get closed() {
                    return this._closed
                }
                get mode() {
                    return this._mode
                }
                get rooms() {
                    return this._rooms
                }
            }
            class kn {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._code = null, this._data = null, this._results = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._code = t.readString(), this._data = t.readString();
                    let e = t.readInt();
                    for (; e > 0;) this._results.push(new Yn(t)), e--;
                    return !0
                }
                get code() {
                    return this._code
                }
                get data() {
                    return this._data
                }
                get results() {
                    return this._results
                }
            }
            class Vn {
                flush() {
                    return this._result = null, !0
                }
                parse(t) {
                    return !!t && (this._result = new kn(t), !0)
                }
                get result() {
                    return this._result
                }
            }
            class Zn extends M {
                constructor(t) {
                    super(t, Vn)
                }
                getParser() {
                    return this.parser
                }
            }
            class jn {
                flush() {
                    return this._windowX = 0, this._windowY = 0, this._windowWidth = 0, this._windowHeight = 0, this._leftPanelHidden = !1, this._resultsMode = 0, !0
                }
                parse(t) {
                    return !!t && (this._windowX = t.readInt(), this._windowY = t.readInt(), this._windowWidth = t.readInt(), this._windowHeight = t.readInt(), this._leftPanelHidden = t.readBoolean(), this._resultsMode = t.readInt(), !0)
                }
                get windowX() {
                    return this._windowX
                }
                get windowY() {
                    return this._windowY
                }
                get windowWidth() {
                    return this._windowWidth
                }
                get windowHeight() {
                    return this._windowHeight
                }
                get leftPanelHidden() {
                    return this._leftPanelHidden
                }
                get resultsMode() {
                    return this._resultsMode
                }
            }
            class Bn extends M {
                constructor(t) {
                    super(t, jn)
                }
                getParser() {
                    return this.parser
                }
            }
            class Hn {
                flush() {
                    return this._message = null, !0
                }
                parse(t) {
                    return !!t && (this._message = t.readString(), !0)
                }
                get message() {
                    return this._message
                }
            }
            class Wn extends M {
                constructor(t) {
                    super(t, Hn)
                }
                getParser() {
                    return this.parser
                }
            }
            class zn {
                flush() {
                    return this._messages = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._messages.push(t.readString()), e--;
                    return !0
                }
                get messages() {
                    return this._messages
                }
            }
            class Kn extends M {
                constructor(t) {
                    super(t, zn)
                }
                getParser() {
                    return this.parser
                }
            }
            class Xn {
                flush() {
                    return this._type = null, this._parameters = new Map, !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._type = t.readString();
                    let e = t.readInt();
                    for (; e > 0;) this._parameters.set(t.readString(), t.readString()), e--;
                    return !0
                }
                get type() {
                    return this._type
                }
                get parameters() {
                    return this._parameters
                }
            }
            class qn extends M {
                constructor(t) {
                    super(t, Xn)
                }
                getParser() {
                    return this.parser
                }
            }
            class Jn {
                flush() {
                    return this._userId = 0, this._respectsReceived = 0, !0
                }
                parse(t) {
                    return !!t && (this._userId = t.readInt(), this._respectsReceived = t.readInt(), !0)
                }
                get userId() {
                    return this._userId
                }
                get respectsReceived() {
                    return this._respectsReceived
                }
            }
            class Qn extends M {
                constructor(t) {
                    super(t, Jn)
                }
                getParser() {
                    return this.parser
                }
            }
            class $n {
                flush() {
                    return this._items = new x, !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) {
                        const s = t.readInt();
                        let i = t.readInt();
                        const n = [];
                        for (; i > 0;) n.push(t.readInt()), i--;
                        this._items.add(s, n), e--
                    }
                    return !0
                }
                getItemsByCategory(t) {
                    return this._items.getValue(t)
                }
                get categories() {
                    return this._items.getKeys()
                }
            }
            class tr extends M {
                constructor(t) {
                    super(t, $n)
                }
                getParser() {
                    return this.parser
                }
            }
            class er {
                flush() {
                    return this._userName = null, !0
                }
                parse(t) {
                    return !!t && (this._userName = t.readString(), !0)
                }
                get userName() {
                    return this._userName
                }
            }
            class sr extends M {
                constructor(t) {
                    super(t, er)
                }
                getParser() {
                    return this.parser
                }
            }
            class ir {
                flush() {
                    return this._userName = null, !0
                }
                parse(t) {
                    return !!t && (this._userName = t.readString(), !0)
                }
                get userName() {
                    return this._userName
                }
            }
            class nr extends M {
                constructor(t) {
                    super(t, ir)
                }
                getParser() {
                    return this.parser
                }
                get userName() {
                    return this.getParser().userName
                }
            }
            class rr {
                flush() {
                    return this._userName = null, !0
                }
                parse(t) {
                    return !!t && (this._userName = t.readString(), !0)
                }
                get userName() {
                    return this._userName
                }
            }
            class or extends M {
                constructor(t) {
                    super(t, rr)
                }
                getParser() {
                    return this.parser
                }
            }
            class ar {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class cr extends M {
                constructor(t) {
                    super(t, ar)
                }
                getParser() {
                    return this.parser
                }
            }
            let _r = (() => {
                class t {}
                return t.NONE = 0, t.GUEST = 1, t.GUILD_MEMBER = 2, t.GUILD_ADMIN = 3, t.ROOM_OWNER = 4, t.MODERATOR = 5, t
            })();
            class hr {
                flush() {
                    return this._controllerLevel = _r.NONE, !0
                }
                parse(t) {
                    return !!t && (this._controllerLevel = t.readInt(), !0)
                }
                get controllerLevel() {
                    return this._controllerLevel
                }
            }
            class lr extends M {
                constructor(t) {
                    super(t, hr)
                }
                getParser() {
                    return this.parser
                }
            }
            class ur {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class dr extends M {
                constructor(t) {
                    super(t, ur)
                }
                getParser() {
                    return this.parser
                }
            }
            let gr = (() => {
                class t {
                    flush() {
                        return this._reason = 0, this._parameter = "", !0
                    }
                    parse(t) {
                        return !!t && (this._reason = t.readInt(), this._parameter = t.readString(), !0)
                    }
                    get reason() {
                        return this._reason
                    }
                    get parameter() {
                        return this._parameter
                    }
                }
                return t.FULL_ERROR = 1, t._Str_19431 = 2, t.QUEUE_ERROR = 3, t.BANNED = 4, t
            })();
            class mr extends M {
                constructor(t) {
                    super(t, gr)
                }
                getParser() {
                    return this.parser
                }
            }
            class pr {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class br extends M {
                constructor(t) {
                    super(t, pr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Er {
                flush() {
                    return this._roomId = 0, !0
                }
                parse(t) {
                    return !!t && (this._roomId = t.readInt(), !0)
                }
                get roomId() {
                    return this._roomId
                }
            }
            class fr extends M {
                constructor(t) {
                    super(t, Er)
                }
                getParser() {
                    return this.parser
                }
            }
            class Sr {
                flush() {
                    return this._roomId = 0, this._users = new Map, !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._roomId = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) {
                        const s = t.readInt(),
                            i = t.readString();
                        this._users.set(s, i), e--
                    }
                    return !0
                }
                get roomId() {
                    return this._roomId
                }
                get users() {
                    return this._users
                }
            }
            class Ir extends M {
                constructor(t) {
                    super(t, Sr)
                }
                getParser() {
                    return this.parser
                }
            }
            let Rr = (() => {
                class t {
                    constructor(t) {
                        if (!t) throw new Error("invalid_wrapper");
                        this.flush(), this.parse(t)
                    }
                    flush() {
                        return this._mode = 0, this._weight = 0, this._speed = 0, this._distance = 0, this._protection = 0, !0
                    }
                    parse(t) {
                        return !!t && (this._mode = t.readInt(), this._weight = t.readInt(), this._speed = t.readInt(), this._distance = t.readInt(), this._protection = t.readInt(), !0)
                    }
                    get mode() {
                        return this._mode
                    }
                    get weight() {
                        return this._weight
                    }
                    get speed() {
                        return this._speed
                    }
                    get distance() {
                        return this._distance
                    }
                    get protection() {
                        return this._protection
                    }
                }
                return t._Str_19408 = 0, t._Str_12787 = 1, t._Str_16907 = 0, t._Str_12581 = 1, t._Str_16484 = 2, t._Str_18404 = 0, t._Str_17874 = 1, t._Str_16469 = 2, t._Str_21099 = 0, t._Str_20763 = 1, t._Str_22060 = 2, t
            })();
            class vr {
                flush() {
                    return this._chat = null, !0
                }
                parse(t) {
                    return !!t && (this._chat = new Rr(t), !0)
                }
                get chat() {
                    return this._chat
                }
            }
            class Tr extends M {
                constructor(t) {
                    super(t, vr)
                }
                getParser() {
                    return this.parser
                }
            }
            let Or = (() => {
                class t {
                    constructor(t) {
                        this.reset(), this.parse(t)
                    }
                    reset() {
                        this._allowMute = 0, this._allowKick = 0, this._allowBan = 0
                    }
                    parse(t) {
                        this._allowMute = t.readInt(), this._allowKick = t.readInt(), this._allowBan = t.readInt()
                    }
                    get allowMute() {
                        return this._allowMute
                    }
                    get allowKick() {
                        return this._allowKick
                    }
                    get allowBan() {
                        return this._allowBan
                    }
                }
                return t._Str_10707 = 0, t._Str_5047 = 1, t._Str_11537 = 2, t
            })();
            class yr {
                flush() {
                    return this._roomEnter = !1, this._roomForward = !1, this._staffPick = !1, this._data = null, this._isGroupMember = !1, this._moderation = null, this._chat = null, !0
                }
                parse(t) {
                    return !!t && (this._roomEnter = t.readBoolean(), this._data = new Gn(t), this._roomForward = t.readBoolean(), this._staffPick = t.readBoolean(), this._isGroupMember = t.readBoolean(), this.data.allInRoomMuted = t.readBoolean(), this._moderation = new Or(t), this._data.canMute = t.readBoolean(), this._chat = new Rr(t), !0)
                }
                get roomEnter() {
                    return this._roomEnter
                }
                get roomForward() {
                    return this._roomForward
                }
                get staffPick() {
                    return this._staffPick
                }
                get data() {
                    return this._data
                }
                get isGroupMember() {
                    return this._isGroupMember
                }
                get moderation() {
                    return this._moderation
                }
                get chat() {
                    return this._chat
                }
            }
            class Ar extends M {
                constructor(t) {
                    super(t, yr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Cr {
                flush() {
                    return this._roomId = 0, this._isOwner = !1, !0
                }
                parse(t) {
                    return !!t && (this._roomId = t.readInt(), this._isOwner = t.readBoolean(), !0)
                }
                get roomId() {
                    return this._roomId
                }
                get isOwner() {
                    return this._isOwner
                }
            }
            class Mr extends M {
                constructor(t) {
                    super(t, Cr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ur {
                flush() {
                    return this._totalLikes = 0, this._canLike = !1, !0
                }
                parse(t) {
                    return !!t && (this._totalLikes = t.readInt(), this._canLike = t.readBoolean(), !0)
                }
                get totalLikes() {
                    return this._totalLikes
                }
                get canLike() {
                    return this._canLike
                }
            }
            class Dr extends M {
                constructor(t) {
                    super(t, Ur)
                }
                getParser() {
                    return this.parser
                }
            }
            class Nr {
                flush() {
                    return this._roomId = 0, this._code = 0, this._message = null, !0
                }
                parse(t) {
                    return !!t && (this._roomId = t.readInt(), this._code = t.readInt(), this._message = t.readString(), !0)
                }
                get roomId() {
                    return this._roomId
                }
                get code() {
                    return this._code
                }
                get message() {
                    return this._message
                }
            }
            class wr extends M {
                constructor(t) {
                    super(t, Nr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Lr {
                flush() {
                    return this._roomId = 0, !0
                }
                parse(t) {
                    return !!t && (this._roomId = t.readInt(), this._name = t.readString(), this._description = t.readString(), this._state = t.readInt(), this._categoryId = t.readInt(), this._userCount = t.readInt(), this._maxUserCount = t.readInt(), this.parseTags(t), this._tradeMode = t.readInt(), this._allowPets = t.readInt(), this._allowPetsEat = t.readInt(), this._allowWalkthrough = t.readInt(), this._hideWalls = t.readInt(), this._thicknessWall = t.readInt(), this._thicknessFloor = t.readInt(), this._chat = new Rr(t), t.readBoolean(), this._moderation = new Or(t), !0)
                }
                parseTags(t) {
                    if (!t) return !1;
                    this._tags = [];
                    let e = t.readInt();
                    for (; e > 0;) this._tags.push(t.readString()), e--;
                    return !0
                }
                get roomId() {
                    return this._roomId
                }
                get name() {
                    return this._name
                }
                get description() {
                    return this._description
                }
                get state() {
                    return this._state
                }
                get categoryId() {
                    return this._categoryId
                }
                get userCount() {
                    return this._userCount
                }
                get maxUserCount() {
                    return this._maxUserCount
                }
                get tags() {
                    return this._tags
                }
                get tradeMode() {
                    return this._tradeMode
                }
                get allowPets() {
                    return 1 === this._allowPets
                }
                get allowPetsEat() {
                    return 1 === this._allowPetsEat
                }
                get allowWalkthrough() {
                    return 1 === this._allowWalkthrough
                }
                get hideWalls() {
                    return 1 === this._hideWalls
                }
                get thicknessWall() {
                    return this._thicknessWall
                }
                get thicknessFloor() {
                    return this._thicknessFloor
                }
                get chatSettings() {
                    return this._chat
                }
                get moderationSettings() {
                    return this._moderation
                }
            }
            class xr extends M {
                constructor(t) {
                    super(t, Lr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Pr {
                flush() {
                    return this._roomId = 0, !0
                }
                parse(t) {
                    return !!t && (this._roomId = t.readInt(), !0)
                }
                get roomId() {
                    return this._roomId
                }
            }
            class Fr extends M {
                constructor(t) {
                    super(t, Pr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Gr {
                flush() {
                    return this._roomId = 0, !0
                }
                parse(t) {
                    return !!t && (this._roomId = t.readInt(), !0)
                }
                get roomId() {
                    return this._roomId
                }
            }
            class Yr extends M {
                constructor(t) {
                    super(t, Gr)
                }
                getParser() {
                    return this.parser
                }
            }
            class kr extends M {
                constructor(t) {
                    super(t, Sr)
                }
                getParser() {
                    return this.parser
                }
            }
            let Vr = (() => {
                class t {
                    constructor(t, e, s, i = null) {
                        this._id = t, this._location = e, this._targetLocation = s, this._movementType = i
                    }
                    get id() {
                        return this._id
                    }
                    get location() {
                        return this._location
                    }
                    get targetLocation() {
                        return this._targetLocation
                    }
                    get movementType() {
                        return this._movementType
                    }
                }
                return t.MOVE = "mv", t.SLIDE = "sld", t
            })();
            class Zr {
                flush() {
                    return this._rollerId = 0, this._itemsRolling = [], this._unitRolling = null, !0
                }
                parse(t) {
                    if (!t) return;
                    const e = t.readInt(),
                        s = t.readInt(),
                        i = t.readInt(),
                        n = t.readInt();
                    let r = t.readInt();
                    for (; r > 0;) {
                        const o = t.readInt(),
                            a = parseFloat(t.readString()),
                            c = parseFloat(t.readString()),
                            _ = new Vr(o, new K(e, s, a), new K(i, n, c));
                        this._itemsRolling.push(_), r--
                    }
                    if (this._rollerId = t.readInt(), !t.bytesAvailable) return !0;
                    const o = t.readInt(),
                        a = t.readInt(),
                        c = parseFloat(t.readString()),
                        _ = parseFloat(t.readString());
                    switch (o) {
                        case 0:
                            break;
                        case 1:
                            this._unitRolling = new Vr(a, new K(e, s, c), new K(i, n, _), Vr.MOVE);
                            break;
                        case 2:
                            this._unitRolling = new Vr(a, new K(e, s, c), new K(i, n, _), Vr.SLIDE)
                    }
                    return !0
                }
                get rollerId() {
                    return this._rollerId
                }
                get itemsRolling() {
                    return this._itemsRolling
                }
                get unitRolling() {
                    return this._unitRolling
                }
            }
            class jr extends M {
                constructor(t) {
                    super(t, Zr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Br {
                flush() {
                    return this._roomId = -1, this._roomName = null, !0
                }
                parse(t) {
                    if (t) return this._roomId = t.readInt(), this._roomName = t.readString(), !0
                }
                get roomId() {
                    return this._roomId
                }
                get roomName() {
                    return this._roomName
                }
            }
            class Hr extends M {
                constructor(t) {
                    super(t, Br)
                }
                getParser() {
                    return this.parser
                }
            }
            class Wr {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._itemId = 0, this._spriteId = 0, this._spriteName = null, this._x = 0, this._y = 0, this._direction = 0, this._z = 0, this._stackHeight = 0, this._type = 0, this._data = null, this._state = 0, this._expires = 0, this._usagePolicy = 0, this._userId = 0, this._username = null, !0
                }
                parse(t) {
                    return !!t && (this._itemId = t.readInt(), this._spriteId = t.readInt(), this._x = t.readInt(), this._y = t.readInt(), this._direction = t.readInt() % 8 * 45, this._z = parseFloat(t.readString()), this._stackHeight = parseFloat(t.readString()), this._type = t.readInt(), this._data = yi.parseObjectData(t), this._state = parseFloat(this._data && this._data.getLegacyString()) || 0, this._expires = t.readInt(), this._usagePolicy = t.readInt(), this._userId = t.readInt(), this._username = null, this._spriteId < 0 && (this._spriteName = t.readString()), !0)
                }
                get itemId() {
                    return this._itemId
                }
                get spriteId() {
                    return this._spriteId
                }
                get x() {
                    return this._x
                }
                get y() {
                    return this._y
                }
                get direction() {
                    return this._direction
                }
                get z() {
                    return isNaN(this._z) ? 0 : this._z
                }
                get stackHeight() {
                    return isNaN(this._stackHeight) ? 0 : this._stackHeight
                }
                get type() {
                    return this._type
                }
                get data() {
                    return this._data
                }
                get state() {
                    return this._state
                }
                get expires() {
                    return this._expires
                }
                get usagePolicy() {
                    return this._usagePolicy
                }
                get userId() {
                    return this._userId
                }
                get username() {
                    return this._username
                }
                set username(t) {
                    this._username = t
                }
                get spriteName() {
                    return this._spriteName
                }
                set spriteName(t) {
                    this._spriteName = t
                }
            }
            class zr {
                flush() {
                    return this._item = null, !0
                }
                parse(t) {
                    return !!t && (this._item = new Wr(t), this._item.username = t.readString(), !0)
                }
                get item() {
                    return this._item
                }
            }
            class Kr extends M {
                constructor(t) {
                    super(t, zr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Xr {
                flush() {
                    return this._owners = new Map, this._items = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    if (!this.parseOwners(t)) return !1;
                    let e = t.readInt();
                    for (; e > 0;) {
                        const s = new Wr(t);
                        if (!s) continue;
                        const i = this._owners.get(s.userId);
                        i && (s.username = i), this._items.push(s), e--
                    }
                    return !0
                }
                parseOwners(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._owners.set(t.readInt(), t.readString()), e--;
                    return !0
                }
                get owners() {
                    return this._owners
                }
                get items() {
                    return this._items
                }
            }
            class qr extends M {
                constructor(t) {
                    super(t, Xr)
                }
                getParser() {
                    return this.parser
                }
            }
            class Jr {
                flush() {
                    return this._itemId = 0, this._isExpired = !0, this._userId = 0, this._delay = 0, !0
                }
                parse(t) {
                    return !!t && (this._itemId = parseInt(t.readString()), this._isExpired = t.readBoolean(), this._userId = t.readInt(), this._delay = t.readInt(), !0)
                }
                get itemId() {
                    return this._itemId
                }
                get isExpired() {
                    return this._isExpired
                }
                get userId() {
                    return this._userId
                }
                get delay() {
                    return this._delay
                }
            }
            class Qr extends M {
                constructor(t) {
                    super(t, Jr)
                }
                getParser() {
                    return this.parser
                }
            }
            class $r {
                flush() {
                    return this._item = null, !0
                }
                parse(t) {
                    return !!t && (this._item = new Wr(t), !0)
                }
                get item() {
                    return this._item
                }
            }
            class to extends M {
                constructor(t) {
                    super(t, $r)
                }
                getParser() {
                    return this.parser
                }
            }
            class eo {
                flush() {
                    return this._aliases = new Map, !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._aliases.set(t.readString(), t.readString()), e--;
                    return !0
                }
                get aliases() {
                    return this._aliases
                }
            }
            class so extends M {
                constructor(t) {
                    super(t, eo)
                }
                getParser() {
                    return this.parser
                }
            }
            class io extends M {
                constructor(t) {
                    super(t, yi)
                }
                getParser() {
                    return this.parser
                }
            }
            class no {
                flush() {
                    return this._itemId = 0, this._data = "", !0
                }
                parse(t) {
                    return !!t && (this._itemId = parseInt(t.readString()), this._data = t.readString(), !0)
                }
                get furnitureId() {
                    return this._itemId
                }
                get data() {
                    return this._data
                }
            }
            class ro extends M {
                constructor(t) {
                    super(t, no)
                }
                getParser() {
                    return this.parser
                }
            }
            class oo {
                flush() {
                    return this._furniId = -1, this._height = 0, !0
                }
                parse(t) {
                    return !!t && (this._furniId = t.readInt(), this._height = t.readInt() / 100, !0)
                }
                get furniId() {
                    return this._furniId
                }
                get height() {
                    return this._height
                }
            }
            class ao extends M {
                constructor(t) {
                    super(t, oo)
                }
                getParser() {
                    return this.parser
                }
            }
            class co {
                flush() {
                    return this._itemId = 0, this._value = 0, !0
                }
                parse(t) {
                    return !!t && (this._itemId = t.readInt(), this._value = t.readInt(), !0)
                }
                get itemId() {
                    return this._itemId
                }
                get value() {
                    return this._value
                }
            }
            class _o extends M {
                constructor(t) {
                    super(t, co)
                }
                getParser() {
                    return this.parser
                }
            }
            class ho {
                flush() {
                    return this._itemId = 0, this._state = 0, !0
                }
                parse(t) {
                    return !!t && (this._itemId = t.readInt(), this._state = t.readInt(), !0)
                }
                get itemId() {
                    return this._itemId
                }
                get state() {
                    return this._state
                }
            }
            class lo extends M {
                constructor(t) {
                    super(t, ho)
                }
                getParser() {
                    return this.parser
                }
            }
            class uo {
                get furniId() {
                    return this._furniId
                }
                flush() {
                    return this._furniId = -1, !0
                }
                parse(t) {
                    return this._furniId = t.readInt(), !0
                }
            }
            class go extends M {
                constructor(t) {
                    super(t, uo)
                }
                getParser() {
                    return this.parser
                }
            }
            class mo {
                get furniId() {
                    return this._furniId
                }
                flush() {
                    return this._furniId = -1, !0
                }
                parse(t) {
                    return this._furniId = t.readInt(), !0
                }
            }
            class po extends M {
                constructor(t) {
                    super(t, mo)
                }
                getParser() {
                    return this.parser
                }
            }
            class bo {
                get furniId() {
                    return this._furniId
                }
                get start() {
                    return this._start
                }
                flush() {
                    return this._furniId = -1, this._start = !1, !0
                }
                parse(t) {
                    return this._furniId = t.readInt(), this._start = t.readBoolean(), !0
                }
            }
            class Eo extends M {
                constructor(t) {
                    super(t, bo)
                }
                getParser() {
                    return this.parser
                }
            }
            class fo {
                constructor(t) {
                    this._id = 0, this._type = 0, this._color = 0, this._intensity = 0, this._isParsed = !1, this._htmlColor = null, this._id = t
                }
                parsed() {
                    this._isParsed = !0
                }
                get id() {
                    return this._id
                }
                get type() {
                    return this._type
                }
                set type(t) {
                    this._isParsed || (this._type = t)
                }
                get color() {
                    return this._color
                }
                set color(t) {
                    this._isParsed || (this._color = t)
                }
                get intensity() {
                    return this._intensity
                }
                set intensity(t) {
                    this._isParsed || (this._intensity = t)
                }
                set htmlColor(t) {
                    this._htmlColor = t
                }
                get htmlColor() {
                    return this._htmlColor
                }
            }
            class So {
                constructor() {
                    this._selectedPresetId = 0, this._presets = []
                }
                get _Str_10888() {
                    return this._presets.length
                }
                get _Str_6226() {
                    return this._selectedPresetId
                }
                _Str_14989(t) {
                    return t < 0 || t >= this._Str_10888 ? null : this._presets[t]
                }
                flush() {
                    return this._presets = [], !0
                }
                parse(t) {
                    const e = t.readInt();
                    this._selectedPresetId = t.readInt();
                    let s = 0;
                    for (; s < e;) {
                        const e = t.readInt(),
                            i = t.readInt(),
                            n = t.readString(),
                            r = parseInt(n.substr(1), 16),
                            o = t.readInt(),
                            a = new fo(e);
                        a.type = i, a.color = r, a.intensity = o, a.parsed(), a.htmlColor = n, this._presets.push(a), s++
                    }
                    return !0
                }
            }
            class Io extends M {
                constructor(t) {
                    super(t, So)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ro {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._itemId = 0, this._spriteId = 0, this._location = null, this._stuffData = null, this._state = 0, this._secondsToExpiration = 0, this._usagePolicy = -1, this._userId = 0, this._username = null, this._width = 0, this._height = 0, this._localX = 0, this._localY = 0, this._y = 0, this._z = 0, this._direction = null, this._Str_19875 = !1, !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._itemId = parseInt(t.readString()), this._spriteId = t.readInt(), this._location = t.readString(), this._stuffData = t.readString(), this._secondsToExpiration = t.readInt(), this._usagePolicy = t.readInt(), this._userId = t.readInt(), this._username = null;
                    const e = parseFloat(this._stuffData);
                    if (isNaN(e) || (this._state = e), 0 === this._location.indexOf(":")) {
                        this._Str_19875 = !1;
                        let t = this._location.split(" ");
                        if (t.length >= 3) {
                            let e = t[0],
                                s = t[1];
                            const i = t[2];
                            if (e.length > 3 && s.length > 2 && (e = e.substr(3), s = s.substr(2), t = e.split(","), t.length >= 2)) {
                                const e = parseInt(t[0]),
                                    n = parseInt(t[1]);
                                if (t = s.split(","), t.length >= 2) {
                                    const s = parseInt(t[0]),
                                        r = parseInt(t[1]);
                                    this._width = e, this._height = n, this._localX = s, this._localY = r, this._direction = i
                                }
                            }
                        }
                    } else this._Str_19875 = !0;
                    return !0
                }
                get itemId() {
                    return this._itemId
                }
                get spriteId() {
                    return this._spriteId
                }
                get wallPosition() {
                    return this._location
                }
                get stuffData() {
                    return this._stuffData
                }
                get state() {
                    return this._state
                }
                get secondsToExpiration() {
                    return this._secondsToExpiration
                }
                get usagePolicy() {
                    return this._usagePolicy
                }
                get userId() {
                    return this._userId
                }
                get username() {
                    return this._username
                }
                set username(t) {
                    this._username = t
                }
                get width() {
                    return this._width
                }
                get height() {
                    return this._height
                }
                get localX() {
                    return this._localX
                }
                get localY() {
                    return this._localY
                }
                get direction() {
                    return this._direction
                }
                get _Str_22379() {
                    return this._Str_19875
                }
            }
            class vo {
                flush() {
                    return this._item = null, !0
                }
                parse(t) {
                    return !!t && (this._item = new Ro(t), this._item.username = t.readString(), !0)
                }
                get item() {
                    return this._item
                }
            }
            class To extends M {
                constructor(t) {
                    super(t, vo)
                }
                getParser() {
                    return this.parser
                }
            }
            class Oo {
                flush() {
                    return this._owners = new Map, this._items = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    if (!this.parseOwners(t)) return !1;
                    let e = t.readInt();
                    for (; e > 0;) {
                        const s = new Ro(t);
                        if (!s) continue;
                        const i = this._owners.get(s.userId);
                        i && (s.username = i), this._items.push(s), e--
                    }
                    return !0
                }
                parseOwners(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._owners.set(t.readInt(), t.readString()), e--;
                    return !0
                }
                get owners() {
                    return this._owners
                }
                get items() {
                    return this._items
                }
            }
            class yo extends M {
                constructor(t) {
                    super(t, Oo)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ao {
                flush() {
                    return this._itemId = 0, this._userId = 0, !0
                }
                parse(t) {
                    return !!t && (this._itemId = parseInt(t.readString()), this._userId = t.readInt(), !0)
                }
                get itemId() {
                    return this._itemId
                }
                get userId() {
                    return this._userId
                }
            }
            class Co extends M {
                constructor(t) {
                    super(t, Ao)
                }
                getParser() {
                    return this.parser
                }
            }
            class Mo {
                flush() {
                    return this._item = null, !0
                }
                parse(t) {
                    return !!t && (this._item = new Ro(t), this._item.username = t.readString(), !0)
                }
                get item() {
                    return this._item
                }
            }
            class Uo extends M {
                constructor(t) {
                    super(t, Mo)
                }
                getParser() {
                    return this.parser
                }
            }
            class Do {
                flush() {
                    return this._x = 0, this._y = 0, this._direction = 0, !0
                }
                parse(t) {
                    return !!t && (this._x = t.readInt(), this._y = t.readInt(), this._direction = t.readInt(), !0)
                }
                get x() {
                    return this._x
                }
                get y() {
                    return this._y
                }
                get direction() {
                    return this._direction
                }
            }
            class No extends M {
                constructor(t) {
                    super(t, Do)
                }
                getParser() {
                    return this.parser
                }
            }
            class wo {
                static decodeTileHeight(t) {
                    return t < 0 ? -1 : (16383 & t) / 256
                }
                static decodeIsStackingBlocked(t) {
                    return !!(16384 & t)
                }
                static decodeIsRoomTile(t) {
                    return t >= 0
                }
                getTileHeight(t, e) {
                    return t < 0 || t >= this._width || e < 0 || e >= this._height ? -1 : wo.decodeTileHeight(this._heights[e * this._width + t])
                }
                getStackingBlocked(t, e) {
                    return t < 0 || t >= this._width || e < 0 || e >= this._height || wo.decodeIsStackingBlocked(this._heights[e * this._width + t])
                }
                isRoomTile(t, e) {
                    return !(t < 0 || t >= this._width || e < 0 || e >= this._height) && wo.decodeIsRoomTile(this._heights[e * this._width + t])
                }
                flush() {
                    return this._width = 0, this._height = 0, this._heights = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._width = t.readInt();
                    const e = t.readInt();
                    this._height = e / this._width;
                    let s = 0;
                    for (; s < e;) this._heights[s] = t.readShort(), s++;
                    return !0
                }
                get width() {
                    return this._width
                }
                get height() {
                    return this._height
                }
                get heights() {
                    return this._heights
                }
            }
            class Lo extends M {
                constructor(t) {
                    super(t, wo)
                }
                getParser() {
                    return this.parser
                }
            }
            class xo {
                flush() {
                    return this._wrapper = null, this._count = 0, this._x = 0, this._y = 0, this._value = 0, !0
                }
                tileHeight() {
                    return wo.decodeTileHeight(this._value)
                }
                isStackingBlocked() {
                    return wo.decodeIsStackingBlocked(this._value)
                }
                isRoomTile() {
                    return wo.decodeIsRoomTile(this._value)
                }
                next() {
                    return !!this._count && (this._count--, this._x = this._wrapper.readByte(), this._y = this._wrapper.readByte(), this._value = this._wrapper.readShort(), !0)
                }
                parse(t) {
                    return !!t && (this._wrapper = t, this._count = t.readByte(), !0)
                }
                get x() {
                    return this._x
                }
                get y() {
                    return this._y
                }
                get height() {
                    return this._value
                }
            }
            class Po extends M {
                constructor(t) {
                    super(t, xo)
                }
                getParser() {
                    return this.parser
                }
            }
            class Fo {
                constructor(t, e, s, i) {
                    this._x = t, this._y = e, this._width = s, this._height = i
                }
                get x() {
                    return this._x
                }
                get y() {
                    return this._y
                }
                get width() {
                    return this._width
                }
                get height() {
                    return this._height
                }
            }
            class Go {
                constructor() {
                    this._width = 0, this._height = 0, this._wallHeight = 0, this._fixedWallsHeight = 0, this._tileMap = [], this._holeMap = [], this._doors = [], this._dimensions = {
                        minX: 0,
                        maxX: 0,
                        minY: 0,
                        maxY: 0
                    }, this._restrictsDragging = !1, this._restrictedScale = 1, this._restrictsScaling = !1
                }
                get width() {
                    return this._width
                }
                set width(t) {
                    this._width = t
                }
                get height() {
                    return this._height
                }
                set height(t) {
                    this._height = t
                }
                get wallHeight() {
                    return this._wallHeight
                }
                set wallHeight(t) {
                    this._wallHeight = t
                }
                get fixedWallsHeight() {
                    return this._fixedWallsHeight
                }
                set fixedWallsHeight(t) {
                    this._fixedWallsHeight = t
                }
                get tileMap() {
                    return this._tileMap
                }
                get holeMap() {
                    return this._holeMap
                }
                get doors() {
                    return this._doors
                }
                get dimensions() {
                    return this._dimensions
                }
                get restrictsDragging() {
                    return this._restrictsDragging
                }
                set restrictsDragging(t) {
                    this._restrictsDragging = t
                }
                get restrictsScaling() {
                    return this._restrictsScaling
                }
                set restrictsScaling(t) {
                    this._restrictsScaling = t
                }
                get restrictedScale() {
                    return this._restrictedScale
                }
                set restrictedScale(t) {
                    this._restrictedScale = t
                }
            }
            class Yo {
                constructor(t, e, s, i) {
                    this._leftSideLoc = 0, this._rightSideLoc = 0, this._leftSideLength = 0, this._rightSideLength = 0, this._leftSideLoc = t, this._rightSideLoc = e, this._leftSideLength = s, this._rightSideLength = i
                }
                get _Str_5120() {
                    return this._leftSideLoc
                }
                get _Str_4659() {
                    return this._rightSideLoc
                }
                get _Str_9124() {
                    return this._leftSideLength
                }
                get _Str_12156() {
                    return this._rightSideLength
                }
            }
            let ko = (() => {
                    class t {
                        constructor(t, e, s, i, n) {
                            let r, o, a, c, _, h, l, u;
                            if (this._type = 0, this._loc = null, this._leftSide = null, this._rightSide = null, this._normal = null, this._normalDirection = null, this._secondaryNormals = [], this._masks = [], this._loc = new K, this._loc.assign(e), this._leftSide = new K, this._leftSide.assign(s), this._rightSide = new K, this._rightSide.assign(i), this._type = t, null != s && null != i && (this._normal = K.crossProduct(s, i), r = 0, o = 0, a = 0, c = 0, _ = 0, 0 != this.normal.x || 0 != this.normal.y ? (c = this.normal.x, _ = this.normal.y, r = 360 + Math.atan2(_, c) / Math.PI * 180, r >= 360 && (r -= 360), c = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y), _ = this.normal.z, o = 360 + Math.atan2(_, c) / Math.PI * 180, o >= 360 && (o -= 360)) : o = this.normal.z < 0 ? 90 : 270, this._normalDirection = new K(r, o, 0)), null != n && n.length > 0)
                                for (h = 0; h < n.length;) l = n[h], null != l && l.length > 0 && (u = new K, u.assign(l), u.multiply(1 / u.length), this._secondaryNormals.push(u)), h++
                        }
                        get type() {
                            return this._type
                        }
                        get loc() {
                            return this._loc
                        }
                        get _Str_5424() {
                            return this._leftSide
                        }
                        get _Str_4968() {
                            return this._rightSide
                        }
                        get normal() {
                            return this._normal
                        }
                        get _Str_25207() {
                            return this._normalDirection
                        }
                        get _Str_20277() {
                            return this._secondaryNormals.length
                        }
                        get _Str_6845() {
                            return this._masks.length
                        }
                        _Str_22585(t) {
                            if (t < 0 || t >= this._Str_20277) return null;
                            const e = new K;
                            return e.assign(this._secondaryNormals[t]), e
                        }
                        addMask(t, e, s, i) {
                            const n = new Yo(t, e, s, i);
                            this._masks.push(n)
                        }
                        _Str_8361(t) {
                            return t < 0 || t >= this._Str_6845 ? null : this._masks[t]
                        }
                        _Str_25133(t) {
                            const e = this._Str_8361(t);
                            return null != e ? e._Str_5120 : -1
                        }
                        _Str_23609(t) {
                            const e = this._Str_8361(t);
                            return null != e ? e._Str_4659 : -1
                        }
                        _Str_25097(t) {
                            const e = this._Str_8361(t);
                            return null != e ? e._Str_9124 : -1
                        }
                        _Str_25617(t) {
                            const e = this._Str_8361(t);
                            return null != e ? e._Str_12156 : -1
                        }
                    }
                    return t.PLANE_UNDEFINED = 0, t.PLANE_FLOOR = 1, t.PLANE_WALL = 2, t.PLANE_LANDSCAPE = 3, t.PLANE_BILLBOARD = 4, t
                })(),
                Vo = (() => {
                    class t {
                        constructor() {
                            this._corners = [], this._endPoints = [], this._directions = [], this._lengths = [], this._leftTurns = [], this._borders = [], this._hideWalls = [], this._manuallyLeftCut = [], this._manuallyRightCut = [], this._addDuplicates = !1, this._count = 0
                        }
                        _Str_17862(t, e, s, i, n) {
                            (this._addDuplicates || this._Str_22484(t, e, s, i, n)) && (this._corners.push(t), this._directions.push(e), this._lengths.push(s), this._borders.push(i), this._leftTurns.push(n), this._hideWalls.push(!1), this._manuallyLeftCut.push(!1), this._manuallyRightCut.push(!1), this._count++)
                        }
                        _Str_22484(t, e, s, i, n) {
                            let r = 0;
                            for (; r < this._count;) {
                                if (this._corners[r].x == t.x && this._corners[r].y == t.y && this._directions[r] == e && this._lengths[r] == s && this._borders[r] == i && this._leftTurns[r] == n) return !1;
                                r++
                            }
                            return !0
                        }
                        get count() {
                            return this._count
                        }
                        _Str_10778(t) {
                            return this._corners[t]
                        }
                        _Str_19138(t) {
                            return this._Str_23674(), this._endPoints[t]
                        }
                        _Str_13743(t) {
                            return this._lengths[t]
                        }
                        getDirection(t) {
                            return this._directions[t]
                        }
                        _Str_25208(t) {
                            return this._borders[t]
                        }
                        _Str_10019(t) {
                            return this._hideWalls[t]
                        }
                        _Str_17084(t) {
                            return this._leftTurns[t]
                        }
                        _Str_25455(t) {
                            return this._manuallyLeftCut[t]
                        }
                        _Str_24163(t) {
                            return this._manuallyRightCut[t]
                        }
                        _Str_15901(t, e) {
                            this._hideWalls[t] = e
                        }
                        _Str_24531(t, e) {
                            e < this._lengths[t] && (this._lengths[t] = e, this._manuallyRightCut[t] = !0)
                        }
                        _Str_23976(e, s) {
                            let i;
                            if (s > 0 && s < this._lengths[e]) {
                                const n = this._corners[e];
                                i = t.WALL_DIRECTION_VECTORS[this.getDirection(e)], this._corners[e] = new u.j(n.x + s * i.x, n.y + s * i.y), this._lengths[e] = this._lengths[e] - s, this._manuallyLeftCut[e] = !0
                            }
                        }
                        _Str_23674() {
                            let e, s, i, n, r;
                            if (this._endPoints.length != this.count)
                                for (this._endPoints = [], e = 0; e < this.count;) s = this._Str_10778(e), i = new u.j(s.x, s.y), n = t.WALL_DIRECTION_VECTORS[this.getDirection(e)], r = this._Str_13743(e), i.x = i.x + n.x * r, i.y = i.y + n.y * r, this._endPoints.push(i), e++
                        }
                    }
                    return t.WALL_DIRECTION_VECTORS = [new K(1, 0, 0), new K(0, 1, 0), new K(-1, 0, 0), new K(0, -1, 0)], t.WALL_NORMAL_VECTORS = [new K(0, 1, 0), new K(-1, 0, 0), new K(0, -1, 0), new K(1, 0, 0)], t
                })(),
                Zo = (() => {
                    class t {
                        constructor() {
                            this._width = 0, this._height = 0, this._minX = 0, this._maxX = 0, this._minY = 0, this._maxY = 0, this._fixedWallHeight = -1, this._floorHeight = 0, this._restrictsScaling = !1, this._restrictedScale = 1, this._tileMatrix = [], this._tileMatrixOriginal = [], this._planes = [], this._floorHoleMatrix = [], this._wallHeight = 3.6, this._wallThicknessMultiplier = 1, this._floorThicknessMultiplier = 1, this._floorHoles = new Map
                        }
                        static getFloorHeight(t) {
                            const e = t.length;
                            if (!e) return 0;
                            let s = 0,
                                i = 0;
                            for (; i < e;) {
                                const e = t[i];
                                let n = 0;
                                for (; n < e.length;) {
                                    const t = e[n];
                                    t > s && (s = t), n++
                                }
                                i++
                            }
                            return s
                        }
                        static findEntranceTile(t) {
                            if (!t) return null;
                            const e = t.length;
                            if (!e) return null;
                            const s = [];
                            let i = 0;
                            for (; i < e;) {
                                const e = t[i];
                                if (!e || !e.length) return null;
                                let n = 0;
                                for (; n < e.length;) {
                                    if (e[n] >= 0) {
                                        s.push(n);
                                        break
                                    }
                                    n++
                                }
                                s.length < i + 1 && s.push(e.length + 1), i++
                            }
                            for (i = 1; i < s.length - 1;) {
                                if (Math.trunc(s[i]) <= Math.trunc(s[i - 1]) - 1 && Math.trunc(s[i]) <= Math.trunc(s[i + 1]) - 1) return new u.j(Math.trunc(0 | s[i]), i);
                                i++
                            }
                            return null
                        }
                        static expandFloorTiles(t) {
                            let e, s, i, n, r, o, a, c, _, h, l, u;
                            const d = t.length,
                                g = t[0].length,
                                m = [];
                            for (s = 0; s < 4 * d;) m[s] = [], s++;
                            let p = 0;
                            for (s = 0; s < d;) {
                                for (r = 0, e = 0; e < g;) {
                                    if (o = t[s][e], o < 0 || o <= 255)
                                        for (n = 0; n < 4;) {
                                            for (i = 0; i < 4;) void 0 === m[p + n] && (m[p + n] = []), m[p + n][r + i] = o < 0 ? o : 4 * o, i++;
                                            n++
                                        } else {
                                            for (a = 4 * (255 & o), c = a + 3 * (o >> 11 & 1), _ = a + 3 * (o >> 10 & 1), h = a + 3 * (o >> 9 & 1), l = a + 3 * (o >> 8 & 1), i = 0; i < 3;) u = i + 1, m[p][r + i] = (c * (3 - i) + _ * i) / 3, m[p + 3][r + u] = (h * (3 - u) + l * u) / 3, m[p + u][r] = (c * (3 - u) + h * u) / 3, m[p + i][r + 3] = (_ * (3 - i) + l * i) / 3, i++;
                                            m[p + 1][r + 1] = c > a ? a + 2 : a + 1, m[p + 1][r + 2] = _ > a ? a + 2 : a + 1, m[p + 2][r + 1] = h > a ? a + 2 : a + 1, m[p + 2][r + 2] = l > a ? a + 2 : a + 1
                                        }
                                    r += 4, e++
                                }
                                p += 4, s++
                            }
                            return m
                        }
                        static addTileTypes(t) {
                            let e, s, i, n, r, o, a, c, _, h, l, u, d, g;
                            const m = t.length - 1,
                                p = t[0].length - 1;
                            for (s = 1; s < m;) {
                                for (e = 1; e < p;) i = t[s][e], i < 0 || (n = 255 & t[s - 1][e - 1], r = 255 & t[s - 1][e], o = 255 & t[s - 1][e + 1], a = 255 & t[s][e - 1], c = 255 & t[s][e + 1], _ = 255 & t[s + 1][e - 1], h = 255 & t[s + 1][e], l = 255 & t[s + 1][e + 1], u = i + 1, d = i - 1, g = (n == u || r == u || a == u ? 8 : 0) | (o == u || r == u || c == u ? 4 : 0) | (_ == u || h == u || a == u ? 2 : 0) | (l == u || h == u || c == u ? 1 : 0), 15 == g && (g = 0), t[s][e] = i | g << 8), e++;
                                s++
                            }
                        }
                        static unpadHeightMap(t) {
                            t.shift(), t.pop();
                            for (const e of t) e.shift(), e.pop()
                        }
                        static padHeightMap(e) {
                            const s = [],
                                i = [];
                            for (const n of e) n.push(t.TILE_BLOCKED), n.unshift(t.TILE_BLOCKED);
                            for (const n of e[0]) s.push(t.TILE_BLOCKED), i.push(t.TILE_BLOCKED);
                            e.push(i), e.unshift(s)
                        }
                        get minX() {
                            return this._minX
                        }
                        get maxX() {
                            return this._maxX
                        }
                        get minY() {
                            return this._minY
                        }
                        get maxY() {
                            return this._maxY
                        }
                        get tileMapWidth() {
                            return this._width
                        }
                        get tileMapHeight() {
                            return this._height
                        }
                        get planeCount() {
                            return this._planes.length
                        }
                        get floorHeight() {
                            return -1 != this._fixedWallHeight ? this._fixedWallHeight : this._floorHeight
                        }
                        get wallHeight() {
                            return -1 != this._fixedWallHeight ? this._fixedWallHeight + 3.6 : this._wallHeight
                        }
                        set wallHeight(t) {
                            t < 0 && (t = 0), this._wallHeight = t
                        }
                        get wallThicknessMultiplier() {
                            return this._wallThicknessMultiplier
                        }
                        set wallThicknessMultiplier(t) {
                            t < 0 && (t = 0), this._wallThicknessMultiplier = t
                        }
                        get floorThicknessMultiplier() {
                            return this._floorThicknessMultiplier
                        }
                        set floorThicknessMultiplier(t) {
                            t < 0 && (t = 0), this._floorThicknessMultiplier = t
                        }
                        dispose() {
                            this._planes = null, this._tileMatrix = null, this._tileMatrixOriginal = null, this._floorHoleMatrix = null, null != this._floorHoles && (this._floorHoles.clear(), this._floorHoles = null)
                        }
                        reset() {
                            this._planes = [], this._tileMatrix = [], this._tileMatrixOriginal = [], this._width = 0, this._height = 0, this._minX = 0, this._maxX = 0, this._minY = 0, this._maxY = 0, this._floorHeight = 0, this._floorHoleMatrix = []
                        }
                        initializeTileMap(e, s) {
                            e < 0 && (e = 0), s < 0 && (s = 0), this._tileMatrix = [], this._tileMatrixOriginal = [], this._floorHoleMatrix = [];
                            let i = 0;
                            for (; i < s;) {
                                const s = [],
                                    n = [],
                                    r = [];
                                let o = 0;
                                for (; o < e;) s[o] = t.TILE_BLOCKED, n[o] = t.TILE_BLOCKED, r[o] = !1, o++;
                                this._tileMatrix.push(s), this._tileMatrixOriginal.push(n), this._floorHoleMatrix.push(r), i++
                            }
                            return this._width = e, this._height = s, this._minX = this._width, this._maxX = -1, this._minY = this._height, this._maxY = -1, !0
                        }
                        setTileHeight(t, e, s) {
                            let i, n, r, o, a;
                            if (t >= 0 && t < this._width && e >= 0 && e < this._height) {
                                if (i = this._tileMatrix[e], i[t] = s, s >= 0) t < this._minX && (this._minX = t), t > this._maxX && (this._maxX = t), e < this._minY && (this._minY = e), e > this._maxY && (this._maxY = e);
                                else {
                                    if (t == this._minX || t == this._maxX) {
                                        for (n = !1, r = this._minY; r < this._maxY;) {
                                            if (this.getTileHeightInternal(t, r) >= 0) {
                                                n = !0;
                                                break
                                            }
                                            r++
                                        }
                                        n || (t == this._minX && this._minX++, t == this._maxX && this._maxX--)
                                    }
                                    if (e == this._minY || e == this._maxY) {
                                        for (o = !1, a = this._minX; a < this._maxX;) {
                                            if (this.getTileHeight(a, e) >= 0) {
                                                o = !0;
                                                break
                                            }
                                            a++
                                        }
                                        o || (e == this._minY && this._minY++, e == this._maxY && this._maxY--)
                                    }
                                }
                                return !0
                            }
                            return !1
                        }
                        getTileHeight(e, s) {
                            if (e < 0 || e >= this._width || s < 0 || s >= this._height) return t.TILE_BLOCKED;
                            const i = this._tileMatrix[s];
                            return void 0 === i[e] ? 0 : Math.abs(i[e])
                        }
                        getTileHeightOriginal(e, s) {
                            return e < 0 || e >= this._width || s < 0 || s >= this._height ? t.TILE_BLOCKED : this._floorHoleMatrix[s][e] ? t.TILE_HOLE : this._tileMatrixOriginal[s][e]
                        }
                        getTileHeightInternal(e, s) {
                            return e < 0 || e >= this._width || s < 0 || s >= this._height ? t.TILE_BLOCKED : this._tileMatrix[s][e]
                        }
                        initializeFromTileData(e = -1) {
                            let s, i;
                            for (this._fixedWallHeight = e, i = 0; i < this._height;) {
                                for (s = 0; s < this._width;) void 0 === this._tileMatrixOriginal[i] && (this._tileMatrixOriginal[i] = []), this._tileMatrixOriginal[i][s] = this._tileMatrix[i][s], s++;
                                i++
                            }
                            const n = t.findEntranceTile(this._tileMatrix);
                            for (i = 0; i < this._height;) {
                                for (s = 0; s < this._width;) void 0 === this._floorHoleMatrix[i] && (this._floorHoleMatrix[i] = []), this._floorHoleMatrix[i][s] && this.setTileHeight(s, i, t.TILE_HOLE), s++;
                                i++
                            }
                            return this.initialize(n)
                        }
                        initialize(e) {
                            let s = 0;
                            null != e && (s = this.getTileHeight(e.x, e.y), this.setTileHeight(e.x, e.y, t.TILE_BLOCKED)), this._floorHeight = t.getFloorHeight(this._tileMatrix), this.createWallPlanes();
                            const i = [];
                            for (const t of this._tileMatrix) i.push(t.concat());
                            t.padHeightMap(i), t.addTileTypes(i), t.unpadHeightMap(i);
                            const n = t.expandFloorTiles(i);
                            return this.extractPlanes(n), null != e && (this.setTileHeight(e.x, e.y, s), this.addFloor(new K(e.x + .5, e.y + .5, s), new K(-1, 0, 0), new K(0, -1, 0), !1, !1, !1, !1)), !0
                        }
                        generateWallData(t, e) {
                            let s, i, n, r, o;
                            const a = new Vo,
                                c = [this.extractTopWall.bind(this), this.extractRightWall.bind(this), this.extractBottomWall.bind(this), this.extractLeftWall.bind(this)];
                            let _ = 0,
                                h = new u.j(t.x, t.y),
                                l = 0;
                            for (; l++ < 1e3;) {
                                if (s = !1, i = !1, n = _, (h.x < this.minX || h.x > this.maxX || h.y < this.minY || h.y > this.maxY) && (s = !0), r = c[_](h, e), null == r) return null;
                                if (o = Math.abs(r.x - h.x) + Math.abs(r.y - h.y), h.x == r.x || h.y == r.y ? (_ = (_ - 1 + c.length) % c.length, o += 1, i = !0) : (_ = (_ + 1) % c.length, o--), a._Str_17862(h, n, o, s, i), r.x == t.x && r.y == t.y && (r.x != h.x || r.y != h.y)) break;
                                h = r
                            }
                            return 0 == a.count ? null : a
                        }
                        hidePeninsulaWallChains(t) {
                            let e, s, i, n, r = 0;
                            const o = t.count;
                            for (; r < o;) {
                                const a = r;
                                for (e = r, s = 0, i = !1; !t._Str_25208(r) && r < o;) t._Str_17084(r) ? s++ : s > 0 && s--, s > 1 && (i = !0), e = r, r++;
                                if (i)
                                    for (n = a; n <= e;) t._Str_15901(n, !0), n++;
                                r++
                            }
                        }
                        updateWallsNextToHoles(e) {
                            let s, i, n, r, o, a, c;
                            const _ = e.count;
                            let h = 0;
                            for (; h < _;) {
                                if (!e._Str_10019(h)) {
                                    for (s = e._Str_10778(h), i = e.getDirection(h), n = e._Str_13743(h), r = Vo.WALL_DIRECTION_VECTORS[i], o = Vo.WALL_NORMAL_VECTORS[i], a = 0, c = 0; c < n;) {
                                        if (this.getTileHeightInternal(s.x + c * r.x - o.x, s.y + c * r.y - o.y) == t.TILE_HOLE) {
                                            if (c > 0 && 0 == a) {
                                                e._Str_24531(h, c);
                                                break
                                            }
                                            a++
                                        } else if (a > 0) {
                                            e._Str_23976(h, a);
                                            break
                                        }
                                        c++
                                    }
                                    a == n && e._Str_15901(h, !0)
                                }
                                h++
                            }
                        }
                        resolveOriginalWallIndex(t, e, s) {
                            let i, n, r, o, a, c;
                            const _ = Math.min(t.y, e.y),
                                h = Math.max(t.y, e.y),
                                l = Math.min(t.x, e.x),
                                u = Math.max(t.x, e.x),
                                d = s.count;
                            let g = 0;
                            for (; g < d;) {
                                if (i = s._Str_10778(g), n = s._Str_19138(g), t.x == e.x) {
                                    if (i.x == t.x && n.x == t.x && (r = Math.min(i.y, n.y), o = Math.max(i.y, n.y), r <= _ && h <= o)) return g
                                } else if (t.y == e.y && i.y == t.y && n.y == t.y && (a = Math.min(i.x, n.x), c = Math.max(i.x, n.x), a <= l && u <= c)) return g;
                                g++
                            }
                            return -1
                        }
                        hideOriginallyHiddenWalls(t, e) {
                            let s, i, n, r, o;
                            const a = t.count;
                            let c = 0;
                            for (; c < a;) t._Str_10019(c) || (s = t._Str_10778(c), i = new u.j(s.x, s.y), n = Vo.WALL_DIRECTION_VECTORS[t.getDirection(c)], r = t._Str_13743(c), i.x = i.x + n.x * r, i.y = i.y + n.y * r, o = this.resolveOriginalWallIndex(s, i, e), o >= 0 ? e._Str_10019(o) && t._Str_15901(c, !0) : t._Str_15901(c, !0)), c++
                        }
                        checkWallHiding(t, e) {
                            this.hidePeninsulaWallChains(e), this.updateWallsNextToHoles(t), this.hideOriginallyHiddenWalls(t, e)
                        }
                        addWalls(e, s) {
                            const i = e.count,
                                n = s.count;
                            let r = 0;
                            for (; r < i;) {
                                if (!e._Str_10019(r)) {
                                    const o = e._Str_10778(r),
                                        a = e.getDirection(r),
                                        c = e._Str_13743(r),
                                        _ = Vo.WALL_DIRECTION_VECTORS[a],
                                        h = Vo.WALL_NORMAL_VECTORS[a];
                                    let l = -1,
                                        u = 0;
                                    for (; u < c;) {
                                        const t = this.getTileHeightInternal(o.x + u * _.x + h.x, o.y + u * _.y + h.y);
                                        t >= 0 && (t < l || l < 0) && (l = t), u++
                                    }
                                    let d = new K(o.x, o.y, l);
                                    d = K.sum(d, K.product(h, .5)), d = K.sum(d, K.product(_, -.5));
                                    const g = this.wallHeight + Math.min(t.MAX_WALL_ADDITIONAL_HEIGHT, this.floorHeight) - l,
                                        m = K.product(_, -c),
                                        p = new K(0, 0, g);
                                    d = K.dif(d, m);
                                    const b = this.resolveOriginalWallIndex(o, e._Str_19138(r), s);
                                    let E = 0,
                                        f = 0;
                                    b >= 0 ? (E = s.getDirection((b + 1) % n), f = s.getDirection((b - 1 + n) % n)) : (E = e.getDirection((r + 1) % i), f = e.getDirection((r - 1 + i) % i));
                                    let S = null;
                                    (E - a + 4) % 4 == 3 ? S = Vo.WALL_NORMAL_VECTORS[E] : (a - f + 4) % 4 == 3 && (S = Vo.WALL_NORMAL_VECTORS[f]);
                                    const I = e._Str_17084(r),
                                        R = e._Str_17084((r - 1 + i) % i),
                                        v = e._Str_10019((r + 1) % i),
                                        T = e._Str_25455(r),
                                        O = e._Str_24163(r);
                                    this.addWall(d, m, p, S, !R || T, !I || O, !v)
                                }
                                r++
                            }
                        }
                        createWallPlanes() {
                            let e, s;
                            const i = this._tileMatrix;
                            if (null == i) return !1;
                            let n, r, o;
                            const a = i.length;
                            let c = 0;
                            if (0 == a) return !1;
                            for (n = 0; n < a;) {
                                if (o = i[n], null == o || 0 == o.length) return !1;
                                c = c > 0 ? Math.min(c, o.length) : o.length, n++
                            }
                            const _ = Math.min(t.MAX_WALL_ADDITIONAL_HEIGHT, -1 != this._fixedWallHeight ? this._fixedWallHeight : t.getFloorHeight(i)),
                                h = this.minX;
                            let l = this.minY;
                            for (l = this.minY; l <= this.maxY;) {
                                if (this.getTileHeightInternal(h, l) > t.TILE_HOLE) {
                                    l--;
                                    break
                                }
                                l++
                            }
                            if (l > this.maxY) return !1;
                            const d = new u.j(h, l),
                                g = this.generateWallData(d, !0),
                                m = this.generateWallData(d, !1);
                            for (null != g && (e = g.count, s = m.count, this.checkWallHiding(g, m), this.addWalls(g, m)), r = 0; r < this.tileMapHeight;) {
                                for (n = 0; n < this.tileMapWidth;) this.getTileHeightInternal(n, r) < 0 && this.setTileHeight(n, r, -(_ + this.wallHeight)), n++;
                                r++
                            }
                            return !0
                        }
                        extractTopWall(e, s) {
                            if (null == e) return null;
                            let i = 1,
                                n = t.TILE_HOLE;
                            for (s || (n = t.TILE_BLOCKED); i < 1e3;) {
                                if (this.getTileHeightInternal(e.x + i, e.y) > n) return new u.j(e.x + i - 1, e.y);
                                if (this.getTileHeightInternal(e.x + i, e.y + 1) <= n) return new u.j(e.x + i, e.y + 1);
                                i++
                            }
                            return null
                        }
                        extractRightWall(e, s) {
                            if (null == e) return null;
                            let i = 1,
                                n = t.TILE_HOLE;
                            for (s || (n = t.TILE_BLOCKED); i < 1e3;) {
                                if (this.getTileHeightInternal(e.x, e.y + i) > n) return new u.j(e.x, e.y + (i - 1));
                                if (this.getTileHeightInternal(e.x - 1, e.y + i) <= n) return new u.j(e.x - 1, e.y + i);
                                i++
                            }
                            return null
                        }
                        extractBottomWall(e, s) {
                            if (null == e) return null;
                            let i = 1,
                                n = t.TILE_HOLE;
                            for (s || (n = t.TILE_BLOCKED); i < 1e3;) {
                                if (this.getTileHeightInternal(e.x - i, e.y) > n) return new u.j(e.x - (i - 1), e.y);
                                if (this.getTileHeightInternal(e.x - i, e.y - 1) <= n) return new u.j(e.x - i, e.y - 1);
                                i++
                            }
                            return null
                        }
                        extractLeftWall(e, s) {
                            if (null == e) return null;
                            let i = 1,
                                n = t.TILE_HOLE;
                            for (s || (n = t.TILE_BLOCKED); i < 1e3;) {
                                if (this.getTileHeightInternal(e.x, e.y - i) > n) return new u.j(e.x, e.y - (i - 1));
                                if (this.getTileHeightInternal(e.x + 1, e.y - i) <= n) return new u.j(e.x + 1, e.y - i);
                                i++
                            }
                            return null
                        }
                        addWall(e, s, i, n, r, o, a) {
                            this.addPlane(ko.PLANE_WALL, e, s, i, [n]);
                            const c = t.WALL_THICKNESS * this._wallThicknessMultiplier,
                                _ = t.FLOOR_THICKNESS * this._floorThicknessMultiplier,
                                h = K.crossProduct(s, i),
                                l = K.product(h, 1 / h.length * -c);
                            if (this.addPlane(ko.PLANE_WALL, K.sum(e, i), s, l, [h, n]), r && this.addPlane(ko.PLANE_WALL, K.sum(K.sum(e, s), i), K.product(i, -(i.length + _) / i.length), l, [h, n]), o && (this.addPlane(ko.PLANE_WALL, K.sum(e, K.product(i, -_ / i.length)), K.product(i, (i.length + _) / i.length), l, [h, n]), a)) {
                                const t = K.product(s, c / s.length);
                                this.addPlane(ko.PLANE_WALL, K.sum(K.sum(e, i), K.product(t, -1)), t, l, [h, s, n])
                            }
                        }
                        addFloor(e, s, i, n, r, o, a) {
                            let c, _, h;
                            null != this.addPlane(ko.PLANE_FLOOR, e, s, i) && (c = t.FLOOR_THICKNESS * this._floorThicknessMultiplier, _ = new K(0, 0, c), h = K.dif(e, _), o && this.addPlane(ko.PLANE_FLOOR, h, s, _), a && this.addPlane(ko.PLANE_FLOOR, K.sum(h, K.sum(s, i)), K.product(s, -1), _), n && this.addPlane(ko.PLANE_FLOOR, K.sum(h, i), K.product(i, -1), _), r && this.addPlane(ko.PLANE_FLOOR, K.sum(h, s), i, _))
                        }
                        initializeFromMapData(t) {
                            if (!t) return !1;
                            this.reset(), this.resetFloorHoles();
                            const e = t.wallHeight,
                                s = t.fixedWallsHeight;
                            if (this.initializeTileMap(t.width, t.height), t.tileMap) {
                                let e = 0;
                                for (; e < t.tileMap.length;) {
                                    const s = t.tileMap[e];
                                    if (s) {
                                        let t = 0;
                                        for (; t < s.length;) {
                                            const i = s[t];
                                            i && this.setTileHeight(t, e, i.height), t++
                                        }
                                    }
                                    e++
                                }
                            }
                            if (t.holeMap && t.holeMap.length) {
                                let e = 0;
                                for (; e < t.holeMap.length;) {
                                    const s = t.holeMap[e];
                                    s && (this.addFloorHole(s.id, s.x, s.y, s.width, s.height), e++)
                                }
                                this.initializeHoleMap()
                            }
                            return this.wallHeight = e, this.restrictsDragging = t.restrictsDragging, this.restrictsScaling = t.restrictsScaling, this.restrictedScale = t.restrictedScale, this.initializeFromTileData(s), !0
                        }
                        addPlane(t, e, s, i, n = null) {
                            if (0 == s.length || 0 == i.length) return null;
                            const r = new ko(t, e, s, i, n);
                            return this._planes.push(r), r
                        }
                        getMapData() {
                            const t = new Go;
                            t.width = this._width, t.height = this._height, t.wallHeight = this._wallHeight, t.fixedWallsHeight = this._fixedWallHeight, t.dimensions.minX = this.minX, t.dimensions.maxX = this.maxX, t.dimensions.minY = this.minY, t.dimensions.maxY = this.maxY, t.restrictsDragging = this.restrictsDragging, t.restrictsScaling = this.restrictsScaling, t.restrictedScale = this.restrictedScale;
                            let e = 0;
                            for (; e < this._height;) {
                                const s = [],
                                    i = this._tileMatrixOriginal[e];
                                let n = 0;
                                for (; n < this._width;) s.push({
                                    height: i[n]
                                }), n++;
                                t.tileMap.push(s), e++
                            }
                            for (const [s, i] of this._floorHoles.entries()) i && t.holeMap.push({
                                id: s,
                                x: i.x,
                                y: i.y,
                                width: i.width,
                                height: i.height
                            });
                            return t
                        }
                        getPlaneLocation(t) {
                            if (t < 0 || t >= this.planeCount) return null;
                            const e = this._planes[t];
                            return e ? e.loc : null
                        }
                        getPlaneNormal(t) {
                            if (t < 0 || t >= this.planeCount) return null;
                            const e = this._planes[t];
                            return e ? e.normal : null
                        }
                        getPlaneLeftSide(t) {
                            if (t < 0 || t >= this.planeCount) return null;
                            const e = this._planes[t];
                            return e ? e._Str_5424 : null
                        }
                        getPlaneRightSide(t) {
                            if (t < 0 || t >= this.planeCount) return null;
                            const e = this._planes[t];
                            return e ? e._Str_4968 : null
                        }
                        getPlaneNormalDirection(t) {
                            if (t < 0 || t >= this.planeCount) return null;
                            const e = this._planes[t];
                            return e ? e._Str_25207 : null
                        }
                        getPlaneSecondaryNormals(t) {
                            let e, s;
                            if (t < 0 || t >= this.planeCount) return null;
                            const i = this._planes[t];
                            if (null != i) {
                                for (e = [], s = 0; s < i._Str_20277;) e.push(i._Str_22585(s)), s++;
                                return e
                            }
                            return null
                        }
                        getPlaneType(t) {
                            if (t < 0 || t >= this.planeCount) return ko.PLANE_UNDEFINED;
                            const e = this._planes[t];
                            return e ? e.type : ko.PLANE_UNDEFINED
                        }
                        getPlaneMaskCount(t) {
                            if (t < 0 || t >= this.planeCount) return 0;
                            const e = this._planes[t];
                            return e ? e._Str_6845 : 0
                        }
                        getPlaneMaskLeftSideLoc(t, e) {
                            if (t < 0 || t >= this.planeCount) return -1;
                            const s = this._planes[t];
                            return s ? s._Str_25133(e) : -1
                        }
                        getPlaneMaskRightSideLoc(t, e) {
                            if (t < 0 || t >= this.planeCount) return -1;
                            const s = this._planes[t];
                            return s ? s._Str_23609(e) : -1
                        }
                        getPlaneMaskLeftSideLength(t, e) {
                            if (t < 0 || t >= this.planeCount) return -1;
                            const s = this._planes[t];
                            return s ? s._Str_25097(e) : -1
                        }
                        getPlaneMaskRightSideLength(t, e) {
                            if (t < 0 || t >= this.planeCount) return -1;
                            const s = this._planes[t];
                            return s ? s._Str_25617(e) : -1
                        }
                        addFloorHole(t, e, s, i, n) {
                            this.removeFloorHole(t), this._floorHoles.set(t, new Fo(e, s, i, n))
                        }
                        removeFloorHole(t) {
                            this._floorHoles.delete(t)
                        }
                        resetFloorHoles() {
                            this._floorHoles.clear()
                        }
                        initializeHoleMap() {
                            let t, e, s, i, n, r, o, a;
                            for (e = 0; e < this._height;) {
                                for (s = this._floorHoleMatrix[e], t = 0; t < this._width;) s[t] = !1, t++;
                                e++
                            }
                            for (const c of this._floorHoles.values())
                                if (i = c, null != i)
                                    for (n = i.x, r = i.x + i.width - 1, o = i.y, a = i.y + i.height - 1, n = n < 0 ? 0 : n, r = r >= this._width ? this._width - 1 : r, o = o < 0 ? 0 : o, a = a >= this._height ? this._height - 1 : a, e = o; e <= a;) {
                                        for (s = this._floorHoleMatrix[e], t = n; t <= r;) s[t] = !0, t++;
                                        e++
                                    }
                        }
                        extractPlanes(t) {
                            let e, s, i, n, r, o, a, c, _, h, l, u, d, g, m;
                            const p = t.length,
                                b = t[0].length,
                                E = [];
                            let f = 0;
                            for (; f < p;) E[f] = [], f++;
                            let S = 0;
                            for (; S < p;) {
                                for (e = 0; e < b;) {
                                    if (s = t[S][e], s < 0 || E[S][e]);
                                    else {
                                        for (r = 0 == e || !(t[S][e - 1] == s), o = 0 == S || !(t[S - 1][e] == s), i = e + 1; i < b && !(t[S][i] != s || E[S][i] || S > 0 && t[S - 1][i] == s == o);) i++;
                                        for (a = i == b || !(t[S][i] == s), l = !1, n = S + 1; n < p && !l;) {
                                            for (c = !(t[n][e] == s), l = c || e > 0 && t[n][e - 1] == s == r || i < b && t[n][i] == s == a, _ = e; _ < i;) {
                                                if (t[n][_] == s == c) {
                                                    l = !0, i = _;
                                                    break
                                                }
                                                _++
                                            }
                                            if (l) break;
                                            n++
                                        }
                                        for (c = c || n == p, a = i == b || !(t[S][i] == s), h = S; h < n;) {
                                            for (_ = e; _ < i;) E[h][_] = !0, _++;
                                            h++
                                        }
                                        u = e / 4 - .5, d = S / 4 - .5, g = (i - e) / 4, m = (n - S) / 4, this.addFloor(new K(u + g, d + m, s / 4), new K(-g, 0, 0), new K(0, -m, 0), a, r, c, o)
                                    }
                                    e++
                                }
                                S++
                            }
                        }
                        get restrictsDragging() {
                            return this._restrictsDragging
                        }
                        set restrictsDragging(t) {
                            this._restrictsDragging = t
                        }
                        get restrictsScaling() {
                            return this._restrictsScaling
                        }
                        set restrictsScaling(t) {
                            this._restrictsScaling = t
                        }
                        get restrictedScale() {
                            return this._restrictedScale
                        }
                        set restrictedScale(t) {
                            this._restrictedScale = t
                        }
                    }
                    return t.FLOOR_THICKNESS = .25, t.WALL_THICKNESS = .25, t.MAX_WALL_ADDITIONAL_HEIGHT = 20, t.TILE_BLOCKED = -110, t.TILE_HOLE = -100, t
                })();
            class jo {
                flush() {
                    return this._model = null, this._width = 0, this._height = 0, this._wallHeight = -1, this._heightMap = [], this._scale = 64, this._model = null, !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._scale = t.readBoolean() ? 32 : 64, this._wallHeight = t.readInt(), this._model = t.readString();
                    const e = this._model.split("\r"),
                        s = e.length;
                    let i = 0,
                        n = 0;
                    for (; n < s;) {
                        const t = e[n];
                        t.length > i && (i = t.length), n++
                    }
                    for (this._heightMap = [], n = 0; n < s;) {
                        const t = [];
                        let e = 0;
                        for (; e < i;) t.push(Zo.TILE_BLOCKED), e++;
                        this._heightMap.push(t), n++
                    }
                    for (this._width = i, this._height = s, n = 0; n < s;) {
                        const t = this._heightMap[n],
                            s = e[n];
                        if (s.length > 0) {
                            let e = 0;
                            for (; e < s.length;) {
                                const i = s.charAt(e);
                                let n = Zo.TILE_BLOCKED;
                                "x" !== i && "X" !== i && (n = parseInt(i, 36)), t[e] = n, e++
                            }
                        }
                        n++
                    }
                    return !0
                }
                getHeight(t, e) {
                    if (t < 0 || t >= this._width || e < 0 || e >= this._height) return -110;
                    const s = this._heightMap[e];
                    if (void 0 === s) return -110;
                    const i = s[t];
                    return void 0 === i ? -110 : i
                }
                get model() {
                    return this._model
                }
                get width() {
                    return this._width
                }
                get height() {
                    return this._height
                }
                get heightMap() {
                    return this._heightMap
                }
                get wallHeight() {
                    return this._wallHeight
                }
                get scale() {
                    return this._scale
                }
            }
            class Bo extends M {
                constructor(t) {
                    super(t, jo)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ho {
                flush() {
                    return this._name = null, this._roomId = 0, !0
                }
                parse(t) {
                    return !!t && (this._name = t.readString(), this._roomId = t.readInt(), !0)
                }
                get name() {
                    return this._name
                }
                get roomId() {
                    return this._roomId
                }
            }
            class Wo extends M {
                constructor(t) {
                    super(t, Ho)
                }
                getParser() {
                    return this.parser
                }
            }
            class zo {
                flush() {
                    return this._floorType = null, this._wallType = null, this._landscapeType = null, this._landscapeAnimation = null, !0
                }
                parse(t) {
                    if (!t) return !1;
                    const e = t.readString(),
                        s = t.readString();
                    switch (e) {
                        case "floor":
                            this._floorType = s;
                            break;
                        case "wallpaper":
                            this._wallType = s;
                            break;
                        case "landscape":
                            this._landscapeType = s;
                            break;
                        case "landscapeanim":
                            this._landscapeAnimation = s
                    }
                    return !0
                }
                get floorType() {
                    return this._floorType
                }
                get wallType() {
                    return this._wallType
                }
                get landscapeType() {
                    return this._landscapeType
                }
                get landscapeAnimation() {
                    return this._landscapeAnimation
                }
            }
            class Ko extends M {
                constructor(t) {
                    super(t, zo)
                }
                getParser() {
                    return this.parser
                }
            }
            class Xo {
                flush() {
                    return this._hideWalls = !1, this._thicknessWall = 0, this._thicknessFloor = 0, !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._hideWalls = t.readBoolean();
                    let e = t.readInt(),
                        s = t.readInt();
                    return e = e < -2 ? -2 : e > 1 ? 1 : e, s = s < -2 ? -2 : s > 1 ? 1 : s, this._thicknessWall = Math.pow(2, e), this._thicknessFloor = Math.pow(2, s), !0
                }
                get hideWalls() {
                    return this._hideWalls
                }
                get thicknessWall() {
                    return this._thicknessWall
                }
                get thicknessFloor() {
                    return this._thicknessFloor
                }
            }
            class qo extends M {
                constructor(t) {
                    super(t, Xo)
                }
                getParser() {
                    return this.parser
                }
            }
            class Jo {
                constructor(t) {
                    this._typeId = t.readInt(), this._paletteId = t.readInt(), this._color = t.readString(), this._breedId = t.readInt(), this._customParts = [], this._customPartCount = t.readInt();
                    let e = 0;
                    for (; e < this._customPartCount;) this._customParts.push(t.readInt()), this._customParts.push(t.readInt()), this._customParts.push(t.readInt()), e++
                }
                get typeId() {
                    return this._typeId
                }
                get paletteId() {
                    return this._paletteId
                }
                get color() {
                    return this._color
                }
                get breedId() {
                    return this._breedId
                }
                get figuredata() {
                    let t = this.typeId + " " + this.paletteId + " " + this.color;
                    t = t + " " + this.custompartCount;
                    for (const e of this.customParts) t = t + " " + e;
                    return t
                }
                get customParts() {
                    return this._customParts
                }
                get custompartCount() {
                    return this._customPartCount
                }
            }
            class Qo {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t && (this._roomIndex = t.readInt(), this._petId = t.readInt(), this._figureData = new Jo(t), this._hasSaddle = t.readBoolean(), this._isRiding = t.readBoolean(), !0)
                }
                get roomIndex() {
                    return this._roomIndex
                }
                get petId() {
                    return this._petId
                }
                get figureData() {
                    return this._figureData
                }
                get hasSaddle() {
                    return this._hasSaddle
                }
                get isRiding() {
                    return this._isRiding
                }
            }
            class $o extends M {
                constructor(t) {
                    super(t, Qo)
                }
                getParser() {
                    return this.parser
                }
            }
            class ta {
                flush() {
                    return this._isPlaying = !1, !0
                }
                parse(t) {
                    return !!t && (this._isPlaying = t.readBoolean(), !0)
                }
                get isPlaying() {
                    return this._isPlaying
                }
            }
            class ea extends M {
                constructor(t) {
                    super(t, ta)
                }
                getParser() {
                    return this.parser
                }
            }
            class sa {
                flush() {
                    return this._roomIndex = null, this._message = null, this._gesture = 0, this._bubble = 0, this._urls = [], this._messageLength = 0, !0
                }
                parse(t) {
                    return !!t && (this._roomIndex = t.readInt(), this._message = t.readString(), this._gesture = t.readInt(), this._bubble = t.readInt(), this.parseUrls(t), this._messageLength = t.readInt(), !0)
                }
                parseUrls(t) {
                    if (!t) return !1;
                    this._urls = [];
                    let e = t.readInt();
                    for (; e > 0;) this._urls.push(t.readString()), e--;
                    return !0
                }
                get roomIndex() {
                    return this._roomIndex
                }
                get message() {
                    return this._message
                }
                get gesture() {
                    return this._gesture
                }
                get bubble() {
                    return this._bubble
                }
                get urls() {
                    return this._urls
                }
                get messageLength() {
                    return this._messageLength
                }
            }
            class ia extends M {
                constructor(t) {
                    super(t, sa)
                }
                getParser() {
                    return this.parser
                }
            }
            class na extends M {
                constructor(t) {
                    super(t, sa)
                }
                getParser() {
                    return this.parser
                }
            }
            class ra extends M {
                constructor(t) {
                    super(t, sa)
                }
                getParser() {
                    return this.parser
                }
            }
            class oa {
                flush() {
                    return this._unitId = null, this._isTyping = !1, !0
                }
                parse(t) {
                    return !!t && (this._unitId = t.readInt(), this._isTyping = 1 === t.readInt(), !0)
                }
                get unitId() {
                    return this._unitId
                }
                get isTyping() {
                    return this._isTyping
                }
            }
            class aa extends M {
                constructor(t) {
                    super(t, oa)
                }
                getParser() {
                    return this.parser
                }
            }
            class ca {
                flush() {
                    return this._unitId = null, this._danceId = 0, !0
                }
                parse(t) {
                    return !!t && (this._unitId = t.readInt(), this._danceId = t.readInt(), !0)
                }
                get unitId() {
                    return this._unitId
                }
                get danceId() {
                    return this._danceId
                }
            }
            class _a extends M {
                constructor(t) {
                    super(t, ca)
                }
                getParser() {
                    return this.parser
                }
            }
            class ha {
                flush() {
                    return this._unitId = null, this._effectId = 0, this._delay = 0, !0
                }
                parse(t) {
                    return !!t && (this._unitId = t.readInt(), this._effectId = t.readInt(), this._delay = t.readInt(), !0)
                }
                get unitId() {
                    return this._unitId
                }
                get effectId() {
                    return this._effectId
                }
                get delay() {
                    return this._delay
                }
            }
            class la extends M {
                constructor(t) {
                    super(t, ha)
                }
                getParser() {
                    return this.parser
                }
            }
            let ua = (() => {
                    class t {}
                    return t.USER = 1, t.PET = 2, t.BOT = 3, t.RENTABLE_BOT = 4, t
                })(),
                da = (() => {
                    class t {
                        constructor(t) {
                            this._roomIndex = 0, this._x = 0, this._y = 0, this._z = 0, this._dir = 0, this._name = "", this._userType = 0, this._sex = "", this._figure = "", this._custom = "", this._activityPoints = 0, this._webID = 0, this._groupID = "", this._groupStatus = 0, this._groupName = "", this._subType = "", this._ownerId = 0, this._ownerName = "", this._rarityLevel = 0, this._hasSaddle = !1, this._isRiding = !1, this._canBreed = !1, this._canHarvest = !1, this._canRevive = !1, this._hasBreedingPermission = !1, this._petLevel = 0, this._petPosture = "", this._botSkills = [], this._isModerator = !1, this._isReadOnly = !1, this._roomIndex = t
                        }
                        _Str_4710() {
                            this._isReadOnly = !0
                        }
                        get roomIndex() {
                            return this._roomIndex
                        }
                        get x() {
                            return this._x
                        }
                        set x(t) {
                            this._isReadOnly || (this._x = t)
                        }
                        get y() {
                            return this._y
                        }
                        set y(t) {
                            this._isReadOnly || (this._y = t)
                        }
                        get z() {
                            return this._z
                        }
                        set z(t) {
                            this._isReadOnly || (this._z = t)
                        }
                        get dir() {
                            return this._dir
                        }
                        set dir(t) {
                            this._isReadOnly || (this._dir = t)
                        }
                        get name() {
                            return this._name
                        }
                        set name(t) {
                            this._isReadOnly || (this._name = t)
                        }
                        get userType() {
                            return this._userType
                        }
                        set userType(t) {
                            this._isReadOnly || (this._userType = t)
                        }
                        get sex() {
                            return this._sex
                        }
                        set sex(t) {
                            this._isReadOnly || (this._sex = t)
                        }
                        get figure() {
                            return this._figure
                        }
                        set figure(t) {
                            this._isReadOnly || (this._figure = t)
                        }
                        get custom() {
                            return this._custom
                        }
                        set custom(t) {
                            this._isReadOnly || (this._custom = t)
                        }
                        get activityPoints() {
                            return this._activityPoints
                        }
                        set activityPoints(t) {
                            this._isReadOnly || (this._activityPoints = t)
                        }
                        get webID() {
                            return this._webID
                        }
                        set webID(t) {
                            this._isReadOnly || (this._webID = t)
                        }
                        get groupID() {
                            return this._groupID
                        }
                        set groupID(t) {
                            this._isReadOnly || (this._groupID = t)
                        }
                        get groupName() {
                            return this._groupName
                        }
                        set groupName(t) {
                            this._isReadOnly || (this._groupName = t)
                        }
                        get groupStatus() {
                            return this._groupStatus
                        }
                        set groupStatus(t) {
                            this._isReadOnly || (this._groupStatus = t)
                        }
                        get subType() {
                            return this._subType
                        }
                        set subType(t) {
                            this._isReadOnly || (this._subType = t)
                        }
                        get ownerId() {
                            return this._ownerId
                        }
                        set ownerId(t) {
                            this._isReadOnly || (this._ownerId = t)
                        }
                        get ownerName() {
                            return this._ownerName
                        }
                        set ownerName(t) {
                            this._isReadOnly || (this._ownerName = t)
                        }
                        get rarityLevel() {
                            return this._rarityLevel
                        }
                        set rarityLevel(t) {
                            this._isReadOnly || (this._rarityLevel = t)
                        }
                        get hasSaddle() {
                            return this._hasSaddle
                        }
                        set hasSaddle(t) {
                            this._isReadOnly || (this._hasSaddle = t)
                        }
                        get isRiding() {
                            return this._isRiding
                        }
                        set isRiding(t) {
                            this._isReadOnly || (this._isRiding = t)
                        }
                        get canBreed() {
                            return this._canBreed
                        }
                        set canBreed(t) {
                            this._isReadOnly || (this._canBreed = t)
                        }
                        get canHarvest() {
                            return this._canHarvest
                        }
                        set canHarvest(t) {
                            this._isReadOnly || (this._canHarvest = t)
                        }
                        get canRevive() {
                            return this._canRevive
                        }
                        set canRevive(t) {
                            this._isReadOnly || (this._canRevive = t)
                        }
                        get hasBreedingPermission() {
                            return this._hasBreedingPermission
                        }
                        set hasBreedingPermission(t) {
                            this._isReadOnly || (this._hasBreedingPermission = t)
                        }
                        get petLevel() {
                            return this._petLevel
                        }
                        set petLevel(t) {
                            this._isReadOnly || (this._petLevel = t)
                        }
                        get petPosture() {
                            return this._petPosture
                        }
                        set petPosture(t) {
                            this._isReadOnly || (this._petPosture = t)
                        }
                        get botSkills() {
                            return this._botSkills
                        }
                        set botSkills(t) {
                            this._botSkills = t
                        }
                        get isModerator() {
                            return this._isModerator
                        }
                        set isModerator(t) {
                            this._isReadOnly || (this._isModerator = t)
                        }
                    }
                    return t.M = "M", t.F = "F", t
                })();
            class ga {
                flush() {
                    return this._users = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._users = [];
                    const e = t.readInt();
                    let s = 0;
                    for (; s < e;) {
                        const e = t.readInt(),
                            i = t.readString(),
                            n = t.readString();
                        let r = t.readString();
                        const o = t.readInt(),
                            a = t.readInt(),
                            c = t.readInt(),
                            _ = parseFloat(t.readString()),
                            h = t.readInt(),
                            l = t.readInt(),
                            u = new da(o);
                        if (u.dir = h, u.name = i, u.custom = n, u.x = a, u.y = c, u.z = _, this._users.push(u), 1 === l) {
                            u.webID = e, u.userType = ua.USER, u.sex = this.resolveSex(t.readString()), u.groupID = "" + t.readInt(), u.groupStatus = t.readInt(), u.groupName = t.readString();
                            const s = t.readString();
                            "" !== s && (r = this.convertSwimFigure(s, r, u.sex)), u.figure = r, u.activityPoints = t.readInt(), u.isModerator = t.readBoolean()
                        } else if (2 === l) u.userType = ua.PET, u.figure = r, u.webID = e, u.subType = t.readInt().toString(), u.ownerId = t.readInt(), u.ownerName = t.readString(), u.rarityLevel = t.readInt(), u.hasSaddle = t.readBoolean(), u.isRiding = t.readBoolean(), u.canBreed = t.readBoolean(), u.canHarvest = t.readBoolean(), u.canRevive = t.readBoolean(), u.hasBreedingPermission = t.readBoolean(), u.petLevel = t.readInt(), u.petPosture = t.readString();
                        else if (3 === l) u.userType = ua.BOT, u.webID = -1 * o, u.figure = -1 === r.indexOf("/") ? r : "hr-100-.hd-180-1.ch-876-66.lg-270-94.sh-300-64", u.sex = da.M;
                        else if (4 === l) {
                            u.userType = ua.RENTABLE_BOT, u.webID = e, u.sex = this.resolveSex(t.readString()), u.figure = r, u.ownerId = t.readInt(), u.ownerName = t.readString();
                            const s = t.readInt();
                            if (s) {
                                const e = [];
                                let i = 0;
                                for (; i < s;) e.push(t.readShort()), i++;
                                u.botSkills = e
                            }
                        }
                        s++
                    }
                    return !0
                }
                resolveSex(t) {
                    return "f" === t.substr(0, 1).toLowerCase() ? da.F : da.M
                }
                convertSwimFigure(t, e, s) {
                    const i = e.split(".");
                    let n = 1,
                        r = 1,
                        o = 1,
                        a = 0;
                    for (; a < i.length;) {
                        const t = i[a].split("-");
                        t.length > 2 && "hd" === t[0] && (n = parseInt(t[2])), a++
                    }
                    const c = ["238,238,238", "250,56,49", "253,146,160", "42,199,210", "53,51,44", "239,255,146", "198,255,152", "255,146,90", "157,89,126", "182,243,255", "109,255,51", "51,120,201", "255,182,49", "223,161,233", "249,251,50", "202,175,143", "197,198,197", "71,98,61", "138,131,97", "255,140,51", "84,198,39", "30,108,153", "152,79,136", "119,200,255", "255,192,142", "60,75,135", "124,44,71", "215,255,227", "143,63,28", "255,99,147", "31,155,121", "253,255,51"],
                        _ = t.split("=");
                    if (_.length > 1) {
                        const t = _[1].split("/");
                        o = "F" === s ? 10010 : 10011, r = 1e4 + c.indexOf(t[1]) + 1
                    }
                    return e + ".bds-10001-" + n + ".ss-" + o + "-" + r
                }
                get users() {
                    return this._users
                }
            }
            class ma extends M {
                constructor(t) {
                    super(t, ga)
                }
                getParser() {
                    return this.parser
                }
            }
            class pa {
                flush() {
                    return this._unitId = null, this._expression = 0, !0
                }
                parse(t) {
                    return !!t && (this._unitId = t.readInt(), this._expression = t.readInt(), !0)
                }
                get unitId() {
                    return this._unitId
                }
                get expression() {
                    return this._expression
                }
            }
            class ba extends M {
                constructor(t) {
                    super(t, pa)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ea {
                flush() {
                    return this._unitId = null, this._handId = 0, !0
                }
                parse(t) {
                    return !!t && (this._unitId = t.readInt(), this._handId = t.readInt(), !0)
                }
                get unitId() {
                    return this._unitId
                }
                get handId() {
                    return this._handId
                }
            }
            class fa extends M {
                constructor(t) {
                    super(t, Ea)
                }
                getParser() {
                    return this.parser
                }
            }
            class Sa {
                flush() {
                    return this._unitId = null, this._isIdle = !1, !0
                }
                parse(t) {
                    return !!t && (this._unitId = t.readInt(), this._isIdle = t.readBoolean(), !0)
                }
                get unitId() {
                    return this._unitId
                }
                get isIdle() {
                    return this._isIdle
                }
            }
            class Ia extends M {
                constructor(t) {
                    super(t, Sa)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ra {
                flush() {
                    return this._unitId = null, this._figure = null, this._gender = "M", this._motto = null, this._achievementScore = 0, !0
                }
                parse(t) {
                    return !!t && (this._unitId = t.readInt(), this._figure = t.readString(), this._gender = t.readString().toLocaleUpperCase(), this._motto = t.readString(), this._achievementScore = t.readInt(), !0)
                }
                get unitId() {
                    return this._unitId
                }
                get figure() {
                    return this._figure
                }
                get gender() {
                    return this._gender
                }
                get motto() {
                    return this._motto
                }
                get achievementScore() {
                    return this._achievementScore
                }
            }
            class va extends M {
                constructor(t) {
                    super(t, Ra)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ta {
                flush() {
                    return this._unitId = null, this._value = 0, !0
                }
                parse(t) {
                    return !!t && (this._unitId = t.readInt(), this._value = t.readInt(), !0)
                }
                get unitId() {
                    return this._unitId
                }
                get value() {
                    return this._value
                }
            }
            class Oa extends M {
                constructor(t) {
                    super(t, Ta)
                }
                getParser() {
                    return this.parser
                }
            }
            class ya {
                flush() {
                    return this._unitId = null, !0
                }
                parse(t) {
                    return !!t && (this._unitId = parseInt(t.readString()), !0)
                }
                get unitId() {
                    return this._unitId
                }
            }
            class Aa extends M {
                constructor(t) {
                    super(t, ya)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ca {
                constructor(t, e) {
                    this._action = t, this._value = e
                }
                get action() {
                    return this._action
                }
                get value() {
                    return this._value
                }
            }
            class Ma {
                constructor(t, e, s, i, n, r, o, a = 0, c = 0, _ = 0, h, l, u) {
                    this._id = t, this._x = e, this._y = s, this._z = i, this._height = n, this._headDirection = r, this._direction = o, this._targetX = a, this._targetY = c, this._targetZ = _, this._didMove = h, this._canStandUp = l, this._actions = u || []
                }
                get id() {
                    return this._id
                }
                get x() {
                    return this._x
                }
                get y() {
                    return this._y
                }
                get z() {
                    return this._z
                }
                get height() {
                    return this._height
                }
                get headDirection() {
                    return this._headDirection
                }
                get direction() {
                    return this._direction
                }
                get targetX() {
                    return this._targetX
                }
                get targetY() {
                    return this._targetY
                }
                get targetZ() {
                    return this._targetZ
                }
                get didMove() {
                    return this._didMove
                }
                get canStandUp() {
                    return this._canStandUp
                }
                get actions() {
                    return this._actions
                }
            }
            class Ua {
                flush() {
                    return this._statuses = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) {
                        const s = this.parseStatus(t);
                        s ? (this._statuses.push(s), e--) : e--
                    }
                    return !0
                }
                parseStatus(t) {
                    if (!t) return null;
                    const e = t.readInt(),
                        s = t.readInt(),
                        i = t.readInt(),
                        n = parseFloat(t.readString()),
                        r = t.readInt() % 8 * 45,
                        o = t.readInt() % 8 * 45,
                        a = t.readString();
                    let c = 0,
                        _ = 0,
                        h = 0,
                        l = 0,
                        u = !1,
                        d = !1;
                    if (a) {
                        const t = a.split("/"),
                            g = t.length,
                            m = [];
                        if (g)
                            for (let e = 0; e < g; e++) {
                                const s = t[e];
                                if (!s) continue;
                                const [i, n, r] = s.split(" ");
                                if (i && n) {
                                    switch (i) {
                                        case "mv":
                                            [c, _, h] = n.split(",").map(t => parseFloat(t)), d = !0;
                                            break;
                                        case "sit":
                                            void 0 !== r && (u = "1" === n), l = parseFloat(n);
                                            break;
                                        case "lay":
                                            l = parseFloat(n)
                                    }
                                    m.push(new Ca(i, n))
                                }
                            }
                        this._statuses.push(new Ma(e, s, i, n, l, r, o, c, _, h, d, u, m))
                    }
                }
                get statuses() {
                    return this._statuses
                }
            }
            class Da extends M {
                constructor(t) {
                    super(t, Ua)
                }
                getParser() {
                    return this.parser
                }
            }
            class Na {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t && (this._isMuted = t.readBoolean(), !0)
                }
                get isMuted() {
                    return this._isMuted
                }
            }
            class wa extends M {
                constructor(t) {
                    super(t, Na)
                }
                getParser() {
                    return this.parser
                }
            }
            class La {
                constructor(t) {
                    this._stuffIds = [], this._intParams = [], this._stuffTypeSelectionEnabled = t.readBoolean(), this._furniLimit = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) this._stuffIds.push(t.readInt()), e--;
                    for (this._stuffTypeId = t.readInt(), this._id = t.readInt(), this._stringParam = t.readString(), e = t.readInt(); e > 0;) this._intParams.push(t.readInt()), e--;
                    this._stuffTypeSelectionCode = t.readInt()
                }
                getBoolean(t) {
                    return 1 === this._intParams[t]
                }
                get _Str_21824() {
                    return this._stuffTypeSelectionEnabled
                }
                get _Str_6040() {
                    return this._stuffTypeSelectionCode
                }
                set _Str_6040(t) {
                    this._stuffTypeSelectionCode = t
                }
                get maximumItemSelectionCount() {
                    return this._furniLimit
                }
                get selectedItems() {
                    return this._stuffIds
                }
                get id() {
                    return this._id
                }
                get stringData() {
                    return this._stringParam
                }
                get intData() {
                    return this._intParams
                }
                get code() {
                    return 0
                }
                get spriteId() {
                    return this._stuffTypeId
                }
            }
            class xa extends La {
                constructor(t) {
                    super(t), this._conflictingTriggers = [], this._type = t.readInt(), this._delayInPulses = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) this._conflictingTriggers.push(t.readInt()), e--
                }
                get type() {
                    return this._type
                }
                get code() {
                    return this._type
                }
                get delayInPulses() {
                    return this._delayInPulses
                }
                get conflictingTriggers() {
                    return this._conflictingTriggers
                }
            }
            class Pa {
                flush() {
                    return this._definition = null, !0
                }
                parse(t) {
                    return !!t && (this._definition = new xa(t), !0)
                }
                get definition() {
                    return this._definition
                }
            }
            class Fa extends M {
                constructor(t) {
                    super(t, Pa)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ga extends La {
                constructor(t) {
                    super(t), this._type = t.readInt()
                }
                get type() {
                    return this._type
                }
                get code() {
                    return this._type
                }
            }
            class Ya {
                flush() {
                    return this._definition = null, !0
                }
                parse(t) {
                    return !!t && (this._definition = new Ga(t), !0)
                }
                get definition() {
                    return this._definition
                }
            }
            class ka extends M {
                constructor(t) {
                    super(t, Ya)
                }
                getParser() {
                    return this.parser
                }
            }
            class Va extends La {
                constructor(t) {
                    super(t), this._conflictingActions = [], this._triggerConf = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) this._conflictingActions.push(t.readInt()), e--
                }
                get type() {
                    return this._triggerConf
                }
                get code() {
                    return this._triggerConf
                }
                get _Str_21837() {
                    return this._conflictingActions
                }
            }
            class Za {
                flush() {
                    return this._definition = null, !0
                }
                parse(t) {
                    return !!t && (this._definition = new Va(t), !0)
                }
                get definition() {
                    return this._definition
                }
            }
            class ja extends M {
                constructor(t) {
                    super(t, Za)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ba {
                flush() {
                    return this._stuffId = 0, !0
                }
                parse(t) {
                    return !!t && (this._stuffId = t.readInt(), !0)
                }
                get stuffId() {
                    return this._stuffId
                }
            }
            class Ha extends M {
                constructor(t) {
                    super(t, Ba)
                }
                getParser() {
                    return this.parser
                }
            }
            class Wa {
                flush() {
                    return this._reason = 0, !0
                }
                parse(t) {
                    return !!t && (this._reason = t.readInt(), !0)
                }
                get reason() {
                    return this._reason
                }
            }
            let za = (() => {
                class t extends M {
                    constructor(t) {
                        super(t, Wa)
                    }
                    getParser() {
                        return this.parser
                    }
                }
                return t._Str_18436 = 6, t._Str_17787 = 7, t
            })();
            class Ka {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class Xa extends M {
                constructor(t) {
                    super(t, Ka)
                }
                getParser() {
                    return this.parser
                }
            }
            class qa {
                flush() {
                    return this._info = null, !0
                }
                parse(t) {
                    return !!t && (this._info = t.readString(), !0)
                }
                get info() {
                    return this._info
                }
            }
            class Ja extends M {
                constructor(t) {
                    super(t, qa)
                }
                getParser() {
                    return this.parser
                }
            }
            class Qa {
                flush() {
                    return !0
                }
                parse(t) {
                    return !!t
                }
            }
            class $a extends M {
                constructor(t) {
                    super(t, Qa)
                }
                getParser() {
                    return this.parser
                }
            }
            class tc {
                flush() {
                    return this._clubLevel = 0, this._securityLevel = 0, this._isAmbassador = !1, !0
                }
                parse(t) {
                    return !!t && (this._clubLevel = t.readInt(), this._securityLevel = t.readInt(), this._isAmbassador = t.readBoolean(), !0)
                }
                get clubLevel() {
                    return this._clubLevel
                }
                get securityLevel() {
                    return this._securityLevel
                }
                get isAmbassador() {
                    return this._isAmbassador
                }
            }
            class ec extends M {
                constructor(t) {
                    super(t, tc)
                }
                getParser() {
                    return this.parser
                }
            }
            class sc {
                flush() {
                    return this._userId = null, this._badges = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._userId = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) {
                        t.readInt();
                        const s = t.readString();
                        this._badges.push(s), e--
                    }
                    return !0
                }
                get userId() {
                    return this._userId
                }
                get badges() {
                    return this._badges
                }
            }
            class ic extends M {
                constructor(t) {
                    super(t, sc)
                }
                getParser() {
                    return this.parser
                }
            }
            class nc {
                flush() {
                    return this._figure = null, this._gender = null, !0
                }
                parse(t) {
                    return !!t && (this._figure = t.readString(), this._gender = t.readString(), !0)
                }
                get figure() {
                    return this._figure
                }
                get gender() {
                    return this._gender
                }
            }
            class rc extends M {
                constructor(t) {
                    super(t, nc)
                }
                getParser() {
                    return this.parser
                }
            }
            class oc {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._userId = 0, this._username = null, this._figure = null, this._gender = null, this._motto = null, this._realName = null, this._directMail = !1, this._respectsReceived = 0, this._respectsRemaining = 0, this._respectsPetRemaining = 0, this._streamPublishingAllowed = !1, this._lastAccessDate = null, this._canChangeName = !1, this._safetyLocked = !1, !0
                }
                parse(t) {
                    return !!t && (this._userId = t.readInt(), this._username = t.readString(), this._figure = t.readString(), this._gender = t.readString(), this._motto = t.readString(), this._realName = t.readString(), this._directMail = t.readBoolean(), this._respectsReceived = t.readInt(), this._respectsRemaining = t.readInt(), this._respectsPetRemaining = t.readInt(), this._streamPublishingAllowed = t.readBoolean(), this._lastAccessDate = t.readString(), this._canChangeName = t.readBoolean(), this._safetyLocked = t.readBoolean(), !0)
                }
                get userId() {
                    return this._userId
                }
                get username() {
                    return this._username
                }
                get figure() {
                    return this._figure
                }
                get gender() {
                    return this._gender
                }
                get motto() {
                    return this._motto
                }
                get realName() {
                    return this._realName
                }
                get directMail() {
                    return this._directMail
                }
                get respectsReceived() {
                    return this._respectsReceived
                }
                get respectsRemaining() {
                    return this._respectsRemaining
                }
                get respectsPetRemaining() {
                    return this._respectsPetRemaining
                }
                get streamPublishingAllowed() {
                    return this._streamPublishingAllowed
                }
                get lastAccessedDate() {
                    return this._lastAccessDate
                }
                get canChangeName() {
                    return this._canChangeName
                }
                get safetyLocked() {
                    return this._safetyLocked
                }
            }
            class ac {
                flush() {
                    return this._userInfo = null, !0
                }
                parse(t) {
                    return !!t && (this._userInfo = new oc(t), !!this._userInfo)
                }
                get userInfo() {
                    return this._userInfo
                }
            }
            class cc extends M {
                constructor(t) {
                    super(t, ac)
                }
                getParser() {
                    return this.parser
                }
            }
            class _c {
                flush() {
                    return this._webId = -1, this._id = -1, this._newName = "", !0
                }
                parse(t) {
                    return !!t && (this._webId = t.readInt(), this._id = t.readInt(), this._newName = t.readString(), !0)
                }
                get webId() {
                    return this._webId
                }
                get id() {
                    return this._id
                }
                get newName() {
                    return this._newName
                }
            }
            class hc extends M {
                constructor(t) {
                    super(t, _c)
                }
                getParser() {
                    return this.parser
                }
            }
            class lc {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._id = 0, this._title = null, this._badge = null, this._colorA = null, this._colorB = null, this._ownerOrFavorite = null, this._ownerId = 0, this._hasForum = !1, !0
                }
                parse(t) {
                    return !!t && (this._id = t.readInt(), this._title = t.readString(), this._badge = t.readString(), this._colorA = t.readString(), this._colorB = t.readString(), this._ownerOrFavorite = t.readBoolean(), this._ownerId = t.readInt(), this._hasForum = t.readBoolean(), !0)
                }
                get id() {
                    return this._id
                }
                get title() {
                    return this._title
                }
                get badge() {
                    return this._badge
                }
                get colorA() {
                    return this._colorA
                }
                get colorB() {
                    return this._colorB
                }
                get ownerOrFavorite() {
                    return this._ownerOrFavorite
                }
                get ownerId() {
                    return this._ownerId
                }
                get hasForum() {
                    return this._hasForum
                }
            }
            class uc {
                flush() {
                    return this._id = 0, this._username = null, this._figure = null, this._motto = null, this._registration = null, this._achievementPoints = 0, this._friendsCount = 0, this._isMyFriend = !1, this._requestSent = !1, this._isOnline = !1, this._groups = [], this._lastVisit = 0, !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._id = t.readInt(), this._username = t.readString(), this._figure = t.readString(), this._motto = t.readString(), this._registration = t.readString(), this._achievementPoints = t.readInt(), this._friendsCount = t.readInt(), this._isMyFriend = t.readBoolean(), this._requestSent = t.readBoolean(), this._isOnline = t.readBoolean();
                    let e = t.readInt();
                    for (; e > 0;) this._groups.push(new lc(t)), e--;
                    return this._lastVisit = t.readInt(), !0
                }
                get id() {
                    return this._id
                }
                get username() {
                    return this._username
                }
                get figure() {
                    return this._figure
                }
                get motto() {
                    return this._motto
                }
                get registration() {
                    return this._registration
                }
                get achievementPoints() {
                    return this._achievementPoints
                }
                get friendsCount() {
                    return this._friendsCount
                }
                get isMyFriend() {
                    return this._isMyFriend
                }
                get requestSent() {
                    return this._requestSent
                }
                get isOnline() {
                    return this._isOnline
                }
                get groups() {
                    return this._groups
                }
                get lastVisit() {
                    return this._lastVisit
                }
            }
            class dc extends M {
                constructor(t) {
                    super(t, uc)
                }
                getParser() {
                    return this.parser
                }
            }
            let gc = (() => {
                class t {}
                return t.NONE = 0, t.HEART = 1, t.SMILE = 2, t.BOBBA = 3, t.RELATIONSHIP_TYPES = [0, 1, 2, 3], t.RELATIONSHIP_NAMES = ["None", "Heart", "Smile", "Bobba"], t
            })();
            class mc {
                constructor(t) {
                    if (!t) throw new Error("invalid_wrapper");
                    this.flush(), this.parse(t)
                }
                flush() {
                    return this._level = gc.NONE, this._userId = 0, this._username = null, this._figure = null, !0
                }
                parse(t) {
                    return !!t && (this._level = t.readInt(), t.readInt(), this._userId = t.readInt(), this._username = t.readString(), this._figure = t.readString(), !0)
                }
                get level() {
                    return this._level
                }
                get userId() {
                    return this._userId
                }
                get username() {
                    return this._username
                }
                get figure() {
                    return this._figure
                }
            }
            class pc {
                flush() {
                    return this._id = 0, this._hearts = [], this._smiles = [], this._bobbas = [], !0
                }
                parse(t) {
                    if (!t) return !1;
                    this._id = t.readInt();
                    let e = t.readInt();
                    for (; e > 0;) {
                        const s = new mc(t);
                        s.level === gc.HEART ? this._hearts.push(s) : s.level === gc.SMILE ? this._smiles.push(s) : s.level === gc.BOBBA && this._bobbas.push(s), e--
                    }
                    return !0
                }
                get id() {
                    return this._id
                }
                get hearts() {
                    return this._hearts
                }
                get smiles() {
                    return this._smiles
                }
                get bobbas() {
                    return this._bobbas
                }
            }
            class bc extends M {
                constructor(t) {
                    super(t, pc)
                }
                getParser() {
                    return this.parser
                }
            }
            class Ec {
                flush() {
                    return this._volumeSystem = 0, this._volumeFurni = 0, this._volumeTrax = 0, this._oldChat = !1, this._roomInvites = !1, this._cameraFollow = !1, this._flags = 0, this._chatType = 0, !0
                }
                parse(t) {
                    return !!t && (this._volumeSystem = t.readInt(), this._volumeFurni = t.readInt(), this._volumeTrax = t.readInt(), this._oldChat = t.readBoolean(), this._roomInvites = t.readBoolean(), this._cameraFollow = t.readBoolean(), this._flags = t.readInt(), this._chatType = t.readInt(), !0)
                }
                get volumeSystem() {
                    return this._volumeSystem
                }
                get volumeFurni() {
                    return this._volumeFurni
                }
                get volumeTrax() {
                    return this._volumeTrax
                }
                get oldChat() {
                    return this._oldChat
                }
                get roomInvites() {
                    return this._roomInvites
                }
                get cameraFollow() {
                    return this._cameraFollow
                }
                get flags() {
                    return this._flags
                }
                get chatType() {
                    return this._chatType
                }
            }
            class fc extends M {
                constructor(t) {
                    super(t, Ec)
                }
                getParser() {
                    return this.parser
                }
            }
            class Sc {
                flush() {
                    return this._credits = null, !0
                }
                parse(t) {
                    return !!t && (this._credits = t.readString(), !0)
                }
                get credits() {
                    return this._credits
                }
            }
            class Ic extends M {
                constructor(t) {
                    super(t, Sc)
                }
                getParser() {
                    return this.parser
                }
            }
            class Rc {
                flush() {
                    return this._currencies = new Map, !0
                }
                parse(t) {
                    if (!t) return !1;
                    let e = t.readInt();
                    for (; e > 0;) this._currencies.set(t.readInt(), t.readInt()), e--;
                    return !0
                }
                get currencies() {
                    return this._currencies
                }
            }
            class vc extends M {
                constructor(t) {
                    super(t, Rc)
                }
                getParser() {
                    return this.parser
                }
            }
            class Tc {
                flush() {
                    return this._amount = 0, this._amountChanged = 0, this._type = -1, !0
                }
                parse(t) {
                    return !!t && (this._amount = t.readInt(), this._amountChanged = t.readInt(), this._type = t.readInt(), !0)
                }
                get amount() {
                    return this._amount
                }
                get amountChanged() {
                    return this._amountChanged
                }
                get type() {
                    return this._type
                }
            }
            class Oc extends M {
                constructor(t) {
                    super(t, Tc)
                }
                getParser() {
                    return this.parser
                }
            }
            let yc = (() => {
                class t {
                    flush() {
                        return this._name = null, this._days = 0, this._int1 = 0, this._months = 0, this._years = 0, this._bool1 = !1, this._isVip = !1, this._pastClubDays = 0, this._int3 = 0, this._totalSeconds = 0, !0
                    }
                    parse(t) {
                        return !!t && (this._name = t.readString(), this._days = t.readInt(), this._int1 = t.readInt(), this._months = t.readInt(), this._years = t.readInt(), this._bool1 = t.readBoolean(), this._isVip = t.readBoolean(), this._pastClubDays = t.readInt(), this._int3 = t.readInt(), this._totalSeconds = t.readInt(), !0)
                    }
                    get name() {
                        return this._name
                    }
                    get days() {
                        return this._days
                    }
                    get int1() {
                        return this._int1
                    }
                    get months() {
                        return this._months
                    }
                    get years() {
                        return this._years
                    }
                    get bool1() {
                        return this._bool1
                    }
                    get isVip() {
                        return this._isVip
                    }
                    get pastClubDays() {
                        return this._pastClubDays
                    }
                    get int3() {
                        return this._int3
                    }
                    get totalSeconds() {
                        return this._totalSeconds
                    }
                }
                return t._Str_14729 = 3, t
            })();
            class Ac extends M {
                constructor(t) {
                    super(t, yc)
                }
                getParser() {
                    return this.parser
                }
            }
            class Cc {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Mc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Uc {
                constructor(t, e, s) {
                    this._data = [t, e, s]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Dc {
                constructor(t, e, s, i) {
                    this._data = [t, e, s, i]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Nc {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class wc {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {
                    this._data = null
                }
            }
            class Lc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {
                    this._data = null
                }
            }
            class xc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Pc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Fc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Gc {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Yc {
                constructor(...t) {
                    this._data = [t.length, ...t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class kc {
                constructor(t, ...e) {
                    this._data = [t, e.length, ...e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Vc {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Zc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class jc {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Bc {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Hc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Wc {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class zc {
                constructor(...t) {
                    this._data = [t.length, ...t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Kc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Xc {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class qc {
                constructor(t, ...e) {
                    this._data = [t, e.length, ...e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Jc {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Qc {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class $c {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class t_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class e_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class s_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class i_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class n_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class r_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class o_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class a_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class c_ {
                constructor(...t) {
                    this._data = [t.length, ...t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class __ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class h_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class l_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class u_ {
                constructor(t, e, s, i) {
                    this._data = [t, e, s, i]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class d_ {
                constructor(t, e = 0) {
                    this._data = [e, t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class g_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class m_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class p_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class b_ {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class E_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class f_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class S_ {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class I_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class R_ {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class v_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class T_ {
                constructor(t, e, s, i, n, r) {
                    this._data = [t, e, s, i, n, r]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            let O_ = (() => {
                class t {}
                return t.ACHIEVEMENT_LIST = 219, t.BOT_INFO = 1986, t.BOT_PICKUP = 3323, t.BOT_PLACE = 1592, t.BOT_SETTINGS_SAVE = 2624, t.CAMERA_PRICE = 796, t.CAMERA_SAVE = 3226, t.CAMERA_THUMBNAIL = 1982, t.CATALOG_CLUB = 3285, t.CATALOG_CLUB_GIFTS = 487, t.CATALOG_MODE = 1195, t.CATALOG_PAGE = 412, t.CATALOG_PURCHASE = 3492, t.CATALOG_SEARCH = 2594, t.CLIENT_LATENCY = 295, t.CLIENT_LATENCY_MEASURE = 96, t.CLIENT_POLICY = 26979, t.CLIENT_PONG = 2596, t.CLIENT_TOOLBAR_TOGGLE = 2313, t.CLIENT_VARIABLES = 1053, t.DESKTOP_CAMPAIGNS = 2912, t.DESKTOP_NEWS = 1827, t.DESKTOP_VIEW = 105, t.DISCOUNT_CONFIG = 223, t.EVENT_TRACKER = 3457, t.FIND_FRIENDS = 516, t.FURNITURE_ALIASES = 3898, t.FURNITURE_FLOOR_UPDATE = 248, t.FURNITURE_MULTISTATE = 99, t.FURNITURE_PICKUP = 3456, t.FURNITURE_PLACE = 1258, t.FURNITURE_POSTIT_PLACE = 2248, t.FURNITURE_RANDOMSTATE = 3617, t.FURNITURE_WALL_MULTISTATE = 210, t.FURNITURE_WALL_UPDATE = 168, t.GAMES_INIT = 2914, t.GAMES_LIST = 741, t.GIFT_CONFIG = 418, t.GROUP_ADMIN_ADD = 2894, t.GROUP_ADMIN_REMOVE = 722, t.GROUP_CREATE_OPTIONS = 798, t.GROUP_FORUM_INFO = 3149, t.GROUP_FORUM_LIST = 873, t.GROUP_FORUM_THREADS = 436, t.GROUP_INFO = 2991, t.GROUP_MEMBER_REMOVE = 3593, t.GROUP_MEMBERS = 312, t.GROUP_MEMBERSHIPS = 367, t.GROUP_REQUEST = 998, t.GROUP_REQUEST_ACCEPT = 3386, t.GROUP_REQUEST_DECLINE = 1894, t.GROUP_SETTINGS = 1004, t.INVENTORY_UNKNOWN = 1371, t.ITEM_CLOTHING_REDEEM = 3374, t.ITEM_COLOR_WHEEL_CLICK = 2144, t.ITEM_DICE_CLICK = 1990, t.ITEM_DICE_CLOSE = 1533, t.ITEM_DIMMER_SAVE = 1648, t.ITEM_DIMMER_SETTINGS = 2813, t.ITEM_DIMMER_TOGGLE = 2296, t.ITEM_EXCHANGE_REDEEM = 3115, t.ITEM_PAINT = 711, t.ITEM_SAVE_BACKGROUND = 3608, t.ITEM_STACK_HELPER = 3839, t.ITEM_WALL_CLICK = 210, t.ITEM_WALL_UPDATE = 168, t.MARKETPLACE_CONFIG = 2597, t.MESSENGER_ACCEPT = 137, t.MESSENGER_CHAT = 3567, t.MESSENGER_DECLINE = 2890, t.MESSENGER_FOLLOW = 3997, t.MESSENGER_FRIENDS = 1523, t.MESSENGER_INIT = 2781, t.MESSENGER_RELATIONSHIPS = 2138, t.MESSENGER_RELATIONSHIPS_UPDATE = 3768, t.MESSENGER_REMOVE = 1689, t.MESSENGER_REQUEST = 3157, t.MESSENGER_REQUESTS = 2448, t.MESSENGER_ROOM_INVITE = 1276, t.MESSENGER_SEARCH = 1210, t.MESSENGER_UPDATES = 1419, t.MOD_TOOL_USER_INFO = 3295, t.NAVIGATOR_CATEGORIES = 3027, t.NAVIGATOR_INIT = 2110, t.NAVIGATOR_SEARCH = 249, t.NAVIGATOR_SEARCH_CLOSE = 1834, t.NAVIGATOR_SEARCH_OPEN = 637, t.NAVIGATOR_SEARCH_SAVE = 2226, t.NAVIGATOR_SETTINGS = 1782, t.NAVIGATOR_SETTINGS_SAVE = 3159, t.NAVIGATOR_CATEGORY_LIST_MODE = 1202, t.PET_INFO = 2934, t.PET_PICKUP = 1581, t.PET_PLACE = 2647, t.PET_RESPECT = 3202, t.PET_RIDE = 1036, t.RECYCLER_PRIZES = 398, t.RELEASE_VERSION = 4e3, t.REPORT = 1691, t.ROOM_AMBASSADOR_ALERT = 2996, t.ROOM_BAN_GIVE = 1477, t.ROOM_BAN_LIST = 2267, t.ROOM_BAN_REMOVE = 992, t.ROOM_CREATE = 2752, t.ROOM_DELETE = 532, t.ROOM_DOORBELL = 1644, t.ROOM_ENTER = 2312, t.ROOM_FAVORITE = 3817, t.ROOM_FAVORITE_REMOVE = 309, t.ROOM_INFO = 2230, t.ROOM_KICK = 1320, t.ROOM_LIKE = 3582, t.ROOM_MODEL = 2300, t.ROOM_MODEL_BLOCKED_TILES = 1687, t.ROOM_MODEL_DOOR = 3559, t.ROOM_MODEL_SAVE = 875, t.ROOM_MUTE = 3637, t.ROOM_MUTE_USER = 3485, t.ROOM_RIGHTS_GIVE = 808, t.ROOM_RIGHTS_LIST = 3385, t.ROOM_RIGHTS_REMOVE = 2064, t.ROOM_RIGHTS_REMOVE_ALL = 2683, t.ROOM_RIGHTS_REMOVE_OWN = 3182, t.ROOM_SETTINGS = 3129, t.ROOM_SETTINGS_SAVE = 1969, t.SECURITY_MACHINE = 2490, t.SECURITY_TICKET = 2419, t.TRADE = 1481, t.TRADE_ACCEPT = 3863, t.TRADE_CANCEL = 2341, t.TRADE_CLOSE = 2551, t.TRADE_CONFIRM = 2760, t.TRADE_ITEM = 3107, t.TRADE_ITEM_REMOVE = 3845, t.TRADE_ITEMS = 1263, t.TRADE_UNACCEPT = 1444, t.UNIT_ACTION = 2456, t.UNIT_CHAT = 1314, t.UNIT_CHAT_SHOUT = 2085, t.UNIT_CHAT_WHISPER = 1543, t.UNIT_DANCE = 2080, t.UNIT_DROP_HAND_ITEM = 2814, t.UNIT_GIVE_HANDITEM = 2941, t.UNIT_LOOK = 3301, t.UNIT_POSTURE = 2235, t.UNIT_SIGN = 1975, t.UNIT_TYPING = 1597, t.UNIT_TYPING_STOP = 1474, t.UNIT_WALK = 3320, t.USER_BADGES = 2769, t.USER_BADGES_CURRENT = 2091, t.USER_BADGES_CURRENT_UPDATE = 644, t.USER_BOTS = 3848, t.USER_CURRENCY = 273, t.USER_EFFECT_ACTIVATE = 2959, t.USER_EFFECT_ENABLE = 1752, t.USER_FIGURE = 2730, t.USER_FURNITURE = 3150, t.USER_FURNITURE2 = 3500, t.USER_HOME_ROOM = 1740, t.USER_INFO = 357, t.USER_MOTTO = 2228, t.USER_ONLINE = 3878, t.USER_OUTFIT_SAVE = 800, t.USER_OUTFITS = 2742, t.USER_PETS = 3095, t.USER_PROFILE = 3265, t.USER_RESPECT = 2694, t.USER_SETTINGS = 2388, t.USER_SETTINGS_CAMERA = 1461, t.USER_SETTINGS_CHAT_STYLE = 1030, t.USER_SETTINGS_INVITES = 1086, t.USER_SETTINGS_OLD_CHAT = 1262, t.USER_SETTINGS_VOLUME = 1367, t.USER_SUBSCRIPTION = 3166, t.USER_TAGS = 17, t.USER_VISIT = 2970, t.WIRED_ACTION_SAVE = 2281, t.WIRED_APPLY_SNAPSHOT = 3373, t.WIRED_CONDITION_SAVE = 3203, t.WIRED_OPEN = 768, t.WIRED_TRIGGER_SAVE = 1520, t.GET_ITEM_DATA = 3964, t.ONE_WAY_DOOR_CLICK = 2765, t.REMOVE_WALL_ITEM = 3336, t.MODIFY_WALL_ITEM_DATA = 3666, t.CATALOG_REDEEM_VOUCHER = 339, t.ROOM_TONER_APPLY = 2880, t.LOVELOCK_START_CONFIRM = 3775, t.MODTOOL_REQUEST_ROOM_INFO = 707, t.MODTOOL_CHANGE_ROOM_SETTINGS = 3260, t.MODTOOL_REQUEST_USER_CHATLOG = 1391, t.MODTOOL_REQUEST_ROOM_CHATLOG = 2587, t
            })();
            class y_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class A_ {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class C_ {
                constructor(t, e = null) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class M_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class U_ {
                constructor(t, e = 0, s) {
                    this._data = [t, e, s]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class D_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class N_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class w_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class L_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class x_ {
                constructor(t, e, s = 0) {
                    this._data = [t, e, s]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class P_ {
                constructor(...t) {
                    this._data = [t.length, ...t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class F_ {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class G_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Y_ {
                constructor(t, e, s) {
                    this._data = [t, e ? 1 : 0, s ? 1 : 0]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class k_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class V_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Z_ {
                constructor(t, e, s, i, n, r, o, a, c, _, h, l, u, d, g, m, p, b, E, f, S, I, R, v) {
                    this._data = [t, e, s, i, n, r, o, a, c, _, h, l, u, d, g, m, p, b, E, f, S, I, R, v]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class j_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class B_ {
                constructor(t, e, s) {
                    this._data = [t, e, s]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class H_ {
                constructor(t, e, s) {
                    this._data = [t, e, s]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class W_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class z_ {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class K_ {
                constructor(t, e) {
                    this._data = [t, 2 * e.size];
                    for (const [s, i] of e.entries()) this._data.push(s, i)
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class X_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class q_ {
                constructor(t, e, s, i, n) {
                    this._data = [t, e, s, i, n]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class J_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Q_ {
                constructor(t, e, s, i) {
                    this._data = [t, e, s, i]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class $_ {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class th {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class eh {
                constructor(t, e, s, i, n, r) {
                    this._itemId = t, this._category = e, this._wallLocation = s, this._x = i, this._y = n, this._direction = r
                }
                getMessageArray() {
                    switch (this._category) {
                        case V.FLOOR:
                            return [`${this._itemId} ${this._x} ${this._y} ${this._direction}`];
                        case V.WALL:
                            return [`${this._itemId} ${this._wallLocation} `];
                        default:
                            return []
                    }
                }
                dispose() {}
            }
            class sh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class ih {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class nh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class rh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class oh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class ah {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class ch {
                constructor(t, e = 0) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class _h {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class hh {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class lh {
                constructor(t, e = -100) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class uh {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class dh {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class gh {
                constructor(t, e, s, i) {
                    this._data = [t, e, s, i]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class mh {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class ph {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class bh {
                constructor(t, e, s, i, n, r) {
                    this._data = [t, e, s, i, n, r]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Eh {
                constructor(t, e = 0) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class fh {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Sh {
                constructor(t, e, s) {
                    this._data = [t + " " + e, s]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Ih {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Rh {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class vh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Th {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Oh {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class yh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Ah {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Ch {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Mh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Uh {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Dh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Nh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class wh {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Lh {
                constructor(t, e, s, i, n, r) {
                    this._data = [t, e.length, ...e, s, i.length, ...i, n, r]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class xh {
                constructor(t, e, s, i, n) {
                    this._data = [t, e.length, ...e, s, i.length, ...i, n]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Ph {
                constructor(t, e, s, i, n) {
                    this._data = [t, e.length, ...e, s, i.length, ...i, n]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Fh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Gh {
                constructor(t, e) {
                    this._data = [t, e]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Yh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class kh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Vh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Zh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class jh {
                constructor() {
                    this._data = []
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Bh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Hh {
                constructor(t) {
                    this._data = [t]
                }
                getMessageArray() {
                    return this._data
                }
                dispose() {}
            }
            class Wh {
                flush() {
                    return this._count = 0, !0
                }
                parse(t) {
                    return !!t && (this._count = t.readInt(), !0)
                }
                get count() {
                    return this._count
                }
            }
            class zh {
                constructor() {
                    this._events = new Map, this._composers = new Map, this.registerEvents(), this.registerComposers()
                }
                registerEvents() {
                    this._events.set(qs.AVAILABILITY_STATUS, Re), this._events.set(qs.GENERIC_ERROR, Hs), this._events.set(qs.USER_CHANGE_NAME, Te), this._events.set(qs.CATALOG_CLUB, Ae), this._events.set(qs.CATALOG_MODE, Pe), this._events.set(qs.CATALOG_PAGE, ke), this._events.set(qs.CATALOG_PAGES, je), this._events.set(qs.CATALOG_PURCHASE, We), this._events.set(qs.CATALOG_PURCHASE_FAILED, Ke), this._events.set(qs.CATALOG_PURCHASE_UNAVAILABLE, qe), this._events.set(qs.CATALOG_SEARCH, Qe), this._events.set(qs.CATALOG_SOLD_OUT, ts), this._events.set(qs.CATALOG_UPDATED, ss), this._events.set(qs.CATALOG_CLUB_GIFTS, Ne), this._events.set(qs.GIFT_CONFIG, Le), this._events.set(qs.CLIENT_PING, le), this._events.set(qs.DESKTOP_VIEW, ns), this._events.set(qs.MESSENGER_ACCEPT_FRIENDS, as), this._events.set(qs.MESSENGER_FIND_FRIENDS, _s), this._events.set(qs.MESSENGER_FOLLOW_FAILED, ls), this._events.set(qs.MESSENGER_FRIENDS, gs), this._events.set(qs.MESSENGER_UPDATE, bs), this._events.set(qs.MESSENGER_FRIEND_NOTIFICATION, fs), this._events.set(qs.MESSENGER_REQUESTS, Rs), this._events.set(qs.MESSENGER_SEARCH, Os), this._events.set(qs.MESSENGER_INSTANCE_MESSAGE_ERROR, As), this._events.set(qs.MESSENGER_MESSAGE_ERROR, Ms), this._events.set(qs.MESSENGER_INIT, Ds), this._events.set(qs.MESSENGER_MINIMAIL_NEW, ws), this._events.set(qs.MESSENGER_MINIMAIL_COUNT, Wh), this._events.set(qs.MESSENGER_CHAT, xs), this._events.set(qs.MESSENGER_REQUEST, Fs), this._events.set(qs.MESSENGER_INVITE_ERROR, Ys), this._events.set(qs.MESSENGER_INVITE, Vs), this._events.set(qs.GROUP_INFO, zs), this._events.set(qs.CFH_RESULT_MESSAGE, Xs), this._events.set(qs.USER_CLOTHING, ui), this._events.set(qs.USER_FURNITURE_ADD, Mi), this._events.set(qs.USER_FURNITURE, Di), this._events.set(qs.USER_FURNITURE_REFRESH, wi), this._events.set(qs.USER_FURNITURE_REMOVE, xi), this._events.set(qs.USER_FURNITURE_POSTIT_PLACED, Fi), this._events.set(qs.TRADE_ACCEPTED, Yi), this._events.set(qs.TRADE_CLOSED, Vi), this._events.set(qs.TRADE_COMPLETED, ji), this._events.set(qs.TRADE_CONFIRMATION, Hi), this._events.set(qs.TRADE_LIST_ITEM, Ki), this._events.set(qs.TRADE_NOT_OPEN, qi), this._events.set(qs.TRADE_OPEN_FAILED, tn), this._events.set(qs.TRADE_OPEN, Qi), this._events.set(qs.TRADE_OTHER_NOT_ALLOWED, sn), this._events.set(qs.TRADE_YOU_NOT_ALLOWED, rn), this._events.set(qs.GENERIC_ALERT_LINK, an), this._events.set(qs.MODTOOL_ROOM_INFO, un), this._events.set(qs.MODTOOL_USER_CHATLOG, pn), this._events.set(qs.MODTOOL_ROOM_CHATLOG, hn), this._events.set(qs.NAVIGATOR_CATEGORIES, fn), this._events.set(qs.NAVIGATOR_COLLAPSED, In), this._events.set(qs.NAVIGATOR_EVENT_CATEGORIES, Tn), this._events.set(qs.USER_HOME_ROOM, yn), this._events.set(qs.NAVIGATOR_LIFTED, Mn), this._events.set(qs.NAVIGATOR_METADATA, wn), this._events.set(qs.NAVIGATOR_OPEN_ROOM_CREATOR, xn), this._events.set(qs.NAVIGATOR_SEARCHES, Fn), this._events.set(qs.NAVIGATOR_SEARCH, Zn), this._events.set(qs.NAVIGATOR_SETTINGS, Bn), this._events.set(qs.GENERIC_ALERT, Wn), this._events.set(qs.MOTD_MESSAGES, Kn), this._events.set(qs.NOTIFICATION_LIST, qn), this._events.set(qs.USER_RESPECT, Qn), this._events.set(qs.UNSEEN_ITEMS, tr), this._events.set(qs.ROOM_ENTER_ERROR, mr), this._events.set(qs.ROOM_ENTER, br), this._events.set(qs.ROOM_FORWARD, fr), this._events.set(qs.ROOM_DOORBELL, nr), this._events.set(qs.ROOM_DOORBELL_ACCEPTED, sr), this._events.set(qs.ROOM_DOORBELL_REJECTED, or), this._events.set(qs.ROOM_RIGHTS_CLEAR, cr), this._events.set(qs.ROOM_RIGHTS_OWNER, dr), this._events.set(qs.ROOM_RIGHTS, lr), this._events.set(qs.ROOM_SETTINGS_CHAT, Tr), this._events.set(qs.ROOM_INFO, Ar), this._events.set(qs.ROOM_INFO_OWNER, Mr), this._events.set(qs.ROOM_SCORE, Dr), this._events.set(qs.ROOM_SETTINGS_SAVE_ERROR, wr), this._events.set(qs.ROOM_SETTINGS, xr), this._events.set(qs.ROOM_SETTINGS_SAVE, Fr), this._events.set(qs.ROOM_SETTINGS_UPDATED, Yr), this._events.set(qs.ROOM_RIGHTS_LIST, kr), this._events.set(qs.ROOM_BAN_LIST, Ir), this._events.set(qs.ROOM_ROLLING, jr), this._events.set(qs.ROOM_CREATED, Hr), this._events.set(qs.FURNITURE_ALIASES, so), this._events.set(qs.FURNITURE_DATA, io), this._events.set(qs.FURNITURE_ITEMDATA, ro), this._events.set(qs.ITEM_STACK_HELPER, ao), this._events.set(qs.FURNITURE_STATE, lo), this._events.set(qs.ITEM_DIMMER_SETTINGS, Io), this._events.set(qs.FURNITURE_STATE_2, _o), this._events.set(qs.LOVELOCK_FURNI_FINISHED, go), this._events.set(qs.LOVELOCK_FURNI_FRIEND_COMFIRMED, po), this._events.set(qs.LOVELOCK_FURNI_START, Eo), this._events.set(qs.FURNITURE_FLOOR_ADD, Kr), this._events.set(qs.FURNITURE_FLOOR, qr), this._events.set(qs.FURNITURE_FLOOR_REMOVE, Qr), this._events.set(qs.FURNITURE_FLOOR_UPDATE, to), this._events.set(qs.ITEM_WALL_ADD, To), this._events.set(qs.ITEM_WALL, yo), this._events.set(qs.ITEM_WALL_REMOVE, Co), this._events.set(qs.ITEM_WALL_UPDATE, Uo), this._events.set(qs.ROOM_MODEL_DOOR, No), this._events.set(qs.ROOM_HEIGHT_MAP, Lo), this._events.set(qs.ROOM_HEIGHT_MAP_UPDATE, Po), this._events.set(qs.ROOM_MODEL, Bo), this._events.set(qs.ROOM_MODEL_NAME, Wo), this._events.set(qs.ROOM_PAINT, Ko), this._events.set(qs.ROOM_THICKNESS, qo), this._events.set(qs.PET_FIGURE_UPDATE, $o), this._events.set(qs.PLAYING_GAME, ea), this._events.set(qs.UNIT_DANCE, _a), this._events.set(qs.UNIT_EFFECT, la), this._events.set(qs.UNIT, ma), this._events.set(qs.UNIT_EXPRESSION, ba), this._events.set(qs.UNIT_HAND_ITEM, fa), this._events.set(qs.UNIT_IDLE, Ia), this._events.set(qs.UNIT_INFO, va), this._events.set(qs.UNIT_NUMBER, Oa), this._events.set(qs.UNIT_REMOVE, Aa), this._events.set(qs.UNIT_STATUS, Da), this._events.set(qs.UNIT_CHAT, ia), this._events.set(qs.UNIT_CHAT_SHOUT, na), this._events.set(qs.UNIT_CHAT_WHISPER, ra), this._events.set(qs.UNIT_TYPING, aa), this._events.set(qs.WIRED_ACTION, Fa), this._events.set(qs.WIRED_CONDITION, ka), this._events.set(qs.WIRED_TRIGGER, ja), this._events.set(qs.WIRED_OPEN, Ha), this._events.set(qs.WIRED_REWARD, za), this._events.set(qs.WIRED_SAVE, Xa), this._events.set(qs.WIRED_ERROR, Ja), this._events.set(qs.ROOM_MUTED, wa), this._events.set(qs.AUTHENTICATED, de), this._events.set(qs.USER_PERKS, $a), this._events.set(qs.USER_PERMISSIONS, ec), this._events.set(qs.USER_BADGES_CURRENT, ic), this._events.set(qs.USER_FIGURE, rc), this._events.set(qs.USER_INFO, cc), this._events.set(qs.UNIT_CHANGE_NAME, hc), this._events.set(qs.USER_SETTINGS, fc), this._events.set(qs.USER_PROFILE, dc), this._events.set(qs.MESSENGER_RELATIONSHIPS, bc), this._events.set(qs.USER_BOTS, ci), this._events.set(qs.REMOVE_BOT_FROM_INVENTORY, hi), this._events.set(qs.ADD_BOT_TO_INVENTORY, oi), this._events.set(qs.USER_CREDITS, Ic), this._events.set(qs.USER_CURRENCY, vc), this._events.set(qs.USER_CURRENCY_UPDATE, Oc), this._events.set(qs.USER_SUBSCRIPTION, Ac), this._events.set(qs.LOAD_GAME_URL, js), this._events.set(qs.ACHIEVEMENT_PROGRESSED, $s), this._events.set(qs.ACHIEVEMENT_LIST, ei), this._events.set(qs.USER_ACHIEVEMENT_SCORE, ii)
                }
                registerComposers() {
                    this._composers.set(O_.CATALOG_MODE, Mc), this._composers.set(O_.CATALOG_PAGE, Uc), this._composers.set(O_.CATALOG_PURCHASE, Dc), this._composers.set(O_.CATALOG_SEARCH, xc), this._composers.set(O_.CATALOG_CLUB, Lc), this._composers.set(O_.CATALOG_CLUB_GIFTS, wc), this._composers.set(O_.CATALOG_REDEEM_VOUCHER, Fc), this._composers.set(O_.GIFT_CONFIG, Nc), this._composers.set(O_.LOVELOCK_START_CONFIRM, dh), this._composers.set(O_.CLIENT_PONG, ge), this._composers.set(O_.RELEASE_VERSION, be), this._composers.set(O_.DESKTOP_VIEW, Gc), this._composers.set(O_.MESSENGER_ACCEPT, Yc), this._composers.set(O_.MESSENGER_DECLINE, kc), this._composers.set(O_.FIND_FRIENDS, Vc), this._composers.set(O_.MESSENGER_FOLLOW, Zc), this._composers.set(O_.MESSENGER_UPDATES, jc), this._composers.set(O_.MESSENGER_REQUESTS, Bc), this._composers.set(O_.MESSENGER_SEARCH, Hc), this._composers.set(O_.MESSENGER_INIT, Wc), this._composers.set(O_.MESSENGER_REMOVE, zc), this._composers.set(O_.MESSENGER_REQUEST, Kc), this._composers.set(O_.MESSENGER_CHAT, Xc), this._composers.set(O_.MESSENGER_ROOM_INVITE, qc), this._composers.set(O_.MESSENGER_RELATIONSHIPS_UPDATE, Jc), this._composers.set(O_.USER_VISIT, Qc), this._composers.set(O_.GROUP_INFO, $c), this._composers.set(O_.SECURITY_TICKET, fe), this._composers.set(O_.USER_INFO, Ee), this._composers.set(O_.NAVIGATOR_CATEGORIES, p_), this._composers.set(O_.NAVIGATOR_INIT, E_), this._composers.set(O_.NAVIGATOR_SEARCH_CLOSE, f_), this._composers.set(O_.NAVIGATOR_SEARCH, S_), this._composers.set(O_.NAVIGATOR_SEARCH_OPEN, I_), this._composers.set(O_.NAVIGATOR_SEARCH_SAVE, R_), this._composers.set(O_.NAVIGATOR_SETTINGS, v_), this._composers.set(O_.NAVIGATOR_SETTINGS_SAVE, T_), this._composers.set(O_.NAVIGATOR_CATEGORY_LIST_MODE, b_), this._composers.set(O_.USER_FURNITURE, s_), this._composers.set(O_.USER_FURNITURE2, e_), this._composers.set(O_.ITEM_SAVE_BACKGROUND, K_), this._composers.set(O_.TRADE_ACCEPT, i_), this._composers.set(O_.TRADE_CANCEL, n_), this._composers.set(O_.TRADE_CLOSE, r_), this._composers.set(O_.TRADE_CONFIRM, o_), this._composers.set(O_.TRADE_ITEM, a_), this._composers.set(O_.TRADE_ITEMS, c_), this._composers.set(O_.TRADE_ITEM_REMOVE, __), this._composers.set(O_.TRADE, h_), this._composers.set(O_.TRADE_UNACCEPT, l_), this._composers.set(O_.ACHIEVEMENT_LIST, Cc), this._composers.set(O_.PET_RESPECT, y_), this._composers.set(O_.ROOM_CREATE, bh), this._composers.set(O_.ROOM_ENTER, C_), this._composers.set(O_.ROOM_DOORBELL, A_), this._composers.set(O_.ROOM_AMBASSADOR_ALERT, M_), this._composers.set(O_.ROOM_BAN_GIVE, U_), this._composers.set(O_.ROOM_BAN_REMOVE, F_), this._composers.set(O_.ROOM_RIGHTS_GIVE, N_), this._composers.set(O_.ROOM_KICK, w_), this._composers.set(O_.ROOM_MUTE_USER, x_), this._composers.set(O_.ROOM_RIGHTS_REMOVE, P_), this._composers.set(O_.ROOM_LIKE, L_), this._composers.set(O_.ROOM_DELETE, D_), this._composers.set(O_.ROOM_INFO, Y_), this._composers.set(O_.ROOM_SETTINGS, k_), this._composers.set(O_.ROOM_SETTINGS_SAVE, Z_), this._composers.set(O_.ROOM_RIGHTS_LIST, V_), this._composers.set(O_.ROOM_BAN_LIST, G_), this._composers.set(O_.GET_ITEM_DATA, j_), this._composers.set(O_.REMOVE_WALL_ITEM, z_), this._composers.set(O_.MODIFY_WALL_ITEM_DATA, B_), this._composers.set(O_.BOT_PLACE, H_), this._composers.set(O_.BOT_PICKUP, W_), this._composers.set(O_.FURNITURE_ALIASES, $_), this._composers.set(O_.FURNITURE_PICKUP, th), this._composers.set(O_.FURNITURE_PLACE, eh), this._composers.set(O_.ITEM_PAINT, sh), this._composers.set(O_.FURNITURE_POSTIT_PLACE, ih), this._composers.set(O_.FURNITURE_FLOOR_UPDATE, Q_), this._composers.set(O_.FURNITURE_WALL_UPDATE, mh), this._composers.set(O_.ITEM_DIMMER_SETTINGS, X_), this._composers.set(O_.ITEM_DIMMER_SAVE, q_), this._composers.set(O_.ITEM_DIMMER_TOGGLE, J_), this._composers.set(O_.ROOM_TONER_APPLY, gh), this._composers.set(O_.ITEM_COLOR_WHEEL_CLICK, nh), this._composers.set(O_.ITEM_DICE_CLICK, rh), this._composers.set(O_.ITEM_DICE_CLOSE, oh), this._composers.set(O_.FURNITURE_MULTISTATE, ch), this._composers.set(O_.FURNITURE_RANDOMSTATE, hh), this._composers.set(O_.ITEM_STACK_HELPER, lh), this._composers.set(O_.FURNITURE_WALL_MULTISTATE, uh), this._composers.set(O_.ONE_WAY_DOOR_CLICK, _h), this._composers.set(O_.ITEM_EXCHANGE_REDEEM, ah), this._composers.set(O_.ITEM_CLOTHING_REDEEM, Pc), this._composers.set(O_.ROOM_MODEL, ph), this._composers.set(O_.UNIT_ACTION, vh), this._composers.set(O_.UNIT_DANCE, Th), this._composers.set(O_.UNIT_DROP_HAND_ITEM, Oh), this._composers.set(O_.UNIT_GIVE_HANDITEM, yh), this._composers.set(O_.UNIT_LOOK, Ah), this._composers.set(O_.UNIT_SIGN, Mh), this._composers.set(O_.UNIT_POSTURE, Ch), this._composers.set(O_.UNIT_WALK, Uh), this._composers.set(O_.UNIT_CHAT, Eh), this._composers.set(O_.UNIT_CHAT_SHOUT, fh), this._composers.set(O_.UNIT_CHAT_WHISPER, Sh), this._composers.set(O_.UNIT_TYPING, Ih), this._composers.set(O_.UNIT_TYPING_STOP, Rh), this._composers.set(O_.WIRED_APPLY_SNAPSHOT, Dh), this._composers.set(O_.WIRED_OPEN, Nh), this._composers.set(O_.WIRED_ACTION_SAVE, Lh), this._composers.set(O_.WIRED_CONDITION_SAVE, xh), this._composers.set(O_.WIRED_TRIGGER_SAVE, Ph), this._composers.set(O_.ROOM_MUTE, wh), this._composers.set(O_.USER_RESPECT, Hh), this._composers.set(O_.USER_BADGES_CURRENT, Fh), this._composers.set(O_.USER_FIGURE, Gh), this._composers.set(O_.USER_HOME_ROOM, Yh), this._composers.set(O_.USER_MOTTO, kh), this._composers.set(O_.USER_PROFILE, Vh), this._composers.set(O_.MESSENGER_RELATIONSHIPS, Zh), this._composers.set(O_.USER_BOTS, t_), this._composers.set(O_.USER_CURRENCY, jh), this._composers.set(O_.USER_SUBSCRIPTION, Bh), this._composers.set(O_.MODTOOL_REQUEST_ROOM_INFO, g_), this._composers.set(O_.MODTOOL_CHANGE_ROOM_SETTINGS, u_), this._composers.set(O_.MODTOOL_REQUEST_USER_CHATLOG, m_), this._composers.set(O_.MODTOOL_REQUEST_ROOM_CHATLOG, d_)
                }
                get events() {
                    return this._events
                }
                get composers() {
                    return this._composers
                }
            }
            class Kh extends L {
                constructor(t) {
                    super(), this._communication = t, this._connection = null, this._messages = new zh, this._demo = new Se(this), this.onConnectionOpenedEvent = this.onConnectionOpenedEvent.bind(this), this.onConnectionClosedEvent = this.onConnectionClosedEvent.bind(this), this.onConnectionErrorEvent = this.onConnectionErrorEvent.bind(this), this.onConnectionAuthenticatedEvent = this.onConnectionAuthenticatedEvent.bind(this)
                }
                onInit() {
                    this._connection || (cp.instance.events.addEventListener(_.CONNECTION_AUTHENTICATED, this.onConnectionAuthenticatedEvent), this._connection = this._communication.createConnection(this), this._connection.registerMessages(this._messages), this._connection.addEventListener(C.CONNECTION_OPENED, this.onConnectionOpenedEvent), this._connection.addEventListener(C.CONNECTION_CLOSED, this.onConnectionClosedEvent), this._connection.addEventListener(C.CONNECTION_ERROR, this.onConnectionErrorEvent), this._demo && this._demo.init(), this._connection.init(cp.instance.getConfiguration("socket.url")))
                }
                onDispose() {
                    this._demo && this._demo.dispose(), this._connection && (this._connection.removeEventListener(C.CONNECTION_OPENED, this.onConnectionOpenedEvent), this._connection.removeEventListener(C.CONNECTION_CLOSED, this.onConnectionClosedEvent), this._connection.removeEventListener(C.CONNECTION_ERROR, this.onConnectionErrorEvent)), cp.instance.events.removeEventListener(_.CONNECTION_AUTHENTICATED, this.onConnectionAuthenticatedEvent), super.onDispose()
                }
                onConnectionOpenedEvent(t) {
                    this.logger.log("Connection Initialized")
                }
                onConnectionClosedEvent(t) {
                    this.logger.log("Connection Closed")
                }
                onConnectionErrorEvent(t) {
                    this.logger.log("Connection Error")
                }
                onConnectionAuthenticatedEvent(t) {
                    this.logger.log("Connection Authenticated"), this._connection && this._connection.authenticated()
                }
                connectionInit(t) {
                    this.logger.log("Initializing Connection: " + t)
                }
                registerMessageEvent(t) {
                    return this._connection && this._connection.addMessageEvent(t), t
                }
                removeMessageEvent(t) {
                    this._connection && this._connection.removeMessageEvent(t)
                }
                get demo() {
                    return this._demo
                }
                get connection() {
                    return this._connection
                }
            }
            class Xh {
                constructor(t) {
                    t.addMessageEvent(new js(this.onLoadGameUrl.bind(this)))
                }
                onLoadGameUrl(t) {
                    if (!t) return;
                    const e = t.getParser();
                    e && h.callGame("showGame", e.url)
                }
            }
            class qh {
                constructor(t) {
                    this._badgeId = "", this._level = 1, this._base = "", this._badgeId = t, this.parseText()
                }
                parseText() {
                    let t = this._badgeId.length - 1;
                    for (; t > 0 && this.isNumber(this._badgeId.charAt(t));) t--;
                    this._base = this._badgeId.substr(0, t + 1);
                    const e = this._badgeId.substr(t + 1, this._badgeId.length);
                    e && "" !== e && (this._level = Number.parseInt(e))
                }
                isNumber(t) {
                    const e = t.charCodeAt(0);
                    return e >= 48 && e <= 57
                }
                get level() {
                    return this._level
                }
                set level(t) {
                    this._level = Math.max(1, t)
                }
                get getBadgeId() {
                    return this._base + this._level
                }
                get base() {
                    return this._base
                }
            }
            class Jh extends L {
                constructor() {
                    super(), this._definitions = new Map, this._parameters = new Map, this._romanNumerals = ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII", "XXVIII", "XXIX", "XXX"]
                }
                onInit() {
                    this.loadLocalizationFromURL(cp.instance.getConfiguration("external.texts.url"))
                }
                loadLocalizationFromURL(t) {
                    const e = new XMLHttpRequest;
                    try {
                        e.open("GET", t), e.onloadend = this.onLocalizationLoaded.bind(this), e.onerror = this.onLocalizationFailed.bind(this), e.send()
                    } catch (s) {
                        this.logger.error(s)
                    }
                }
                onLocalizationLoaded(t) {
                    t && (this.parseLocalization(t.target.response), this.events && this.events.dispatchEvent(new l(l.LOADED)))
                }
                onLocalizationFailed(t) {
                    this.events && this.events.dispatchEvent(new l(l.FAILED))
                }
                parseLocalization(t) {
                    if (t) {
                        t = JSON.parse(t);
                        for (const e in t) this._definitions.set(e, t[e])
                    }
                }
                getRomanNumeral(t) {
                    return this._romanNumerals[Math.max(0, t - 1)]
                }
                getBadgeBaseAndLevel(t) {
                    const e = new qh(t);
                    return e.level--, e.getBadgeId
                }
                getValue(t, e = !0) {
                    t.startsWith("${") && (t = t.substr(2, t.length - 3));
                    let s = this._definitions.get(t) || null;
                    if (s && e) {
                        const e = this._parameters.get(t);
                        if (e)
                            for (const [t, i] of e) s = s.replace("%" + t + "%", i)
                    }
                    return s || t
                }
                getValueWithParameter(t, e, s) {
                    let i = this.getValue(t, !1);
                    return i = i.replace("%" + e + "%", s), i
                }
                getValueWithParameters(t, e, s) {
                    let i = this.getValue(t, !1);
                    for (let n = 0; n < e.length; n++) i = i.replace("%" + e[n] + "%", s[n]);
                    return i
                }
                setValue(t, e) {
                    this._definitions.set(t, e)
                }
                registerParameter(t, e, s) {
                    if (!t || 0 === t.length || !e || 0 === e.length) return;
                    let i = this._parameters.get(t);
                    i || (i = new Map, this._parameters.set(t, i)), i.set(e, s)
                }
            }
            let Qh = (() => {
                class t extends o {
                    constructor(t, e) {
                        super(t), this._roomId = e
                    }
                    get roomId() {
                        return this._roomId
                    }
                }
                return t.INITIALIZED = "REE_INITIALIZED", t.ENGINE_INITIALIZED = "REE_ENGINE_INITIALIZED", t.OBJECTS_INITIALIZED = "REE_OBJECTS_INITIALIZED", t.NORMAL_MODE = "REE_NORMAL_MODE", t.GAME_MODE = "REE_GAME_MODE", t.ROOM_ZOOMED = "REE_ROOM_ZOOMED", t.DISPOSED = "REE_DISPOSED", t
            })();
            class $h extends o {
                constructor(t, e) {
                    super(t), this._object = e
                }
                get object() {
                    return this._object
                }
                get objectId() {
                    return this._object ? this._object.id : -1
                }
                get objectType() {
                    return this._object ? this._object.type : null
                }
            }
            let tl = (() => {
                class t extends $h {
                    constructor(t, e, s, i = !1, n = !1, r = !1, o = !1) {
                        super(t, e), this._eventId = "", this._eventId = s, this._altKey = i, this._ctrlKey = n, this._shiftKey = r, this._buttonDown = o
                    }
                    get eventId() {
                        return this._eventId
                    }
                    get altKey() {
                        return this._altKey
                    }
                    get ctrlKey() {
                        return this._ctrlKey
                    }
                    get shiftKey() {
                        return this._shiftKey
                    }
                    get buttonDown() {
                        return this._buttonDown
                    }
                    get localX() {
                        return this._localX
                    }
                    set localX(t) {
                        this._localX = t
                    }
                    get localY() {
                        return this._localY
                    }
                    set localY(t) {
                        this._localY = t
                    }
                    get spriteOffsetX() {
                        return this._spriteOffsetX
                    }
                    set spriteOffsetX(t) {
                        this._spriteOffsetX = t
                    }
                    get spriteOffsetY() {
                        return this._spriteOffsetY
                    }
                    set spriteOffsetY(t) {
                        this._spriteOffsetY = t
                    }
                }
                return t.CLICK = "ROE_MOUSE_CLICK", t.DOUBLE_CLICK = "ROE_MOUSE_DOUBLE_CLICK", t.MOUSE_MOVE = "ROE_MOUSE_MOVE", t.MOUSE_DOWN = "ROE_MOUSE_DOWN", t.MOUSE_UP = "ROE_MOUSE_UP", t.MOUSE_ENTER = "ROE_MOUSE_ENTER", t.MOUSE_LEAVE = "ROE_MOUSE_LEAVE", t
            })();
            class el {
                constructor(t, e) {
                    this._location = t, this._direction = e
                }
                get location() {
                    return this._location
                }
                get direction() {
                    return this._direction
                }
            }
            let sl = (() => {
                class t {}
                return t.MOUSE_CLICK = "click", t.DOUBLE_CLICK = "double_click", t.MOUSE_MOVE = "mousemove", t.MOUSE_DOWN = "mousedown", t.MOUSE_UP = "mouseup", t.ROLL_OVER = "mouseover", t.ROLL_OUT = "mouseout", t
            })();
            class il {
                constructor(t, e, s, i, n, r, o = 0, a = 0, c = !1, _ = !1, h = !1, l = !1) {
                    this._type = t, this._eventId = e, this._canvasId = s, this._spriteTag = i, this._screenX = n, this._screenY = r, this._localX = o, this._localY = a, this._ctrlKey = c, this._altKey = _, this._shiftKey = h, this._buttonDown = l, this._spriteOffsetX = 0, this._spriteOffsetY = 0
                }
                get type() {
                    return this._type
                }
                get _Str_3463() {
                    return this._eventId
                }
                get canvasId() {
                    return this._canvasId
                }
                get spriteTag() {
                    return this._spriteTag
                }
                get screenX() {
                    return this._screenX
                }
                get screenY() {
                    return this._screenY
                }
                get localX() {
                    return this._localX
                }
                get localY() {
                    return this._localY
                }
                get ctrlKey() {
                    return this._ctrlKey
                }
                get altKey() {
                    return this._altKey
                }
                get shiftKey() {
                    return this._shiftKey
                }
                get buttonDown() {
                    return this._buttonDown
                }
                get spriteOffsetX() {
                    return this._spriteOffsetX
                }
                set spriteOffsetX(t) {
                    this._spriteOffsetX = t
                }
                get spriteOffsetY() {
                    return this._spriteOffsetY
                }
                set spriteOffsetY(t) {
                    this._spriteOffsetY = t
                }
            }
            let nl = (() => {
                    class t {}
                    return t.DEFAULT = 1, t._Str_8616 = 2, t._Str_11629 = 3, t._Str_10494 = 4, t
                })(),
                rl = (() => {
                    class t {
                        static init(e, s) {
                            t._currentDelta = 0, t._startDelayMs = e, t._effectDurationMs = s, t._initializationTimeMs = cp.instance.time, t._state = t.STATE_START_DELAY
                        }
                        static turnVisualizationOn() {
                            if (t._state === t.STATE_NOT_INITIALIZED || t._state === t.STATE_OVER) return;
                            const e = cp.instance.time - t._initializationTimeMs;
                            e > t._startDelayMs + t._effectDurationMs ? t._state = t.STATE_OVER : (t._visualizationOn = !0, e < t._startDelayMs ? t._state = t.STATE_START_DELAY : (t._state = t.STATE_RUNNING, t._currentDelta = (e - t._startDelayMs) / t._effectDurationMs))
                        }
                        static turnVisualizationOff() {
                            t._visualizationOn = !1
                        }
                        static isVisualizationOn() {
                            return t._visualizationOn && t.isRunning()
                        }
                        static isRunning() {
                            return t._state === t.STATE_START_DELAY || t._state === t.STATE_RUNNING
                        }
                        static getDelta(e = 0, s = 1) {
                            return Math.min(Math.max(t._currentDelta, e), s)
                        }
                        static get totalRunningTime() {
                            return t._startDelayMs + t._effectDurationMs
                        }
                    }
                    return t.STATE_NOT_INITIALIZED = 0, t.STATE_START_DELAY = 1, t.STATE_RUNNING = 2, t.STATE_OVER = 3, t._state = t.STATE_NOT_INITIALIZED, t._visualizationOn = !1, t._currentDelta = 0, t._initializationTimeMs = 0, t._startDelayMs = 2e4, t._effectDurationMs = 2e3, t
                })(),
                ol = (() => {
                    class t {
                        constructor(t, e, s, i = null) {
                            this._updateId = 0, this._scale = 1, this._x_scale = 1, this._y_scale = 1, this._z_scale = 1, this._x_scale_internal = 1, this._y_scale_internal = 1, this._z_scale_internal = 1, this._clipNear = -500, this._clipFar = 500, this._displacements = null, this.scale = t, this._x = new K, this._y = new K, this._z = new K, this._directionAxis = new K, this._location = new K, this._direction = new K, this._depth = new K, this._x_scale_internal = 1, this._y_scale_internal = 1, this.x_scale = 1, this.y_scale = 1, this._z_scale_internal = Math.sqrt(.5) / Math.sqrt(3 / 4), this.z_scale = 1, this.location = new K(s.x, s.y, s.z), this.direction = new K(e.x, e.y, e.z), this.setDepthVector(null != i ? i : e), this._displacements = new Map
                        }
                        static getIntersectionVector(t, e, s, i) {
                            const n = K.dotProduct(e, i);
                            if (Math.abs(n) < 1e-5) return null;
                            const r = K.dif(t, s),
                                o = -K.dotProduct(i, r) / n;
                            return K.sum(t, K.product(e, o))
                        }
                        get updateId() {
                            return this._updateId
                        }
                        get scale() {
                            return this._scale / Math.sqrt(.5)
                        }
                        set scale(t) {
                            t <= 1 && (t = 1), (t *= Math.sqrt(.5)) != this._scale && (this._scale = t, this._updateId++)
                        }
                        get directionAxis() {
                            return this._directionAxis
                        }
                        get location() {
                            return this._location.assign(this._loc), this._location.x = this._location.x * this._x_scale, this._location.y = this._location.y * this._y_scale, this._location.z = this._location.z * this._z_scale, this._location
                        }
                        set location(t) {
                            if (null == t) return;
                            null == this._loc && (this._loc = new K);
                            const e = this._loc.x,
                                s = this._loc.y,
                                i = this._loc.z;
                            this._loc.assign(t), this._loc.x = this._loc.x / this._x_scale, this._loc.y = this._loc.y / this._y_scale, this._loc.z = this._loc.z / this._z_scale, this._loc.x == e && this._loc.y == s && this._loc.z == i || this._updateId++
                        }
                        get direction() {
                            return this._direction
                        }
                        set direction(t) {
                            let e, s, i, n, r;
                            if (null == t) return;
                            null == this._dir && (this._dir = new K);
                            const o = this._dir.x,
                                a = this._dir.y,
                                c = this._dir.z;
                            this._dir.assign(t), this._direction.assign(t), this._dir.x == o && this._dir.y == a && this._dir.z == c || this._updateId++;
                            const _ = new K(0, 1, 0),
                                h = new K(0, 0, 1),
                                l = new K(1, 0, 0),
                                u = t.x / 180 * Math.PI,
                                d = t.y / 180 * Math.PI,
                                g = t.z / 180 * Math.PI,
                                m = Math.cos(u),
                                p = Math.sin(u),
                                b = K.sum(K.product(_, m), K.product(l, -p)),
                                E = new K(h.x, h.y, h.z),
                                f = K.sum(K.product(_, p), K.product(l, m)),
                                S = Math.cos(d),
                                I = Math.sin(d),
                                R = new K(b.x, b.y, b.z),
                                v = K.sum(K.product(E, S), K.product(f, I)),
                                T = K.sum(K.product(E, -I), K.product(f, S));
                            0 != g ? (e = Math.cos(g), s = Math.sin(g), i = K.sum(K.product(R, e), K.product(v, s)), n = K.sum(K.product(R, -s), K.product(v, e)), r = new K(T.x, T.y, T.z), this._x.assign(i), this._y.assign(n), this._z.assign(r), this._directionAxis.assign(this._z)) : (this._x.assign(R), this._y.assign(v), this._z.assign(T), this._directionAxis.assign(this._z))
                        }
                        set x_scale(t) {
                            this._x_scale != t * this._x_scale_internal && (this._x_scale = t * this._x_scale_internal, this._updateId++)
                        }
                        set y_scale(t) {
                            this._y_scale != t * this._y_scale_internal && (this._y_scale = t * this._y_scale_internal, this._updateId++)
                        }
                        set z_scale(t) {
                            this._z_scale != t * this._z_scale_internal && (this._z_scale = t * this._z_scale_internal, this._updateId++)
                        }
                        dispose() {
                            this._x = null, this._y = null, this._z = null, this._loc = null, this._dir = null, this._directionAxis = null, this._location = null, null != this._displacements && (this._displacements.clear(), this._displacements = null)
                        }
                        setDisplacement(t, e) {
                            let s, i;
                            null != t && null != e && null != this._displacements && (s = Math.trunc(Math.round(t.x)) + "_" + Math.trunc(Math.round(t.y)) + "_" + Math.trunc(Math.round(t.z)), this._displacements.delete(s), i = new K, i.assign(e), this._displacements.set(s, i), this._updateId++)
                        }
                        getDisplacenent(t) {
                            let e;
                            return null != this._displacements ? (e = Math.trunc(Math.round(t.x)) + "_" + Math.trunc(Math.round(t.y)) + "_" + Math.trunc(Math.round(t.z)), this._displacements.get(e)) : null
                        }
                        setDepthVector(t) {
                            let e, s, i, n, r;
                            const o = new K(0, 1, 0),
                                a = new K(0, 0, 1),
                                c = new K(1, 0, 0),
                                _ = t.x / 180 * Math.PI,
                                h = t.y / 180 * Math.PI,
                                l = t.z / 180 * Math.PI,
                                u = Math.cos(_),
                                d = Math.sin(_),
                                g = K.sum(K.product(o, u), K.product(c, -d)),
                                m = new K(a.x, a.y, a.z),
                                p = K.sum(K.product(o, d), K.product(c, u)),
                                b = Math.cos(h),
                                E = Math.sin(h),
                                f = new K(g.x, g.y, g.z),
                                S = K.sum(K.product(m, b), K.product(p, E)),
                                I = K.sum(K.product(m, -E), K.product(p, b));
                            0 != l ? (e = Math.cos(l), s = Math.sin(l), i = K.sum(K.product(f, e), K.product(S, s)), n = K.sum(K.product(f, -s), K.product(S, e)), r = new K(I.x, I.y, I.z), this._depth.assign(r)) : this._depth.assign(I), this._updateId++
                        }
                        adjustLocation(t, e) {
                            if (null == t || null == this._z) return;
                            const s = K.product(this._z, -e),
                                i = new K(t.x + s.x, t.y + s.y, t.z + s.z);
                            this.location = i
                        }
                        getCoordinatePosition(t) {
                            if (null == t) return null;
                            const e = K.scalarProjection(t, this._x),
                                s = K.scalarProjection(t, this._y),
                                i = K.scalarProjection(t, this._z);
                            return new K(e, s, i)
                        }
                        getScreenPosition(t) {
                            let e = K.dif(t, this._loc);
                            e.x = e.x * this._x_scale, e.y = e.y * this._y_scale, e.z = e.z * this._z_scale;
                            let s = K.scalarProjection(e, this._depth);
                            if (s < this._clipNear || s > this._clipFar) return null;
                            let i = K.scalarProjection(e, this._x),
                                n = -K.scalarProjection(e, this._y);
                            i *= this._scale, n *= this._scale;
                            const r = this.getDisplacenent(t);
                            return null != r && (e = K.dif(t, this._loc), e.add(r), e.x = e.x * this._x_scale, e.y = e.y * this._y_scale, e.z = e.z * this._z_scale, s = K.scalarProjection(e, this._depth)), e.x = i, e.y = n, e.z = s, e
                        }
                        getScreenPoint(t) {
                            const e = this.getScreenPosition(t);
                            return null == e ? null : new u.j(e.x, e.y)
                        }
                        getPlanePosition(e, s, i, n) {
                            let r, o;
                            const a = -e.y / this._scale,
                                c = K.product(this._x, e.x / this._scale);
                            c.add(K.product(this._y, a));
                            const _ = new K(this._loc.x * this._x_scale, this._loc.y * this._y_scale, this._loc.z * this._z_scale);
                            _.add(c);
                            const h = this._z,
                                l = new K(s.x * this._x_scale, s.y * this._y_scale, s.z * this._z_scale),
                                d = new K(i.x * this._x_scale, i.y * this._y_scale, i.z * this._z_scale),
                                g = new K(n.x * this._x_scale, n.y * this._y_scale, n.z * this._z_scale),
                                m = K.crossProduct(d, g),
                                p = new K;
                            return p.assign(t.getIntersectionVector(_, h, l, m)), null != p ? (p.subtract(l), r = K.scalarProjection(p, i) / d.length * i.length, o = K.scalarProjection(p, n) / g.length * n.length, new u.j(r, o)) : null
                        }
                        performZoom() {
                            this.scale = this.isZoomedIn() ? t.SCALE_ZOOMED_OUT : t.SCALE_ZOOMED_IN
                        }
                        isZoomedIn() {
                            return this.scale == t.SCALE_ZOOMED_IN
                        }
                        performZoomOut() {
                            this.scale = t.SCALE_ZOOMED_OUT
                        }
                        performZoomIn() {
                            this.scale = t.SCALE_ZOOMED_IN
                        }
                    }
                    return t.SCALE_ZOOMED_IN = 64, t.SCALE_ZOOMED_OUT = 32, t
                })();
            class al {
                constructor(t) {
                    this._roomObjectVariableAccurateZ = t || "", this._location = new K, this._screenLocation = new K, this._locationChanged = !1, this._geometryUpdateId = -1, this._objectUpdateId = -1
                }
                dispose() {
                    this._screenLocation = null
                }
                updateLocation(t, e) {
                    if (!t || !e) return null;
                    let s = !1;
                    const i = t.getLocation();
                    if (e.updateId === this._geometryUpdateId && t.updateCounter === this._objectUpdateId || (this._objectUpdateId = t.updateCounter, e.updateId === this._geometryUpdateId && i.x === this._location.x && i.y === this._location.y && i.z === this._location.z || (this._geometryUpdateId = e.updateId, this._location.assign(i), s = !0)), this._locationChanged = s, this._locationChanged) {
                        const s = e.getScreenPosition(i);
                        if (!s) return null;
                        const n = t.model.getValue(this._roomObjectVariableAccurateZ);
                        if (isNaN(n) || 0 === n) {
                            const t = new K(Math.round(i.x), Math.round(i.y), i.z);
                            if (t.x !== i.x || t.y !== i.y) {
                                const i = e.getScreenPosition(t);
                                this._screenLocation.assign(s), i && (this._screenLocation.z = i.z)
                            } else this._screenLocation.assign(s)
                        } else this._screenLocation.assign(s);
                        this._screenLocation.x = Math.round(this._screenLocation.x), this._screenLocation.y = Math.round(this._screenLocation.y)
                    }
                    return this._screenLocation
                }
                get locationChanged() {
                    return this._locationChanged
                }
            }
            class cl {
                constructor() {
                    this._sprites = [], this._updateId1 = -1, this._updateId2 = -1, this._isEmpty = !1
                }
                get _Str_3008() {
                    return this._sprites.length
                }
                get isEmpty() {
                    return this._isEmpty
                }
                dispose() {
                    this._Str_20276(0)
                }
                _Str_12937(t) {
                    this._sprites.push(t)
                }
                _Str_2505(t) {
                    return this._sprites[t]
                }
                get _Str_9272() {
                    return this._sprites
                }
                _Str_17574(t, e) {
                    return (t !== this._updateId1 || e !== this._updateId2) && (this._updateId1 = t, this._updateId2 = e, !0)
                }
                _Str_20276(t) {
                    if (t < this._sprites.length) {
                        let e = t;
                        for (; e < this._sprites.length;) {
                            const t = this._sprites[e];
                            t && t.dispose(), e++
                        }
                        this._sprites.splice(t, this._sprites.length - t)
                    }
                    this._isEmpty = !this._sprites.length
                }
            }
            class _l {
                constructor(t) {
                    this._location = new al(t), this._sprites = new cl
                }
                get location() {
                    return this._location
                }
                get sprites() {
                    return this._sprites
                }
                dispose() {
                    this._location && (this._location.dispose(), this._location = null), this._sprites && (this._sprites.dispose(), this._sprites = null)
                }
                get _Str_1577() {
                    return this._objectId
                }
                set _Str_1577(t) {
                    this._objectId = t
                }
            }
            let hl = (() => {
                class t {
                    constructor(t) {
                        this._data = new Map, this._roomObjectVariableAccurateZ = t
                    }
                    dispose() {
                        if (this._data) {
                            for (const [t, e] of this._data.entries()) e && (this._data.delete(t), e.dispose());
                            this._data = null
                        }
                    }
                    getObjectCache(t) {
                        let e = this._data.get(t);
                        return e || (e = new _l(this._roomObjectVariableAccurateZ), this._data.set(t, e)), e
                    }
                    removeObjectCache(t) {
                        const e = this._data.get(t);
                        e && (this._data.delete(t), e.dispose())
                    }
                    getSortableSpriteList() {
                        const e = [];
                        for (const s of this._data.values()) {
                            if (!s) continue;
                            const i = s.sprites && s.sprites._Str_9272;
                            if (i && i.length)
                                for (const n of i)
                                    if (n && n.sprite.spriteType !== nl._Str_8616 && "" !== n.sprite.name) {
                                        const i = new ct;
                                        i.objectId = s._Str_1577, i.x = n.x, i.y = n.y, i.z = n.z, i.name = n.sprite.name || "", i.flipH = n.sprite.flipH, i.alpha = n.sprite.alpha, i.color = n.sprite.color.toString(), i.blendMode = n.sprite.blendMode.toString(), i.width = n.sprite.width, i.height = n.sprite.height, i.type = n.sprite.type, i.posture = n.sprite.posture;
                                        const r = this.isSkewedSprite(n.sprite);
                                        r && (i.skew = n.sprite.direction % 4 == 0 ? -.5 : .5), (r || n.name.indexOf("%image.library.url%") >= 0 || n.name.indexOf("%group.badge.url%") >= 0) && i.width <= t.MAX_SIZE_FOR_AVG_COLOR && i.height <= t.MAX_SIZE_FOR_AVG_COLOR && 0 === n.sprite.name.indexOf("external_image_wallitem") && (i.frame = !0), e.push(i)
                                    }
                        }
                        return e && e.length ? e : null
                    }
                    isSkewedSprite(t) {
                        return !!t.type && (0 === t.type.indexOf("external_image_wallitem") && "THUMBNAIL" === t.tag || 0 === t.type.indexOf("guild_forum") && "THUMBNAIL" === t.tag)
                    }
                    getPlaneSortableSprites() {
                        const t = [];
                        for (const e of this._data.values())
                            for (const s of e.sprites._Str_9272) s.sprite.spriteType === nl._Str_8616 && t.push(s);
                        return t
                    }
                }
                return t.MAX_SIZE_FOR_AVG_COLOR = 200, t
            })();
            class ll extends u.n {
                constructor(t = null) {
                    super(t), this._offsetX = 0, this._offsetY = 0, this._tag = "", this._alphaTolerance = 128, this._Str_8253 = !1, this._clickHandling = !1, this._pairedSpriteId = -1, this._pairedSpriteUpdateCounter = -1
                }
                needsUpdate(t, e) {
                    return (this._pairedSpriteId !== t || this._pairedSpriteUpdateCounter !== e) && (this._pairedSpriteId = t, this._pairedSpriteUpdateCounter = e, !0)
                }
                render(t) {
                    super.render(t)
                }
                setTexture(t) {
                    t || (t = u.p.EMPTY), t !== this.texture && (t === u.p.EMPTY && (this._pairedSpriteId = -1, this._pairedSpriteUpdateCounter = -1), this.texture = t)
                }
                containsPoint(t) {
                    return ll.containsPoint(this, t)
                }
                static containsPoint(t, e) {
                    if (!t || !e || t.alphaTolerance > 255) return !1;
                    if (!(t instanceof u.n)) return !1;
                    if (t.texture === u.p.EMPTY || t.blendMode !== u.b.NORMAL) return;
                    const s = t.texture,
                        i = s.baseTexture;
                    if (!s || !i || !i.valid) return !1;
                    const n = e.x * t.scale.x,
                        r = e.y * t.scale.y;
                    if (!t.getLocalBounds().contains(n, r)) return !1;
                    if (!i.hitMap) {
                        let t = null;
                        if (!i.resource)
                            if (s.getLocalBounds) t = cp.instance.renderer.extract.canvas(s);
                            else {
                                const e = u.n.from(s);
                                t = cp.instance.renderer.extract.canvas(e), e.destroy()
                            }
                        if (!ll.generateHitMap(i, t)) return !1
                    }
                    const o = i.hitMap,
                        a = i.hitMapWidth,
                        c = i.resolution,
                        _ = Math.round((n + s.frame.x) * c),
                        h = 4 * (Math.round((r + s.frame.y) * c) * a + _);
                    return void 0 !== o[h + 3] && o[h + 3] > t.alphaTolerance
                }
                static generateHitMap(t, e = null) {
                    let s = null,
                        i = null;
                    if (e) s = e, i = s.getContext("2d");
                    else {
                        if (!t.resource) return !1;
                        const e = t.resource.source;
                        if (!e) return !1;
                        if (e.getContext) s = e, i = s.getContext("2d");
                        else {
                            if (!(e instanceof Image)) return !1;
                            s = document.createElement("canvas"), s.width = e.width, s.height = e.height, i = s.getContext("2d"), i.drawImage(e, 0, 0)
                        }
                    }
                    const n = s.width,
                        r = i.getImageData(0, 0, n, s.height);
                    return t.hitMap = r.data, t.hitMapWidth = n, !0
                }
                get offsetX() {
                    return this._offsetX
                }
                set offsetX(t) {
                    this._offsetX = t
                }
                get offsetY() {
                    return this._offsetY
                }
                set offsetY(t) {
                    this._offsetY = t
                }
                get tag() {
                    return this._tag
                }
                set tag(t) {
                    this._tag = t
                }
                get alphaTolerance() {
                    return this._alphaTolerance
                }
                set alphaTolerance(t) {
                    this._alphaTolerance = t
                }
                get _Str_4593() {
                    return this._Str_8253
                }
                set _Str_4593(t) {
                    this._Str_8253 = t
                }
                get clickHandling() {
                    return this._clickHandling
                }
                set clickHandling(t) {
                    this._clickHandling = t
                }
            }
            class ul {
                constructor() {
                    this._objectId = "", this._spriteTag = ""
                }
                get objectId() {
                    return this._objectId
                }
                set objectId(t) {
                    this._objectId = t
                }
                get spriteTag() {
                    return this._spriteTag
                }
                set spriteTag(t) {
                    this._spriteTag = t
                }
            }
            let dl = (() => {
                class t {
                    constructor() {
                        this._name = "", this._sprite = null, this._x = 0, this._y = 0, this._z = 0
                    }
                    dispose() {
                        this._z = -t._Str_17154, this._sprite = null
                    }
                    get name() {
                        return this._name
                    }
                    set name(t) {
                        this._name = t
                    }
                    get sprite() {
                        return this._sprite
                    }
                    set sprite(t) {
                        this._sprite = t
                    }
                    get x() {
                        return this._x
                    }
                    set x(t) {
                        this._x = t
                    }
                    get y() {
                        return this._y
                    }
                    set y(t) {
                        this._y = t
                    }
                    get z() {
                        return this._z
                    }
                    set z(t) {
                        this._z = t
                    }
                }
                return t._Str_17154 = 1e8, t
            })();
            class gl {
                constructor(t, e, s, i, n) {
                    this._id = e, this._container = t, this._geometry = new ol(n, new K(-135, 30, 0), new K(11, 11, 5), new K(-135, .5, 0)), this._renderTimestamp = 0, this._master = null, this._display = null, this._mask = null, this._sortableSprites = [], this._spriteCount = 0, this._activeSpriteCount = 0, this._spritePool = [], this._skipObjectUpdate = !1, this._runningSlow = !1, this._width = 0, this._height = 0, this._renderedWidth = 0, this._renderedHeight = 0, this._screenOffsetX = 0, this._screenOffsetY = 0, this._mouseLocation = new u.j, this._mouseOldX = 0, this._mouseOldY = 0, this._mouseCheckCount = 0, this._mouseSpriteWasHit = !1, this._mouseActiveObjects = new Map, this._eventCache = new Map, this._eventId = 0, this._scale = 1, this._restrictsScaling = !1, this._noSpriteVisibilityChecking = !1, this._usesExclusionRectangles = !1, this._usesMask = !0, this._canvasUpdated = !1, this._objectCache = new hl(this._container.roomObjectVariableAccurateZ), this._mouseListener = null, this.setupCanvas(), this.initialize(s, i)
                }
                setupCanvas() {
                    if (this._master || (this._master = new u.n, this._master.interactiveChildren = !1), !this._display) {
                        const t = new u.d;
                        t.name = "canvas", this._master.addChild(t), this._display = t
                    }
                }
                dispose() {
                    if (this._Str_20677(0, !0), this._geometry && (this._geometry.dispose(), this._geometry = null), this._mask && (this._mask = null), this._objectCache && (this._objectCache.dispose(), this._objectCache = null), this._master) {
                        for (; this._master.children.length;) this._master.removeChildAt(0).destroy();
                        this._master.parent && this._master.parent.removeChild(this._master), this._master.destroy(), this._master = null
                    }
                    if (this._display = null, this._sortableSprites = [], this._mouseActiveObjects && (this._mouseActiveObjects.clear(), this._mouseActiveObjects = null), this._spritePool) {
                        for (const t of this._spritePool) this._Str_21974(t, !0);
                        this._spritePool = []
                    }
                    this._eventCache && (this._eventCache.clear(), this._eventCache = null), this._mouseListener = null
                }
                initialize(t, e) {
                    if (t = t < 1 ? 1 : t, e = e < 1 ? 1 : e, this._usesMask && (this._mask ? this._mask.clear().beginFill(16711680).drawRect(0, 0, t, e).endFill() : (this._mask = (new u.f).beginFill(16711680).drawRect(0, 0, t, e).endFill(), this._mask.name = "mask", this._master && (this._master.addChild(this._mask), this._display && (this._display.mask = this._mask)))), this._master) {
                        if (this._master.hitArea) {
                            const s = this._master.hitArea;
                            s.width = t, s.height = e
                        } else this._master.hitArea = new u.k(0, 0, t, e);
                        if (this._master.filterArea) {
                            const s = this._master.filterArea;
                            s.width = t, s.height = e
                        } else this._master.filterArea = new u.k(0, 0, t, e)
                    }
                    this._width = t, this._height = e
                }
                setMask(t) {
                    t && !this._usesMask ? (this._usesMask = !0, this._mask && this._mask.parent !== this._master && (this._master.addChild(this._mask), this._display.mask = this._mask)) : !t && this._usesMask && (this._usesMask = !1, this._mask && this._mask.parent === this._master && (this._master.removeChild(this._mask), this._display.mask = null))
                }
                setScale(t, e = null, s = null, i = !1, n = !1) {
                    this._master && this._display && (this._restrictsScaling && !i || (e || (e = new u.j(this._width / 2, this._height / 2)), s || (s = e), e = this._display.toLocal(e), n ? this._scale *= t : this._scale = t, this.screenOffsetX = s.x - e.x * this._scale, this.screenOffsetY = s.y - e.y * this._scale))
                }
                render(t, e = !1) {
                    if (this._canvasUpdated = !1, -1 === t && (t = this._renderTimestamp + 1), !this._container || !this._geometry) return;
                    if (t === this._renderTimestamp) return;
                    this._width === this._renderedWidth && this._height === this._renderedHeight || (e = !0), this._display.x === this._screenOffsetX && this._display.y === this._screenOffsetY || (this._display.x = this._screenOffsetX, this._display.y = this._screenOffsetY, e = !0), this._display.scale.x !== this._scale && (this._display.scale.set(this._scale), e = !0);
                    let s = 0;
                    const i = this._container.objects;
                    if (i.size)
                        for (const r of i.values()) r && (s += this.renderObject(r, r.instanceId.toString(), t, e, s));
                    this._sortableSprites.sort((t, e) => e.z - t.z), s < this._sortableSprites.length && this._sortableSprites.splice(s);
                    let n = 0;
                    for (; n < s;) {
                        const t = this._sortableSprites[n];
                        t && t.sprite && this.renderSprite(n, t), n++
                    }
                    this._Str_20677(s), e && (this._canvasUpdated = !0), this._renderTimestamp = t, this._renderedWidth = this._width, this._renderedHeight = this._height
                }
                _Str_20787() {
                    this._noSpriteVisibilityChecking = !0, this.render(-1, !0)
                }
                _Str_22174() {
                    this._noSpriteVisibilityChecking = !1
                }
                getSortableSpriteList() {
                    return this._objectCache.getSortableSpriteList()
                }
                _Str_14588() {
                    return this._objectCache.getPlaneSortableSprites()
                }
                removeFromCache(t) {
                    this._objectCache.removeObjectCache(t)
                }
                renderObject(t, e, s, i, n) {
                    if (!t) return 0;
                    const r = t.visualization;
                    if (!r) return this.removeFromCache(e), 0;
                    const o = this.getCacheItem(e);
                    o._Str_1577 = t.instanceId;
                    const a = o.location,
                        c = o.sprites,
                        _ = a.updateLocation(t, this._geometry);
                    if (!_) return this.removeFromCache(e), 0;
                    if (r.update(this._geometry, s, !c.isEmpty || i, this._skipObjectUpdate && this._runningSlow), a.locationChanged && (i = !0), !c._Str_17574(r.instanceId, r.updateSpriteCounter) && !i) return c._Str_3008;
                    let h = _.x,
                        l = _.y,
                        u = _.z;
                    u += h > 0 ? 12e-8 * h : 12e-8 * -h, h += Math.trunc(this._width / 2), l += Math.trunc(this._height / 2);
                    let d = 0;
                    for (const g of r.sprites.values()) {
                        if (!g || !g.visible) continue;
                        const s = g.texture,
                            i = s && s.baseTexture;
                        if (!s || !i) continue;
                        const r = h + g.offsetX + this._screenOffsetX,
                            o = l + g.offsetY + this._screenOffsetY;
                        if (g.flipH) {
                            if (!this.isSpriteVisible(h + -(s.width + -g.offsetX) + this._screenOffsetX, o, s.width, s.height)) continue
                        } else if (g.flipV) {
                            if (!this.isSpriteVisible(r, l + -(s.height + -g.offsetY) + this._screenOffsetY, s.width, s.height)) continue
                        } else if (!this.isSpriteVisible(r, o, s.width, s.height)) continue;
                        let a = c._Str_2505(d);
                        a || (a = new dl, c._Str_12937(a), this._sortableSprites.push(a), a.name = e), a.sprite = g, g.spriteType !== nl._Str_11629 && g.spriteType !== nl._Str_10494 || (a.sprite._Str_3582 = "avatar_" + t.id), a.x = r - this._screenOffsetX, a.y = o - this._screenOffsetY, a.z = u + g.relativeDepth + 37e-12 * n, d++, n++
                    }
                    return c._Str_20276(d), this._canvasUpdated = !0, d
                }
                getExtendedSprite(t) {
                    return t < 0 || t >= this._spriteCount ? null : this._display.getChildAt(t) || null
                }
                getExtendedSpriteIdentifier(t) {
                    return t ? t.name : ""
                }
                renderSprite(t, e) {
                    if (t >= this._spriteCount) return this.createAndAddSprite(e), !0;
                    if (!e) return !1;
                    const s = e.sprite,
                        i = this.getExtendedSprite(t);
                    if (!s || !i) return !1;
                    if (i._Str_4593 !== s._Str_4593) return i._Str_4593 && !s._Str_4593 ? (this._display.removeChildAt(t), this._spritePool.push(i), this.renderSprite(t, e)) : (this.createAndAddSprite(e, t), !0);
                    if (i.needsUpdate(s.id, s.updateCounter) || rl.isVisualizationOn()) {
                        i.tag = s.tag, i.alphaTolerance = s.alphaTolerance, i.name = e.name, i._Str_4593 = s._Str_4593, i.clickHandling = s.clickHandling, i.filters = s.filters;
                        const t = s.alpha / 255;
                        i.alpha !== t && (i.alpha = t), i.tint !== s.color && (i.tint = s.color), i.blendMode !== s.blendMode && (i.blendMode = s.blendMode), i.texture !== s.texture && i.setTexture(s.texture), s.updateContainer && (1 === i.children.length && i.removeChildAt(0), i.addChild(s.container), s.updateContainer = !1), s.flipH ? -1 !== i.scale.x && (i.scale.x = -1) : 1 !== i.scale.x && (i.scale.x = 1), s.flipV ? -1 !== i.scale.y && (i.scale.y = -1) : 1 !== i.scale.y && (i.scale.y = 1), this._Str_21914(i, s)
                    }
                    return i.x !== e.x && (i.x = e.x), i.y !== e.y && (i.y = e.y), i.offsetX = s.offsetX, i.offsetY = s.offsetY, !0
                }
                createAndAddSprite(t, e = -1) {
                    const s = t.sprite;
                    if (!s) return;
                    let i = null;
                    this._spritePool.length > 0 && (i = this._spritePool.pop()), i || (i = new ll), i.children.length && i.removeChildren(), i.tag = s.tag, i.alphaTolerance = s.alphaTolerance, i.alpha = s.alpha / 255, i.tint = s.color, i.x = t.x, i.y = t.y, i.offsetX = s.offsetX, i.offsetY = s.offsetY, i.name = s.name, i._Str_4593 = s._Str_4593, i.clickHandling = s.clickHandling, i.blendMode = s.blendMode, i.filters = s.filters, i.setTexture(s.texture), s.updateContainer && (i.addChild(s.container), s.updateContainer = !1), s.flipH && (i.scale.x = -1), s.flipV && (i.scale.y = -1), this._Str_21914(i, s), e < 0 || e >= this._spriteCount ? (this._display.addChild(i), this._spriteCount++) : this._display.addChildAt(i, e), this._activeSpriteCount++
                }
                _Str_20677(t, e = !1) {
                    if (this._display) {
                        if (t < 0 && (t = 0), t < this._activeSpriteCount || !this._activeSpriteCount) {
                            let s = this._spriteCount - 1;
                            for (; s >= t;) this._Str_21974(this.getExtendedSprite(s), e), s--
                        }
                        this._activeSpriteCount = t
                    }
                }
                _Str_21914(t, e) {
                    if (rl.isVisualizationOn() && e) switch (e.spriteType) {
                        case nl._Str_10494:
                            return;
                        case nl._Str_8616:
                            return void(t.alpha = rl.getDelta(.9));
                        case nl._Str_11629:
                            return void(t.alpha = rl.getDelta(.5));
                        default:
                            t.alpha = rl.getDelta(.1)
                    }
                }
                _Str_21974(t, e) {
                    t && (e ? (t.parent && t.parent.removeChild(t), t.destroy({
                        children: !0
                    })) : t.setTexture(null))
                }
                update() {
                    this._mouseCheckCount = 0, this._eventId++
                }
                setMouseListener(t) {
                    this._mouseListener = t
                }
                getCacheItem(t) {
                    return this._objectCache.getObjectCache(t)
                }
                isSpriteVisible(t, e, s, i) {
                    return !!this._noSpriteVisibilityChecking || (e = (e - this._screenOffsetY) * this._scale + this._screenOffsetY, (t = (t - this._screenOffsetX) * this._scale + this._screenOffsetX) < this._width && t + (s *= this._scale) >= 0 && e < this._height && e + (i *= this._scale) >= 0 && !this._usesExclusionRectangles)
                }
                _Str_21232(t, e, s, i, n, r, o) {
                    return e -= this._screenOffsetY, this._mouseLocation.x = (t -= this._screenOffsetX) / this._scale, this._mouseLocation.y = e / this._scale, this._mouseCheckCount > 0 && s == sl.MOUSE_MOVE || (this._mouseSpriteWasHit = this._Str_19207(t / this._scale, e / this._scale, s, i, n, r, o), this._mouseCheckCount++), this._mouseSpriteWasHit
                }
                _Str_19207(t, e, s, i = !1, n = !1, r = !1, o = !1) {
                    const a = [];
                    let c = !1,
                        _ = null,
                        h = this._activeSpriteCount - 1;
                    for (; h >= 0;) {
                        const l = this.getExtendedSprite(h);
                        if (l && l.containsPoint(new u.j(t - l.x, e - l.y)) && (!l.clickHandling || s !== sl.MOUSE_CLICK && s !== sl.DOUBLE_CLICK)) {
                            const h = this.getExtendedSpriteIdentifier(l);
                            if (-1 === a.indexOf(h)) {
                                const c = l.tag;
                                let u = this._mouseActiveObjects.get(h);
                                u && u.spriteTag !== c && (_ = this._Str_11609(0, 0, 0, 0, sl.ROLL_OUT, u.spriteTag, i, n, r, o), this._Str_14715(_, h)), s !== sl.MOUSE_MOVE || u && u.spriteTag === c ? (_ = this._Str_11609(t, e, t - l.x, e - l.y, s, c, i, n, r, o), _.spriteOffsetX = l.offsetX, _.spriteOffsetY = l.offsetY) : _ = this._Str_11609(t, e, t - l.x, e - l.y, sl.ROLL_OVER, c, i, n, r, o), u || (u = new ul, u.objectId = h, this._mouseActiveObjects.set(h, u)), u.spriteTag = c, s === sl.MOUSE_MOVE && t === this._mouseOldX && e === this._mouseOldY || this._Str_14715(_, h), a.push(h)
                            }
                            c = !0
                        }
                        h--
                    }
                    const l = [];
                    for (const u of this._mouseActiveObjects.keys()) u && l.push(u);
                    let d = 0;
                    for (; d < l.length;) a.indexOf(l[d]) >= 0 && (l[d] = null), d++;
                    for (d = 0; d < l.length;) {
                        const t = l[d];
                        if (null !== t) {
                            const e = this._mouseActiveObjects.get(t);
                            e && this._mouseActiveObjects.delete(t);
                            const s = this._Str_11609(0, 0, 0, 0, sl.ROLL_OUT, e.spriteTag, i, n, r, o);
                            this._Str_14715(s, t)
                        }
                        d++
                    }
                    return this._Str_20604(), this._mouseOldX = t, this._mouseOldY = e, c
                }
                _Str_11609(t, e, s, i, n, r, o, a, c, _) {
                    const h = "canvas_" + this._id;
                    return new il(n, h + "_" + this._eventId, h, r, t - this._width / 2, e - this._height / 2, s, i, a, o, c, _)
                }
                _Str_14715(t, e) {
                    t && this._eventCache && (this._eventCache.delete(e), this._eventCache.set(e, t))
                }
                _Str_20604() {
                    if (this._container && this._eventCache) {
                        for (const [t, e] of this._eventCache.entries()) {
                            if (!this._eventCache) return;
                            if (!e) continue;
                            const s = this._container.getRoomObject(parseInt(t));
                            if (s)
                                if (this._mouseListener) this._mouseListener._Str_20330(e, s, this._geometry);
                                else {
                                    const t = s.mouseHandler;
                                    t && t.mouseEvent(e, this._geometry)
                                }
                        }
                        this._eventCache && this._eventCache.clear()
                    }
                }
                getDisplayAsTexture() {
                    this._noSpriteVisibilityChecking = !0;
                    const t = this._scale,
                        e = this._screenOffsetX,
                        s = this._screenOffsetY;
                    this.setScale(1, null, null, !0), this._screenOffsetX = 0, this._screenOffsetY = 0, this.render(-1, !0);
                    const i = this._display.getBounds(),
                        n = u.l.create({
                            width: this._display.width,
                            height: this._display.height
                        });
                    return cp.instance.renderer.render(this._display, n, !0, new u.i(1, 0, 0, 1, -i.x, -i.y)), this._noSpriteVisibilityChecking = !1, this.setScale(t, null, null, !0), this._screenOffsetX = e, this._screenOffsetY = s, n
                }
                get id() {
                    return this._id
                }
                get geometry() {
                    return this._geometry
                }
                get master() {
                    return this._master
                }
                get display() {
                    return this._display
                }
                get screenOffsetX() {
                    return this._screenOffsetX
                }
                set screenOffsetX(t) {
                    t = Math.trunc(t), this._mouseLocation.x = this._mouseLocation.x - (t - this._screenOffsetX), this._screenOffsetX = t
                }
                get screenOffsetY() {
                    return this._screenOffsetY
                }
                set screenOffsetY(t) {
                    t = Math.trunc(t), this._mouseLocation.y = this._mouseLocation.y - (t - this._screenOffsetY), this._screenOffsetY = t
                }
                get scale() {
                    return this._scale
                }
                get width() {
                    return this._width * this._scale
                }
                get height() {
                    return this._height * this._scale
                }
                get restrictsScaling() {
                    return this._restrictsScaling
                }
                set restrictsScaling(t) {
                    this._restrictsScaling = t
                }
                get canvasUpdated() {
                    return this._canvasUpdated
                }
            }
            class ml {
                constructor() {
                    this._objects = new Map, this._canvases = new Map, this._disposed = !1, this._roomObjectVariableAccurateZ = null
                }
                dispose() {
                    if (!this._disposed) {
                        if (this._canvases) {
                            for (const [t, e] of this._canvases.entries()) this._canvases.delete(t), e && e.dispose();
                            this._canvases = null
                        }
                        this._objects && (this._objects = null), this._disposed = !0
                    }
                }
                reset() {
                    this._objects.clear()
                }
                getInstanceId(t) {
                    return t ? t.instanceId : -1
                }
                getRoomObject(t) {
                    return this._objects.get(t)
                }
                addObject(t) {
                    t && this._objects.set(this.getInstanceId(t), t)
                }
                removeObject(t) {
                    const e = this.getInstanceId(t);
                    this._objects.delete(e);
                    for (const s of this._canvases.values()) s && s.removeFromCache(e.toString())
                }
                render(t, e = !1) {
                    if (this._canvases && this._canvases.size)
                        for (const s of this._canvases.values()) s && s.render(t, e)
                }
                update(t, e = !1) {
                    if (this._canvases && this._canvases.size) {
                        this.render(t, e);
                        for (const t of this._canvases.values()) t && t.update()
                    }
                }
                getCanvas(t) {
                    const e = this._canvases.get(t);
                    if (e) return e
                }
                createCanvas(t, e, s, i) {
                    const n = this._canvases.get(t);
                    if (n) return n.initialize(e, s), n.geometry && (n.geometry.scale = i), n;
                    const r = this.createSpriteCanvas(t, e, s, i);
                    return r ? (this._canvases.set(t, r), r) : void 0
                }
                createSpriteCanvas(t, e, s, i) {
                    return new gl(this, t, e, s, i)
                }
                removeCanvas(t) {
                    const e = this._canvases.get(t);
                    e && (this._canvases.delete(t), e.dispose())
                }
                get objects() {
                    return this._objects
                }
                get disposed() {
                    return this._disposed
                }
                get roomObjectVariableAccurateZ() {
                    return this._roomObjectVariableAccurateZ
                }
                set roomObjectVariableAccurateZ(t) {
                    this._roomObjectVariableAccurateZ = t
                }
            }
            class pl {
                createRenderer() {
                    return new ml
                }
            }
            class bl {
                constructor(t) {
                    t < 0 && (t = 0), this._reservedNumbers = [], this._freeNumbers = [];
                    let e = 0;
                    for (; e < t;) this._freeNumbers.push(e), e++
                }
                dispose() {
                    this._reservedNumbers = null, this._freeNumbers = null
                }
                _Str_19709() {
                    if (this._freeNumbers.length > 0) {
                        const t = this._freeNumbers.pop();
                        return this._reservedNumbers.push(t), t
                    }
                    return -1
                }
                _Str_15187(t) {
                    const e = this._reservedNumbers.indexOf(t);
                    e >= 0 && (this._reservedNumbers.splice(e, 1), this._freeNumbers.push(t))
                }
            }
            class El {
                constructor(t, e, s) {
                    this._layerId = t, this._partId = e, this._paletteId = s
                }
                get layerId() {
                    return this._layerId
                }
                set layerId(t) {
                    this._layerId = t
                }
                get partId() {
                    return this._partId
                }
                set partId(t) {
                    this._partId = t
                }
                get paletteId() {
                    return this._paletteId
                }
                set paletteId(t) {
                    this._paletteId = t
                }
            }
            class fl {
                constructor(t) {
                    this._typeId = this.getTypeId(t), this._paletteId = this.getPaletteId(t), this._color = this.getColor(t), this._headOnly = this.getHeadOnly(t);
                    const e = this.getCustomData(t);
                    this._customLayerIds = this.getCustomLayerIds(e), this._customPartIds = this.getCustomPartIds(e), this._customPaletteIds = this.getCustomPaletteIds(e), this._customParts = [];
                    let s = 0;
                    for (; s < this._customLayerIds.length;) this._customParts.push(new El(this._customLayerIds[s], this._customPartIds[s], this._customPaletteIds[s])), s++
                }
                get typeId() {
                    return this._typeId
                }
                get paletteId() {
                    return this._paletteId
                }
                get color() {
                    return this._color
                }
                get customLayerIds() {
                    return this._customLayerIds
                }
                get customPartIds() {
                    return this._customPartIds
                }
                get customPaletteIds() {
                    return this._customPaletteIds
                }
                get customParts() {
                    return this._customParts
                }
                getCustomPart(t) {
                    if (this._customParts)
                        for (const e of this._customParts)
                            if (e.layerId === t) return e;
                    return null
                }
                get hasCustomParts() {
                    return !(null == this._customLayerIds) && this._customLayerIds.length > 0
                }
                get headOnly() {
                    return this._headOnly
                }
                get figureString() {
                    let t = this.typeId + " " + this.paletteId + " " + this.color.toString(16);
                    t = t + " " + this.customParts.length;
                    for (const e of this.customParts) t = t + " " + e.layerId + " " + e.partId + " " + e.paletteId;
                    return t
                }
                getCustomData(t) {
                    let e = [];
                    if (t) {
                        const s = t.split(" "),
                            i = this._headOnly ? 1 : 0,
                            n = 4 + i;
                        if (s.length > n) {
                            const t = parseInt(s[3 + i]);
                            e = s.slice(n, n + 3 * t)
                        }
                    }
                    return e
                }
                getCustomLayerIds(t) {
                    const e = [];
                    let s = 0;
                    for (; s < t.length;) e.push(parseInt(t[s + 0])), s += 3;
                    return e
                }
                getCustomPartIds(t) {
                    const e = [];
                    let s = 0;
                    for (; s < t.length;) e.push(parseInt(t[s + 1])), s += 3;
                    return e
                }
                getCustomPaletteIds(t) {
                    const e = [];
                    let s = 0;
                    for (; s < t.length;) e.push(parseInt(t[s + 2])), s += 3;
                    return e
                }
                getTypeId(t) {
                    if (t) {
                        const e = t.split(" ");
                        if (e.length >= 1) return parseInt(e[0])
                    }
                    return 0
                }
                getPaletteId(t) {
                    if (t) {
                        const e = t.split(" ");
                        if (e.length >= 2) return parseInt(e[1])
                    }
                    return 0
                }
                getColor(t) {
                    if (t) {
                        const e = t.split(" ");
                        if (e.length >= 3) return parseInt(e[2], 16)
                    }
                    return 16777215
                }
                getHeadOnly(t) {
                    if (t) {
                        const e = t.split(" ");
                        if (e.length >= 4) return "head" === e[3]
                    }
                    return !1
                }
            }
            let Sl = (() => {
                    class t {}
                    return t.HOTEL_VIEW = "hotel_view", t.HOME_ROOM = "home_room", t.NAVIGATOR = "navigator", t.CATALOG = "catalog", t.INVENTORY = "inventory", t.ME_MENU = "me_menu", t.FRIEND_LIST = "friendlist", t
                })(),
                Il = (() => {
                    class t extends o {
                        constructor(t) {
                            super(t)
                        }
                        get iconId() {
                            return this._iconId
                        }
                        set iconId(t) {
                            this._iconId = t
                        }
                        get iconName() {
                            return this._iconName
                        }
                        set iconName(t) {
                            this._iconName = t
                        }
                    }
                    return t.TOOLBAR_CLICK = "NTE_TOOLBAR_CLICK", t.SELECT_OWN_AVATAR = "NTE_SELECT_OWN_AVATAR", t
                })(),
                Rl = (() => {
                    class t extends Il {
                        constructor(e, s, i) {
                            super(t.ANIMATE_ICON), this._image = e, this._x = s, this._y = i
                        }
                        get image() {
                            return this._image
                        }
                        get x() {
                            return this._x
                        }
                        get y() {
                            return this._y
                        }
                    }
                    return t.ANIMATE_ICON = "NTAIE_ANIMATE_ICON", t
                })(),
                vl = (() => {
                    class t extends o {
                        constructor(e, s) {
                            super(t.IMAGE_READY), this._badgeId = e, this._image = s
                        }
                        get badgeId() {
                            return this._badgeId
                        }
                        get image() {
                            return this._image
                        }
                    }
                    return t.IMAGE_READY = "BIME_BADGE_IMAGE_READY", t
                })(),
                Tl = (() => {
                    class t extends o {
                        constructor(t, e, s = !0) {
                            super(t), this._session = e, this._openLandingView = s
                        }
                        get session() {
                            return this._session
                        }
                        get openLandingView() {
                            return this._openLandingView
                        }
                    }
                    return t.CREATED = "RSE_CREATED", t.STARTED = "RSE_STARTED", t.ENDED = "RSE_ENDED", t.ROOM_DATA = "RSE_ROOM_DATA", t
                })(),
                Ol = (() => {
                    class t {
                        static isBuilderClubId(e) {
                            return e >= t.BUILDER_CLUB_FURNI_ID_BASE
                        }
                    }
                    return t.BUILDER_CLUB_FURNI_ID_BASE = 2147418112, t
                })(),
                yl = (() => {
                    class t extends Qh {
                        constructor(e, s, i, n) {
                            super(t.ROOM_COLOR, e), this._color = s, this._Str_21672 = i, this._Str_6930 = n
                        }
                        get color() {
                            return this._color
                        }
                        get _Str_5123() {
                            return this._Str_21672
                        }
                        get _Str_11464() {
                            return this._Str_6930
                        }
                    }
                    return t.ROOM_COLOR = "REE_ROOM_COLOR", t
                })(),
                Al = (() => {
                    class t extends Qh {
                        constructor(t, e, s, i) {
                            super(t, e), this._objectId = s, this._category = i
                        }
                        get objectId() {
                            return this._objectId
                        }
                        get category() {
                            return this._category
                        }
                    }
                    return t.SELECTED = "REOE_SELECTED", t.DESELECTED = "REOE_DESELECTED", t.ADDED = "REOE_ADDED", t.REMOVED = "REOE_REMOVED", t.PLACED = "REOE_PLACED", t.PLACED_ON_USER = "REOE_PLACED_ON_USER", t.CONTENT_UPDATED = "REOE_CONTENT_UPDATED", t.REQUEST_MOVE = "REOE_REQUEST_MOVE", t.REQUEST_ROTATE = "REOE_REQUEST_ROTATE", t.MOUSE_ENTER = "REOE_MOUSE_ENTER", t.MOUSE_LEAVE = "REOE_MOUSE_LEAVE", t
                })(),
                Cl = (() => {
                    class t extends $h {}
                    return t.DICE_OFF = "ROFCAE_DICE_OFF", t.DICE_ACTIVATE = "ROFCAE_DICE_ACTIVATE", t.USE_HABBOWHEEL = "ROFCAE_USE_HABBOWHEEL", t.STICKIE = "ROFCAE_STICKIE", t.ENTER_ONEWAYDOOR = "ROFCAE_ENTER_ONEWAYDOOR", t.SOUND_MACHINE_INIT = "ROFCAE_SOUND_MACHINE_INIT", t.SOUND_MACHINE_START = "ROFCAE_SOUND_MACHINE_START", t.SOUND_MACHINE_STOP = "ROFCAE_SOUND_MACHINE_STOP", t.SOUND_MACHINE_DISPOSE = "ROFCAE_SOUND_MACHINE_DISPOSE", t.JUKEBOX_INIT = "ROFCAE_JUKEBOX_INIT", t.JUKEBOX_START = "ROFCAE_JUKEBOX_START", t.JUKEBOX_MACHINE_STOP = "ROFCAE_JUKEBOX_MACHINE_STOP", t.JUKEBOX_DISPOSE = "ROFCAE_JUKEBOX_DISPOSE", t.MOUSE_BUTTON = "ROFCAE_MOUSE_BUTTON", t.MOUSE_ARROW = "ROFCAE_MOUSE_ARROW", t
                })();
            class Ml extends o {
                constructor(t) {
                    super(t)
                }
            }
            let Ul = (() => {
                class t extends Ml {
                    constructor(t, e) {
                        super(t), this._targetLocation = e
                    }
                    get targetLocation() {
                        return this._targetLocation
                    }
                }
                return t.ROAME_MOVE_TO = "ROAME_MOVE_TO", t
            })();
            class Dl {
                constructor() {
                    this.id = 0, this.data = null, this.image = null
                }
                getImage() {
                    return this.image ? this.image : this.data ? ot.generateImage(this.data) : null
                }
            }
            class Nl extends el {
                constructor() {
                    super(null, null)
                }
            }
            class wl extends Nl {
                constructor(t, e) {
                    super(), this._itemType = t, this._itemName = e
                }
                get itemType() {
                    return this._itemType
                }
                get itemName() {
                    return this._itemName
                }
            }
            class Ll extends Nl {
                constructor(t = 0) {
                    super(), this._numberOfWords = t
                }
                get numberOfWords() {
                    return this._numberOfWords
                }
            }
            class xl extends Nl {
                constructor(t = 0) {
                    super(), this._danceStyle = t
                }
                get danceStyle() {
                    return this._danceStyle
                }
            }
            class Pl extends Nl {
                constructor(t, e = 0) {
                    super(), this._effect = t, this._delayMilliseconds = e
                }
                get effect() {
                    return this._effect
                }
                get delayMilliseconds() {
                    return this._delayMilliseconds
                }
            }
            class Fl extends Nl {
                constructor(t) {
                    super(), this._gainedExperience = t
                }
                get gainedExperience() {
                    return this._gainedExperience
                }
            }
            class Gl extends Nl {
                constructor(t = 0) {
                    super(), this._expressionType = t
                }
                get expressionType() {
                    return this._expressionType
                }
            }
            class Yl extends Nl {
                constructor(t, e = null, s = null, i = !1) {
                    super(), this._figure = t, this._gender = e, this._subType = s, this._isRiding = i
                }
                get figure() {
                    return this._figure
                }
                get gender() {
                    return this._gender
                }
                get subType() {
                    return this._subType
                }
                get isRiding() {
                    return this._isRiding
                }
            }
            class kl extends Nl {
                constructor(t = 0) {
                    super(), this._level = t
                }
                get level() {
                    return this._level
                }
            }
            class Vl extends Nl {
                constructor(t = 0) {
                    super(), this._gesture = t
                }
                get gesture() {
                    return this._gesture
                }
            }
            class Zl extends Nl {
                constructor(t) {
                    super(), this._guideStatus = t
                }
                get guideStatus() {
                    return this._guideStatus
                }
            }
            class jl extends Nl {
                constructor(t = !1) {
                    super(), this._isMuted = t
                }
                get isMuted() {
                    return this._isMuted
                }
            }
            class Bl extends Nl {}
            class Hl extends Nl {
                constructor(t) {
                    super(), this._gesture = t
                }
                get gesture() {
                    return this._gesture
                }
            }
            class Wl extends Nl {
                constructor(t) {
                    super(), this._value = t
                }
                get value() {
                    return this._value
                }
            }
            class zl extends Nl {
                constructor(t) {
                    super(), this._isPlayingGame = t
                }
                get isPlayingGame() {
                    return this._isPlayingGame
                }
            }
            class Kl extends Nl {
                constructor(t, e = "") {
                    super(), this._postureType = t, this._parameter = e
                }
                get postureType() {
                    return this._postureType
                }
                get parameter() {
                    return this._parameter
                }
            }
            class Xl extends Nl {
                constructor(t = 0) {
                    super(), this._signType = t
                }
                get signType() {
                    return this._signType
                }
            }
            class ql extends Nl {
                constructor(t = !1) {
                    super(), this._isSleeping = t
                }
                get isSleeping() {
                    return this._isSleeping
                }
            }
            class Jl extends Nl {
                constructor(t = !1) {
                    super(), this._isTyping = t
                }
                get isTyping() {
                    return this._isTyping
                }
            }
            class Ql extends el {
                constructor(t, e, s, i = !1) {
                    super(t, s), this._targetLocation = e, this._isSlide = i
                }
                get targetLocation() {
                    return this._targetLocation ? this._targetLocation : this.location
                }
                get isSlide() {
                    return this._isSlide
                }
            }
            class $l extends Ql {
                constructor(t, e, s, i, n, r) {
                    super(t, e, s), this._headDirection = i, this._canStandUp = n, this._baseY = r
                }
                get headDirection() {
                    return this._headDirection
                }
                get canStandUp() {
                    return this._canStandUp
                }
                get baseY() {
                    return this._baseY
                }
            }
            class tu extends Nl {
                constructor(t) {
                    super(), this._itemType = t
                }
                get itemType() {
                    return this._itemType
                }
            }
            class eu extends el {
                constructor(t, e, s = NaN) {
                    super(null, null), this._state = t, this._data = e, this._extra = s
                }
                get state() {
                    return this._state
                }
                get data() {
                    return this._data
                }
                get extra() {
                    return this._extra
                }
            }
            let su = (() => {
                class t extends el {
                    constructor(t, e) {
                        super(null, null), this._badgeId = t, this._assetName = e
                    }
                    get badgeId() {
                        return this._badgeId
                    }
                    get assetName() {
                        return this._assetName
                    }
                }
                return t.BADGE_LOADED = "ROGBUM_BADGE_LOADED", t
            })();
            class iu extends el {
                constructor(t, e, s) {
                    super(t, e), this._height = s
                }
                get height() {
                    return this._height
                }
            }
            class nu extends el {
                constructor(t) {
                    super(null, null), this._data = t
                }
                get data() {
                    return this._data
                }
            }
            let ru = (() => {
                    class t extends el {
                        constructor(t, e, s, i) {
                            super(null, null), this._type = t, this._color = e, this._light = s, this._backgroundOnly = i
                        }
                        get type() {
                            return this._type
                        }
                        get color() {
                            return this._color
                        }
                        get light() {
                            return this._light
                        }
                        get backgroundOnly() {
                            return this._backgroundOnly
                        }
                    }
                    return t.BACKGROUND_COLOR = "RORCUM_BACKGROUND_COLOR", t
                })(),
                ou = (() => {
                    class t extends el {
                        constructor(t, e, s = 0, i = 0, n = 0, r = 0) {
                            super(null, null), this._type = t, this._id = e, this._x = s, this._y = i, this._width = n, this._height = r
                        }
                        get type() {
                            return this._type
                        }
                        get id() {
                            return this._id
                        }
                        get x() {
                            return this._x
                        }
                        get y() {
                            return this._y
                        }
                        get width() {
                            return this._width
                        }
                        get height() {
                            return this._height
                        }
                    }
                    return t.ADD = "ORPFHUM_ADD", t.REMOVE = "ORPFHUM_REMOVE", t
                })(),
                au = (() => {
                    class t extends el {
                        constructor(t, e, s = null, i = null, n = "window") {
                            super(null, null), this._type = t, this._maskId = e, this._maskType = s, this._maskLocation = i ? new K(i.x, i.y, i.z) : null, this._maskCategory = n
                        }
                        get type() {
                            return this._type
                        }
                        get maskId() {
                            return this._maskId
                        }
                        get maskType() {
                            return this._maskType
                        }
                        get maskLocation() {
                            return this._maskLocation
                        }
                        get maskCategory() {
                            return this._maskCategory
                        }
                    }
                    return t.ADD_MASK = "RORMUM_ADD_MASK", t._Str_10260 = "RORMUM_ADD_MASK", t.DOOR = "door", t.WINDOW = "window", t.HOLE = "hole", t
                })(),
                cu = (() => {
                    class t extends el {
                        constructor(t, e) {
                            super(null, null), this._type = t, this._value = e
                        }
                        get type() {
                            return this._type
                        }
                        get value() {
                            return this._value
                        }
                    }
                    return t.WALL_THICKNESS = "RORPPUM_WALL_THICKNESS", t.FLOOR_THICKNESS = "RORPVUM_FLOOR_THICKNESS", t
                })(),
                _u = (() => {
                    class t extends el {
                        constructor(t, e) {
                            super(null, null), this._type = t, this._visible = e
                        }
                        get type() {
                            return this._type
                        }
                        get visible() {
                            return this._visible
                        }
                    }
                    return t.WALL_VISIBILITY = "RORPVUM_WALL_VISIBILITY", t.FLOOR_VISIBILITY = "RORPVUM_FLOOR_VISIBILITY", t
                })(),
                hu = (() => {
                    class t extends el {
                        constructor(t, e) {
                            super(null, null), this._type = t, this._value = e
                        }
                        get type() {
                            return this._type
                        }
                        get value() {
                            return this._value
                        }
                    }
                    return t.ROOM_WALL_UPDATE = "RORUM_ROOM_WALL_UPDATE", t.ROOM_FLOOR_UPDATE = "RORUM_ROOM_FLOOR_UPDATE", t.ROOM_LANDSCAPE_UPDATE = "RORUM_ROOM_LANDSCAPE_UPDATE", t
                })(),
                lu = (() => {
                    class t {}
                    return t._Str_16646 = -1, t._Str_9735 = 128, t._Str_9268 = 256, t
                })(),
                uu = (() => {
                    class t {
                        constructor() {
                            this._id = t.SPRITE_COUNTER++, this._name = "", this._type = "", this._spriteType = nl.DEFAULT, this._texture = null, this._container = null, this._width = 0, this._height = 0, this._offsetX = 0, this._offsetY = 0, this._flipH = !1, this._flipV = !1, this._direction = 0, this._alpha = 255, this._blendMode = u.b.NORMAL, this._color = 16777215, this._relativeDepth = 0, this._Str_8253 = !1, this._Str_11397 = "", this._clickHandling = !1, this._visible = !0, this._tag = "", this._posture = null, this._alphaTolerance = lu._Str_9735, this._filters = [], this._updateCounter = 0, this._updateContainer = !1
                        }
                        dispose() {
                            this._texture = null, this._width = 0, this._height = 0
                        }
                        get id() {
                            return this._id
                        }
                        set id(t) {
                            this._id = t
                        }
                        get name() {
                            return this._name
                        }
                        set name(t) {
                            this._name !== t && (this._name = t, this._updateCounter++)
                        }
                        get type() {
                            return this._type
                        }
                        set type(t) {
                            this._type = t
                        }
                        get spriteType() {
                            return this._spriteType
                        }
                        set spriteType(t) {
                            this._spriteType = t
                        }
                        get texture() {
                            return this._texture
                        }
                        set texture(t) {
                            this._texture !== t && (t && (this._width = t.width, this._height = t.height), this._texture = t, this._updateCounter++)
                        }
                        get container() {
                            return this._container
                        }
                        set container(t) {
                            this._container !== t && (this.texture = u.p.EMPTY, t && (this._width = t.width, this._height = t.height), this._container = t, this._updateCounter++, this._updateContainer = !0)
                        }
                        get width() {
                            return this._width
                        }
                        get height() {
                            return this._height
                        }
                        get offsetX() {
                            return this._offsetX
                        }
                        set offsetX(t) {
                            this._offsetX !== t && (this._offsetX = t, this._updateCounter++)
                        }
                        get offsetY() {
                            return this._offsetY
                        }
                        set offsetY(t) {
                            this._offsetY !== t && (this._offsetY = t, this._updateCounter++)
                        }
                        get flipH() {
                            return this._flipH
                        }
                        set flipH(t) {
                            this._flipH !== t && (this._flipH = t, this._updateCounter++)
                        }
                        get flipV() {
                            return this._flipV
                        }
                        set flipV(t) {
                            this._flipV !== t && (this._flipV = t, this._updateCounter++)
                        }
                        get direction() {
                            return this._direction
                        }
                        set direction(t) {
                            this._direction = t
                        }
                        get alpha() {
                            return this._alpha
                        }
                        set alpha(t) {
                            this._alpha !== (t &= 255) && (this._alpha = t, this._updateCounter++)
                        }
                        get blendMode() {
                            return this._blendMode
                        }
                        set blendMode(t) {
                            this._blendMode !== t && (this._blendMode = t, this._updateCounter++)
                        }
                        get color() {
                            return this._color
                        }
                        set color(t) {
                            this._color !== (t &= 16777215) && (this._color = t, this._updateCounter++)
                        }
                        get relativeDepth() {
                            return this._relativeDepth
                        }
                        set relativeDepth(t) {
                            this._relativeDepth !== t && (this._relativeDepth = t, this._updateCounter++)
                        }
                        get _Str_4593() {
                            return this._Str_8253
                        }
                        set _Str_4593(t) {
                            t !== this._Str_8253 && (this._Str_8253 = t, this._updateCounter++)
                        }
                        get _Str_3582() {
                            return this._Str_11397
                        }
                        set _Str_3582(t) {
                            this._Str_11397 = t
                        }
                        get clickHandling() {
                            return this._clickHandling
                        }
                        set clickHandling(t) {
                            this._clickHandling = t
                        }
                        get visible() {
                            return this._visible
                        }
                        set visible(t) {
                            this._visible !== t && (this._visible = t, this._updateCounter++)
                        }
                        get tag() {
                            return this._tag
                        }
                        set tag(t) {
                            this._tag !== t && (this._tag = t, this._updateCounter++)
                        }
                        get posture() {
                            return this._posture
                        }
                        set posture(t) {
                            this._posture !== t && (this._posture = t, this._updateCounter++)
                        }
                        get alphaTolerance() {
                            return this._alphaTolerance
                        }
                        set alphaTolerance(t) {
                            this._alphaTolerance !== t && (this._alphaTolerance = t, this._updateCounter++)
                        }
                        get filters() {
                            return this._filters
                        }
                        set filters(t) {
                            this._filters = t, this._updateCounter++
                        }
                        get updateCounter() {
                            return this._updateCounter
                        }
                        get updateContainer() {
                            return this._updateContainer
                        }
                        set updateContainer(t) {
                            this._updateContainer = t
                        }
                    }
                    return t.SPRITE_COUNTER = 0, t
                })(),
                du = (() => {
                    class t {
                        constructor() {
                            this._id = t.VISUALIZATION_COUNTER++, this._object = null, this._asset = null, this._sprites = [], this._scale = -1, this._updateObjectCounter = -1, this._updateModelCounter = -1, this._updateSpriteCounter = -1
                        }
                        initialize(t) {
                            return !1
                        }
                        update(t, e, s, i) {}
                        reset() {
                            this._scale = -1
                        }
                        dispose() {
                            if (this._sprites) {
                                for (; this._sprites.length;) {
                                    const t = this._sprites[0];
                                    t && t.dispose(), this._sprites.pop()
                                }
                                this._sprites = null
                            }
                            this._object = null, this._asset = null
                        }
                        getSprite(t) {
                            return t >= 0 && t < this._sprites.length ? this._sprites[t] : null
                        }
                        getSpriteList() {
                            return null
                        }
                        createSprite() {
                            return this.createSpriteAtIndex(this._sprites.length)
                        }
                        createSpriteAtIndex(t) {
                            const e = new uu;
                            return t >= this._sprites.length ? this._sprites.push(e) : this._sprites.splice(t, 0, e), e
                        }
                        setSpriteCount(t) {
                            for (; this._sprites.length > t;) {
                                const t = this._sprites[this._sprites.length - 1];
                                t && t.dispose(), this._sprites.pop()
                            }
                            for (; this._sprites.length < t;) this._sprites.push(new uu)
                        }
                        get image() {
                            return this.getImage(0, -1)
                        }
                        getImage(t, e) {
                            const s = this.getBoundingRectangle();
                            if (s.width * s.height == 0) return null;
                            const i = this.totalSprites,
                                n = [];
                            let r = 0;
                            for (; r < i;) {
                                const t = this.getSprite(r);
                                t && t.visible && t.texture && n.push(t), r++
                            }
                            n.sort((t, e) => e.relativeDepth - t.relativeDepth);
                            const o = new u.d;
                            for (r = 0; r < n.length;) {
                                const t = n[r],
                                    e = t.texture;
                                if (e) {
                                    const s = u.n.from(e);
                                    s.alpha = t.alpha / 255, s.tint = t.color, s.x = t.offsetX, s.y = t.offsetY, s.blendMode = t.blendMode, s.filters = t.filters, t.flipH && (s.scale.x = -1), t.flipV && (s.scale.y = -1), o.addChild(s)
                                }
                                r++
                            }
                            return ot.generateTexture(o) || null
                        }
                        getBoundingRectangle() {
                            const t = this.totalSprites,
                                e = new u.k;
                            let s = 0;
                            for (; s < t;) {
                                const t = this.getSprite(s);
                                if (t && t.texture && t.visible) {
                                    const i = new u.j(t.flipH ? -t.width + t.offsetX : t.offsetX, t.flipV ? -t.height + t.offsetY : t.offsetY);
                                    0 === s ? (e.x = i.x, e.y = i.y, e.width = t.width, e.height = t.height) : (i.x < e.x && (e.x = i.x), i.y < e.y && (e.y = i.y), i.x + t.width > e.right && (e.width = i.x + t.width - e.x), i.y + t.height > e.bottom && (e.height = i.y + t.height - e.y))
                                }
                                s++
                            }
                            return e
                        }
                        get instanceId() {
                            return this._id
                        }
                        get object() {
                            return this._object
                        }
                        set object(t) {
                            this._object = t
                        }
                        get asset() {
                            return this._asset
                        }
                        set asset(t) {
                            this._asset && this._asset.removeReference(), this._asset = t, this._asset && this._asset.addReference()
                        }
                        get sprites() {
                            return this._sprites
                        }
                        get totalSprites() {
                            return this._sprites.length
                        }
                        get updateObjectCounter() {
                            return this._updateObjectCounter
                        }
                        set updateObjectCounter(t) {
                            this._updateObjectCounter = t
                        }
                        get updateModelCounter() {
                            return this._updateModelCounter
                        }
                        set updateModelCounter(t) {
                            this._updateModelCounter = t
                        }
                        get updateSpriteCounter() {
                            return this._updateSpriteCounter
                        }
                        set updateSpriteCounter(t) {
                            this._updateSpriteCounter = t
                        }
                    }
                    return t.VISUALIZATION_COUNTER = 0, t
                })();
            class gu {
                constructor(t, e, s) {
                    this._id = t, this._type = e, this._visualization = s
                }
                dispose() {
                    this._visualization = null
                }
                update(t, e) {}
                animate(t) {
                    return !1
                }
                get id() {
                    return this._id
                }
                get type() {
                    return this._type
                }
                get visualization() {
                    return this._visualization
                }
            }
            let mu = (() => {
                    class t extends gu {
                        constructor(t, e, s) {
                            super(t, e, s), this._asset = null, this._startTime = cp.instance.time, this._delta = 0, this._offsetY = 0, this._scale = 0, this._state = 0
                        }
                        update(t, e) {
                            if (!t) return;
                            this._scale = e;
                            let s = 64,
                                i = 0;
                            if (e < 48 ? (this._asset = this.visualization.getAvatarRenderAsset("user_blowkiss_small"), i = 90 === this.visualization.angle || 270 === this.visualization.angle ? 0 : 135 === this.visualization.angle || 180 === this.visualization.angle || 225 === this.visualization.angle ? 6 : -6, this._offsetY = -38, s = 32) : (this._asset = this.visualization.getAvatarRenderAsset("user_blowkiss"), i = 90 === this.visualization.angle || 270 === this.visualization.angle ? -3 : 135 === this.visualization.angle || 180 === this.visualization.angle || 225 === this.visualization.angle ? 22 : -30, this._offsetY = -70), "sit" === this.visualization.posture ? this._offsetY += s / 2 : "lay" === this.visualization.posture && (this._offsetY += s), this._asset) {
                                t.texture = this._asset, t.offsetX = i, t.offsetY = this._offsetY, t.relativeDepth = -.02, t.alpha = 0;
                                const e = this._delta;
                                this.animate(t), this._delta = e
                            }
                        }
                        animate(e) {
                            if (!e) return !1;
                            if (this._asset && (e.texture = this._asset), this._state === t.STATE_DELAY) return !(cp.instance.time - this._startTime < t.DELAY_BEFORE_ANIMATION || (this._state = t.STATE_FADE_IN, e.alpha = 0, e.visible = !0, this._delta = 0, 0));
                            if (this._state === t.STATE_FADE_IN) return this._delta += .1, e.offsetY = this._offsetY, e.alpha = 255 * Math.pow(this._delta, .9), this._delta >= 1 && (e.alpha = 255, this._delta = 0, this._state = t.STATE_FLOAT), !0;
                            if (this._state === t.STATE_FLOAT) {
                                const s = Math.pow(this._delta, .9);
                                return this._delta += .05, e.offsetY = this._offsetY + (this._delta < 1 ? s : 1) * (this._scale < 48 ? -30 : -40), e.alpha = 255 * (1 - s), e.alpha <= 0 && (e.visible = !1, this._state = t.STATE_COMPLETE), !0
                            }
                            return !1
                        }
                    }
                    return t.DELAY_BEFORE_ANIMATION = 300, t.STATE_DELAY = 0, t.STATE_FADE_IN = 1, t.STATE_FLOAT = 2, t.STATE_COMPLETE = 3, t
                })(),
                pu = (() => {
                    class t {
                        static getExpressionAddition(t, e, s) {
                            switch (e) {
                                case this.BLOW:
                                    return new mu(t, this.BLOW, s);
                                default:
                                    return new gu(t, e, s)
                            }
                        }
                    }
                    return t.WAVE = 1, t.BLOW = 2, t.LAUGH = 3, t.CRY = 4, t.IDLE = 5, t
                })(),
                bu = (() => {
                    class t {
                        constructor(t, e) {
                            this._id = t, this._visualization = e, this._asset = null, this._startTime = cp.instance.time, this._offsetY = 0, this._scale = 0, this._state = 0
                        }
                        dispose() {
                            this._visualization = null, this._asset = null
                        }
                        getSpriteAssetName(t) {
                            let e = "left";
                            return 135 !== this._visualization.angle && 180 !== this._visualization.angle && 225 !== this._visualization.angle && 270 !== this._visualization.angle || (e = "right"), "user_idle_" + e + "_" + t + (this._scale < 48 ? "_small" : "")
                        }
                        update(e, s) {
                            if (!e) return;
                            this._scale = s, this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(this._state === t.STATE_FRAME_A ? 1 : 2));
                            let i = 64,
                                n = 0;
                            s < 48 ? (n = 135 === this._visualization.angle || 180 === this._visualization.angle || 225 === this._visualization.angle || 270 === this._visualization.angle ? 10 : -16, this._offsetY = -38, i = 32) : (n = 135 === this._visualization.angle || 180 === this._visualization.angle || 225 === this._visualization.angle || 270 === this._visualization.angle ? 22 : -30, this._offsetY = -70), "sit" === this._visualization.posture ? this._offsetY += i / 2 : "lay" === this._visualization.posture && (this._offsetY += i - .3 * i), this._asset && (e.texture = this._asset, e.offsetX = n, e.offsetY = this._offsetY, e.relativeDepth = -.02, e.alpha = 0)
                        }
                        animate(e) {
                            if (!e) return !1;
                            const s = cp.instance.time;
                            return this._state === t.STATE_DELAY && s - this._startTime >= t.DELAY_BEFORE_ANIMATION && (this._state = t.STATE_FRAME_A, this._startTime = s, this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(1))), this._state === t.STATE_FRAME_A && s - this._startTime >= t.DELAY_PER_FRAME && (this._state = t.STATE_FRAME_B, this._startTime = s, this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(2))), this._state === t.STATE_FRAME_B && s - this._startTime >= t.DELAY_PER_FRAME && (this._state = t.STATE_FRAME_A, this._startTime = s, this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(1))), this._asset ? (e.texture = this._asset, e.alpha = 255, e.visible = !0) : e.visible = !1, !1
                        }
                        get id() {
                            return this._id
                        }
                    }
                    return t.DELAY_BEFORE_ANIMATION = 2e3, t.DELAY_PER_FRAME = 2e3, t.STATE_DELAY = 0, t.STATE_FRAME_A = 1, t.STATE_FRAME_B = 2, t
                })();
            class Eu {
                constructor(t, e, s) {
                    this._id = t, this._visualization = s, this._asset = null, this._scale = 0, this._number = e, this._numberValueFadeDirection = 0, this._numberValueMoving = !1, this._numberValueMoveCounter = 0
                }
                dispose() {
                    this._visualization = null, this._asset = null
                }
                update(t, e) {
                    if (!t) return;
                    this._scale = e;
                    let s = 64,
                        i = 0,
                        n = 0;
                    this._number > 0 ? (e < 48 ? (this._asset = this._visualization.getAvatarRenderAsset("number_" + this._number + "_small"), s = 32, i = -6, n = -52) : (this._asset = this._visualization.getAvatarRenderAsset("number_" + this._number), i = -8, n = -105), "sit" === this._visualization.posture ? n += s / 2 : "lay" === this._visualization.posture && (n += e), this._asset ? (t.visible = !0, t.texture = this._asset, t.offsetX = i, t.offsetY = n, t.relativeDepth = -.01, t.alpha = 0, this._numberValueFadeDirection = 1, this._numberValueMoving = !0, this._numberValueMoveCounter = 0) : t.visible = !1) : t.visible && (this._numberValueFadeDirection = -1)
                }
                animate(t) {
                    if (!t) return !1;
                    this._asset && (t.texture = this._asset);
                    let e = t.alpha,
                        s = !1;
                    if (this._numberValueMoving) {
                        if (this._numberValueMoveCounter++, this._numberValueMoveCounter < 10) return !1;
                        if (this._numberValueFadeDirection < 0) t.offsetY -= this._scale < 48 ? 2 : 4;
                        else {
                            let e = 4;
                            this._scale < 48 && (e = 8), this._numberValueMoveCounter % e || (t.offsetY--, s = !0)
                        }
                    }
                    return this._numberValueFadeDirection > 0 ? (e < 255 && (e += 32), e >= 255 && (e = 255, this._numberValueFadeDirection = 0), t.alpha = e, !0) : this._numberValueFadeDirection < 0 ? (e >= 0 && (e -= 32), e <= 0 && (this._numberValueFadeDirection = 0, this._numberValueMoving = !1, e = 0, t.visible = !1), t.alpha = e, !0) : s
                }
                get id() {
                    return this._id
                }
            }
            class fu {
                constructor(t, e) {
                    this._id = t, this._visualization = e, this._asset = null, this._relativeDepth = 0
                }
                dispose() {
                    this._visualization = null, this._asset = null
                }
                update(t, e) {
                    if (!t) return;
                    t.visible = !0, t.relativeDepth = this._relativeDepth, t.alpha = 255;
                    let s = 64,
                        i = 0,
                        n = 0;
                    e < 48 ? (this._asset = this._visualization.getAvatarRenderAsset("user_typing_small"), i = 3, n = -42, s = 32) : (this._asset = this._visualization.getAvatarRenderAsset("user_typing"), i = 14, n = -83), "sit" === this._visualization.posture ? n += s / 2 : "lay" === this._visualization.posture && (n += e), this._asset && (t.texture = this._asset, t.offsetX = i, t.offsetY = n, t.relativeDepth = -.02)
                }
                animate(t) {
                    return this._asset && t && (t.texture = this._asset), !1
                }
                get id() {
                    return this._id
                }
                get relativeDepth() {
                    return this._relativeDepth
                }
                set relativeDepth(t) {
                    this._relativeDepth = t
                }
            }
            class Su extends d {
                constructor() {
                    super()
                }
                initialize(t) {
                    return !0
                }
                onDispose() {
                    this._avatarRenderer = null
                }
                createAvatarImage(t, e, s = null, i = null, n = null) {
                    let r = null;
                    return r = this._avatarRenderer.createAvatarImage(t, e > 48 ? dt.LARGE : dt.SMALL, s, i, n), r
                }
                getAvatarRendererAsset(t) {
                    return this._avatarRenderer ? this._avatarRenderer.assets.getTexture(t) : null
                }
                get avatarManager() {
                    return this._avatarRenderer
                }
                set avatarManager(t) {
                    this._avatarRenderer = t
                }
                get layerCount() {
                    return 0
                }
            }
            let Iu = (() => {
                    class t extends du {
                        constructor() {
                            super(), this._data = null, this._avatarImage = null, this._cachedAvatars = new x, this._cachedAvatarEffects = new x, this._shadow = null, this._lastUpdate = -1e3, this._disposed = !1, this._figure = null, this._gender = null, this._direction = -1, this._headDirection = -1, this._posture = "", this._postureParameter = "", this._canStandUp = !1, this._postureOffset = 0, this._verticalOffset = 0, this._angle = -1, this._headAngle = -1, this._talk = !1, this._expression = 0, this._sleep = !1, this._blink = !1, this._gesture = 0, this._sign = -1, this._highlightEnabled = !1, this._highlight = !1, this._dance = 0, this._effect = 0, this._carryObject = 0, this._useObject = 0, this._ownUser = !1, this._Str_8935 = !1, this._Str_17860 = !1, this._Str_1222 = !1, this._Str_16697 = 2, this._Str_12697 = 0, this._Str_14276 = 0, this._isAvatarReady = !1, this._needsUpdate = !1, this._geometryUpdateCounter = -1, this._additions = new Map
                        }
                        initialize(e) {
                            return e instanceof Su && (this._data = e, this.setSpriteCount(t._Str_11587), super.initialize(e), !0)
                        }
                        dispose() {
                            this._disposed || (super.dispose(), this._avatarImage && this._avatarImage.dispose(), this._shadow = null, this._disposed = !0)
                        }
                        update(e, s, i, n) {
                            if (!this.object || !e || !this._data) return;
                            if (s < this._lastUpdate + t.UPDATE_TIME_INCREASER) return;
                            this._lastUpdate += t.UPDATE_TIME_INCREASER, this._lastUpdate + t.UPDATE_TIME_INCREASER < s && (this._lastUpdate = s - t.UPDATE_TIME_INCREASER);
                            const r = e.scale,
                                o = this._effect;
                            let a = !1,
                                c = !1,
                                _ = !1,
                                h = !1;
                            const l = this.updateModel(this.object.model, r);
                            if (l || r !== this._scale || !this._avatarImage) {
                                if (r !== this._scale && (a = !0, this.updateScale(r)), o !== this._effect && (c = !0), a || !this._avatarImage || c) {
                                    if (this._avatarImage = this.createAvatarImage(r, this._effect), !this._avatarImage) return;
                                    _ = !0;
                                    const e = this.getSprite(t.AVATAR_LAYER_ID);
                                    e && this._avatarImage && this._avatarImage.isPlaceholder() ? e.alpha = 150 : e && (e.alpha = 255)
                                }
                                if (!this._avatarImage) return;
                                if (c && this._avatarImage.animationHasResetOnToggle && this._avatarImage.resetAnimationFrameCounter(), this.updateShadow(r), h = this.updateObject(this.object, e, i, !0), this.processActionsForAvatar(this._avatarImage), this._additions) {
                                    let t = this._Str_16697;
                                    for (const e of this._additions.values()) e.update(this.getSprite(t++), r)
                                }
                                this._scale = r
                            } else h = this.updateObject(this.object, e, i);
                            if (this._additions) {
                                let t = this._Str_16697;
                                for (const e of this._additions.values()) e.animate(this.getSprite(t++)) && this.updateSpriteCounter++
                            }
                            const d = h || l || a,
                                g = (this._Str_1222 || this._Str_12697 > 0) && i;
                            if (d && (this._Str_12697 = t._Str_14491), d || g) {
                                if (this.updateSpriteCounter++, this._Str_12697--, this._Str_14276--, !(this._Str_14276 <= 0 || a || l || _)) return;
                                this._avatarImage.updateAnimationByFrames(1), this._Str_14276 = t._Str_14491;
                                let e = this._avatarImage.getCanvasOffsets();
                                (!e || e.length < 3) && (e = t._Str_18338);
                                const s = this.getSprite(t._Str_9540);
                                if (s) {
                                    const i = 1 === this.object.model.getValue(j.FIGURE_HIGHLIGHT_ENABLE) && 1 === this.object.model.getValue(j.FIGURE_HIGHLIGHT),
                                        n = this._avatarImage.getImage(It.FULL, i);
                                    n && (s.texture = n, i || (s.filters = [])), s.texture && (s.offsetX = -1 * r / 2 + e[0] - (s.texture.width - r) / 2, s.offsetY = r / 4 - s.texture.height + e[1] + this._postureOffset), s.relativeDepth = this._Str_8935 ? this._Str_17860 ? -.5 : t._Str_9235 + e[2] : t._Str_11358 + e[2], this._ownUser ? (s.relativeDepth -= t._Str_17708, s.spriteType = nl._Str_10494) : s.spriteType = nl._Str_11629
                                }
                                const i = this.getAddition(t.TYPING_BUBBLE_ID);
                                i && (i.relativeDepth = this._Str_8935 ? t._Str_9235 - .01 + e[2] : t._Str_11358 - .01 + e[2]), this._Str_1222 = this._avatarImage.isAnimating();
                                let n = t._Str_11587;
                                const o = this._avatarImage.getDirection();
                                for (const a of this._avatarImage.getSprites())
                                    if (a.id === t.AVATAR) {
                                        const e = this.getSprite(t._Str_9540);
                                        if (e) {
                                            const t = this._avatarImage.getLayerData(a);
                                            let s = a._Str_809(o),
                                                i = a._Str_739(o);
                                            t && (s += t.dx, i += t.dy), r < 48 && (s /= 2, i /= 2), this._canStandUp || (e.offsetX += s, e.offsetY += i)
                                        }
                                    } else {
                                        const e = this.getSprite(n);
                                        if (e) {
                                            e.alphaTolerance = lu._Str_9268, e.visible = !0;
                                            const s = this._avatarImage.getLayerData(a);
                                            let i = 0,
                                                n = a._Str_809(o),
                                                c = a._Str_739(o);
                                            const _ = a._Str_839(o);
                                            let h = 0;
                                            a._Str_949 && (h = o), s && (i = s._Str_891, n += s.dx, c += s.dy, h += s.dd), r < 48 && (n /= 2, c /= 2), h < 0 ? h += 8 : h > 7 && (h -= 8);
                                            const l = this._avatarImage.getScale() + "_" + a.member + "_" + h + "_" + i,
                                                d = this._avatarImage.getAsset(l);
                                            if (!d) continue;
                                            e.texture = d.texture, e.offsetX = d.offsetX - r / 2 + n, e.offsetY = d.offsetY + c, e.flipH = d.flipH, e.offsetY += a._Str_767 ? this._verticalOffset * r / (2 * t._Str_12370) : this._postureOffset, e.relativeDepth = this._Str_8935 ? t._Str_9235 - .001 * this.totalSprites * _ : t._Str_11358 - .001 * this.totalSprites * _, e.blendMode = 33 === a.ink ? u.b.ADD : u.b.NORMAL
                                        }
                                        n++
                                    }
                            }
                        }
                        createAvatarImage(e, s) {
                            let i = null,
                                n = "avatarImage" + e.toString();
                            if (s ? (n += "-" + s, i = this._cachedAvatarEffects.getValue(n)) : i = this._cachedAvatars.getValue(n), !i && (i = this._data.createAvatarImage(this._figure, e, this._gender, this, this), i))
                                if (s) {
                                    if (this._cachedAvatarEffects.length >= t.MAX_EFFECT_CACHE) {
                                        const t = this._cachedAvatarEffects.remove(this._cachedAvatarEffects.getKey(0));
                                        t && t.dispose()
                                    }
                                    this._cachedAvatarEffects.add(n, i)
                                } else this._cachedAvatars.add(n, i);
                            return i
                        }
                        updateObject(t, e, s, i = !1) {
                            if (!i && this.updateObjectCounter === t.updateCounter && this._geometryUpdateCounter === e.updateId) return !1;
                            let n = t.getDirection().x - e.direction.x,
                                r = this._headDirection - e.direction.x;
                            return "float" === this._posture && (r = n), n = (n % 360 + 360) % 360, r = (r % 360 + 360) % 360, "sit" === this._posture && this._canStandUp && (n -= n % 90 - 45, r -= r % 90 - 45), (n !== this._angle || i) && (s = !0, this._angle = n, n -= 112.5, n = (n + 360) % 360, this._avatarImage.setDirectionAngle(It.FULL, n)), (r !== this._headAngle || i) && (s = !0, this._headAngle = r, this._headAngle !== this._angle && (r -= 112.5, r = (r + 360) % 360, this._avatarImage.setDirectionAngle(It.HEAD, r))), this._geometryUpdateCounter = e.updateId, this.updateObjectCounter = this.object.updateCounter, s
                        }
                        updateModel(e, s) {
                            if (!e) return !1;
                            if (this.updateModelCounter === e.updateCounter) return !1;
                            let i = !1;
                            const n = e.getValue(j.FIGURE_TALK) > 0;
                            n !== this._talk && (this._talk = n, i = !0);
                            const r = e.getValue(j.FIGURE_EXPRESSION);
                            r !== this._expression && (this._expression = r, i = !0);
                            const o = e.getValue(j.FIGURE_SLEEP) > 0;
                            o !== this._sleep && (this._sleep = o, i = !0);
                            const a = e.getValue(j.FIGURE_BLINK) > 0;
                            a !== this._blink && (this._blink = a, i = !0);
                            const c = e.getValue(j.FIGURE_GESTURE) || 0;
                            c !== this._gesture && (this._gesture = c, i = !0);
                            const _ = e.getValue(j.FIGURE_POSTURE);
                            _ !== this._posture && (this._posture = _, i = !0);
                            const h = e.getValue(j.FIGURE_POSTURE_PARAMETER);
                            h !== this._postureParameter && (this._postureParameter = h, i = !0);
                            const l = e.getValue(j.FIGURE_CAN_STAND_UP);
                            l !== this._canStandUp && (this._canStandUp = l, i = !0);
                            const u = e.getValue(j.FIGURE_VERTICAL_OFFSET) * t.OFFSET_MULTIPLIER;
                            u !== this._verticalOffset && (this._verticalOffset = u, i = !0);
                            const d = e.getValue(j.FIGURE_DANCE) || 0;
                            d !== this._dance && (this._dance = d, i = !0);
                            const g = e.getValue(j.FIGURE_EFFECT) || 0;
                            g !== this._effect && (this._effect = g, i = !0);
                            const m = e.getValue(j.FIGURE_CARRY_OBJECT) || 0;
                            m !== this._carryObject && (this._carryObject = m, i = !0);
                            const p = e.getValue(j.FIGURE_USE_OBJECT) || 0;
                            p !== this._useObject && (this._useObject = p, i = !0);
                            const b = e.getValue(j.HEAD_DIRECTION);
                            b !== this._headDirection && (this._headDirection = b, i = !0), this._carryObject > 0 && p > 0 ? this._useObject !== this._carryObject && (this._useObject = this._carryObject, i = !0) : 0 !== this._useObject && (this._useObject = 0, i = !0);
                            let E = this.getAddition(t.FLOATING_IDLE_Z_ID);
                            this._sleep ? (E || (E = this.addAddition(new bu(t.FLOATING_IDLE_Z_ID, this))), i = !0) : E && this.removeAddition(t.FLOATING_IDLE_Z_ID);
                            const f = e.getValue(j.FIGURE_IS_TYPING) > 0;
                            let S = this.getAddition(t.TYPING_BUBBLE_ID);
                            f ? (S || (S = this.addAddition(new fu(t.TYPING_BUBBLE_ID, this))), i = !0) : S && this.removeAddition(t.TYPING_BUBBLE_ID);
                            const I = e.getValue(j.FIGURE_NUMBER_VALUE);
                            let R = this.getAddition(t.NUMBER_BUBBLE_ID);
                            I > 0 ? (R || (R = this.addAddition(new Eu(t.NUMBER_BUBBLE_ID, I, this))), i = !0) : R && this.removeAddition(t.NUMBER_BUBBLE_ID);
                            let v = this.getAddition(t.EXPRESSION_ID);
                            this._expression > 0 ? v || (v = pu.getExpressionAddition(t.EXPRESSION_ID, this._expression, this), v && this.addAddition(v)) : v && this.removeAddition(t.EXPRESSION_ID), this.updateScale(s);
                            const T = e.getValue(j.GENDER);
                            T !== this._gender && (this._gender = T, i = !0), this.updateFigure(e.getValue(j.FIGURE)) && (i = !0);
                            let O = e.getValue(j.FIGURE_SIGN);
                            null === O && (O = -1), this._sign !== O && (this._sign = O, i = !0);
                            const y = e.getValue(j.FIGURE_HIGHLIGHT_ENABLE) > 0;
                            if (y !== this._highlightEnabled && (this._highlightEnabled = y, i = !0), this._highlightEnabled) {
                                const t = e.getValue(j.FIGURE_HIGHLIGHT) > 0;
                                t !== this._highlight && (this._highlight = t, i = !0)
                            }
                            const A = e.getValue(j.OWN_USER) > 0;
                            return A !== this._ownUser && (this._ownUser = A, i = !0), this.updateModelCounter = e.updateCounter, i
                        }
                        setDirection(t) {
                            this._direction !== t && (this._direction = t, this._needsUpdate = !0)
                        }
                        updateScale(t) {
                            t < 48 && (this._blink = !1), this._postureOffset = "sit" === this._posture || "lay" === this._posture ? t / 2 : 0, this._Str_17860 = !1, this._Str_8935 = !1, "lay" === this._posture && (this._Str_8935 = !0, parseInt(this._postureParameter) < 0 && (this._Str_17860 = !0))
                        }
                        processActionsForAvatar(e) {
                            if (!e) return;
                            if (e.initActionAppends(), e.appendAction(St.POSTURE, this._posture, this._postureParameter), this._gesture > 0 && this._avatarImage.appendAction(St.GESTURE, St.getGesture(this._gesture)), this._dance > 0 && this._avatarImage.appendAction(St.DANCE, this._dance), this._sign > -1 && this._avatarImage.appendAction(St.SIGN, this._sign), this._carryObject > 0 && this._avatarImage.appendAction(St.CARRY_OBJECT, this._carryObject), this._useObject > 0 && this._avatarImage.appendAction(St.USE_OBJECT, this._useObject), this._talk && this._avatarImage.appendAction(St.TALK), (this._sleep || this._blink) && this._avatarImage.appendAction(St.SLEEP), this._expression > 0) {
                                const t = St.getExpression(this._expression);
                                if ("" !== t) switch (t) {
                                    case St.DANCE:
                                        this._avatarImage.appendAction(St.DANCE, 2);
                                        break;
                                    default:
                                        this._avatarImage.appendAction(t)
                                }
                            }
                            this._effect > 0 && this._avatarImage.appendAction(St.EFFECT, this._effect), e.endActionAppends(), this._Str_1222 = e.isAnimating();
                            let s = t._Str_11587;
                            for (const i of this._avatarImage.getSprites()) i.id !== t.AVATAR && s++;
                            if (s !== this.totalSprites && this.setSpriteCount(s), this._Str_16697 = s, this._additions)
                                for (const t of this._additions.values()) this.createSprite()
                        }
                        updateFigure(t) {
                            return this._figure !== t && (this._figure = t, this.clearAvatar(), !0)
                        }
                        resetFigure(t) {
                            this.clearAvatar()
                        }
                        resetEffect(t) {
                            this.clearAvatar()
                        }
                        clearAvatar() {
                            for (const t of this._cachedAvatars.getValues()) t && t.dispose();
                            for (const t of this._cachedAvatarEffects.getValues()) t && t.dispose();
                            this._cachedAvatars.reset(), this._cachedAvatarEffects.reset(), this._avatarImage = null;
                            const e = this.getSprite(t.AVATAR_LAYER_ID);
                            e && (e.texture = u.p.EMPTY, e.alpha = 255)
                        }
                        getAddition(t) {
                            return this._additions && this._additions.get(t) || null
                        }
                        addAddition(t) {
                            if (!this.getAddition(t.id)) return this._additions.set(t.id, t), t
                        }
                        removeAddition(t) {
                            const e = this.getAddition(t);
                            e && (this._additions.delete(e.id), e.dispose())
                        }
                        updateShadow(e) {
                            this._shadow = null;
                            const s = this.getSprite(t.SHADOW_LAYER_ID);
                            if (!s) return;
                            let i = "mv" === this._posture || "std" === this._posture || "sit" === this._posture && this._canStandUp;
                            if (this._effect === t._Str_17502 && (i = !1), i) {
                                if (s.visible = !0, !this._shadow || e !== this._scale) {
                                    let t = 0,
                                        i = 0;
                                    e < 48 ? (s._Str_3582 = "sh_std_sd_1_0_0", this._shadow = this._avatarImage.getAsset(s._Str_3582), t = -8, i = this._canStandUp ? 6 : -3) : (s._Str_3582 = "h_std_sd_1_0_0", this._shadow = this._avatarImage.getAsset(s._Str_3582), t = -17, i = this._canStandUp ? 10 : -7), this._shadow ? (s.texture = this._shadow.texture, s.offsetX = t, s.offsetY = i, s.alpha = 50, s.relativeDepth = 1) : s.visible = !1
                                }
                            } else this._shadow = null, s.visible = !1
                        }
                        getAvatarRenderAsset(t) {
                            const e = cp.instance.getConfiguration("images.url") + "/additions/" + t + ".png";
                            return this._data ? this._data.getAvatarRendererAsset(e) : null
                        }
                        get direction() {
                            return this._direction
                        }
                        get posture() {
                            return this._posture
                        }
                        get angle() {
                            return this._angle
                        }
                        get disposed() {
                            return this._disposed
                        }
                    }
                    return t.AVATAR = "avatar", t.FLOATING_IDLE_Z_ID = 1, t.TYPING_BUBBLE_ID = 2, t.EXPRESSION_ID = 3, t.NUMBER_BUBBLE_ID = 4, t.OWN_USER_ID = 4, t.UPDATE_TIME_INCREASER = 41, t.OFFSET_MULTIPLIER = 1e3, t.AVATAR_LAYER_ID = 0, t.SHADOW_LAYER_ID = 1, t._Str_17502 = 97, t._Str_11587 = 2, t._Str_14491 = 2, t._Str_18338 = [0, 0, 0], t.MAX_EFFECT_CACHE = 2, t._Str_9540 = 0, t._Str_12370 = 1e3, t._Str_11358 = -.01, t._Str_17708 = .001, t._Str_9235 = -.409, t
                })(),
                Ru = (() => {
                    class t {
                        static allocate(e, s, i, n, r, o, a = -1, c = 0) {
                            const _ = t.POOL.length ? t.POOL.pop() : new t;
                            return n < 1 && (n = 1), r < 0 && (r = t.FRAME_REPEAT_FOREVER), _._id = e, _._x = s || 0, _._y = i || 0, _._repeats = n, _._frameRepeats = r, _._remainingFrameRepeats = r, _._isLastFrame = o, _._isRecycled = !1, a >= 0 ? (_._activeSequence = a, _._activeSequenceOffset = c) : (_._activeSequence = -1, _._activeSequenceOffset = 0), _
                        }
                        get id() {
                            return this._id >= 0 ? this._id : -this._id * Math.random()
                        }
                        get x() {
                            return this._x
                        }
                        get y() {
                            return this._y
                        }
                        get repeats() {
                            return this._repeats
                        }
                        get frameRepeats() {
                            return this._frameRepeats
                        }
                        get isLastFrame() {
                            return this._isLastFrame
                        }
                        get remainingFrameRepeats() {
                            return this._frameRepeats < 0 ? t.FRAME_REPEAT_FOREVER : this._remainingFrameRepeats
                        }
                        set remainingFrameRepeats(t) {
                            t < 0 && (t = 0), this._frameRepeats > 0 && t > this._frameRepeats && (t = this._frameRepeats), this._remainingFrameRepeats = t
                        }
                        get activeSequence() {
                            return this._activeSequence
                        }
                        get activeSequenceOffset() {
                            return this._activeSequenceOffset
                        }
                        recycle() {
                            this._isRecycled || (this._isRecycled = !0, t.POOL.length < t.POOL_SIZE_LIMIT && t.POOL.push(this))
                        }
                    }
                    return t.FRAME_REPEAT_FOREVER = -1, t.SEQUENCE_NOT_DEFINED = -1, t.POOL_SIZE_LIMIT = 3e3, t.POOL = [], t
                })();
            class vu {
                constructor(t, e, s, i, n, r) {
                    this._id = 0, this._x = 0, this._y = 0, this._randomX = 0, this._randomY = 0, this._repeats = 1, this._id = t, this._x = e, this._y = s, this._randomX = i, this._randomY = n, this._repeats = r
                }
                get id() {
                    return this._id
                }
                hasDirectionalOffsets() {
                    return !1
                }
                getX(t) {
                    return this._x
                }
                getY(t) {
                    return this._y
                }
                get x() {
                    return this._x
                }
                get y() {
                    return this._x
                }
                get randomX() {
                    return this._randomX
                }
                get randomY() {
                    return this._randomY
                }
                get repeats() {
                    return this._repeats
                }
            }
            class Tu extends vu {
                constructor(t, e, s, i, n, r, o) {
                    super(t, e, s, i, n, o), this._directionalOffsets = r
                }
                hasDirectionalOffsets() {
                    return null !== this._directionalOffsets
                }
                getX(t) {
                    return this._directionalOffsets ? this._directionalOffsets.getXOffset(t, super.getX(t)) : super.getX(t)
                }
                getY(t) {
                    return this._directionalOffsets ? this._directionalOffsets.getYOffset(t, super.getY(t)) : super.getY(t)
                }
            }
            class Ou {
                constructor(t, e) {
                    this._frames = [], this._frameIndexes = [], this._frameRepeats = [], this._isRandom = e, this._loopCount = t < 1 ? 1 : t
                }
                get isRandom() {
                    return this._isRandom
                }
                get frameCount() {
                    return this._frameIndexes.length * this._loopCount
                }
                dispose() {
                    this._frames = []
                }
                initialize() {
                    let t = this._frameIndexes.length - 1,
                        e = -1,
                        s = 1;
                    for (; t >= 0;) this._frameIndexes[t] === e ? s++ : (e = this._frameIndexes[t], s = 1), this._frameRepeats[t] = s, t--
                }
                addFrame(t, e, s, i, n, r) {
                    let o = 1;
                    if (this._frames.length > 0) {
                        const r = this._frames[this._frames.length - 1];
                        r.id !== t || r.hasDirectionalOffsets() || r.x !== e || r.y !== s || r.randomX !== i || 0 !== i || r.randomY !== n || 0 !== n || (o += r.repeats, this._frames.pop())
                    }
                    const a = r ? new Tu(t, e, s, i, n, r, o) : new vu(t, e, s, i, n, o);
                    this._frames.push(a), this._frameIndexes.push(this._frames.length - 1), this._frameRepeats.push(1)
                }
                getFrame(t) {
                    return !this._frames.length || t < 0 || t >= this.frameCount ? null : this._frames[this._frameIndexes[t % this._frameIndexes.length]]
                }
                getFrameIndex(t) {
                    return t < 0 || t >= this.frameCount ? -1 : (this._isRandom && (t = Math.round(Math.random() * this._frameIndexes.length)) === this._frameIndexes.length && t--, t)
                }
                getRepeats(t) {
                    return t < 0 || t >= this.frameCount ? 0 : this._frameRepeats[t % this._frameRepeats.length]
                }
            }
            class yu {
                constructor(t, e, s) {
                    this._frameSequences = [], this._frameCount = -1, this._loopCount = t < 0 ? 0 : t, this._frameRepeat = e < 1 ? 1 : e, this._isRandom = s
                }
                get frameCount() {
                    return this._frameCount < 0 && this.calculateLength(), this._frameCount
                }
                dispose() {
                    if (this._frameSequences && this._frameSequences.length) {
                        for (const t of this._frameSequences) t && t.dispose();
                        this._frameSequences = []
                    }
                }
                addFrameSequence(t, e) {
                    const s = new Ou(t, e);
                    return this._frameSequences.push(s), s
                }
                calculateLength() {
                    this._frameCount = 0;
                    for (const t of this._frameSequences) t && (this._frameCount += t.frameCount)
                }
                getFrame(t, e) {
                    if (this._frameCount < 1) return null;
                    if (e /= this._frameRepeat, !this._isRandom) {
                        const s = Math.floor(e / this._frameCount);
                        e = Math.floor(e % this._frameCount);
                        let i = !1,
                            n = null;
                        (this._loopCount > 0 && s >= this._loopCount || this._loopCount <= 0 && 1 === this._frameCount) && (e = this._frameCount - 1, i = !0);
                        let r = 0,
                            o = 0;
                        for (; o < this._frameSequences.length;) {
                            if (n = this._frameSequences[o], n) {
                                if (e < r + n.frameCount) break;
                                r += n.frameCount
                            }
                            o++
                        }
                        return this.getFrameFromSpecificSequence(t, n, o, e - r, i)
                    }
                    const s = Math.trunc(this._frameSequences.length * Math.random()),
                        i = this._frameSequences[s];
                    return i.frameCount < 1 ? null : this.getFrameFromSpecificSequence(t, i, s, 0, !1)
                }
                getFrameFromSequence(t, e, s, i) {
                    if (e < 0 || e >= this._frameSequences.length) return null;
                    const n = this._frameSequences[e];
                    return n ? s >= n.frameCount ? this.getFrame(t, i) : this.getFrameFromSpecificSequence(t, n, e, s, !1) : null
                }
                getFrameFromSpecificSequence(t, e, s, i, n) {
                    if (!e) return null;
                    const r = e.getFrameIndex(i),
                        o = e.getFrame(r);
                    if (!o) return null;
                    let a = o.getX(t),
                        c = o.getY(t);
                    const _ = o.randomX,
                        h = o.randomY;
                    let l = o.repeats,
                        u = !1;
                    _ && (a = Math.trunc(a + _ * Math.random())), h && (c = Math.trunc(c + h * Math.random())), l > 1 && (l = e.getRepeats(r));
                    let d = this._frameRepeat * l;
                    return n && (d = Ru.FRAME_REPEAT_FOREVER), this._isRandom || e.isRandom || s === this._frameSequences.length - 1 && i === e.frameCount - 1 && (u = !0), Ru.allocate(o.id, a, c, l, d, u, s, i)
                }
            }
            class Au {
                constructor() {
                    this._offsetX = new Map, this._offsetY = new Map
                }
                getXOffset(t, e) {
                    const s = this._offsetX.get(t);
                    return null == s ? e : s
                }
                getYOffset(t, e) {
                    const s = this._offsetY.get(t);
                    return null == s ? e : s
                }
                setDirection(t, e, s) {
                    this._offsetX.set(t, e), this._offsetY.set(t, s)
                }
            }
            let Cu = (() => {
                class t {
                    constructor() {
                        this._layers = new Map, this._frameCount = -1, this._randomStart = !1, this._immediateChanges = null
                    }
                    static getTransitionToAnimationId(e) {
                        return t.TRANSITION_TO_ANIMATION_OFFSET + e
                    }
                    static getTransitionFromAnimationId(e) {
                        return t.TRANSITION_FROM_ANIMATION_OFFSET + e
                    }
                    static isTransitionToAnimation(e) {
                        return e >= t.TRANSITION_TO_ANIMATION_OFFSET && e < t.TRANSITION_FROM_ANIMATION_OFFSET
                    }
                    static isTransitionFromAnimation(e) {
                        return e >= t.TRANSITION_FROM_ANIMATION_OFFSET
                    }
                    dispose() {
                        for (const t of this._layers.values()) t && t.dispose();
                        this._layers.clear(), this._immediateChanges = null
                    }
                    setImmediateChanges(t) {
                        this._immediateChanges = t
                    }
                    isImmediateChange(t) {
                        return !(!this._immediateChanges || -1 === this._immediateChanges.indexOf(t))
                    }
                    getStartFrame(t) {
                        return this._randomStart ? Math.random() * this._frameCount : 0
                    }
                    initialize(t) {
                        if (this._randomStart = !1, t.layers)
                            for (const e in t.layers) {
                                const s = t.layers[e];
                                if (!s) return !1;
                                const i = parseInt(e);
                                if (!this.addLayer(i, void 0 !== s.loopCount ? s.loopCount : 1, void 0 !== s.frameRepeat ? s.frameRepeat : 1, void 0 !== s.random && 0 !== s.random, s)) return !1
                            }
                        return !0
                    }
                    addLayer(t, e, s, i, n) {
                        const r = new yu(e, s, i);
                        if (n.frameSequences)
                            for (const a in n.frameSequences) {
                                const t = n.frameSequences[a];
                                if (!t) continue;
                                const e = r.addFrameSequence(void 0 !== t.loopCount ? t.loopCount : 1, void 0 !== t.random && 0 !== t.random);
                                if (t.frames)
                                    for (const s in t.frames) {
                                        const i = t.frames[s];
                                        if (!i) return r.dispose(), !1;
                                        e.addFrame(i.id, i.x || 0, i.y || 0, i.randomX || 0, i.randomY || 0, this.readDirectionalOffsets(i))
                                    }
                                e.initialize()
                            }
                        r.calculateLength(), this._layers.set(t, r);
                        const o = r.frameCount;
                        return o > this._frameCount && (this._frameCount = o), !0
                    }
                    readDirectionalOffsets(t) {
                        let e = null;
                        if (t && t.offsets)
                            for (const s in t.offsets) {
                                const i = t.offsets[s];
                                i && (e || (e = new Au), e.setDirection(i.direction, i.x, i.y))
                            }
                        return e
                    }
                    getFrame(t, e, s) {
                        const i = this._layers.get(e);
                        return i ? i.getFrame(t, s) : null
                    }
                    getFrameFromSequence(t, e, s, i, n) {
                        const r = this._layers.get(e);
                        return r ? r.getFrameFromSequence(t, s, i, n) : null
                    }
                }
                return t.TRANSITION_TO_ANIMATION_OFFSET = 1e6, t.TRANSITION_FROM_ANIMATION_OFFSET = 2e6, t.DEFAULT_FRAME_NUMBER = 0, t
            })();
            class Mu {
                constructor() {
                    this._animationId = -1, this._animationAfterTransitionId = 0, this._animationOver = !1, this._frameCounter = 0, this._frames = [], this._lastFramePlayed = [], this._animationPlayed = [], this._layerCount = 0
                }
                get animationOver() {
                    return this._animationOver
                }
                set animationOver(t) {
                    this._animationOver = t
                }
                get frameCounter() {
                    return this._frameCounter
                }
                set frameCounter(t) {
                    this._frameCounter = t
                }
                get animationId() {
                    return this._animationId
                }
                set animationId(t) {
                    t !== this._animationId && (this._animationId = t, this.resetAnimationFrames(!1))
                }
                get animationAfterTransitionId() {
                    return this._animationAfterTransitionId
                }
                set animationAfterTransitionId(t) {
                    this._animationAfterTransitionId = t
                }
                dispose() {
                    this.recycleFrames(), this._frames = null, this._lastFramePlayed = null, this._animationPlayed = null
                }
                setLayerCount(t) {
                    this._layerCount = t, this.resetAnimationFrames()
                }
                resetAnimationFrames(t = !0) {
                    !t && this._frames || (this.recycleFrames(), this._frames = []), this._lastFramePlayed = [], this._animationPlayed = [], this._animationOver = !1, this._frameCounter = 0;
                    let e = 0;
                    for (; e < this._layerCount;) {
                        if (t || this._frames.length <= e) this._frames[e] = null;
                        else {
                            const t = this._frames[e];
                            t && (t.recycle(), this._frames[e] = Ru.allocate(t.id, t.x, t.y, t.repeats, 0, t.isLastFrame))
                        }
                        this._lastFramePlayed[e] = !1, this._animationPlayed[e] = !1, e++
                    }
                }
                recycleFrames() {
                    if (this._frames && this._frames.length)
                        for (const t of this._frames) t && t.recycle()
                }
                getFrame(t) {
                    return t < 0 || t >= this._layerCount ? null : this._frames[t]
                }
                setFrame(t, e) {
                    if (t < 0 || t >= this._layerCount) return;
                    const s = this._frames[t];
                    s && s.recycle(), this._frames[t] = e
                }
                getAnimationPlayed(t) {
                    return t < 0 || t >= this._layerCount || this._animationPlayed[t]
                }
                setAnimationPlayed(t, e) {
                    t < 0 || t >= this._layerCount || (this._animationPlayed[t] = e)
                }
                getLastFramePlayed(t) {
                    return t < 0 || t >= this._layerCount || this._lastFramePlayed[t]
                }
                setLastFramePlayed(t, e) {
                    t < 0 || t >= this._layerCount || (this._lastFramePlayed[t] = e)
                }
            }
            class Uu {
                static hex2int(t) {
                    return parseInt(t, 16)
                }
                static inkToBlendMode(t) {
                    return "ADD" == t || 33 == t ? u.b.ADD : u.b.NORMAL
                }
            }
            let Du = (() => {
                    class t {
                        constructor(t) {
                            this._colors = [], this.createColors(t)
                        }
                        createColors(e) {
                            if (e)
                                for (let s = 0; s < e; s++) this._colors.push(t.DEFAULT_COLOR)
                        }
                        dispose() {
                            this._colors = []
                        }
                        getLayerColor(e) {
                            return this._colors[e] || t.DEFAULT_COLOR
                        }
                        setColorLayer(t, e) {
                            this._colors[t] && (this._colors[t] = e)
                        }
                    }
                    return t.DEFAULT_COLOR = 16777215, t
                })(),
                Nu = (() => {
                    class t {
                        constructor() {
                            this._tag = t.DEFAULT_TAG, this._ink = t.DEFAULT_INK, this._alpha = t.DEFAULT_ALPHA, this._ignoreMouse = t.DEFAULT_IGNORE_MOUSE, this._xOffset = t.DEFAULT_XOFFSET, this._yOffset = t.DEFAULT_YOFFSET, this._zOffset = t.DEFAULT_ZOFFSET
                        }
                        setFromLayer(t) {
                            t && (this._tag = t.tag, this._ink = t.ink, this._alpha = t.alpha, this._ignoreMouse = t.ignoreMouse, this._xOffset = t.xOffset, this._yOffset = t.yOffset, this._zOffset = t.zOffset)
                        }
                        get tag() {
                            return this._tag
                        }
                        set tag(t) {
                            this._tag = t
                        }
                        get ink() {
                            return this._ink
                        }
                        set ink(t) {
                            this._ink = t
                        }
                        get alpha() {
                            return this._alpha
                        }
                        set alpha(t) {
                            this._alpha = t
                        }
                        get ignoreMouse() {
                            return this._ignoreMouse
                        }
                        set ignoreMouse(t) {
                            this._ignoreMouse = t
                        }
                        get xOffset() {
                            return this._xOffset
                        }
                        set xOffset(t) {
                            this._xOffset = t
                        }
                        get yOffset() {
                            return this._yOffset
                        }
                        set yOffset(t) {
                            this._yOffset = t
                        }
                        get zOffset() {
                            return this._zOffset
                        }
                        set zOffset(t) {
                            this._zOffset = t
                        }
                    }
                    return t.DEFAULT_COUNT = 0, t.DEFAULT_DIRECTION = 0, t.DEFAULT_TAG = "", t.DEFAULT_INK = u.b.NORMAL, t.DEFAULT_ALPHA = 255, t.DEFAULT_IGNORE_MOUSE = !1, t.DEFAULT_XOFFSET = 0, t.DEFAULT_YOFFSET = 0, t.DEFAULT_ZOFFSET = 0, t.ADD_INK = u.b.ADD, t.SUBTRACT_INK = u.b.NORMAL, t.DARKEN_INK = u.b.NORMAL, t
                })(),
                wu = (() => {
                    class t {
                        constructor(t) {
                            this._layers = [], this.createLayers(t)
                        }
                        createLayers(t) {
                            if (t)
                                for (let e = 0; e < t; e++) this._layers.push(new Nu)
                        }
                        dispose() {
                            this._layers = []
                        }
                        setFromDirection(t) {
                            if (!t) return;
                            const e = this.layerCount;
                            if (e === t.layerCount)
                                for (let s = 0; s < e; s++) {
                                    const e = this.getLayer(s),
                                        i = t.getLayer(s);
                                    e && e.setFromLayer(i)
                                }
                        }
                        getLayer(t) {
                            return this._layers[t] || null
                        }
                        getLayerTag(t) {
                            const e = this.getLayer(t);
                            return e ? e.tag : Nu.DEFAULT_TAG
                        }
                        setLayerTag(t, e) {
                            const s = this.getLayer(t);
                            s && (s.tag = e)
                        }
                        getLayerInk(t) {
                            const e = this.getLayer(t);
                            return e ? e.ink : Nu.DEFAULT_INK
                        }
                        setLayerInk(t, e) {
                            const s = this.getLayer(t);
                            s && (isNaN(e) || (s.ink = e))
                        }
                        getLayerAlpha(t) {
                            const e = this.getLayer(t);
                            return e ? e.alpha : Nu.DEFAULT_ALPHA
                        }
                        setLayerAlpha(t, e) {
                            const s = this.getLayer(t);
                            s && (isNaN(e) || (s.alpha = e))
                        }
                        getLayerIgnoreMouse(t) {
                            const e = this.getLayer(t);
                            return e ? e.ignoreMouse : Nu.DEFAULT_IGNORE_MOUSE
                        }
                        setLayerIgnoreMouse(t, e) {
                            const s = this.getLayer(t);
                            s && (s.ignoreMouse = e || !1)
                        }
                        getLayerXOffset(t) {
                            const e = this.getLayer(t);
                            return e ? e.xOffset : Nu.DEFAULT_XOFFSET
                        }
                        setLayerXOffset(t, e) {
                            const s = this.getLayer(t);
                            s && (isNaN(e) || (s.xOffset = e))
                        }
                        getLayerYOffset(t) {
                            const e = this.getLayer(t);
                            return e ? e.yOffset : Nu.DEFAULT_YOFFSET
                        }
                        setLayerYOffset(t, e) {
                            const s = this.getLayer(t);
                            s && (isNaN(e) || (s.yOffset = e))
                        }
                        getLayerZOffset(t) {
                            const e = this.getLayer(t);
                            return e ? e.zOffset : Nu.DEFAULT_ZOFFSET
                        }
                        setLayerZOffset(t, e) {
                            const s = this.getLayer(t);
                            s && (isNaN(e) || (s.zOffset = e))
                        }
                        get layerCount() {
                            return this._layers.length
                        }
                    }
                    return t._Str_9471 = -1, t
                })(),
                Lu = (() => {
                    class t {
                        constructor(e, s) {
                            this._layerCount = e < 0 ? 0 : e > t.MAX_LAYERS ? t.MAX_LAYERS : e, this._angle = s < 1 ? 1 : s > 360 ? 360 : s, this._defaultDirection = new wu(this._layerCount), this._directions = new Map, this._colors = [], this._lastDirectionData = null, this._lastDirection = -1
                        }
                        dispose() {
                            this._defaultDirection && this._defaultDirection.dispose();
                            for (const t of this._directions.values()) t && t.dispose();
                            for (const t of this._colors) t && t.dispose();
                            this.reset()
                        }
                        reset() {
                            this._defaultDirection = null, this._colors = [], this._lastDirectionData = null, this._lastDirection = -1, this._directions.clear()
                        }
                        processLayers(t) {
                            return !!t && this.setDirectionLayers(this._defaultDirection, t)
                        }
                        processDirections(t) {
                            if (!t) return !1;
                            for (const e in t) {
                                const s = t[e];
                                if (!s) continue;
                                const i = parseInt(e);
                                if (this._directions.get(i)) return !1;
                                const n = new wu(this._layerCount);
                                n.setFromDirection(this._defaultDirection), this.setDirectionLayers(n, s.layers), this._directions.set(i, n), this._lastDirectionData = null, this._lastDirection = -1
                            }
                            return !0
                        }
                        processColors(t) {
                            if (!t) return !1;
                            for (const e in t) {
                                const s = t[e];
                                if (!s) continue;
                                const i = parseInt(e);
                                if (this._colors[i]) return !1;
                                const n = new Du(this._layerCount);
                                for (const t in s.layers) {
                                    const e = s.layers[t];
                                    if (!e) continue;
                                    const i = parseInt(t);
                                    n.setColorLayer(i, e.color)
                                }
                                this._colors[i] = n
                            }
                            return !0
                        }
                        setDirectionLayers(t, e) {
                            if (!t || !e) return !1;
                            for (const s in e) {
                                const i = e[s];
                                if (!i) continue;
                                const n = parseInt(s);
                                if (n < 0 || n >= this._layerCount) return !1;
                                void 0 !== i.ink && t.setLayerInk(n, Uu.inkToBlendMode(i.ink)), void 0 !== i.tag && t.setLayerTag(n, i.tag), void 0 !== i.alpha && t.setLayerAlpha(n, i.alpha), void 0 !== i.ignoreMouse && t.setLayerIgnoreMouse(n, i.ignoreMouse), void 0 !== i.x && t.setLayerXOffset(n, i.x), void 0 !== i.y && t.setLayerYOffset(n, i.y), void 0 !== i.z && t.setLayerZOffset(n, i.z / -1e3)
                            }
                            return !0
                        }
                        getValidDirection(t) {
                            if (this._directions.get(t)) return t;
                            t = (t % 360 + 360) % 360;
                            let e = -1,
                                s = -1;
                            for (const i of this._directions.keys()) {
                                let n = (i * this._angle - t + 360) % 360;
                                n > 180 && (n = 360 - n), (n < e || e < 0) && (e = n, s = i)
                            }
                            return s >= 0 ? Math.trunc(s) : 0
                        }
                        getDirectionData(t) {
                            if (t === this._lastDirection && this._lastDirectionData) return this._lastDirectionData;
                            let e = this._directions.get(t);
                            return e || (e = this._defaultDirection), this._lastDirection = t, this._lastDirectionData = e, this._lastDirectionData
                        }
                        getLayerTag(t, e) {
                            const s = this.getDirectionData(t);
                            return s ? s.getLayerTag(e) : Nu.DEFAULT_TAG
                        }
                        getLayerInk(t, e) {
                            const s = this.getDirectionData(t);
                            return s ? s.getLayerInk(e) : Nu.DEFAULT_INK
                        }
                        getLayerAlpha(t, e) {
                            const s = this.getDirectionData(t);
                            return s ? s.getLayerAlpha(e) : Nu.DEFAULT_ALPHA
                        }
                        getLayerColor(t, e) {
                            const s = this._colors[e];
                            return s ? s.getLayerColor(t) : Du.DEFAULT_COLOR
                        }
                        getLayerIgnoreMouse(t, e) {
                            const s = this.getDirectionData(t);
                            return s ? s.getLayerIgnoreMouse(e) : Nu.DEFAULT_IGNORE_MOUSE
                        }
                        getLayerXOffset(t, e) {
                            const s = this.getDirectionData(t);
                            return s ? s.getLayerXOffset(e) : Nu.DEFAULT_XOFFSET
                        }
                        getLayerYOffset(t, e) {
                            const s = this.getDirectionData(t);
                            return s ? s.getLayerYOffset(e) : Nu.DEFAULT_YOFFSET
                        }
                        getLayerZOffset(t, e) {
                            const s = this.getDirectionData(t);
                            return s ? s.getLayerZOffset(e) : Nu.DEFAULT_ZOFFSET
                        }
                        get layerCount() {
                            return this._layerCount
                        }
                    }
                    return t.MAX_LAYERS = 26, t
                })();
            class xu extends Lu {
                constructor(t, e) {
                    super(t, e), this._animations = new Map, this._animationIds = []
                }
                dispose() {
                    super.dispose();
                    for (const t of this._animations.values()) t && t.dispose();
                    this._animations.clear(), this._animationIds = []
                }
                defineAnimations(t) {
                    if (!t) return !0;
                    for (const e in t) {
                        const s = t[e];
                        if (!s) return !1;
                        let i = parseInt(e),
                            n = !1;
                        const r = s.transitionTo,
                            o = s.transitionFrom;
                        void 0 !== r && (i = Cu.getTransitionToAnimationId(r), n = !0), void 0 !== o && (i = Cu.getTransitionFromAnimationId(o), n = !0);
                        const a = this.createAnimationData();
                        if (!a.initialize(s)) return a.dispose(), !1;
                        this._animations.set(i, a), n || this._animationIds.push(i)
                    }
                    return !0
                }
                createAnimationData() {
                    return new Cu
                }
                hasAnimation(t) {
                    return !!this._animations.get(t)
                }
                getAnimationCount() {
                    return this._animationIds.length || 0
                }
                getAnimationId(t) {
                    const e = this.getAnimationCount();
                    return t < 0 || e <= 0 ? 0 : this._animationIds[t % e]
                }
                isImmediateChange(t, e) {
                    const s = this._animations.get(t);
                    return !!s && s.isImmediateChange(e)
                }
                getStartFrame(t, e) {
                    const s = this._animations.get(t);
                    return s ? s.getStartFrame(e) : 0
                }
                getFrame(t, e, s, i) {
                    const n = this._animations.get(t);
                    return n ? n.getFrame(e, s, i) : null
                }
                getFrameFromSequence(t, e, s, i, n, r) {
                    const o = this._animations.get(t);
                    return o ? o.getFrameFromSequence(e, s, i, n, r) : null
                }
            }
            let Pu = (() => {
                class t {
                    constructor() {
                        this._type = "", this._sizes = [], this._sizeDatas = new Map, this._lastSize = -1, this._lastSizeScale = -1, this._lastSizeData = null, this._lastSizeDataScale = -1
                    }
                    initialize(t) {
                        return this.reset(), !!(t && t.type && t.type.length) && (this._type = t.name, !!this.defineVisualizations(t.visualizations) || (this.reset(), !1))
                    }
                    dispose() {
                        if (this._sizeDatas && this._sizeDatas.size) {
                            for (const t of this._sizeDatas.values()) t && t.dispose();
                            this._sizeDatas = null
                        }
                        this._lastSizeData = null, this._sizes = null
                    }
                    reset() {
                        if (this._type = "", this._sizeDatas && this._sizeDatas.size)
                            for (const t of this._sizeDatas.values()) t && t.dispose();
                        this._sizeDatas.clear(), this._sizes = [], this._lastSizeData = null, this._lastSizeDataScale = -1
                    }
                    createSizeData(t, e, s) {
                        return new Lu(e, s)
                    }
                    defineVisualizations(t) {
                        if (!t) return !1;
                        for (const e of t) {
                            const t = e.layerCount,
                                s = e.angle;
                            let i = e.size;
                            if (i < 1 && (i = 1), this._sizeDatas.get(i)) return !1;
                            const n = this.createSizeData(i, t, s);
                            if (!n) return !1;
                            for (const r in e)
                                if (!this.processVisualElement(n, r, e[r])) return n.dispose(), !1;
                            this._sizeDatas.set(i, n), this._sizes.push(i)
                        }
                        return this._sizes.sort(), !0
                    }
                    processVisualElement(t, e, s) {
                        if (!t || !e || !s) return !1;
                        switch (e) {
                            case "layers":
                                if (!t.processLayers(s)) return !1;
                                break;
                            case "directions":
                                if (!t.processDirections(s)) return !1;
                                break;
                            case "colors":
                                if (!t.processColors(s)) return !1
                        }
                        return !0
                    }
                    getValidSize(t) {
                        if (t === this._lastSizeScale) return this._lastSize;
                        const e = this.getSizeIndex(t);
                        let s = -1;
                        return e < this._sizes.length && (s = this._sizes[e]), this._lastSizeScale = t, this._lastSize = s, s
                    }
                    getSizeIndex(t) {
                        if (t <= 0) return 0;
                        let e = 0,
                            s = 1;
                        for (; s < this._sizes.length;) {
                            if (this._sizes[s] > t) {
                                this._sizes[s] / t < t / this._sizes[s - 1] && (e = s);
                                break
                            }
                            e = s, s++
                        }
                        return e
                    }
                    getSizeData(t) {
                        if (t === this._lastSizeDataScale) return this._lastSizeData;
                        const e = this.getSizeIndex(t);
                        return this._lastSizeData = e < this._sizes.length ? this._sizeDatas.get(this._sizes[e]) : null, this._lastSizeDataScale = t, this._lastSizeData
                    }
                    getLayerCount(t) {
                        const e = this.getSizeData(t);
                        return e ? e.layerCount : Nu.DEFAULT_COUNT
                    }
                    getValidDirection(t, e) {
                        const s = this.getSizeData(t);
                        return s ? s.getValidDirection(e) : Nu.DEFAULT_DIRECTION
                    }
                    getLayerTag(t, e, s) {
                        const i = this.getSizeData(t);
                        return i ? i.getLayerTag(e, s) : Nu.DEFAULT_TAG
                    }
                    getLayerInk(t, e, s) {
                        const i = this.getSizeData(t);
                        return i ? i.getLayerInk(e, s) : Nu.DEFAULT_INK
                    }
                    getLayerAlpha(t, e, s) {
                        const i = this.getSizeData(t);
                        return i ? i.getLayerAlpha(e, s) : Nu.DEFAULT_ALPHA
                    }
                    getLayerColor(t, e, s) {
                        const i = this.getSizeData(t);
                        return i ? i.getLayerColor(e, s) : Du.DEFAULT_COLOR
                    }
                    getLayerIgnoreMouse(t, e, s) {
                        const i = this.getSizeData(t);
                        return i ? i.getLayerIgnoreMouse(e, s) : Nu.DEFAULT_IGNORE_MOUSE
                    }
                    getLayerXOffset(t, e, s) {
                        const i = this.getSizeData(t);
                        return i ? i.getLayerXOffset(e, s) : Nu.DEFAULT_XOFFSET
                    }
                    getLayerYOffset(t, e, s) {
                        const i = this.getSizeData(t);
                        return i ? i.getLayerYOffset(e, s) : Nu.DEFAULT_YOFFSET
                    }
                    getLayerZOffset(t, e, s) {
                        const i = this.getSizeData(t);
                        return i ? i.getLayerZOffset(e, s) : Nu.DEFAULT_ZOFFSET
                    }
                    get type() {
                        return this._type
                    }
                }
                return t.LAYER_LETTERS = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], t
            })();
            class Fu extends Pu {
                createSizeData(t, e, s) {
                    return new xu(e, s)
                }
                processVisualElement(t, e, s) {
                    if (!t || !e || !s) return !1;
                    switch (e) {
                        case "animations":
                            if (!(t instanceof xu && t.defineAnimations(s))) return !1;
                            break;
                        default:
                            if (!super.processVisualElement(t, e, s)) return !1
                    }
                    return !0
                }
                hasAnimation(t, e) {
                    const s = this.getSizeData(t);
                    return s ? s.hasAnimation(e) : null
                }
                getAnimationCount(t) {
                    const e = this.getSizeData(t);
                    return e ? e.getAnimationCount() : null
                }
                getAnimationId(t, e) {
                    const s = this.getSizeData(t);
                    return s ? s.getAnimationId(e) : null
                }
                isImmediateChange(t, e, s) {
                    const i = this.getSizeData(t);
                    return i ? i.isImmediateChange(e, s) : null
                }
                getStartFrame(t, e, s) {
                    const i = this.getSizeData(t);
                    return i ? i.getStartFrame(e, s) : null
                }
                getFrame(t, e, s, i, n) {
                    const r = this.getSizeData(t);
                    return r ? r.getFrame(e, s, i, n) : null
                }
                getFrameFromSequence(t, e, s, i, n, r, o) {
                    const a = this.getSizeData(t);
                    return a ? a.getFrameFromSequence(e, s, i, n, r, o) : null
                }
            }
            let Gu = (() => {
                    class t extends du {
                        constructor() {
                            super(), this._data = null, this._type = null, this._direction = 0, this._lastCameraAngle = NaN, this._selectedColor = 0, this._furnitureLift = 0, this._alphaMultiplier = 1, this._alphaChanged = !1, this._clickUrl = null, this._cacheDirection = -1, this._cacheScale = 0, this._cacheSize = -1, this._layerCount = 0, this._shadowLayerIndex = -1, this._updatedLayers = [], this._assetNames = [], this._spriteTags = [], this._spriteInks = [], this._spriteAlphas = [], this._spriteColors = [], this._spriteMouseCaptures = [], this._spriteXOffsets = [], this._spriteYOffsets = [], this._spriteZOffsets = [], this._animationNumber = 0
                        }
                        initialize(t) {
                            return this.reset(), t instanceof Pu && (this._type = t.type, this._data = t, !0)
                        }
                        dispose() {
                            super.dispose(), this._data = null, this._updatedLayers = null, this._assetNames = null, this._spriteTags = null, this._spriteInks = null, this._spriteAlphas = null, this._spriteColors = null, this._spriteMouseCaptures = null, this._spriteXOffsets = null, this._spriteYOffsets = null, this._spriteZOffsets = null
                        }
                        reset() {
                            super.reset(), this.setDirection(-1), this._data = null, this._updatedLayers = [], this._assetNames = [], this._spriteTags = [], this._spriteInks = [], this._spriteAlphas = [], this._spriteColors = [], this._spriteMouseCaptures = [], this._spriteXOffsets = [], this._spriteYOffsets = [], this._spriteZOffsets = [], this.setSpriteCount(0)
                        }
                        resetLayers(t, e) {
                            this._cacheDirection === e && this._cacheScale === t || (this._updatedLayers = [], this._assetNames = [], this._spriteTags = [], this._spriteInks = [], this._spriteAlphas = [], this._spriteColors = [], this._spriteMouseCaptures = [], this._spriteXOffsets = [], this._spriteYOffsets = [], this._spriteZOffsets = [], this._cacheDirection = e, this._cacheScale = t, this._cacheSize = this.getValidSize(t), this.setLayerCount((this._data && this._data.getLayerCount(t) || 0) + this.getAdditionalLayerCount()))
                        }
                        update(t, e, s, i) {
                            if (!t) return;
                            const n = t.scale;
                            let r = !1;
                            this.updateObject(n, t.direction.x) && (r = !0), this.updateModel(n) && (r = !0);
                            let o = 0;
                            i ? this._animationNumber = this._animationNumber | this.updateAnimation(n) : (o = this.updateAnimation(n) | this._animationNumber, this._animationNumber = 0), (r || 0 !== o) && (this.updateSprites(n, r, o), this._scale = n, this.updateSpriteCounter++)
                        }
                        updateObject(t, e) {
                            if (!this.object) return !1;
                            if (this.updateObjectCounter === this.object.updateCounter && t === this._scale && this._lastCameraAngle === e) return !1;
                            let s = this.object.getDirection().x - (e + 135);
                            if (s = (s % 360 + 360) % 360, this._data) {
                                const e = this._data.getValidDirection(t, s);
                                this.setDirection(e)
                            }
                            return this._lastCameraAngle = e, this._scale = t, this.updateObjectCounter = this.object.updateCounter, this.resetLayers(t, this._direction), !0
                        }
                        updateModel(t) {
                            const e = this.object && this.object.model;
                            if (!e) return !1;
                            if (this.updateModelCounter === e.updateCounter) return !1;
                            this._selectedColor = e.getValue(j.FURNITURE_COLOR), this._clickUrl = e.getValue(j.FURNITURE_AD_URL), this._furnitureLift = e.getValue(j.FURNITURE_LIFT_AMOUNT) || 0;
                            let s = e.getValue(j.FURNITURE_ALPHA_MULTIPLIER);
                            return isNaN(s) && (s = 1), this._alphaMultiplier !== s && (this._alphaMultiplier = s, this._alphaChanged = !0), this.updateModelCounter = e.updateCounter, !0
                        }
                        updateSprites(t, e, s) {
                            if (this._layerCount !== this.totalSprites && this.setSpriteCount(this._layerCount), e) {
                                let e = this.totalSprites - 1;
                                for (; e >= 0;) this.updateSprite(t, e), e--
                            } else {
                                let e = 0;
                                for (; s > 0;) s && this.updateSprite(t, e), e++, s >>= 1
                            }
                            this._alphaChanged = !1
                        }
                        updateSprite(e, s) {
                            const i = this.getSpriteAssetName(e, s),
                                n = this.getSprite(s);
                            if (i && n) {
                                const r = this.getAsset(i, s);
                                if (r && r.texture) {
                                    n.visible = !0, n.type = this._type, n.texture = r.texture, n.flipH = r.flipH, n.flipV = r.flipV, n.direction = this._direction;
                                    let o = 0;
                                    s !== this._shadowLayerIndex ? (n.tag = this.getLayerTag(e, this._direction, s), n.alpha = this.getLayerAlpha(e, this._direction, s), n.color = this.getLayerColor(e, s, this._selectedColor), n.offsetX = r.offsetX + this.getLayerXOffset(e, this._direction, s), n.offsetY = r.offsetY + this.getLayerYOffset(e, this._direction, s), n.blendMode = this.getLayerInk(e, this._direction, s), n.alphaTolerance = this.getLayerIgnoreMouse(e, this._direction, s) ? lu._Str_9268 : lu._Str_9735, o = this.getLayerZOffset(e, this._direction, s), o -= .001 * s) : (n.offsetX = r.offsetX, n.offsetY = r.offsetY + this.getLayerYOffset(e, this._direction, s), n.alpha = 48 * this._alphaMultiplier, n.alphaTolerance = lu._Str_9268, o = 1), n.relativeDepth = o * t.DEPTH_MULTIPLIER, n.name = i, n._Str_3582 = this.getLibraryAssetNameForSprite(r, n), n.posture = this.getPostureForAsset(e, r.source), n.clickHandling = !1
                                } else this.resetSprite(n)
                            } else n && this.resetSprite(n)
                        }
                        getLibraryAssetNameForSprite(t, e) {
                            return t.source
                        }
                        getPostureForAssetFile(t, e) {
                            return null
                        }
                        resetSprite(t) {
                            t && (t.texture = null, t.offsetX = 0, t.offsetY = 0, t.flipH = !1, t.flipV = !1, t.relativeDepth = 0)
                        }
                        getSpriteAssetName(t, e) {
                            if (!this._data || e >= Pu.LAYER_LETTERS.length) return "";
                            let s = this._assetNames[e],
                                i = this._updatedLayers[e];
                            return s && s.length || (s = this.cacheSpriteAssetName(t, e, !0), i = 1 !== this._cacheSize), i && (s += this.getFrameNumber(t, e)), s
                        }
                        cacheSpriteAssetName(t, e, s) {
                            const i = s ? this._cacheSize : this.getValidSize(t);
                            let n = "";
                            const r = 1 !== i;
                            if (n = e !== this._shadowLayerIndex ? Pu.LAYER_LETTERS[e] || "" : "sd", "" === n) return null;
                            const o = this._type + (r ? "_" + i + "_" + n + "_" + this._direction + "_" : "_icon_" + n);
                            return s && (this._assetNames[e] = o, this._updatedLayers[e] = r), o
                        }
                        getLayerTag(t, e, s) {
                            const i = this._spriteTags[s];
                            if (void 0 !== i) return i;
                            if (!this._data) return Nu.DEFAULT_TAG;
                            const n = this._data.getLayerTag(t, e, s);
                            return this._spriteTags[s] = n, n
                        }
                        getLayerInk(t, e, s) {
                            const i = this._spriteInks[s];
                            if (void 0 !== i) return i;
                            if (!this._data) return Nu.DEFAULT_INK;
                            const n = this._data.getLayerInk(t, e, s);
                            return this._spriteInks[s] = n, n
                        }
                        getLayerAlpha(t, e, s) {
                            if (!this._alphaChanged) {
                                const t = this._spriteAlphas[s];
                                if (void 0 !== t) return t
                            }
                            if (!this._data) return Nu.DEFAULT_ALPHA;
                            let i = this._data.getLayerAlpha(t, e, s);
                            return null !== this._alphaMultiplier && (i *= this._alphaMultiplier), this._spriteAlphas[s] = i, i
                        }
                        getLayerColor(t, e, s) {
                            const i = this._spriteColors[e];
                            if (void 0 !== i) return i;
                            if (!this._data) return Du.DEFAULT_COLOR;
                            const n = this._data.getLayerColor(t, e, s);
                            return this._spriteColors[e] = n, n
                        }
                        getLayerIgnoreMouse(t, e, s) {
                            const i = this._spriteMouseCaptures[s];
                            if (void 0 !== i) return i;
                            if (!this._data) return Nu.DEFAULT_IGNORE_MOUSE;
                            const n = this._data.getLayerIgnoreMouse(t, e, s);
                            return this._spriteMouseCaptures[s] = n, n
                        }
                        getLayerXOffset(t, e, s) {
                            const i = this._spriteXOffsets[s];
                            if (void 0 !== i) return i;
                            if (!this._data) return Nu.DEFAULT_XOFFSET;
                            const n = this._data.getLayerXOffset(t, e, s);
                            return this._spriteXOffsets[s] = n, n
                        }
                        getLayerYOffset(t, e, s) {
                            if (s === this._shadowLayerIndex) return Math.ceil(32 * this._furnitureLift);
                            const i = this._spriteYOffsets[s];
                            if (void 0 !== i) return i;
                            if (!this._data) return Nu.DEFAULT_YOFFSET;
                            const n = this._data.getLayerYOffset(t, e, s);
                            return this._spriteYOffsets[s] = n, n
                        }
                        getLayerZOffset(t, e, s) {
                            const i = this._spriteZOffsets[s];
                            if (void 0 !== i) return i;
                            if (!this._data) return Nu.DEFAULT_ZOFFSET;
                            const n = this._data.getLayerZOffset(t, e, s);
                            return this._spriteZOffsets[s] = n, n
                        }
                        getValidSize(t) {
                            return this._data ? this._data.getValidSize(t) : t
                        }
                        setLayerCount(t) {
                            this._layerCount = t, this._shadowLayerIndex = t - this.getAdditionalLayerCount()
                        }
                        setDirection(t) {
                            this._direction !== t && (this._direction = t)
                        }
                        getAdditionalLayerCount() {
                            return 1
                        }
                        updateAnimation(t) {
                            return 0
                        }
                        getFrameNumber(t, e) {
                            return 0
                        }
                        getPostureForAsset(t, e) {
                            return null
                        }
                        getAsset(t, e = -1) {
                            return this.asset ? this.asset.getAsset(t) : null
                        }
                        get direction() {
                            return this._direction
                        }
                    }
                    return t.DEPTH_MULTIPLIER = Math.sqrt(.5), t.TYPE = B.FURNITURE_STATIC, t
                })(),
                Yu = (() => {
                    class t extends Gu {
                        constructor() {
                            super(), this._state = -1, this._animationData = new Mu, this._animationScale = 0, this._animationChangeTime = 0, this._animatedLayerCount = 0, this._directionChanged = !1
                        }
                        initialize(t) {
                            return t instanceof Fu && super.initialize(t)
                        }
                        dispose() {
                            super.dispose(), this._animationData && (this._animationData.dispose(), this._animationData = null)
                        }
                        get animatedLayerCount() {
                            return this._animatedLayerCount
                        }
                        get animationId() {
                            return this._animationData.animationId
                        }
                        getAnimationId(e) {
                            return this.animationId !== t.DEFAULT_ANIMATION_ID && this._data.hasAnimation(this._animationScale, this.animationId) ? this.animationId : t.DEFAULT_ANIMATION_ID
                        }
                        updateObject(t, e) {
                            if (super.updateObject(t, e)) {
                                const t = this.object.getState(0);
                                return t !== this._state && (this.setAnimation(t), this._state = t, this._animationChangeTime = this.object.model.getValue(j.FURNITURE_STATE_UPDATE_TIME) || 0), !0
                            }
                            return !1
                        }
                        updateModel(t) {
                            if (super.updateModel(t)) {
                                if (this.usesAnimationResetting()) {
                                    const t = this.object.model.getValue(j.FURNITURE_STATE_UPDATE_TIME);
                                    t > this._animationChangeTime && (this._animationChangeTime = t, this.setAnimation(this._state))
                                }
                                const t = this.object.model.getValue(j.FURNITURE_AUTOMATIC_STATE_INDEX);
                                if (!isNaN(t)) {
                                    const e = this._data.getAnimationId(this._animationScale, t);
                                    this.setAnimation(e)
                                }
                                return !0
                            }
                            return !1
                        }
                        isPlayingTransition(t, e) {
                            return !(!Cu.isTransitionFromAnimation(t.animationId) && !Cu.isTransitionToAnimation(t.animationId) || e !== t.animationAfterTransitionId || t.animationOver)
                        }
                        getCurrentState(t) {
                            const e = t.animationId;
                            return Cu.isTransitionFromAnimation(e) || Cu.isTransitionToAnimation(e) ? t.animationAfterTransitionId : e
                        }
                        setAnimation(t) {
                            this._data && this.setSubAnimation(this._animationData, t, this._state >= 0)
                        }
                        setSubAnimation(t, e, s = !0) {
                            const i = t.animationId;
                            if (s) {
                                if (this.isPlayingTransition(t, e)) return !1;
                                const s = this.getCurrentState(t);
                                if (e !== s) {
                                    if (!this._data.isImmediateChange(this._animationScale, e, s)) {
                                        let i = Cu.getTransitionFromAnimationId(s);
                                        this._data.hasAnimation(this._animationScale, i) ? (t.animationAfterTransitionId = e, e = i) : (i = Cu.getTransitionToAnimationId(e), this._data.hasAnimation(this._animationScale, i) && (t.animationAfterTransitionId = e, e = i))
                                    }
                                } else if (Cu.isTransitionFromAnimation(t.animationId)) {
                                    const s = Cu.getTransitionToAnimationId(e);
                                    this._data.hasAnimation(this._animationScale, s) && (t.animationAfterTransitionId = e, e = s)
                                } else if (!Cu.isTransitionToAnimation(t.animationId) && this.usesAnimationResetting()) {
                                    const i = Cu.getTransitionFromAnimationId(s);
                                    if (this._data.hasAnimation(this._animationScale, i)) t.animationAfterTransitionId = e, e = i;
                                    else {
                                        const s = Cu.getTransitionToAnimationId(e);
                                        this._data.hasAnimation(this._animationScale, s) && (t.animationAfterTransitionId = e, e = s)
                                    }
                                }
                            }
                            return i !== e && (t.animationId = e, !0)
                        }
                        getLastFramePlayed(t) {
                            return this._animationData.getLastFramePlayed(t)
                        }
                        resetAllAnimationFrames() {
                            this._animationData && this._animationData.setLayerCount(this._animatedLayerCount)
                        }
                        updateAnimation(t) {
                            if (!this._data) return 0;
                            t !== this._animationScale && (this._animationScale = t, this._animatedLayerCount = this._data.getLayerCount(t), this.resetAllAnimationFrames());
                            const e = this.updateAnimations(t);
                            return this._directionChanged = !1, e
                        }
                        updateAnimations(t) {
                            if (this._animationData.animationOver && !this._directionChanged) return 0;
                            const e = this.updateFramesForAnimation(this._animationData, t);
                            return this._animationData.animationOver && (Cu.isTransitionFromAnimation(this._animationData.animationId) || Cu.isTransitionToAnimation(this._animationData.animationId)) && (this.setAnimation(this._animationData.animationAfterTransitionId), this._animationData.animationOver = !1), e
                        }
                        updateFramesForAnimation(e, s) {
                            if (e.animationOver && !this._directionChanged) return 0;
                            const i = this.getAnimationId(e);
                            let n = e.frameCounter;
                            n || (n = this._data.getStartFrame(s, i, this._direction)), n += t.FRAME_INCREASE_AMOUNT, e.frameCounter = n, e.animationOver = !0;
                            let r = !1,
                                o = this._animatedLayerCount - 1,
                                a = 0,
                                c = 1 << this._animatedLayerCount - 1;
                            for (; o >= 0;) {
                                let _ = 0;
                                if (r = e.getAnimationPlayed(o), !r || this._directionChanged) {
                                    let h = e.getLastFramePlayed(o),
                                        l = e.getFrame(o);
                                    l && l.isLastFrame && l.remainingFrameRepeats <= t.FRAME_INCREASE_AMOUNT && (h = !0), (this._directionChanged || !l || l.remainingFrameRepeats >= 0 && (l.remainingFrameRepeats = l.remainingFrameRepeats - t.FRAME_INCREASE_AMOUNT) <= 0) && (_ = Ru.SEQUENCE_NOT_DEFINED, l && (_ = l.activeSequence), l = _ === Ru.SEQUENCE_NOT_DEFINED ? this._data.getFrame(s, i, this._direction, o, n) : this._data.getFrameFromSequence(s, i, this._direction, o, _, l.activeSequenceOffset + l.repeats, n), e.setFrame(o, l), a |= c), l && l.remainingFrameRepeats != Ru.FRAME_REPEAT_FOREVER ? e.animationOver = !1 : (h = !0, r = !0), e.setLastFramePlayed(o, h), e.setAnimationPlayed(o, r)
                                }
                                c >>= 1, o--
                            }
                            return a
                        }
                        getFrameNumber(t, e) {
                            const s = this._animationData.getFrame(e);
                            return s ? s.id : super.getFrameNumber(t, e)
                        }
                        getLayerXOffset(t, e, s) {
                            const i = super.getLayerXOffset(t, e, s),
                                n = this._animationData.getFrame(s);
                            return n ? i + n.x : i
                        }
                        getLayerYOffset(t, e, s) {
                            const i = super.getLayerYOffset(t, e, s),
                                n = this._animationData.getFrame(s);
                            return n ? i + n.y : i
                        }
                        usesAnimationResetting() {
                            return !1
                        }
                        setDirection(t) {
                            this._direction !== t && (super.setDirection(t), this._directionChanged = !0)
                        }
                    }
                    return t.FRAME_INCREASE_AMOUNT = 1, t.TYPE = B.FURNITURE_ANIMATED, t.DEFAULT_ANIMATION_ID = 0, t
                })(),
                ku = (() => {
                    class t extends Yu {
                        constructor() {
                            super(), this._badgeAssetNameNormalScale = "", this._badgeAssetNameSmallScale = "", this._badgeVisibleInState = -1
                        }
                        updateModel(t) {
                            let e = super.updateModel(t);
                            if (!isNaN(this.object.model.getValue(j.FURNITURE_BADGE_IMAGE_STATUS)) && 0 !== this.object.model.getValue(j.FURNITURE_BADGE_IMAGE_STATUS) && "" === this._badgeAssetNameNormalScale) {
                                this._badgeAssetNameNormalScale = this.object.model.getValue(j.FURNITURE_BADGE_ASSET_NAME), "" === this._badgeAssetNameSmallScale && (this._badgeAssetNameSmallScale = this._badgeAssetNameNormalScale + "_32");
                                const t = this.object.model.getValue(j.FURNITURE_BADGE_VISIBLE_IN_STATE);
                                isNaN || (this._badgeVisibleInState = t), e = !0
                            }
                            return e
                        }
                        getSpriteAssetName(e, s) {
                            return this.getLayerTag(e, this.direction, s) !== t.BADGE || -1 !== this._badgeVisibleInState && this.object.getState(0) !== this._badgeVisibleInState ? super.getSpriteAssetName(e, s) : 32 === e ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale
                        }
                        getLayerXOffset(e, s, i) {
                            let n = super.getLayerXOffset(e, s, i);
                            if (this.getLayerTag(e, s, i) === t.BADGE) {
                                const t = this.getAsset(32 === e ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale, i);
                                t && (n += 64 === e ? (40 - t.width) / 2 : (20 - t.width) / 2)
                            }
                            return n
                        }
                        getLayerYOffset(e, s, i) {
                            let n = super.getLayerYOffset(e, s, i);
                            if (this.getLayerTag(e, s, i) === t.BADGE) {
                                const t = this.getAsset(32 === e ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale, i);
                                t && (n += 64 === e ? (40 - t.height) / 2 : (20 - t.height) / 2)
                            }
                            return n
                        }
                    }
                    return t.BADGE = "BADGE", t
                })(),
                Vu = (() => {
                    class t extends Gu {
                        constructor() {
                            super(), this._imageUrl = null, this._shortUrl = null, this._imageReady = !1, this._offsetX = 0, this._offsetY = 0, this._offsetZ = 0
                        }
                        dispose() {
                            super.dispose(), this._imageUrl && this.asset && this.asset.disposeAsset(this._imageUrl)
                        }
                        updateObject(t, e) {
                            return !!super.updateObject(t, e) && (this._imageReady && this.checkAndCreateImageForCurrentState(), !0)
                        }
                        updateModel(t) {
                            const e = super.updateModel(t);
                            if (e && (this._offsetX = this.object.model.getValue(j.FURNITURE_BRANDING_OFFSET_X), this._offsetY = this.object.model.getValue(j.FURNITURE_BRANDING_OFFSET_Y), this._offsetZ = this.object.model.getValue(j.FURNITURE_BRANDING_OFFSET_Z)), this._imageReady) {
                                if (this.checkIfImageChanged()) return this._imageReady = !1, this._imageUrl = null, !0
                            } else if (this._imageReady = this.checkIfImageReady(), this._imageReady) return this.checkAndCreateImageForCurrentState(), !0;
                            return e
                        }
                        imageReady(t, e) {
                            this._imageUrl = t ? e : null
                        }
                        checkIfImageChanged() {
                            const t = this.object.model.getValue(j.FURNITURE_BRANDING_IMAGE_URL);
                            return !(t && t === this._imageUrl || (this.asset && this.asset.disposeAsset(this._imageUrl), 0))
                        }
                        checkIfImageReady() {
                            if (!this.object || !this.object.model) return !1;
                            const t = this.object.model.getValue(j.FURNITURE_BRANDING_IMAGE_URL);
                            if (!t) return !1;
                            if (this._imageUrl && this._imageUrl === t) return !1;
                            if (1 === this.object.model.getValue(j.FURNITURE_BRANDING_IMAGE_STATUS)) {
                                const e = cp.instance.core.asset.getTexture(t);
                                return !!e && (this.imageReady(e, t), !0)
                            }
                            return !1
                        }
                        checkAndCreateImageForCurrentState() {
                            if (!this._imageUrl) return;
                            const t = cp.instance.core.asset.getTexture(this._imageUrl);
                            t && this.asset.addAsset(this._imageUrl, t, !0, 0, 0, !1, !1)
                        }
                        getSpriteAssetName(e, s) {
                            return this.getLayerTag(e, this._direction, s) === t.BRANDED_IMAGE && this._imageUrl ? this._imageUrl : super.getSpriteAssetName(e, s)
                        }
                        getLayerIgnoreMouse(e, s, i) {
                            return this.getLayerTag(e, s, i) === t.BRANDED_IMAGE || super.getLayerIgnoreMouse(e, s, i)
                        }
                    }
                    return t.BRANDED_IMAGE = "branded_image", t
                })();
            class Zu extends Vu {
                getLayerXOffset(t, e, s) {
                    return super.getLayerXOffset(t, e, s) + this._offsetX
                }
                getLayerYOffset(t, e, s) {
                    return super.getLayerYOffset(t, e, s) + this._offsetY
                }
                getLayerZOffset(t, e, s) {
                    return super.getLayerZOffset(t, e, s) + this._offsetZ
                }
            }
            let ju = (() => {
                class t extends Yu {
                    constructor() {
                        super(), this._stateQueue = [], this._running = !1
                    }
                    setAnimation(e) {
                        if (-1 === e && !this._running) return this._running = !0, this._stateQueue = [], void this._stateQueue.push(t._Str_4186);
                        if (e >= 0 && e <= 7) {
                            if (this._running) return this._running = !1, this._stateQueue = [], this._stateQueue.push(t.ANIMATION_ID_OFFSET_SLOW1), this._stateQueue.push(t.ANIMATION_ID_OFFSET_SLOW2 + e), void this._stateQueue.push(e);
                            super.setAnimation(e)
                        }
                    }
                    updateAnimation(t) {
                        return this.getLastFramePlayed(0) && this._stateQueue.length && super.setAnimation(this._stateQueue.shift()), super.updateAnimation(t)
                    }
                }
                return t.ANIMATION_ID_OFFSET_SLOW1 = 20, t.ANIMATION_ID_OFFSET_SLOW2 = 9, t._Str_4186 = -1, t
            })();
            class Bu extends Gu {}
            let Hu = (() => {
                class t extends Yu {
                    getFrameNumber(e, s) {
                        const i = this.getLayerTag(e, this.direction, s),
                            n = this.object.getState(0);
                        switch (i) {
                            case t.SECONDS_SPRITE:
                                return Math.floor(n % 60 % 10);
                            case t.TEN_SECONDS_SPRITE:
                                return Math.floor(n % 60 / 10);
                            case t.MINUTES_SPRITE:
                                return Math.floor(n / 60 % 10);
                            case t.TEN_MINUTES_SPRITE:
                                return Math.floor(n / 60 / 10 % 10);
                            default:
                                return super.getFrameNumber(e, s)
                        }
                    }
                    get animationId() {
                        return 0
                    }
                }
                return t.SECONDS_SPRITE = "seconds_sprite", t.TEN_SECONDS_SPRITE = "ten_seconds_sprite", t.MINUTES_SPRITE = "minutes_sprite", t.TEN_MINUTES_SPRITE = "ten_minutes_sprite", t
            })();
            class Wu extends du {}
            let zu = (() => {
                class t extends Yu {
                    constructor() {
                        super(), this._Str_22237 = null, this._Str_10040 = null, this._Str_21698 = -1, this._Str_16232 = !1
                    }
                    get _Str_23660() {
                        return !(null == this._Str_10040)
                    }
                    _Str_6645(t) {
                        this._Str_10040 = t, this._Str_16232 = !0
                    }
                    updateModel(t) {
                        const e = super.updateModel(t);
                        return this._Str_16232 || this._Str_21698 !== this.direction ? (this._Str_25236(), !0) : e
                    }
                    _Str_25236() {
                        null != this.asset && (this._Str_10040 ? this._Str_20857(this._Str_10040, 64) : this.asset.disposeAsset(this._Str_15493(64)), this._Str_16232 = !1, this._Str_21698 = this.direction)
                    }
                    _Str_20857(e, s) {
                        let i = 0;
                        for (; i < this.totalSprites;) {
                            if (this.getLayerTag(s, this.direction, i) === t.THUMBNAIL) {
                                const t = this.cacheSpriteAssetName(s, i, !1) + this.getFrameNumber(s, i),
                                    n = this.getAsset(t, i);
                                if (n) {
                                    const t = this._Str_25562(e, n),
                                        i = this._Str_15493(s);
                                    this.asset.disposeAsset(i), this.asset.addAsset(i, t, !0, n.offsetX, n.offsetY, !1, !1)
                                }
                                return
                            }
                            i++
                        }
                    }
                    _Str_25562(t, e) {
                        const s = new u.i,
                            i = e.width / t.width;
                        switch (this.direction) {
                            case 2:
                                s.a = i, s.b = -.5 * i, s.c = 0, s.d = 1.1 * i, s.tx = 0, s.ty = .5 * i * t.width;
                                break;
                            case 0:
                            case 4:
                                s.a = i, s.b = .5 * i, s.c = 0, s.d = 1.1 * i, s.tx = 0, s.ty = 0;
                                break;
                            default:
                                s.a = i, s.b = 0, s.c = 0, s.d = i, s.tx = 0, s.ty = 0
                        }
                        const n = u.n.from(t);
                        return n.transform.setFromMatrix(s), ot.generateTexture(n, new u.k(0, 0, e.width, e.height))
                    }
                    getSpriteAssetName(e, s) {
                        return this._Str_10040 && this.getLayerTag(e, this.direction, s) === t.THUMBNAIL ? this._Str_15493(e) : super.getSpriteAssetName(e, s)
                    }
                    _Str_15493(t) {
                        return this._Str_22237 = this._Str_12961(this.object.id, 64), this._Str_22237
                    }
                    _Str_12961(t, e) {
                        return [this._type, t, "thumb", e].join("_")
                    }
                }
                return t.THUMBNAIL = "THUMBNAIL", t
            })();
            class Ku extends zu {
                constructor() {
                    super(), this._cachedUrl = null
                }
                updateModel(t) {
                    if (this.object) {
                        const t = this.getThumbnailURL();
                        if (this._cachedUrl !== t)
                            if (this._cachedUrl = t, this._cachedUrl && "" !== this._cachedUrl) {
                                const e = new Image;
                                e.src = t, e.crossOrigin = "*", e.onload = () => {
                                    const t = u.p.from(e);
                                    this._Str_6645(t)
                                }
                            } else this._Str_6645(null)
                    }
                    return super.updateModel(t)
                }
                getThumbnailURL() {
                    throw new Error("This method must be overridden!")
                }
            }
            class Xu extends Ku {
                constructor() {
                    super(), this._url = null, this._typePrefix = null
                }
                getThumbnailURL() {
                    if (!this.object) return null;
                    if (this._url) return this._url;
                    const t = this.object.model.getValue(j.FURNITURE_DATA);
                    if (!t || "" === t) return null;
                    this.object.type.indexOf("") >= 0 && (this._typePrefix = this.object.type.indexOf("") >= 0 ? "" : "postcards/selfie/");
                    let e = JSON.parse(t).w;
                    return e = this._Str_18056(e), this._url = e, this._url
                }
                _Str_18056(t) {
                    return -1 === (t = t.replace(".png", "_small.png")).indexOf(".png") && (t += "_small.png"), t
                }
            }
            class qu extends Yu {}
            class Ju extends qu {}
            class Qu extends Gu {}
            let $u = (() => {
                class t extends Yu {
                    constructor() {
                        super(), this._color1 = t.DEFAULT_COLOR_1, this._color2 = t.DEFAULT_COLOR_2
                    }
                    updateModel(t) {
                        const e = super.updateModel(t);
                        return !!e && (this._color1 = this.object.model.getValue(j.FURNITURE_GUILD_CUSTOMIZED_COLOR_1), this._color2 = this.object.model.getValue(j.FURNITURE_GUILD_CUSTOMIZED_COLOR_2), e)
                    }
                    getLayerColor(t, e, s) {
                        switch (this.getLayerTag(t, this._direction, e)) {
                            case "COLOR1":
                                return this._color1;
                            case "COLOR2":
                                return this._color2
                        }
                        return super.getLayerColor(t, e, s)
                    }
                }
                return t.DEFAULT_COLOR_1 = 15658734, t.DEFAULT_COLOR_2 = 4934475, t
            })();
            class td extends zu {}
            let ed = (() => {
                class t extends Yu {
                    constructor() {
                        super(), this._stateQueue = [], this._running = !1
                    }
                    setAnimation(e) {
                        if (-1 === e && !this._running) return this._running = !0, this._stateQueue = [], this._stateQueue.push(t._Str_7627), void this._stateQueue.push(t._Str_4186);
                        if (e > 0 && e <= t.ANIMATION_ID_OFFSET_SLOW1) {
                            if (this._running) return this._running = !1, this._stateQueue = [], this._stateQueue.push(t.ANIMATION_ID_OFFSET_SLOW1 + e), this._stateQueue.push(t.ANIMATION_ID_OFFSET_SLOW2 + e), void this._stateQueue.push(e);
                            super.setAnimation(e)
                        }
                    }
                    updateAnimation(t) {
                        return this.getLastFramePlayed(1) && this.getLastFramePlayed(2) && this.getLastFramePlayed(3) && this._stateQueue.length && super.setAnimation(this._stateQueue.shift()), super.updateAnimation(t)
                    }
                }
                return t.ANIMATION_ID_OFFSET_SLOW1 = 10, t.ANIMATION_ID_OFFSET_SLOW2 = 20, t._Str_7627 = 31, t._Str_4186 = 32, t
            })();
            class sd extends Pu {
                constructor() {
                    super(), this._avatarData = new Su
                }
                dispose() {
                    super.dispose(), this._avatarData && (this._avatarData.dispose(), this._avatarData = null)
                }
                createAvatarImage(t, e, s = null, i = null, n = null) {
                    return this._avatarData.createAvatarImage(t, e, s, i, n)
                }
                set avatarManager(t) {
                    this._avatarData.avatarManager = t
                }
            }
            let id = (() => {
                class t extends Gu {
                    constructor() {
                        super(), this._mannequinScale = -1, this._figure = null, this._gender = null, this._dynamicAssetName = null, this._needsUpdate = !1, this._placeHolderFigure = "hd-99999-99998", this._disposed = !1
                    }
                    initialize(t) {
                        return t instanceof sd && super.initialize(t)
                    }
                    dispose() {
                        this._disposed || (this._disposed = !0, this._dynamicAssetName && this.asset && (this.asset.disposeAsset(this._dynamicAssetName), this._dynamicAssetName = null), super.dispose())
                    }
                    updateObject(t, e) {
                        const s = super.updateObject(t, e);
                        return s && this._mannequinScale !== t && (this._mannequinScale = t, this.updateAvatar()), s
                    }
                    updateModel(t) {
                        let e = super.updateModel(t);
                        if (e) {
                            const t = this.object.model.getValue(j.FURNITURE_MANNEQUIN_FIGURE) || null;
                            t && (this._figure = t + "." + this._placeHolderFigure, this._gender = this.object.model.getValue(j.FURNITURE_MANNEQUIN_GENDER) || null, this.updateAvatar())
                        }
                        return e = e || this._needsUpdate, this._needsUpdate = !1, e
                    }
                    updateAvatar(t = !1) {
                        if (!this.avatarExists() || t) {
                            const t = this._data.createAvatarImage(this._figure, this._mannequinScale, this._gender, this);
                            t && (t.setDirection(It.FULL, this.direction), this._dynamicAssetName && this.asset.disposeAsset(this._dynamicAssetName), this.asset.addAsset(this._Str_10185(), t.getImage(It.FULL, !1, 1, !1), !0), this._dynamicAssetName = this._Str_10185(), this._needsUpdate = !0, t.dispose())
                        }
                    }
                    avatarExists() {
                        return this._figure && null !== this.getAsset(this._Str_10185())
                    }
                    _Str_10185() {
                        return "mannequin_" + this._figure + "_" + this._mannequinScale + "_" + this.direction + "_" + this.object.id
                    }
                    resetFigure(t) {
                        t === this._figure && this.updateAvatar(!0)
                    }
                    getSpriteAssetName(e, s) {
                        const i = this.getLayerTag(e, this.direction, s);
                        return this._figure && i === t.AVATAR_IMAGE_SPRITE_TAG && this.avatarExists() ? this._Str_10185() : super.getSpriteAssetName(e, s)
                    }
                    getLayerXOffset(e, s, i) {
                        return this.getLayerTag(e, s, i) === t.AVATAR_IMAGE_SPRITE_TAG && this.avatarExists() ? -this.getSprite(i).width / 2 : super.getLayerXOffset(e, s, i)
                    }
                    getLayerYOffset(e, s, i) {
                        return this.getLayerTag(e, s, i) === t.AVATAR_IMAGE_SPRITE_TAG && this.avatarExists() ? -this.getSprite(i).height : super.getLayerYOffset(e, s, i)
                    }
                    get disposed() {
                        return this._disposed
                    }
                }
                return t.AVATAR_IMAGE_SPRITE_TAG = "avatar_image", t
            })();
            class nd extends Yu {}
            class rd extends Yu {}
            class od extends Gu {}
            let ad = (() => {
                class t extends Yu {
                    constructor() {
                        super(), this._stateQueue = [], this._animationCounter = -1
                    }
                    setAnimation(e) {
                        return e === t._Str_18395 && (this._stateQueue = [], this._stateQueue.push(t._Str_15915), this._animationCounter = t._Str_16054), super.setAnimation(e)
                    }
                    updateAnimation(t) {
                        return this._animationCounter > 0 && this._animationCounter--, this._animationCounter || this._stateQueue.length && super.setAnimation(this._stateQueue.shift()), super.updateAnimation(t)
                    }
                    usesAnimationResetting() {
                        return !0
                    }
                }
                return t._Str_4186 = 3, t._Str_18395 = 2, t._Str_15915 = 1, t._Str_16054 = 15, t
            })();
            class cd extends Yu {
                usesAnimationResetting() {
                    return !0
                }
            }
            class _d extends Vu {
                imageReady(t, e) {
                    super.imageReady(t, e), t && this.setImageOffset(t.width, t.height)
                }
                setImageOffset(t, e) {
                    const s = new Au;
                    s.setDirection(1, 0, -e), s.setDirection(3, 0, 0), s.setDirection(5, -t, 0), s.setDirection(7, -t, -e), s.setDirection(4, -t / 2, -e / 2), this._imageOffset = s
                }
                getLayerXOffset(t, e, s) {
                    if (this._imageOffset) {
                        const t = this._imageOffset.getXOffset(e, 0);
                        if (void 0 !== t) return t + this._offsetX
                    }
                    return super.getLayerXOffset(t, e, s) + this._offsetX
                }
                getLayerYOffset(t, e, s) {
                    if (this._imageOffset) {
                        const t = this._imageOffset.getYOffset(e, 0);
                        if (void 0 !== t) return t + this._offsetY
                    }
                    return super.getLayerYOffset(t, e, s) + this._offsetY
                }
                getLayerZOffset(t, e, s) {
                    return super.getLayerZOffset(t, e, s) + -this._offsetZ
                }
            }
            let hd = (() => {
                class t extends Yu {
                    getFrameNumber(e, s) {
                        const i = this.getLayerTag(e, this.direction, s),
                            n = this.object.getState(0);
                        switch (i) {
                            case t.ONES_SPRITE:
                                return Math.floor(n % 10);
                            case t.TENS_SPRITE:
                                return Math.floor(n / 10 % 10);
                            case t.HUNDREDS_SPRITE:
                                return Math.floor(n / 100 % 10);
                            case t.THOUSANDS_SPRITE:
                                return Math.floor(n / 1e3 % 10);
                            default:
                                return super.getFrameNumber(e, s)
                        }
                    }
                }
                return t.ONES_SPRITE = "ones_sprite", t.TENS_SPRITE = "tens_sprite", t.HUNDREDS_SPRITE = "hundreds_sprite", t.THOUSANDS_SPRITE = "thousands_sprite", t
            })();
            class ld extends Yu {}
            class ud extends Gu {
                getLayerColor(t, e, s) {
                    return this._data ? this._data.getLayerColor(t, e, s) : Du.DEFAULT_COLOR
                }
            }
            let dd = (() => {
                    class t extends Yu {
                        constructor() {
                            super(), this._stateQueue = [], this._running = !1, super.setAnimation(t._Str_11236)
                        }
                        setAnimation(e) {
                            if (0 === e && !this._running) return this._running = !0, this._stateQueue = [], this._stateQueue.push(t._Str_7627), void this._stateQueue.push(t._Str_4186);
                            if (e > 0 && e <= t.ANIMATION_ID_OFFSET_SLOW2) {
                                if (this._running) return this._running = !1, this._stateQueue = [], 2 === this.direction ? (this._stateQueue.push(t.ANIMATION_ID_OFFSET_SLOW1 + 5), this._stateQueue.push(t.ANIMATION_ID_OFFSET_SLOW2 + 5)) : (this._stateQueue.push(t.ANIMATION_ID_OFFSET_SLOW1 + e), this._stateQueue.push(t.ANIMATION_ID_OFFSET_SLOW2 + e)), void this._stateQueue.push(t._Str_11236);
                                super.setAnimation(t._Str_11236)
                            }
                        }
                        updateAnimation(t) {
                            return this.getLastFramePlayed(11) && this._stateQueue.length && super.setAnimation(this._stateQueue.shift()), super.updateAnimation(t)
                        }
                    }
                    return t.ANIMATION_ID_OFFSET_SLOW1 = 20, t.ANIMATION_ID_OFFSET_SLOW2 = 10, t._Str_7627 = 31, t._Str_4186 = 32, t._Str_11236 = 30, t
                })(),
                gd = (() => {
                    class t extends Yu {
                        updateObject(t, e) {
                            return super.updateObject(t, e), !0
                        }
                        getFrameNumber(e, s) {
                            const i = this.object.model.getValue(j.FURNITURE_VOTE_COUNTER_COUNT);
                            switch (this.getLayerTag(e, this.direction, s)) {
                                case t.ONES_SPRITE:
                                    return i % 10;
                                case t.TENS_SPRITE:
                                    return i / 10 % 10;
                                case t.HUNDREDS_SPRITE:
                                    return i / 100 % 10;
                                default:
                                    return super.getFrameNumber(e, s)
                            }
                        }
                        getLayerAlpha(e, s, i) {
                            if (this.object.model.getValue(j.FURNITURE_VOTE_COUNTER_COUNT) === t._Str_17839) switch (this.getLayerTag(e, s, i)) {
                                case t.ONES_SPRITE:
                                case t.TENS_SPRITE:
                                case t.HUNDREDS_SPRITE:
                                    return 0
                            }
                            return super.getLayerAlpha(e, s, i)
                        }
                    }
                    return t.ONES_SPRITE = "ones_sprite", t.TENS_SPRITE = "tens_sprite", t.HUNDREDS_SPRITE = "hundreds_sprite", t._Str_17839 = -1, t
                })(),
                md = (() => {
                    class t extends Yu {
                        getFrameNumber(e, s) {
                            const i = this.object.model.getValue(j.FURNITURE_VOTE_MAJORITY_RESULT);
                            switch (this.getLayerTag(e, this.direction, s)) {
                                case t.ONES_SPRITE:
                                    return i % 10;
                                case t.TENS_SPRITE:
                                    return i / 10 % 10;
                                case t.HUNDREDS_SPRITE:
                                    return i / 100 % 10;
                                default:
                                    return super.getFrameNumber(e, s)
                            }
                        }
                        getLayerAlpha(e, s, i) {
                            const n = this.object.model.getValue(j.FURNITURE_VOTE_MAJORITY_RESULT);
                            if (-1 !== t._Str_16109.indexOf(this.object.getState(0)) || n === t._Str_17618) switch (this.getLayerTag(e, s, i)) {
                                case t.ONES_SPRITE:
                                case t.TENS_SPRITE:
                                case t.HUNDREDS_SPRITE:
                                    return 0
                            }
                            return super.getLayerAlpha(e, s, i)
                        }
                    }
                    return t.ONES_SPRITE = "ones_sprite", t.TENS_SPRITE = "tens_sprite", t.HUNDREDS_SPRITE = "hundreds_sprite", t._Str_16109 = [-1, 1], t._Str_17618 = -1, t
                })();
            class pd extends Yu {}
            let bd = (() => {
                class t extends xu {
                    constructor(t, e) {
                        super(t, e), this._posturesToAnimations = new Map, this._gesturesToAnimations = new Map, this._defaultPosture = null
                    }
                    processPostures(t) {
                        if (!t) return !1;
                        for (const e in t) {
                            const s = t[e];
                            s && (this._posturesToAnimations.get(s.id) || (null === this._defaultPosture && (this._defaultPosture = s.id), this._posturesToAnimations.set(s.id, s.animationId)))
                        }
                        return void 0 !== this._posturesToAnimations.get(this._defaultPosture)
                    }
                    processGestures(t) {
                        if (!t) return !1;
                        for (const e in t) {
                            const s = t[e];
                            s && (this._gesturesToAnimations.get(s.id) || this._gesturesToAnimations.set(s.id, s.animationId))
                        }
                        return !0
                    }
                    postureToAnimation(t) {
                        return this._posturesToAnimations.get(t) || (t = this._defaultPosture), this._posturesToAnimations.get(t)
                    }
                    _Str_18284(t) {
                        return "ded" === t
                    }
                    gestureToAnimation(e) {
                        return this._gesturesToAnimations.get(e) ? this._gesturesToAnimations.get(e) : t.DEFAULT
                    }
                    _Str_14207(t, e) {
                        if (t >= 0 && t < this._posturesToAnimations.size) {
                            const e = this._posturesToAnimations.keys();
                            for (;;) {
                                const s = e.next();
                                if (s.done) return null;
                                if (t <= 0) return s.value;
                                --t
                            }
                        }
                        return e ? this._defaultPosture : null
                    }
                    _Str_17844(t) {
                        if (t >= 0 && t < this._gesturesToAnimations.size) {
                            const e = this._gesturesToAnimations.keys();
                            for (;;) {
                                const s = e.next();
                                if (s.done) return null;
                                if (t <= 0) return s.value;
                                --t
                            }
                        }
                        return null
                    }
                    _Str_17976(t) {
                        for (const e of this._gesturesToAnimations.keys())
                            if (this._gesturesToAnimations.get(e) === t) return e;
                        return null
                    }
                    get totalPostures() {
                        return this._posturesToAnimations.size
                    }
                    get totalGestures() {
                        return this._gesturesToAnimations.size
                    }
                }
                return t.DEFAULT = -1, t
            })();
            class Ed extends Fu {
                constructor() {
                    super(), this._isAllowedToTurnHead = !0
                }
                createSizeData(t, e, s) {
                    return t > 1 ? new bd(e, s) : new xu(e, s)
                }
                defineVisualizations(t) {
                    return this._isAllowedToTurnHead = !0, super.defineVisualizations(t)
                }
                processVisualElement(t, e, s) {
                    if (!t || !e || !s) return !1;
                    switch (e) {
                        case "postures":
                            if (!(t instanceof bd && t.processPostures(s))) return !1;
                            break;
                        case "gestures":
                            if (!(t instanceof bd && t.processGestures(s))) return !1;
                            break;
                        default:
                            if (!super.processVisualElement(t, e, s)) return !1
                    }
                    return !0
                }
                postureToAnimation(t, e) {
                    const s = this.getSizeData(t);
                    return s ? s.postureToAnimation(e) : bd.DEFAULT
                }
                _Str_18284(t, e) {
                    const s = this.getSizeData(t);
                    return !!s && s._Str_18284(e)
                }
                gestureToAnimation(t, e) {
                    const s = this.getSizeData(t);
                    return s ? s.gestureToAnimation(e) : bd.DEFAULT
                }
                _Str_14207(t, e, s) {
                    const i = this.getSizeData(t);
                    return i ? i._Str_14207(e, s) : null
                }
                _Str_17844(t, e) {
                    const s = this.getSizeData(t);
                    return s ? s._Str_17844(e) : null
                }
                _Str_17976(t, e) {
                    const s = this.getSizeData(t);
                    return s ? s._Str_17976(e) : null
                }
                totalPostures(t) {
                    const e = this.getSizeData(t);
                    return e ? e.totalPostures : 0
                }
                totalGestures(t) {
                    const e = this.getSizeData(t);
                    return e ? e.totalGestures : 0
                }
                get isAllowedToTurnHead() {
                    return this._isAllowedToTurnHead
                }
            }
            let fd = (() => {
                    class t extends Yu {
                        constructor() {
                            for (super(), this._data = null, this._posture = "", this._gesture = "", this._isSleeping = !1, this._headDirection = -1, this._headOnly = !1, this._nonHeadSprites = [], this._headSprites = [], this._saddleSprites = [], this._animationOver = !1, this._paletteIndex = -1, this._paletteName = "", this._customLayerIds = [], this._customPartIds = [], this._customPaletteIds = [], this._isRiding = !1, this._color = 16777215, this._previousAnimationDirection = -1, this._animationStates = []; this._animationStates.length < t._Str_16677;) this._animationStates.push(new Mu)
                        }
                        initialize(t) {
                            return t instanceof Ed && super.initialize(t)
                        }
                        dispose() {
                            if (super.dispose(), this._animationStates) {
                                for (; this._animationStates.length;) {
                                    const t = this._animationStates[0];
                                    t && t.dispose(), this._animationStates.pop()
                                }
                                this._animationStates = null
                            }
                        }
                        getAnimationId(t) {
                            return t.animationId
                        }
                        update(t, e, s, i) {
                            super.update(t, e, s, i)
                        }
                        updateModel(t) {
                            const e = this.object && this.object.model;
                            if (!e) return !1;
                            if (this.updateModelCounter === e.updateCounter) return !1;
                            const s = e.getValue(j.FIGURE_POSTURE),
                                i = e.getValue(j.FIGURE_GESTURE);
                            e.getValue(j.FIGURE_POSTURE), this.setPostureAndGesture(s, i);
                            let n = e.getValue(j.FURNITURE_ALPHA_MULTIPLIER) || null;
                            (null === n || isNaN(n)) && (n = 1), this._alphaMultiplier !== n && (this._alphaMultiplier = n, this._alphaChanged = !0), this._isSleeping = e.getValue(j.FIGURE_SLEEP) > 0;
                            const r = e.getValue(j.HEAD_DIRECTION);
                            this._headDirection = !isNaN(r) && this._data.isAllowedToTurnHead ? r : this.object.getDirection().x;
                            const o = e.getValue(j.PET_PALETTE_INDEX),
                                a = e.getValue(j.PET_CUSTOM_LAYER_IDS),
                                c = e.getValue(j.PET_CUSTOM_PARTS_IDS),
                                _ = e.getValue(j.PET_CUSTOM_PALETTE_IDS),
                                h = e.getValue(j.PET_IS_RIDING),
                                l = e.getValue(j.PET_HEAD_ONLY),
                                u = e.getValue(j.PET_COLOR);
                            return o !== this._paletteIndex && (this._paletteIndex = o, this._paletteName = this._paletteIndex.toString()), this._customLayerIds = a || [], this._customPartIds = c || [], this._customPaletteIds = _ || [], this._isRiding = !isNaN(h) && h > 0, this._headOnly = !isNaN(l) && l > 0, isNaN(u) || this._color === u || (this._color = u), this.updateModelCounter = e.updateCounter, !0
                        }
                        updateAnimation(t) {
                            if (this.object) {
                                const t = this.object.getDirection().x;
                                t !== this._previousAnimationDirection && (this._previousAnimationDirection = t, this.resetAllAnimationFrames())
                            }
                            return super.updateAnimation(t)
                        }
                        setPostureAndGesture(e, s) {
                            e !== this._posture && (this._posture = e, this._Str_16058(t._Str_16082, this._data.postureToAnimation(this._scale, e))), this._data._Str_18284(this._scale, e) && (s = null), s !== this._gesture && (this._gesture = s, this._Str_16058(t._Str_17658, this._data.gestureToAnimation(this._scale, s)))
                        }
                        _Str_22634(t) {
                            return t >= 0 && t < this._animationStates.length ? this._animationStates[t] : null
                        }
                        _Str_16058(t, e) {
                            const s = this._Str_22634(t);
                            s && this.setSubAnimation(s, e) && (this._animationOver = !1)
                        }
                        resetAllAnimationFrames() {
                            this._animationOver = !1;
                            let t = this._animationStates.length - 1;
                            for (; t >= 0;) {
                                const e = this._animationStates[t];
                                e && e.setLayerCount(this.animatedLayerCount), t--
                            }
                        }
                        updateAnimations(t) {
                            if (this._animationOver) return 0;
                            let e = !0,
                                s = 0,
                                i = 0;
                            for (; i < this._animationStates.length;) {
                                const n = this._animationStates[i];
                                n && !n.animationOver && (s |= this.updateFramesForAnimation(n, t), n.animationOver ? (Cu.isTransitionFromAnimation(n.animationId) || Cu.isTransitionToAnimation(n.animationId)) && (this._Str_16058(i, n.animationAfterTransitionId), e = !1) : e = !1), i++
                            }
                            return this._animationOver = e, s
                        }
                        getSpriteAssetName(e, s) {
                            if (this._headOnly && this._Str_24824(s)) return null;
                            if (this._isRiding && this._parser3(s)) return null;
                            const i = this.totalSprites;
                            if (s < i - t._Str_7490) {
                                const n = this.getValidSize(e);
                                if (s < i - (1 + t._Str_7490)) {
                                    if (s >= Pu.LAYER_LETTERS.length) return null;
                                    const t = Pu.LAYER_LETTERS[s];
                                    return 1 === n ? this._type + "_icon_" + t : this._type + "_" + n + "_" + t + "_" + this.getDirection(e, s) + "_" + this.getFrameNumber(n, s)
                                }
                                return this._type + "_" + n + "_sd_" + this.getDirection(e, s) + "_0"
                            }
                            return null
                        }
                        getLayerColor(e, s, i) {
                            return s < this.totalSprites - t._Str_7490 ? this._color : 16777215
                        }
                        getLayerXOffset(t, e, s) {
                            let i = super.getLayerXOffset(t, e, s),
                                n = this._animationStates.length - 1;
                            for (; n >= 0;) {
                                const t = this._animationStates[n];
                                if (t) {
                                    const e = t.getFrame(s);
                                    e && (i += e.x)
                                }
                                n--
                            }
                            return i
                        }
                        getLayerYOffset(t, e, s) {
                            let i = super.getLayerYOffset(t, e, s),
                                n = this._animationStates.length - 1;
                            for (; n >= 0;) {
                                const t = this._animationStates[n];
                                if (t) {
                                    const e = t.getFrame(s);
                                    e && (i += e.y)
                                }
                                n--
                            }
                            return i
                        }
                        getLayerZOffset(t, e, s) {
                            return this._data ? this._data.getLayerZOffset(t, this.getDirection(t, s), s) : Nu.DEFAULT_ZOFFSET
                        }
                        getDirection(t, e) {
                            return this._Str_23973(e) ? this._data.getValidDirection(t, this._headDirection) : this._direction
                        }
                        getFrameNumber(t, e) {
                            let s = this._animationStates.length - 1;
                            for (; s >= 0;) {
                                const t = this._animationStates[s];
                                if (t) {
                                    const s = t.getFrame(e);
                                    if (s) return s.id
                                }
                                s--
                            }
                            return super.getFrameNumber(t, e)
                        }
                        _Str_23973(e) {
                            if (void 0 === this._headSprites[e]) {
                                const s = this._data.getLayerTag(this._scale, wu._Str_9471, e) === t.HEAD,
                                    i = this._data.getLayerTag(this._scale, wu._Str_9471, e) === t.HAIR;
                                this._headSprites[e] = !(!s && !i)
                            }
                            return this._headSprites[e]
                        }
                        _Str_24824(e) {
                            if (void 0 === this._nonHeadSprites[e])
                                if (e < this.totalSprites - (1 + t._Str_7490)) {
                                    const s = this._data.getLayerTag(this._scale, wu._Str_9471, e);
                                    this._nonHeadSprites[e] = !!(s && s.length > 0 && s !== t.HEAD && s !== t.HAIR)
                                } else this._nonHeadSprites[e] = !0;
                            return this._nonHeadSprites[e]
                        }
                        _parser3(e) {
                            return void 0 === this._saddleSprites[e] && (this._saddleSprites[e] = this._data.getLayerTag(this._scale, wu._Str_9471, e) === t.SADDLE), this._saddleSprites[e]
                        }
                        getAsset(t, e = -1) {
                            if (!this.asset) return null;
                            const s = this._customLayerIds.indexOf(e);
                            let i = this._paletteName,
                                n = -1,
                                r = -1;
                            return s > -1 && (n = this._customPartIds[s], r = this._customPaletteIds[s], i = r > -1 ? r.toString() : this._paletteName), !isNaN(n) && n > -1 && (t = t + "_" + n), this.asset.getAssetWithPalette(t, i)
                        }
                        getAdditionalLayerCount() {
                            return super.getAdditionalLayerCount() + t._Str_7490
                        }
                        setLayerCount(t) {
                            super.setLayerCount(t), this._headSprites = []
                        }
                        getPostureForAsset(t, e) {
                            const s = e.split("_");
                            let i = s.length,
                                n = 0;
                            for (; n < s.length;) {
                                if ("64" === s[n] || "32" === s[n]) {
                                    i = n + 3;
                                    break
                                }
                                n++
                            }
                            let r = null;
                            if (i < s.length) {
                                let e = s[i];
                                e = e.split("@")[0], r = this._data._Str_14207(t, parseInt(e) / 100, !1), r || (r = this._data._Str_17976(t, parseInt(e) / 100))
                            }
                            return r
                        }
                    }
                    return t.TYPE = B.PET_ANIMATED, t.HEAD = "head", t.SADDLE = "saddle", t.HAIR = "hair", t._Str_7490 = 1, t._Str_13277 = 1e3, t.PET_EXPERIENCE_BUBBLE_PNG = "pet_experience_bubble_png", t._Str_16082 = 0, t._Str_17658 = 1, t._Str_16677 = 2, t
                })(),
                Sd = (() => {
                    class t {
                        constructor(t, e, s) {
                            this.type = t, this.loc = e, this.category = s
                        }
                        get loc() {
                            return this._loc
                        }
                        set loc(t) {
                            this._loc || (this._loc = new K), this._loc.assign(t)
                        }
                        get type() {
                            return this._type
                        }
                        set type(t) {
                            this._type = t
                        }
                        get category() {
                            return this._category
                        }
                        set category(t) {
                            this._category = t
                        }
                        dispose() {
                            this._loc = null
                        }
                    }
                    return t.WINDOW = "window", t.HOLE = "hole", t
                })();
            class Id {
                constructor() {
                    this._masks = []
                }
                get masks() {
                    return this._masks
                }
            }
            class Rd {
                constructor() {
                    this._masks = new Map
                }
                get _Str_6845() {
                    return this._masks.size
                }
                dispose() {
                    this._masks && (this.reset(), this._masks = null)
                }
                initialize(t) {
                    if (!t) return !1;
                    if (this._masks.clear(), t.masks.length)
                        for (const e of t.masks) {
                            if (!e) continue;
                            const t = e.locations.length ? e.locations[0] : null;
                            t && this._masks.set(e.id, new Sd(e.type, t, e.category))
                        }
                    return !0
                }
                reset() {
                    for (const t of this._masks.values()) t && t.dispose();
                    this._masks.clear()
                }
                addMask(t, e, s, i) {
                    const n = new Sd(e, s, i);
                    this._masks.delete(t), this._masks.set(t, n)
                }
                _Str_23574(t) {
                    const e = this._masks.get(t);
                    return !!e && (this._masks.delete(t), e.dispose(), !0)
                }
                _Str_5598() {
                    const t = new Id;
                    for (const [e, s] of this._masks.entries()) {
                        if (!s) continue;
                        const i = this._Str_21678(s),
                            n = this._Str_21644(s),
                            r = this._Str_19038(s);
                        i && n && r && t.masks.push({
                            id: e,
                            type: i,
                            category: n,
                            locations: [{
                                x: r.x,
                                y: r.y,
                                z: r.z
                            }]
                        })
                    }
                    return t
                }
                _Str_19038(t) {
                    return t ? t.loc : null
                }
                _Str_21678(t) {
                    return t ? t.type : null
                }
                _Str_21644(t) {
                    return t ? t.category : null
                }
                get masks() {
                    return this._masks
                }
            }
            class vd {
                constructor(t = null, e = 0, s = !1) {
                    this._assetNames = [], this._maskAssetNames = [], this._maskAssetLocations = [], this._maskAssetFlipHs = [], this._maskAssetFlipVs = [], null != t && (this._maskAssetNames = t._maskAssetNames, this._maskAssetLocations = t._maskAssetLocations, this._maskAssetFlipHs = t._maskAssetFlipHs, this._maskAssetFlipVs = t._maskAssetFlipVs), this._color = e, this._alignBottom = s
                }
                addMask(t, e, s, i) {
                    this._maskAssetNames.push(t), this._maskAssetLocations.push(e), this._maskAssetFlipHs.push(s), this._maskAssetFlipVs.push(i)
                }
                _Str_22862(t) {
                    this._assetNames.push(t)
                }
                set z(t) {
                    this._z = t
                }
                get z() {
                    return this._z
                }
                set cornerPoints(t) {
                    this._points = t
                }
                get cornerPoints() {
                    return this._points
                }
                get color() {
                    return this._color
                }
                get _Str_21807() {
                    return this._maskAssetNames
                }
                get _Str_20731() {
                    return this._maskAssetLocations
                }
                get _Str_21810() {
                    return this._maskAssetFlipHs
                }
                get _Str_19044() {
                    return this._maskAssetFlipVs
                }
                _Str_14945() {
                    return this._alignBottom
                }
                get _Str_17636() {
                    return this._assetNames
                }
            }
            class Td {
                constructor(t, e, s) {
                    this._type = t, this._leftSideLoc = e, this._rightSideLoc = s
                }
                get type() {
                    return this._type
                }
                get _Str_5120() {
                    return this._leftSideLoc
                }
                get _Str_4659() {
                    return this._rightSideLoc
                }
            }
            class Od {
                constructor(t, e, s, i) {
                    this._leftSideLoc = t, this._rightSideLoc = e, this._leftSideLength = s, this._rightSideLength = i
                }
                get _Str_5120() {
                    return this._leftSideLoc
                }
                get _Str_4659() {
                    return this._rightSideLoc
                }
                get _Str_9124() {
                    return this._leftSideLength
                }
                get _Str_12156() {
                    return this._rightSideLength
                }
            }
            class yd {
                constructor(t, e) {
                    this._bitmap = t, this._timeStamp = e
                }
                dispose() {
                    this._bitmap = null
                }
                get bitmap() {
                    return this._bitmap
                }
                get timeStamp() {
                    return this._timeStamp
                }
            }
            let Ad = (() => {
                    class t {
                        constructor() {
                            this._Str_16737 = 1, this._Str_16979 = 16777216, this._Str_25697 = 69069, this._Str_23320 = 5
                        }
                        static _Str_17384(e = 1) {
                            t._Str_3699 || (t._Str_3699 = new t), t._Str_3699._Str_15634 = e
                        }
                        static _Str_26085(e = 16777216) {
                            t._Str_3699 || (t._Str_3699 = new t), t._Str_3699._Str_25321 = e
                        }
                        static _Str_1612(e, s, i) {
                            return t._Str_3699 || (t._Str_3699 = new t), t._Str_3699._Str_24535(e, s, i)
                        }
                        static _Str_23572(e, s) {
                            return t._Str_3699 || (t._Str_3699 = new t), t._Str_3699._Str_24231(e, s)
                        }
                        set _Str_15634(t) {
                            this._Str_16737 = t
                        }
                        set _Str_25321(t) {
                            t < 1 && (t = 1), this._Str_16979 = t
                        }
                        dispose() {}
                        _Str_24535(t, e, s) {
                            const i = [];
                            let n = 0;
                            for (; n < t;) i.push(this._Str_19361(e, s - e)), n++;
                            return i
                        }
                        _Str_24231(t, e) {
                            if (t > e || e > 1e3) return null;
                            const s = [];
                            let i = 0;
                            for (; i <= e;) s.push(i), i++;
                            const n = [];
                            let r = 0;
                            for (; r < t;) {
                                const t = this._Str_19361(0, s.length - 1);
                                n.push(s[t]), s.splice(t, 1), r++
                            }
                            return n
                        }
                        _Str_24980() {
                            let t = this._Str_25697 * this._Str_16737 + this._Str_23320;
                            return t < 0 && (t = -t), t %= this._Str_16979, this._Str_16737 = t, t
                        }
                        _Str_19361(t, e) {
                            let s = this._Str_24980();
                            return e < 1 ? t : (s = t + s / this._Str_16979 * e, s)
                        }
                    }
                    return t._Str_21045 = 1, t._Str_20078 = 16777216, t._Str_3699 = null, t
                })(),
                Cd = (() => {
                    class t {
                        constructor(e, s, i, n, r, o, a, c, _ = 0, h = 0, l = 0, d = 0) {
                            if (this._Str_4795 = null, this._Str_1720 = 0, this._height = 0, this._Str_5886 = [], this._Str_4047 = [], this._Str_5088 = [], this._Str_8341 = [], this._Str_14495 = [], this._Str_16308 = c, this._Str_1049 = null, this._Str_2730 = null, this._Str_4891 = !1, this._Str_5545 = null, this._Str_5221 = new K, this._Str_5221.assign(e), this._location = new K, this._location.assign(s), this._Str_2920 = new K, this._Str_2920.assign(i), this._Str_2943 = new K, this._Str_2943.assign(n), this._normal = K.crossProduct(this._Str_2920, this._Str_2943), this._normal.length > 0 && this._normal.multiply(1 / this._normal.length), null != a)
                                for (const t of a) {
                                    if (!t) continue;
                                    const e = new K;
                                    e.assign(t), this._Str_5886.push(e)
                                }
                            this._disposed = !1, this._Str_3816 = !1, this._Str_576 = null, this._Str_13946 = !0, this._Str_3406 = -1, this._offset = new u.j, this._relativeDepth = 0, this._type = r, this._color = 0, this._rasterizer = null, this._Str_7367 = !0, this._Str_2708 = new Map, this._Str_2820 = new K, this._Str_2745 = new K, this._Str_2639 = new K, this._Str_2766 = new K, this._Str_1720 = 0, this._height = 0, this._Str_20541 = _, this._Str_19707 = h, this._Str_21079 = l, this._Str_22024 = d, this._Str_4542 = o, this._uniqueId = ++t._uniqueIdCounter
                        }
                        static blend(t, e) {
                            return 0
                        }
                        set _Str_14801(t) {
                            t !== this._Str_7367 && (this._Str_7367 || this._Str_11000(), this._Str_7367 = t)
                        }
                        get _Str_14801() {
                            return this._Str_7367
                        }
                        get bitmapData() {
                            if (!this.visible || !this._Str_1049) return null;
                            let t = $d.getTextureCache(this._Str_1049);
                            return t || (t = ot.generateTexture(this._Str_1049, new u.k(0, 0, this._Str_1720, this._height)), $d.addTextureCache(this._Str_1049, t)), t
                        }
                        get visible() {
                            return this._Str_3816 && this._Str_7367
                        }
                        get offset() {
                            return this._offset
                        }
                        get relativeDepth() {
                            return this._relativeDepth
                        }
                        get color() {
                            return this._color
                        }
                        set color(t) {
                            this._color = t
                        }
                        get type() {
                            return this._type
                        }
                        get _Str_5424() {
                            return this._Str_2920
                        }
                        get _Str_4968() {
                            return this._Str_2943
                        }
                        get location() {
                            return this._location
                        }
                        get normal() {
                            return this._normal
                        }
                        get _Str_18448() {
                            return this._Str_13946
                        }
                        set _Str_18448(t) {
                            this._Str_13946 = t
                        }
                        set rasterizer(t) {
                            this._rasterizer = t
                        }
                        set _Str_16279(t) {
                            this._Str_4795 = t
                        }
                        set id(t) {
                            t !== this._Str_576 && (this._Str_11000(), this._Str_576 = t)
                        }
                        get uniqueId() {
                            return this._uniqueId
                        }
                        dispose() {
                            if (this._Str_1049 && (this._Str_1049.destroy(), this._Str_1049 = null), this._Str_2708) {
                                for (const t of this._Str_2708.values()) t && (t.bitmap && t.bitmap.destroy(), t.dispose());
                                this._Str_2708 = null
                            }
                            this._Str_5545 = null, this._location = null, this._Str_5221 = null, this._Str_2920 = null, this._Str_2943 = null, this._normal = null, this._rasterizer = null, this._Str_2820 = null, this._Str_2745 = null, this._Str_2639 = null, this._Str_2766 = null, this._Str_4047 = null, this._Str_5088 = null, this._Str_2730 && (this._Str_2730.destroy(), this._Str_2730 = null), this._disposed = !0
                        }
                        _Str_24896(t) {
                            return this.visible && this._Str_1049 && t ? this._Str_1049.width !== t.width || this._Str_1049.height !== t.height ? null : t : null
                        }
                        _Str_17642(t, e) {
                            const s = this._Str_2708.get(t);
                            return s && (this._Str_2708.delete(t), s.dispose()), this._Str_5545 = e, this._Str_2708.set(t, e), !0
                        }
                        _Str_11000(t = null) {
                            if (this._Str_2708 && this._Str_2708.size) {
                                for (const t of this._Str_2708.values()) t && t.dispose();
                                this._Str_2708.clear()
                            }
                            this._Str_5545 = null
                        }
                        getTextureIdentifier(t) {
                            return this._rasterizer ? this._rasterizer.getTextureIdentifier(t, this.normal) : t.toString()
                        }
                        _Str_10518(t, e) {
                            if (!t) return !1;
                            let s = this._Str_5545;
                            return s || (s = this._Str_2708.get(this.getTextureIdentifier(t.scale))), this._Str_19336(), !(!this._Str_7367 || !(!s || s.timeStamp >= 0 && e > s.timeStamp || this._Str_4891))
                        }
                        _Str_10114(t, e) {
                            if (!t) return null;
                            let s = null;
                            if (this._Str_10518(t, e)) {
                                const i = this.getTextureIdentifier(t.scale),
                                    n = this._Str_2920.length * t.scale,
                                    r = this._Str_2943.length * t.scale,
                                    o = t.getCoordinatePosition(this._normal);
                                s = this._Str_5545 ? this._Str_5545 : this._Str_2708.get(i);
                                let a = null;
                                if (s && (a = s.bitmap), this._rasterizer) s = this._rasterizer.render(a, this._Str_576, n, r, t.scale, o, this._Str_13946, this._Str_20541, this._Str_19707, this._Str_21079, this._Str_22024, e), s && a && s.bitmap !== a && a.destroy();
                                else {
                                    const t = new u.f;
                                    t.beginFill(16777215), t.drawRect(0, 0, n, r), t.endFill(), s = new yd(t, -1)
                                }
                                s && (this._Str_17859(s.bitmap, t), this._Str_17642(i, s))
                            } else s = this._Str_5545 ? this._Str_5545 : this._Str_2708.get(this.getTextureIdentifier(t.scale));
                            return s ? (this._Str_5545 = s, s.bitmap) : null
                        }
                        _Str_23649(t) {
                            if (!this._Str_4542) return null;
                            const e = new vd;
                            for (; 0 < this._Str_4047.length;) {
                                const s = this._Str_4047[0];
                                if (s) {
                                    const i = this._Str_4795._Str_8361(s.type);
                                    if (i) {
                                        const n = i._Str_2125(t.scale);
                                        if (n) {
                                            const r = t.getCoordinatePosition(this._normal),
                                                o = i._Str_21021(t.scale, r);
                                            if (o) {
                                                const t = new u.j(this._Str_2730.width * (1 - s._Str_5120 / this._Str_2920.length) + o.offsetX, this._Str_2730.height * (1 - s._Str_4659 / this._Str_2943.length) + o.offsetY);
                                                e.addMask(n, t, o.flipH, o.flipV)
                                            }
                                        }
                                    }
                                }
                            }
                            return e
                        }
                        _Str_24802(t) {
                            const e = t.getScreenPoint(new K(0, 0, 0)),
                                s = t.getScreenPoint(new K(0, 1, 0));
                            return Math.round(this._Str_2920.length * Math.abs(e.x - s.x))
                        }
                        _Str_22136(t) {
                            const e = [];
                            if (this._Str_3816) {
                                const s = this._Str_23649(t),
                                    i = this._rasterizer._Str_8988(this._Str_576);
                                let n = 0;
                                for (; n < i.length;) {
                                    const r = i[n];
                                    if (r)
                                        if (this._Str_13946 && r._Str_8547()) {
                                            const i = t.getCoordinatePosition(this._normal),
                                                n = r._Str_8547()._Str_21968(i),
                                                o = new vd(s, this._color, n._Str_14945());
                                            Ad._Str_17384(this._Str_16308);
                                            for (const e of n._Str_23721(this._Str_24802(t))) {
                                                const t = [];
                                                for (const s of e._Str_22299()) {
                                                    const e = s._Str_2125(i);
                                                    e && t.push(e)
                                                }
                                                t.length > 0 && (e._Str_24523() || t.push(""), o._Str_22862(t))
                                            }
                                            o._Str_17636.length > 0 && e.push(o)
                                        } else {
                                            const t = new vd(s, this._color);
                                            e.push(t)
                                        }
                                    n++
                                }
                                e.length || e.push(new vd(s, this._color))
                            }
                            return e
                        }
                        update(e, s) {
                            if (!e || this._disposed) return !1;
                            let i = !1;
                            if (this._Str_3406 != e.updateId && (i = !0), !(i && this._Str_7367 || this.visible)) return !1;
                            if (i) {
                                this._Str_5545 = null;
                                let s = 0;
                                if (s = K.cosAngle(e.directionAxis, this.normal), s > -.001) return !!this._Str_3816 && (this._Str_3816 = !1, !0);
                                let i = 0;
                                for (; i < this._Str_5886.length;) {
                                    if (s = K.cosAngle(e.directionAxis, this._Str_5886[i]), s > -.001) return !!this._Str_3816 && (this._Str_3816 = !1, !0);
                                    i++
                                }
                                this._Str_18702(e);
                                const n = e.getScreenPosition(this._Str_5221).z;
                                let r = Math.max(this._Str_2820.z, this._Str_2745.z, this._Str_2639.z, this._Str_2766.z) - n;
                                this._type === t.TYPE_FLOOR && (r -= 8 * (this._location.z + Math.min(0, this._Str_2920.z, this._Str_2943.z))), this._type === t.TYPE_LANDSCAPE && (r += .02), this._relativeDepth = r, this._Str_3816 = !0, this._Str_3406 = e.updateId
                            }
                            if (i || this._Str_10518(e, s)) {
                                if (!this._Str_1049 || this._Str_1720 !== this._Str_1049.width || this._height !== this._Str_1049.height) {
                                    if (this._Str_1049) {
                                        if (this._Str_1049.destroy(), this._Str_1049 = null, this._Str_1720 < 1 || this._height < 1) return !0
                                    } else if (this._Str_1720 < 1 || this._height < 1) return !1;
                                    const t = new u.f;
                                    if (t.beginFill(16777215, 0), t.drawRect(0, 0, this._Str_1720, this._height), t.endFill(), this._Str_1049 = t, !this._Str_1049) return !1
                                }
                                Ad._Str_17384(this._Str_16308);
                                const t = this._Str_10114(e, s);
                                return t ? (this._Str_17000(e, t), null !== t || i) : (this.dispose(), !1)
                            }
                            return !1
                        }
                        _Str_18702(t) {
                            this._Str_2820.assign(t.getScreenPosition(this._location)), this._Str_2745.assign(t.getScreenPosition(K.sum(this._location, this._Str_2943))), this._Str_2639.assign(t.getScreenPosition(K.sum(K.sum(this._location, this._Str_2920), this._Str_2943))), this._Str_2766.assign(t.getScreenPosition(K.sum(this._location, this._Str_2920))), this._offset = t.getScreenPoint(this._Str_5221), this._Str_2820.x = Math.round(this._Str_2820.x), this._Str_2820.y = Math.round(this._Str_2820.y), this._Str_2745.x = Math.round(this._Str_2745.x), this._Str_2745.y = Math.round(this._Str_2745.y), this._Str_2639.x = Math.round(this._Str_2639.x), this._Str_2639.y = Math.round(this._Str_2639.y), this._Str_2766.x = Math.round(this._Str_2766.x), this._Str_2766.y = Math.round(this._Str_2766.y), this._offset.x = Math.round(this._offset.x), this._offset.y = Math.round(this._offset.y);
                            const e = Math.min(this._Str_2820.x, this._Str_2745.x, this._Str_2639.x, this._Str_2766.x);
                            let s = Math.max(this._Str_2820.x, this._Str_2745.x, this._Str_2639.x, this._Str_2766.x);
                            const i = Math.min(this._Str_2820.y, this._Str_2745.y, this._Str_2639.y, this._Str_2766.y);
                            let n = Math.max(this._Str_2820.y, this._Str_2745.y, this._Str_2639.y, this._Str_2766.y);
                            s -= e, this._offset.x = this._offset.x - e, this._Str_2820.x = this._Str_2820.x - e, this._Str_2745.x = this._Str_2745.x - e, this._Str_2639.x = this._Str_2639.x - e, this._Str_2766.x = this._Str_2766.x - e, n -= i, this._offset.y = this._offset.y - i, this._Str_2820.y = this._Str_2820.y - i, this._Str_2745.y = this._Str_2745.y - i, this._Str_2639.y = this._Str_2639.y - i, this._Str_2766.y = this._Str_2766.y - i, this._Str_1720 = s, this._height = n
                        }
                        _Str_17000(e, s) {
                            if (null == this._Str_2820 || null == this._Str_2745 || null == this._Str_2639 || null == this._Str_2766 || null == s || null == this._Str_1049) return;
                            let i = this._Str_2766.x - this._Str_2639.x,
                                n = this._Str_2766.y - this._Str_2639.y,
                                r = this._Str_2745.x - this._Str_2639.x,
                                o = this._Str_2745.y - this._Str_2639.y;
                            this._type != t.TYPE_WALL && this._type != t.TYPE_LANDSCAPE || (Math.abs(r - s.width) <= 1 && (r = s.width), Math.abs(o - s.width) <= 1 && (o = s.width), Math.abs(i - s.height) <= 1 && (i = s.height), Math.abs(n - s.height) <= 1 && (n = s.height));
                            const a = r / s.width,
                                c = o / s.width,
                                _ = i / s.height,
                                h = n / s.height,
                                l = new u.i;
                            l.a = a, l.b = c, l.c = _, l.d = h, l.translate(this._Str_2639.x, this._Str_2639.y), this.draw(s, l)
                        }
                        draw(t, e) {
                            const s = t.clone();
                            s.transform.setFromMatrix(e), this._Str_1049 = s
                        }
                        _Str_25213() {
                            !this._disposed && this._Str_4542 && this._Str_4047.length && (this._Str_4891 = !0, this._Str_4047 = [])
                        }
                        _Str_24569(t, e, s) {
                            if (!this._Str_4542) return !1;
                            let i = 0;
                            for (; i < this._Str_4047.length;) {
                                const n = this._Str_4047[i];
                                if (n && n.type === t && n._Str_5120 === e && n._Str_4659 === s) return !1;
                                i++
                            }
                            const n = new Td(t, e, s);
                            return this._Str_4047.push(n), this._Str_4891 = !0, !0
                        }
                        _Str_25934() {
                            this._Str_4542 && this._Str_5088.length && (this._Str_4891 = !0, this._Str_5088 = [])
                        }
                        _Str_24758(t, e, s, i) {
                            if (this._Str_4542) {
                                for (const r of this._Str_5088)
                                    if (r && r._Str_5120 === t && r._Str_4659 === e && r._Str_9124 === s && r._Str_12156 === i) return !1;
                                const n = new Od(t, e, s, i);
                                return this._Str_5088.push(n), this._Str_4891 = !0, !0
                            }
                            return !1
                        }
                        _Str_19336() {
                            if (!this._Str_4891) return;
                            let t, e = !0;
                            if (this._Str_4047.length === this._Str_8341.length) {
                                for (const s of this._Str_4047)
                                    if (s) {
                                        t = !1;
                                        for (const e of this._Str_8341)
                                            if (e && e.type === s.type && e._Str_5120 === s._Str_5120 && e._Str_4659 === s._Str_4659) {
                                                t = !0;
                                                break
                                            }
                                        if (!t) {
                                            e = !1;
                                            break
                                        }
                                    }
                            } else e = !1;
                            this._Str_5088.length > this._Str_14495.length && (e = !1), e && (this._Str_4891 = !1)
                        }
                        _Str_17859(t, e) {
                            if (!t || !e) return;
                            if (!this._Str_4542 || !this._Str_4047.length && !this._Str_5088.length && !this._Str_4891 || !this._Str_4795) return;
                            const s = t.width,
                                i = t.height;
                            if (this._Str_19336(), !this._Str_2730 || this._Str_2730.width !== s || this._Str_2730.height !== i) {
                                this._Str_2730 && (this._Str_2730.destroy(), this._Str_2730 = null);
                                const t = new u.f;
                                t.beginFill(16777215, 0).drawRect(0, 0, s, i).endFill(), this._Str_2730 = t, this._Str_4891 = !0
                            }
                            if (this._Str_4891) {
                                this._Str_8341 = [], this._Str_14495 = [], this._Str_2730 && this._Str_2730.beginFill(16777215, 0).drawRect(0, 0, s, i).endFill(), this._Str_11000(t);
                                const n = e.getCoordinatePosition(this._normal);
                                let r = null,
                                    o = 0,
                                    a = 0,
                                    c = 0;
                                for (; c < this._Str_4047.length;) {
                                    const t = this._Str_4047[c];
                                    t && (r = t.type, o = this._Str_2730.width - this._Str_2730.width * t._Str_5120 / this._Str_2920.length, a = this._Str_2730.height - this._Str_2730.height * t._Str_4659 / this._Str_2943.length, this._Str_4795._Str_17859(this._Str_2730, r, e.scale, n, o, a), this._Str_8341.push(new Td(r, t._Str_5120, t._Str_4659))), c++
                                }
                                for (c = 0; c < this._Str_5088.length;) {
                                    const t = this._Str_5088[c];
                                    if (t) {
                                        o = this._Str_2730.width - this._Str_2730.width * t._Str_5120 / this._Str_2920.length, a = this._Str_2730.height - this._Str_2730.height * t._Str_4659 / this._Str_2943.length;
                                        const e = this._Str_2730.width * t._Str_9124 / this._Str_2920.length,
                                            s = this._Str_2730.height * t._Str_12156 / this._Str_2943.length;
                                        this._Str_2730.beginFill(16711680).drawRect(o - e, a - s, e, s).endFill(), this._Str_14495.push(new Od(t._Str_9124, t._Str_4659, t._Str_9124, t._Str_12156))
                                    }
                                    c++
                                }
                                this._Str_4891 = !1
                            }
                            this._Str_24790(t, this._Str_2730)
                        }
                        _Str_24790(t, e) {
                            if (!t || !e) return;
                            const s = cp.instance.renderer.extract.canvas(e),
                                i = cp.instance.renderer.extract.canvas(t),
                                n = i.getContext("2d");
                            n.drawImage(s, 0, 0);
                            const r = n.getImageData(0, 0, i.width, i.height),
                                o = r.data;
                            for (let c = 0; c < o.length; c += 4) {
                                const t = o[c + 1],
                                    e = o[c + 2];
                                o[c] || t || e || (o[c + 3] = 0)
                            }
                            n.putImageData(r, 0, 0);
                            const a = u.p.from(i);
                            a && t.clear().beginTextureFill({
                                texture: a
                            }).drawRect(0, 0, a.width, a.height).endFill()
                        }
                    }
                    return t.ZERO_POINT = new u.j(0, 0), t.TYPE_UNDEFINED = 0, t.TYPE_WALL = 1, t.TYPE_FLOOR = 2, t.TYPE_LANDSCAPE = 3, t._uniqueIdCounter = 1, t
                })(),
                Md = (() => {
                    class t {
                        constructor(t, e = -1, s = 1, i = -1, n = 1) {
                            this._normalMinX = e, this._normalMaxX = s, this._normalMinY = i, this._normalMaxY = n, this._asset = t
                        }
                        get asset() {
                            return this._asset
                        }
                        get normalMinX() {
                            return this._normalMinX
                        }
                        get normalMaxX() {
                            return this._normalMaxX
                        }
                        get normalMinY() {
                            return this._normalMinY
                        }
                        get normalMaxY() {
                            return this._normalMaxY
                        }
                        dispose() {
                            this._asset = null
                        }
                    }
                    return t._Str_3268 = -1, t._Str_3271 = 1, t
                })(),
                Ud = (() => {
                    class t {
                        constructor() {
                            this._bitmaps = []
                        }
                        dispose() {
                            for (const t of this._bitmaps) t && t.dispose();
                            this._bitmaps = null
                        }
                        _Str_16790(t, e = -1, s = 1, i = -1, n = 1) {
                            this._bitmaps.push(new Md(t, e, s, i, n))
                        }
                        getAsset(t) {
                            if (!t) return null;
                            for (const e of this._bitmaps)
                                if (e && t.x >= e.normalMinX && t.x <= e.normalMaxX && t.y >= e.normalMinY && t.y <= e.normalMaxY) return e.asset;
                            return null
                        }
                    }
                    return t._Str_3268 = -1, t._Str_3271 = 1, t
                })();
            class Dd {
                constructor() {
                    this._sizes = [], this._maskVisualizations = new Map, this._assetNames = new Map, this._lastMaskVisualization = null, this._lastSize = -1
                }
                dispose() {
                    if (this._maskVisualizations) {
                        for (const t of this._maskVisualizations.values()) t && t.dispose();
                        this._maskVisualizations = null
                    }
                    this._lastMaskVisualization = null, this._sizes = null
                }
                _Str_24540(t) {
                    if (this._maskVisualizations.get(t)) return null;
                    const e = new Ud;
                    return this._maskVisualizations.set(t, e), this._sizes.push(t), this._sizes.sort(), e
                }
                _Str_8560(t) {
                    let e = 0;
                    for (; 1 < this._sizes.length;) {
                        if (this._sizes[1] > t) {
                            this._sizes[1] - t < t - this._sizes[0] && (e = 1);
                            break
                        }
                        e = 1
                    }
                    return e
                }
                _Str_24650(t) {
                    if (t === this._lastSize) return this._lastMaskVisualization;
                    const e = this._Str_8560(t);
                    return this._lastMaskVisualization = e < this._sizes.length ? this._maskVisualizations.get(this._sizes[e]) : null, this._lastSize = t, this._lastMaskVisualization
                }
                _Str_21021(t, e) {
                    const s = this._Str_24650(t);
                    return s ? s.getAsset(e) : null
                }
                _Str_2125(t) {
                    return this._assetNames && this._assetNames.get(t) || null
                }
                _Str_24425(t, e) {
                    this._assetNames && this._assetNames.set(t, e)
                }
            }
            class Nd {
                constructor() {
                    this._assetCollection = null, this._masks = new Map, this._data = null
                }
                get data() {
                    return this._data
                }
                dispose() {
                    if (this._assetCollection = null, this._data = null, this._masks && this._masks.size) {
                        for (const t of this._masks.values()) t && t.dispose();
                        this._masks.clear()
                    }
                }
                initialize(t) {
                    this._data = t
                }
                _Str_6703(t) {
                    this.data && (this._assetCollection = t, this._Str_22834(this.data, t))
                }
                _Str_22834(t, e) {
                    if (t && e && t.masks && t.masks.length) {
                        let s = 0;
                        for (; s < t.masks.length;) {
                            const i = t.masks[s];
                            if (i) {
                                const t = i.id;
                                if (this._masks.get(t)) continue;
                                const s = new Dd;
                                if (i.visualizations && i.visualizations.length) {
                                    let t = 0;
                                    for (; t < i.visualizations.length;) {
                                        const n = i.visualizations[t];
                                        if (n) {
                                            const t = n.size,
                                                i = s._Str_24540(t);
                                            if (i) {
                                                const r = this._Str_25815(n.bitmaps, i, e);
                                                s._Str_24425(t, r)
                                            }
                                        }
                                        t++
                                    }
                                }
                                this._masks.set(t, s)
                            }
                            s++
                        }
                    }
                }
                _Str_25815(t, e, s) {
                    if (!t || !t.length) return null;
                    let i = null;
                    for (const n of t) {
                        if (!n) continue;
                        const t = n.assetName,
                            r = s.getAsset(t);
                        if (!r) continue;
                        let o = Ud._Str_3268,
                            a = Ud._Str_3271,
                            c = Ud._Str_3268,
                            _ = Ud._Str_3271;
                        void 0 !== n.normalMinX && (o = n.normalMinX), void 0 !== n.normalMaxX && (a = n.normalMaxX), void 0 !== n.normalMinY && (c = n.normalMinY), void 0 !== n.normalMaxY && (_ = n.normalMaxY), r.flipH || (i = t), e._Str_16790(r, o, a, c, _)
                    }
                    return i
                }
                _Str_17859(t, e, s, i, n, r) {
                    const o = this._masks.get(e);
                    if (!o) return !0;
                    const a = o._Str_21021(s, i);
                    if (!a) return !0;
                    const c = a.texture;
                    if (!c) return !0;
                    const _ = new u.j(n + a.offsetX, r + a.offsetY),
                        h = new u.i;
                    let l = 1,
                        d = 1,
                        g = 0,
                        m = 0;
                    return a.flipH && (l = -1, g = -c.width), a.flipV && (d = -1, m = -c.height), h.scale(l, d), h.translate(_.x + g, _.y + m), t.beginTextureFill({
                        texture: c,
                        matrix: h
                    }).drawRect(h.tx, h.ty, c.width, c.height).endFill(), !0
                }
                _Str_8361(t) {
                    return this._masks && this._masks.size && this._masks.get(t) || null
                }
            }
            class wd {
                static _Str_16640(t) {
                    if (!t) return null;
                    const e = new u.i;
                    e.scale(-1, 1), e.translate(t.width, 0);
                    const s = new u.f;
                    return s.beginTextureFill({
                        texture: t,
                        matrix: e
                    }).drawRect(0, 0, t.width, t.height).endFill(), ot.generateTexture(s)
                }
                static _Str_20706(t) {
                    if (!t) return null;
                    const e = new u.i;
                    e.scale(1, -1), e.translate(0, t.height);
                    const s = new u.f;
                    return s.beginTextureFill({
                        texture: t,
                        matrix: e
                    }).drawRect(0, 0, t.width, t.height).endFill(), ot.generateTexture(s)
                }
                static _Str_20356(t) {
                    if (!t) return null;
                    const e = new u.i;
                    e.scale(-1, -1), e.translate(t.width, t.height);
                    const s = new u.f;
                    return s.beginTextureFill({
                        texture: t,
                        matrix: e
                    }).drawRect(0, 0, t.width, t.height).endFill(), ot.generateTexture(s)
                }
            }
            class Ld {
                constructor(t, e, s, i, n) {
                    this._x = t, this._y = e, this._speedX = s, this._speedY = i, this._bitmapData = n, isNaN(this._x) && (this._x = 0), isNaN(this._y) && (this._y = 0), isNaN(this._speedX) && (this._speedX = 0), isNaN(this._speedY) && (this._speedY = 0)
                }
                get bitmapData() {
                    return this._bitmapData
                }
                dispose() {
                    this._bitmapData = null
                }
                _Str_6729(t, e, s, i, n) {
                    let r = this._x,
                        o = this._y;
                    return s > 0 && (r += this._speedX / s * n / 1e3), i > 0 && (o += this._speedY / i * n / 1e3), new u.j(r % 1 * t, o % 1 * e)
                }
            }
            class xd {
                constructor(t, e) {
                    if (this._color = 0, this._bitmapData = null, this._isDisposed = !1, this._color = 0, this._bitmapData = null, this._isDisposed = !1, this._items = [], t && e)
                        for (const s of t) {
                            if (!s) continue;
                            const t = s.asset;
                            if (t) {
                                const i = e.getAsset(t);
                                i && this._items.push(new Ld(s.x, s.y, s.speedX, s.speedY, i))
                            }
                        }
                }
                get disposed() {
                    return this._isDisposed
                }
                dispose() {
                    if (this._isDisposed = !0, this._bitmapData && (this._bitmapData.destroy(), this._bitmapData = null), this._items) {
                        for (const t of this._items) t && t.dispose();
                        this._items = []
                    }
                }
                _Str_3355() {
                    this._bitmapData && (this._bitmapData.destroy(), this._bitmapData = null)
                }
                render(t, e, s, i, n, r, o, a, c, _, h) {
                    if (null != t && t.width == e && t.height == s || (null == this._bitmapData || this._bitmapData.width != e || this._bitmapData.height != s ? (null != this._bitmapData && this._bitmapData.destroy(), this._bitmapData = (new u.f).drawRect(0, 0, e, s)) : this._bitmapData.beginFill(16777215).drawRect(0, 0, this._bitmapData.width, this._bitmapData.height).endFill(), t = this._bitmapData), o > 0 && a > 0) {
                        let e = 0;
                        for (; e < this._items.length;) {
                            const s = this._items[e];
                            if (null != s) {
                                const e = s._Str_6729(o, a, c, _, h);
                                if (e.x = e.x - n, e.y = e.y - r, s.bitmapData)
                                    if (e.x > 0 && e.x + s.bitmapData.width < t.width) t.beginFill(65280).beginTextureFill({
                                        texture: s.bitmapData.texture,
                                        matrix: new u.i(1, 0, 0, 1, e.x, e.y)
                                    }).drawRect(e.x, e.y, s.bitmapData.width, s.bitmapData.height).endFill();
                                    else if (e.x > 0) {
                                    const i = t.width - e.x;
                                    t.beginFill(65280).beginTextureFill({
                                        texture: s.bitmapData.texture,
                                        matrix: new u.i(1, 0, 0, 1, e.x, e.y)
                                    }).drawRect(e.x, e.y, i, s.bitmapData.height).endFill()
                                } else {
                                    const i = s.bitmapData.width + e.x;
                                    t.beginFill(65280).beginTextureFill({
                                        texture: s.bitmapData.texture,
                                        matrix: new u.i(1, 0, 0, 1, e.x, e.y)
                                    }).drawRect(0, e.y, i, s.bitmapData.height).endFill()
                                }
                            }
                            e++
                        }
                    }
                    return t
                }
            }
            let Pd = (() => {
                class t {
                    constructor(t, e, s, i = 0) {
                        this._material = t, this._offset = i, this._align = s, this._color = e, this._bitmapData = null, this._isDisposed = !1
                    }
                    get offset() {
                        return this._offset
                    }
                    get align() {
                        return this._align
                    }
                    get disposed() {
                        return this._isDisposed
                    }
                    dispose() {
                        this._isDisposed = !0, this._material = null, this._Str_3355()
                    }
                    _Str_3355() {
                        this._bitmapData && (this._bitmapData.destroy(), this._bitmapData = null)
                    }
                    render(e, s, i, n, r, o, a) {
                        e && e.width === s && e.height === i || (e = null);
                        let c = null;
                        if (this._material) c = this._material.render(null, s, i, n, r, o, a + this.offset, this.align === t.ALIGN_TOP), c && c !== e && (this._bitmapData && this._bitmapData.destroy(), this._bitmapData = c.clone(), c = this._bitmapData);
                        else if (e) e.beginFill(16777215).drawRect(0, 0, s, i).endFill(), c = e;
                        else {
                            if (this._bitmapData && this._bitmapData.width === s && this._bitmapData.height === i) return this._bitmapData;
                            this._bitmapData && this._bitmapData.destroy();
                            const t = (new u.f).beginFill(16777215).drawRect(0, 0, s, i).endFill();
                            this._bitmapData = t, c = this._bitmapData
                        }
                        if (c && (c.tint = this._color, e && c !== e)) {
                            let t = $d.getTextureCache(c);
                            t || (t = ot.generateTexture(c, new u.k(0, 0, s, i)), $d.addTextureCache(c, t)), e.beginTextureFill({
                                texture: t
                            }).drawRect(0, 0, s, i).endFill(), c = e
                        }
                        return c
                    }
                    _Str_8547() {
                        return this._material
                    }
                    _Str_751() {
                        return this._color
                    }
                }
                return t._Str_1934 = 0, t.ALIGN_TOP = 1, t._Str_3606 = 2, t._Str_6914 = t.ALIGN_TOP, t
            })();
            class Fd {
                constructor(t, e, s) {
                    this._layers = [], this._geometry = s, this._cachedBitmapData = null, this._cachedBitmapNormal = new K, this._isCached = !1, this._hasAnimationLayers = !1, e < 0 && (e = 0);
                    let i = 0;
                    for (; i < e;) this._layers.push(null), i++
                }
                get geometry() {
                    return this._geometry
                }
                get _Str_20530() {
                    return this._hasAnimationLayers
                }
                dispose() {
                    if (this._layers && this._layers.length) {
                        for (const t of this._layers) t && t.dispose();
                        this._layers = null
                    }
                    this._geometry = null, this._cachedBitmapData && (this._cachedBitmapData.destroy(), this._cachedBitmapData = null), this._cachedBitmapNormal && (this._cachedBitmapNormal = null)
                }
                _Str_3355() {
                    if (this._isCached) {
                        if (this._cachedBitmapData && (this._cachedBitmapData.destroy(), this._cachedBitmapData = null), this._cachedBitmapNormal && this._cachedBitmapNormal.assign(new K), this._layers && this._layers.length)
                            for (const t of this._layers) t && t._Str_3355();
                        this._isCached = !1
                    }
                }
                _Str_21464(t, e, s, i, n = 0) {
                    if (t < 0 || t > this._layers.length) return !1;
                    let r = this._layers[t];
                    return r && r.dispose(), r = new Pd(e, s, i, n), this._layers[t] = r, !0
                }
                _Str_23489(t, e, s) {
                    if (t < 0 || t > this._layers.length) return !1;
                    let i = this._layers[t];
                    return i && i.dispose(), i = new xd(e, s), this._layers[t] = i, this._hasAnimationLayers = !0, !0
                }
                _Str_8988() {
                    return this._layers
                }
                render(t, e, s, i, n, r = 0, o = 0, a = 0, c = 0, _ = 0, h = 0, l = 0) {
                    if (e < 1 && (e = 1), s < 1 && (s = 1), t && t.width === e && t.height === s || (t = null), this._cachedBitmapData)
                        if (this._cachedBitmapData.width === e && this._cachedBitmapData.height === s && K.isEqual(this._cachedBitmapNormal, i)) {
                            if (!this._Str_20530) {
                                if (t) {
                                    const i = ot.generateTexture(this._cachedBitmapData, new u.k(0, 0, e, s));
                                    if (i) return t.beginTextureFill({
                                        texture: i
                                    }).drawRect(0, 0, i.width, i.height).endFill(), t
                                }
                                return this._cachedBitmapData
                            }
                        } else this._cachedBitmapData.destroy(), this._cachedBitmapData = null;
                    if (this._isCached = !0, this._cachedBitmapData) this._cachedBitmapData.beginFill(16777215).drawRect(0, 0, e, s).endFill();
                    else {
                        const t = (new u.f).beginFill(16777215).drawRect(0, 0, e, s).endFill();
                        this._cachedBitmapData = t
                    }
                    if (t || (t = this._cachedBitmapData), this._cachedBitmapNormal.assign(i), this._layers && this._layers.length)
                        for (const u of this._layers) u && (u instanceof Pd ? u.render(t, e, s, i, n, r, o) : u instanceof xd && u.render(t, e, s, i, r, o, a, c, _, h, l));
                    if (t && t !== this._cachedBitmapData) {
                        const e = ot.generateTexture(t, new u.k(0, 0, t.width, t.height));
                        return this._cachedBitmapData.beginTextureFill({
                            texture: e
                        }).drawRect(0, 0, t.width, t.height).endFill(), t
                    }
                    return this._cachedBitmapData
                }
            }
            class Gd {
                constructor() {
                    this._planeVisualizations = new Map, this._sizes = [], this._lastPlaneVisualization = null, this._lastSize = -1
                }
                isStatic(t) {
                    return !0
                }
                dispose() {
                    for (const t of this._planeVisualizations.values()) t && t.dispose();
                    this._planeVisualizations = null, this._lastPlaneVisualization = null, this._sizes = null, this._lastSize = -1
                }
                _Str_3355() {
                    for (const t of this._planeVisualizations.values()) t && t._Str_3355()
                }
                _Str_20305(t, e, s) {
                    if (this._planeVisualizations.get(t.toString())) return null;
                    const i = new Fd(t, e, s);
                    return this._planeVisualizations.set(t.toString(), i), this._sizes.push(t), this._sizes.sort(), i
                }
                _Str_8560(t) {
                    let e = 0,
                        s = 1;
                    for (; s < this._sizes.length;) {
                        if (this._sizes[s] > t) {
                            this._sizes[s] - t < t - this._sizes[s - 1] && (e = s);
                            break
                        }
                        e = s, s++
                    }
                    return e
                }
                _Str_6009(t) {
                    if (t === this._lastSize) return this._lastPlaneVisualization;
                    const e = this._Str_8560(t);
                    return this._lastPlaneVisualization = e < this._sizes.length ? this._planeVisualizations.get(this._sizes[e].toString()) : null, this._lastSize = t, this._lastPlaneVisualization
                }
                _Str_8988() {
                    return this._Str_6009(this._lastSize)._Str_8988()
                }
            }
            let Yd = (() => {
                    class t extends Gd {
                        render(t, e, s, i, n, r, o, a) {
                            const c = this._Str_6009(i);
                            if (!c || !c.geometry) return null;
                            const _ = c.geometry.getScreenPoint(new K(0, 0, 0)),
                                h = c.geometry.getScreenPoint(new K(0, s / c.geometry.scale, 0)),
                                l = c.geometry.getScreenPoint(new K(e / c.geometry.scale, 0, 0));
                            let u = 0,
                                d = 0;
                            if (_ && h && l) {
                                e = Math.round(Math.abs(_.x - l.x)), s = Math.round(Math.abs(_.x - h.x));
                                const t = _.x - c.geometry.getScreenPoint(new K(1, 0, 0)).x;
                                u = o * Math.trunc(Math.abs(t)), d = a * Math.trunc(Math.abs(t))
                            }
                            return c.render(t, e, s, n, r, u, d)
                        }
                    }
                    return t._Str_2531 = 16777215, t._Str_5433 = 45, t._Str_5509 = 30, t
                })(),
                kd = (() => {
                    class t {
                        constructor(t, e, s = 1) {
                            if (this._cells = [], this._repeatMode = s, this._width = t < 1 ? 1 : t, this._cachedBitmapData = null, this._cachedBitmapNormal = null, this._cachedBitmapDataOffsetX = 0, this._cachedBitmapDataOffsetY = 0, this._isCached = !1, this._isStatic = !0, e && e.length) {
                                let t = 0;
                                for (; t < e.length;) {
                                    const s = e[t];
                                    s && (this._cells.push(s), s.isStatic || (this._isStatic = !1)), t++
                                }
                            }
                        }
                        get isStatic() {
                            return this._isStatic
                        }
                        _Str_24523() {
                            return !(this._repeatMode === t._Str_9685)
                        }
                        get width() {
                            return this._width
                        }
                        dispose() {
                            if (this._cells && this._cells.length) {
                                for (const t of this._cells) t && t.dispose();
                                this._cells = null
                            }
                            this._cachedBitmapData && (this._cachedBitmapData.destroy(), this._cachedBitmapData = null), this._cachedBitmapNormal && (this._cachedBitmapNormal = null)
                        }
                        _Str_3355() {
                            if (this._isCached) {
                                if (this._cachedBitmapData && (this._cachedBitmapData.destroy(), this._cachedBitmapData = null), this._cachedBitmapNormal && (this._cachedBitmapNormal.x = 0, this._cachedBitmapNormal.y = 0, this._cachedBitmapNormal.z = 0), this._cells && this._cells.length)
                                    for (const t of this._cells) t && t._Str_3355();
                                this._isCached = !1
                            }
                        }
                        render(e, s, i, n) {
                            let r = 0;
                            if (this._repeatMode == t._Str_9685 && (r = this._Str_19857(this._cells, s), e = r), this._cachedBitmapNormal || (this._cachedBitmapNormal = new K), this.isStatic) {
                                if (this._cachedBitmapData) {
                                    if (this._cachedBitmapData.height === e && K.isEqual(this._cachedBitmapNormal, s) && this._cachedBitmapDataOffsetX === i && this._cachedBitmapDataOffsetY === n) return this._cachedBitmapData;
                                    this._cachedBitmapData.destroy(), this._cachedBitmapData = null
                                }
                            } else this._cachedBitmapData && (this._cachedBitmapData.height === e ? this._cachedBitmapData.beginFill(16777215).drawRect(0, 0, this._cachedBitmapData.width, e).endFill() : (this._cachedBitmapData.destroy(), this._cachedBitmapData = null));
                            if (this._isCached = !0, this._cachedBitmapData || (this._cachedBitmapData = (new u.f).beginFill(16777215).drawRect(0, 0, this._width, e).endFill()), this._cachedBitmapNormal.assign(s), this._cachedBitmapDataOffsetX = i, this._cachedBitmapDataOffsetY = n, !this._cells.length) return this._cachedBitmapData;
                            switch (this._repeatMode) {
                                case t._Str_9685:
                                    this._Str_25839(s);
                                    break;
                                case t._Str_6087:
                                    console.log("tru2");
                                    break;
                                case t._Str_6114:
                                    console.log("tru3");
                                    break;
                                case t._Str_6187:
                                    console.log("tru4");
                                    break;
                                case t._Str_6063:
                                    console.log("tru5");
                                    break;
                                default:
                                    this._Str_18711(s, i, n)
                            }
                            return this._cachedBitmapData
                        }
                        _Str_19857(t, e) {
                            if (!t || !t.length) return 0;
                            let s = 0,
                                i = 0;
                            for (; i < t.length;) {
                                const n = t[i];
                                n && (s += n._Str_9599(e)), i++
                            }
                            return s
                        }
                        _Str_4757(t, e, s, i, n = 0, r = 0) {
                            if (!t || !t.length || !this._cachedBitmapData) return e;
                            let o = 0;
                            for (; o < t.length;) {
                                let a = null;
                                if (a = s ? t[o] : t[t.length - 1 - o], a) {
                                    const t = a.render(i, n, r);
                                    if (t && (s || (e -= t.height), t.y = e, this._cachedBitmapData.addChild(t), s && (e += t.height), s && e >= this._cachedBitmapData.height || !s && e <= 0)) return e
                                }
                                o++
                            }
                            return e
                        }
                        _Str_25839(t) {
                            this._cells.length && this._cachedBitmapData && this._Str_4757(this._cells, 0, !0, t)
                        }
                        _Str_18711(t, e, s) {
                            if (!this._cells.length || !this._cachedBitmapData) return;
                            let i = 0;
                            for (; i < this._cachedBitmapData.height;)
                                if (i = this._Str_4757(this._cells, i, !0, t, e, s), !i) return
                        }
                        _Str_22299() {
                            return this._cells
                        }
                    }
                    return t._Str_9685 = 0, t._Str_7916 = 1, t._Str_6087 = 2, t._Str_6114 = 3, t._Str_6187 = 4, t._Str_6063 = 5, t
                })(),
                Vd = (() => {
                    class t {
                        constructor(e, s = 1, i = 1, n = -1, r = 1, o = -1, a = 1) {
                            this._repeatMode = 1, this._align = 1, this._cachedBitmapNormal = null, this._cachedBitmapHeight = 0, this._isCached = !1, this._isStatic = !0, this._normalMinX = -1, this._normalMaxX = 1, this._normalMinY = -1, this._normalMaxY = 1, this._columns = [], e < 1 && (e = 1);
                            let c = 0;
                            for (; c < e;) this._columns.push(null), c++;
                            this._repeatMode = s, this._align = i, this._normalMinX = n, this._normalMaxX = r, this._normalMinY = o, this._normalMaxY = a, this._repeatMode == t._Str_9127 && (this._isStatic = !1)
                        }
                        static _Str_12526(t) {
                            return Ad._Str_1612(1, 0, 17631 * t)[0] % t
                        }
                        get normalMinX() {
                            return this._normalMinX
                        }
                        get normalMaxX() {
                            return this._normalMaxX
                        }
                        get normalMinY() {
                            return this._normalMinY
                        }
                        get normalMaxY() {
                            return this._normalMaxY
                        }
                        _Str_14945() {
                            return this._align === t._Str_3606
                        }
                        get isStatic() {
                            return this._isStatic
                        }
                        dispose() {
                            this._cachedBitmapData && (this._cachedBitmapData.destroy(), this._cachedBitmapData = null), this._cachedBitmapNormal && (this._cachedBitmapNormal = null)
                        }
                        _Str_3355() {
                            if (this._isCached) {
                                if (this._cachedBitmapData && (this._cachedBitmapData.destroy(), this._cachedBitmapData = null), this._cachedBitmapNormal && (this._cachedBitmapNormal.x = 0, this._cachedBitmapNormal.y = 0, this._cachedBitmapNormal.z = 0), this._columns && this._columns.length)
                                    for (const t of this._columns) t && t._Str_3355();
                                this._isCached = !1
                            }
                        }
                        _Str_22372(t, e, s, i = 1) {
                            if (t < 0 || t >= this._columns.length) return !1;
                            const n = new kd(e, s, i),
                                r = this._columns[t];
                            return r && r.dispose(), this._columns[t] = n, n && !n.isStatic && (this._isStatic = !1), !0
                        }
                        render(e, s, i, n, r, o, a, c) {
                            if (s < 1 && (s = 1), i < 1 && (i = 1), e && e.width === s && e.height === i || (e = null), this._cachedBitmapNormal || (this._cachedBitmapNormal = new K), this.isStatic) {
                                if (this._cachedBitmapData) {
                                    if (this._cachedBitmapData.width === s && this._cachedBitmapData.height == i && K.isEqual(this._cachedBitmapNormal, n)) return e ? (this._Str_17578(e, this._cachedBitmapHeight, a, c), e) : this._cachedBitmapData;
                                    this._cachedBitmapData.destroy(), this._cachedBitmapData = null
                                }
                            } else this._cachedBitmapData && (this._cachedBitmapData.width === s && this._cachedBitmapData.height === i ? this._cachedBitmapData.beginFill(16777215).drawRect(0, 0, s, i).endFill() : (this._cachedBitmapData.destroy(), this._cachedBitmapData = null));
                            if (this._isCached = !0, this._cachedBitmapNormal.assign(n), !r) {
                                if (this._cachedBitmapHeight = i, this._cachedBitmapData) this._cachedBitmapData.beginFill(16777215).drawRect(0, 0, s, i).endFill();
                                else {
                                    const t = (new u.f).beginFill(16777215).drawRect(0, 0, s, i).endFill();
                                    this._cachedBitmapData = t
                                }
                                return e ? (this._Str_17578(e, i, a, c), e) : this._cachedBitmapData
                            }
                            if (!this._cachedBitmapData) {
                                this._cachedBitmapHeight = i;
                                const t = (new u.f).beginFill(16777215).drawRect(0, 0, s, i).endFill();
                                this._cachedBitmapData = t
                            }
                            const _ = [];
                            let h = 0;
                            for (; h < this._columns.length;) {
                                const t = this._columns[h];
                                if (t) {
                                    const e = t.render(i, n, o, a);
                                    e && _.push(e)
                                }
                                h++
                            }
                            if (!_.length) return e || this._cachedBitmapData;
                            let l = 0;
                            switch (this._repeatMode) {
                                case t._Str_6087:
                                case t._Str_6114:
                                case t._Str_6187:
                                case t._Str_6063:
                                case t._Str_9127:
                                    break;
                                default:
                                    l = this._Str_18711(this._cachedBitmapData, _)
                            }
                            return this._cachedBitmapHeight = l, e ? (this._Str_17578(e, l, a, c), e) : this._cachedBitmapData
                        }
                        _Str_17578(e, s, i, n) {
                            if (!e || !this._cachedBitmapData || e === this._cachedBitmapData) return;
                            let r;
                            n || (i = e.height - s - i), r = new u.k(0, this._align == t.ALIGN_TOP ? 0 : this._cachedBitmapData.height - this._cachedBitmapHeight, this._cachedBitmapData.width, this._cachedBitmapHeight);
                            const o = ot.generateTexture(this._cachedBitmapData, r);
                            o && e.beginTextureFill({
                                texture: o
                            }).drawRect(0, i, r.width, r.height).endFill()
                        }
                        _Str_25859(t) {
                            if (!t || !t.length) return 0;
                            let e = 0;
                            for (const s of t) s && (e += s.width);
                            return e
                        }
                        _Str_4606(e, s, i, n) {
                            if (!e || !s || !s.length) return new u.j(i, 0);
                            let r = 0,
                                o = null,
                                a = 0;
                            for (; a < s.length;) {
                                if (o = n ? s[a] : s[s.length - 1 - a], null != o) {
                                    n || (i -= o.width);
                                    let s = 0;
                                    this._align == t._Str_3606 && (s = e.height - o.height);
                                    let a = $d.getTextureCache(o);
                                    if (a || (a = ot.generateTexture(o, new u.k(0, 0, o.width, o.height)), $d.addTextureCache(o, a)), e.beginTextureFill({
                                            texture: a
                                        }), e.drawRect(i, s, a.width, a.height), e.endFill(), o.height > r && (r = o.height), n && (i += o.width), n && i >= e.width || !n && i <= 0) return new u.j(i, r)
                                }
                                a++
                            }
                            return new u.j(i, r)
                        }
                        _Str_18711(t, e) {
                            if (!t || !e || !e.length) return 0;
                            this._Str_25859(e);
                            let s = 0,
                                i = 0;
                            for (; s < t.width;) {
                                const n = this._Str_4606(t, e, s, !0);
                                if (s = n.x, n.y > i && (i = n.y), !n.x) return i
                            }
                            return i
                        }
                        _Str_23721(e) {
                            if (this._repeatMode === t._Str_9127) {
                                const s = [];
                                let i = 0;
                                for (; i < e;) {
                                    const e = this._columns[t._Str_12526(this._columns.length)];
                                    if (e) {
                                        if (s.push(e), !(e.width > 1)) break;
                                        i += e.width
                                    }
                                }
                                return s
                            }
                            return this._columns
                        }
                    }
                    return t._Str_7916 = 1, t._Str_6087 = 2, t._Str_6114 = 3, t._Str_6187 = 4, t._Str_6063 = 5, t._Str_9127 = 6, t._Str_18632 = t._Str_7916, t._Str_3268 = -1, t._Str_3271 = 1, t.ALIGN_TOP = 1, t._Str_3606 = 2, t._Str_6914 = t.ALIGN_TOP, t
                })(),
                Zd = (() => {
                    class t {
                        constructor() {
                            this._planeMaterialItems = [], this._isCached = !1
                        }
                        dispose() {
                            if (this._planeMaterialItems && this._planeMaterialItems.length) {
                                for (const t of this._planeMaterialItems) t && t.dispose();
                                this._planeMaterialItems = null
                            }
                            this._isCached = !1
                        }
                        _Str_3355() {
                            if (this._isCached) {
                                if (this._planeMaterialItems && this._planeMaterialItems.length)
                                    for (const t of this._planeMaterialItems) t && t._Str_3355();
                                this._isCached = !1
                            }
                        }
                        _Str_24503(t, e, s, i = -1, n = 1, r = -1, o = 1) {
                            const a = new Vd(t, e, s, i, n, r, o);
                            return this._planeMaterialItems.push(a), a
                        }
                        _Str_21968(t) {
                            if (!t) return null;
                            if (this._planeMaterialItems && this._planeMaterialItems.length)
                                for (const e of this._planeMaterialItems)
                                    if (e && t.x >= e.normalMinX && t.x <= e.normalMaxX && t.y >= e.normalMinY && t.y <= e.normalMaxY) return e;
                            return null
                        }
                        render(t, e, s, i, n, r, o, a) {
                            e < 1 && (e = 1), s < 1 && (s = 1);
                            const c = this._Str_21968(i);
                            return c ? (this._isCached = !0, c.render(t, e, s, i, n, r, o, a)) : null
                        }
                    }
                    return t._Str_3268 = -1, t._Str_3271 = 1, t
                })();
            class jd {
                constructor(t, e = null, s = null, i = 0) {
                    if (this._extraItemCount = 0, this._cachedBitmapData = null, this._texture = t, this._extraItemOffsets = [], this._extraItemAssets = [], this._extraItemCount = 0, e && e.length && i > 0) {
                        let t = 0;
                        for (; t < e.length;) {
                            const s = e[t];
                            s && this._extraItemAssets.push(s), t++
                        }
                        if (this._extraItemAssets.length) {
                            if (s) {
                                let t = 0;
                                for (; t < s.length;) {
                                    const e = s[t];
                                    e && this._extraItemOffsets.push(new u.j(e.x, e.y)), t++
                                }
                            }
                            this._extraItemCount = i
                        }
                    }
                }
                get isStatic() {
                    return 0 == this._extraItemCount
                }
                dispose() {
                    this._texture && (this._texture.dispose(), this._texture = null), this._cachedBitmapData && (this._cachedBitmapData.destroy(), this._cachedBitmapData = null), this._extraItemAssets = null, this._extraItemOffsets = null, this._extraItemCount = 0
                }
                _Str_3355() {
                    this._cachedBitmapData && (this._cachedBitmapData.destroy(), this._cachedBitmapData = null)
                }
                _Str_9599(t) {
                    if (this._texture) {
                        const e = this._texture._Str_4913(t);
                        if (e) return e.height
                    }
                    return 0
                }
                render(t, e, s) {
                    if (!this._texture) return null;
                    const i = this._texture._Str_4913(t);
                    if (!i) return null;
                    let n = null;
                    if (0 !== e || 0 !== s) {
                        for (; e < 0;) e += i.width;
                        for (; s < 0;) s += i.height;
                        const t = new u.q(i, i.width, i.height);
                        t.tilePosition.x = e % i.width, t.tilePosition.y = s % i.height, t.uvRespectAnchor = !0, e && (t.anchor.x = 1, t.scale.x = -1), s && (t.anchor.y = 1, t.scale.y = -1), n = t
                    } else n = new u.n(i);
                    return n || null
                }
                _Str_2125(t) {
                    return null == this._texture ? null : this._texture._Str_2125(t)
                }
            }
            let Bd = (() => {
                    class t {
                        constructor(t, e = -1, s = 1, i = -1, n = 1, r = null) {
                            this._normalMinX = e, this._normalMaxX = s, this._normalMinY = i, this._normalMaxY = n, this._assetName = r, this._bitmap = t
                        }
                        get bitmap() {
                            return this._bitmap
                        }
                        get normalMinX() {
                            return this._normalMinX
                        }
                        get normalMaxX() {
                            return this._normalMaxX
                        }
                        get normalMinY() {
                            return this._normalMinY
                        }
                        get normalMaxY() {
                            return this._normalMaxY
                        }
                        get assetName() {
                            return this._assetName
                        }
                        dispose() {
                            this._bitmap = null
                        }
                    }
                    return t._Str_3268 = -1, t._Str_3271 = 1, t
                })(),
                Hd = (() => {
                    class t {
                        constructor() {
                            this._bitmaps = []
                        }
                        dispose() {
                            if (this._bitmaps) {
                                for (const t of this._bitmaps) t && t.dispose();
                                this._bitmaps = null
                            }
                        }
                        _Str_16790(t, e = -1, s = 1, i = -1, n = 1, r = null) {
                            this._bitmaps.push(new Bd(t, e, s, i, n, r))
                        }
                        _Str_4913(t) {
                            const e = this._Str_21702(t);
                            return e ? e.bitmap : null
                        }
                        _Str_21702(t) {
                            if (!t) return null;
                            for (const e of this._bitmaps)
                                if (e && t.x >= e.normalMinX && t.x <= e.normalMaxX && t.y >= e.normalMinY && t.y <= e.normalMaxY) return e;
                            return null
                        }
                        _Str_2125(t) {
                            const e = this._Str_21702(t);
                            return e ? e.assetName : null
                        }
                    }
                    return t._Str_3268 = -1, t._Str_3271 = 1, t
                })(),
                Wd = (() => {
                    class t {
                        constructor() {
                            this._assetCollection = null, this._textures = new Map, this._materials = new Map, this._planes = new Map, this._geometries = new Map, this._data = null
                        }
                        get data() {
                            return this._data
                        }
                        get _Str_2697() {
                            return this._assetCollection
                        }
                        initializeDimensions(t, e) {
                            return !0
                        }
                        dispose() {
                            if (this._planes) {
                                for (const t of this._planes.values()) t && t.dispose();
                                this._planes = null
                            }
                            if (this._materials && (this._Str_21781(), this._materials = null), this._textures && (this._Str_21447(), this._textures = null), this._geometries) {
                                for (const t of this._geometries.values()) t && t.dispose();
                                this._geometries = null
                            }
                            this._data = null, this._assetCollection = null
                        }
                        _Str_3355() {
                            for (const t of this._planes.values()) t && t._Str_3355();
                            for (const t of this._materials.values()) t && t._Str_3355()
                        }
                        initialize(t) {
                            this._data = t
                        }
                        _Str_24005() {
                            this._Str_21447(), this._Str_21781(), this._Str_22054()
                        }
                        _Str_21781() {
                            for (const t of this._materials.values()) t && t.dispose();
                            this._materials.clear()
                        }
                        _Str_21447() {
                            for (const t of this._textures.values()) t && t.dispose();
                            this._textures.clear()
                        }
                        _Str_10114(t) {
                            return this._textures.get(t)
                        }
                        _Str_8547(t) {
                            return this._materials.get(t)
                        }
                        _Str_3491(t) {
                            return this._planes.get(t)
                        }
                        _Str_3453(t, e) {
                            return !!e && !this._planes.get(t) && (this._planes.set(t, e), !0)
                        }
                        _Str_6703(t) {
                            this._data && (this._assetCollection = t, this._Str_22054())
                        }
                        _Str_22054() {
                            this._data && (this._Str_25281(), this.initializePlanes())
                        }
                        _Str_25281() {
                            this._data.textures && this._data.textures.length && this._Str_24250(this._data.textures, this._Str_2697), this._data.materials && this._data.materials.length && this._Str_22388(this._data.materials)
                        }
                        initializePlanes() {}
                        _Str_24250(t, e) {
                            if (t && e && t.length)
                                for (const s of t) {
                                    if (!s) continue;
                                    const t = s.id;
                                    if (!this._textures.get(t)) {
                                        const i = new Hd;
                                        if (s.bitmaps && s.bitmaps.length)
                                            for (const t of s.bitmaps) {
                                                if (!t) continue;
                                                const s = t.assetName;
                                                let n = Hd._Str_3268,
                                                    r = Hd._Str_3271,
                                                    o = Hd._Str_3268,
                                                    a = Hd._Str_3271;
                                                void 0 !== t.normalMinX && (n = t.normalMinX), void 0 !== t.normalMaxX && (r = t.normalMaxX), void 0 !== t.normalMinY && (o = t.normalMinY), void 0 !== t.normalMaxY && (a = t.normalMaxY);
                                                const c = e.getAsset(s);
                                                if (c) {
                                                    const t = c.texture;
                                                    if (t) {
                                                        let e = t;
                                                        c.flipH && (e = wd._Str_16640(t)), i._Str_16790(e, n, r, o, a, s)
                                                    }
                                                }
                                            }
                                        this._textures.set(t, i)
                                    }
                                }
                        }
                        _Str_22388(t) {
                            if (t && t.length)
                                for (const e of t) {
                                    if (!e) continue;
                                    const t = e.id,
                                        s = new Zd;
                                    if (e.matrices && e.matrices.length)
                                        for (const i of e.matrices) {
                                            if (!i) continue;
                                            let t = i.repeatMode,
                                                e = i.align;
                                            const n = Vd._Str_3268,
                                                r = Vd._Str_3271,
                                                o = Vd._Str_3268,
                                                a = Vd._Str_3271;
                                            switch (t) {
                                                case "borders":
                                                    t = Vd._Str_6087;
                                                    break;
                                                case "center":
                                                    t = Vd._Str_6114;
                                                    break;
                                                case "first":
                                                    t = Vd._Str_6187;
                                                    break;
                                                case "last":
                                                    t = Vd._Str_6063;
                                                    break;
                                                case "random":
                                                    t = Vd._Str_9127;
                                                    break;
                                                default:
                                                    t = Vd._Str_18632
                                            }
                                            switch (e) {
                                                case "top":
                                                    e = Vd.ALIGN_TOP;
                                                    break;
                                                case "bottom":
                                                    e = Vd._Str_3606;
                                                    break;
                                                default:
                                                    e = Vd._Str_6914
                                            }
                                            if (i.columns && i.columns.length) {
                                                const c = s._Str_24503(i.columns.length, t, e, n, r, o, a);
                                                let _ = 0;
                                                for (; _ < i.columns.length;) {
                                                    const t = i.columns[_];
                                                    t && this._Str_24431(t, c, _), _++
                                                }
                                            }
                                        }
                                    this._materials.set(t, s)
                                }
                        }
                        _Str_24431(t, e, s) {
                            if (!t || !e) return;
                            let i = kd._Str_7916;
                            const n = t.width,
                                r = this._Str_25217(t);
                            switch (t.repeatMode) {
                                case "borders":
                                    i = kd._Str_6087;
                                    break;
                                case "center":
                                    i = kd._Str_6114;
                                    break;
                                case "first":
                                    i = kd._Str_6187;
                                    break;
                                case "last":
                                    i = kd._Str_6063;
                                    break;
                                case "none":
                                    i = kd._Str_9685;
                                    break;
                                default:
                                    i = kd._Str_7916
                            }
                            e._Str_22372(s, n, r, i)
                        }
                        _Str_25217(t) {
                            if (!t || !t.cells || !t.cells.length) return null;
                            const e = [];
                            let s = 0;
                            for (; s < t.cells.length;) {
                                const i = t.cells[s];
                                if (i) {
                                    const t = i.textureId;
                                    let s = null,
                                        n = null,
                                        r = null,
                                        o = 0;
                                    if (i.extras && i.extras.length) {
                                        const t = i.extras[0],
                                            e = t.types,
                                            r = t.offsets;
                                        if (e && r && e.length && r.length) {
                                            const i = r[0];
                                            s = this._Str_25465(e[0]), n = this._Str_24448(i), o = n.length, t.limitMax && (o = t.limitMax)
                                        }
                                    }
                                    if (s && s.length) {
                                        r = [];
                                        for (const t of s) {
                                            if (!t) continue;
                                            const e = this._assetCollection.getAsset(t);
                                            e && r.push(e)
                                        }
                                    }
                                    const a = this._Str_10114(t),
                                        c = new jd(a, r, n, o);
                                    e.push(c)
                                }
                                s++
                            }
                            return e && e.length ? e : null
                        }
                        _Str_25465(t) {
                            const e = [];
                            if (t && t.types && t.types.length) {
                                let s = 0;
                                for (; s < t.types.length;) {
                                    const i = t.types[s].assetName;
                                    i && e.push(i), s++
                                }
                            }
                            return e
                        }
                        _Str_24448(t) {
                            const e = [];
                            if (t && t.offsets && t.offsets.length) {
                                let s = 0;
                                for (; s < t.offsets.length;) {
                                    const i = t.offsets[s];
                                    e.push(new u.j(i.x, i.y)), s++
                                }
                            }
                            return e
                        }
                        _Str_17204(t, e, s) {
                            (e = Math.abs(e)) > 90 && (e = 90), (s = Math.abs(s)) > 90 && (s = 90);
                            const i = `${t}_${Math.round(e)}_${Math.round(s)}`;
                            let n = this._geometries.get(i);
                            return n || (n = new ol(t, new K(e, s), new K(-10, 0, 0)), this._geometries.set(i, n), n)
                        }
                        _Str_9137(t, e) {
                            if (t && e && e && e.length)
                                for (const s of e) {
                                    if (!s) continue;
                                    const e = s.size;
                                    let i = Yd._Str_5433,
                                        n = Yd._Str_5509;
                                    s.horizontalAngle && (i = s.horizontalAngle), s.verticalAngle && (n = s.verticalAngle);
                                    const r = s.layers,
                                        o = t._Str_20305(e, r && r.length || 0, this._Str_17204(e, i, n));
                                    if (o && r && r.length) {
                                        let t = 0;
                                        for (; t < r.length;) {
                                            const e = r[t];
                                            if (e) {
                                                let s = null,
                                                    i = Pd._Str_6914,
                                                    n = Yd._Str_2531,
                                                    r = Pd._Str_1934;
                                                e.materialId && (s = this._Str_8547(e.materialId)), e.color && (n = e.color), e.offset && (r = e.offset), e.align && ("bottom" === e.align ? i = Pd._Str_3606 : "top" == e.align && (i = Pd.ALIGN_TOP)), o._Str_21464(t, s, n, i, r)
                                            }
                                            t++
                                        }
                                    }
                                }
                        }
                        render(t, e, s, i, n, r, o, a = 0, c = 0, _ = 0, h = 0, l = 0) {
                            return null
                        }
                        getTextureIdentifier(t, e) {
                            return t.toString()
                        }
                        _Str_8988(e) {
                            let s = this._Str_3491(e);
                            return s || (s = this._Str_3491(t.DEFAULT)), s._Str_8988()
                        }
                    }
                    return t.DEFAULT = "default", t
                })(),
                zd = (() => {
                    class t extends Gd {
                        constructor() {
                            super(...arguments), this._width = 0, this._height = 0
                        }
                        isStatic(t) {
                            const e = this._Str_6009(t);
                            return e ? !e._Str_20530 : super.isStatic(t)
                        }
                        initializeDimensions(t, e) {
                            t < 0 && (t = 0), e < 0 && (e = 0), t === this._width && e === this._height || (this._width = t, this._height = e)
                        }
                        render(t, e, s, i, n, r, o, a, c, _, h) {
                            const l = this._Str_6009(i);
                            if (!l || !l.geometry) return null;
                            const u = l.geometry.getScreenPoint(new K(0, 0, 0)),
                                d = l.geometry.getScreenPoint(new K(0, 0, 1)),
                                g = l.geometry.getScreenPoint(new K(0, 1, 0));
                            if (u && d && g) {
                                e = Math.round(Math.abs((u.x - g.x) * e / l.geometry.scale)), s = Math.round(Math.abs((u.y - d.y) * s / l.geometry.scale));
                                const i = o * Math.abs(u.x - g.x),
                                    m = a * Math.abs(u.y - d.y),
                                    p = c * Math.abs(u.x - g.x),
                                    b = _ * Math.abs(u.y - d.y);
                                return l.render(t, e, s, n, r, i, m, p, b, c, _, h)
                            }
                            return null
                        }
                    }
                    return t._Str_2531 = 16777215, t._Str_5433 = 45, t._Str_5509 = 30, t
                })(),
                Kd = (() => {
                    class t extends Wd {
                        constructor() {
                            super(...arguments), this._landscapeWidth = 0, this._landscapeHeight = 0
                        }
                        initializeDimensions(t, e) {
                            return t < 0 && (t = 0), e < 0 && (e = 0), this._landscapeWidth = t, this._landscapeHeight = e, !0
                        }
                        initializePlanes() {
                            if (!this.data) return;
                            const t = this.data.landscapes;
                            t && t.length && this._Str_25478(t)
                        }
                        _Str_25478(t) {
                            if (!t) return;
                            const e = Math.trunc(654321 * Math.random());
                            for (const s in t) {
                                const i = t[s];
                                if (!i) continue;
                                const n = i.id,
                                    r = i.animatedVisualizations,
                                    o = new zd;
                                for (const t of r) {
                                    if (!t) continue;
                                    const s = t.size;
                                    let i = zd._Str_5433,
                                        n = zd._Str_5509;
                                    t.horizontalAngle && (i = t.horizontalAngle), t.verticalAngle && (n = t.verticalAngle);
                                    const r = t.layers,
                                        a = t.animationLayers,
                                        c = r && r.length || 0,
                                        _ = a && a.length || 0,
                                        h = o._Str_20305(s, c + _ || 0, this._Str_17204(s, i, n));
                                    if (h) {
                                        Ad._Str_17384(e);
                                        let t = 0;
                                        if (c)
                                            for (; t < r.length;) {
                                                const e = r[t];
                                                if (e) {
                                                    let s = null,
                                                        i = Pd._Str_6914,
                                                        n = zd._Str_2531,
                                                        r = Pd._Str_1934;
                                                    e.materialId && (s = this._Str_8547(e.materialId)), e.color && (n = e.color), e.offset && (r = e.offset), e.align && ("bottom" === e.align ? i = Pd._Str_3606 : "top" === e.align && (i = Pd.ALIGN_TOP)), h._Str_21464(t, s, n, i, r)
                                                }
                                                t++
                                            }
                                        if (t = 0, _) {
                                            const e = [];
                                            for (; t < a.length;) {
                                                const s = a[t];
                                                if (s) {
                                                    const t = s.animationItems;
                                                    if (t && t.length)
                                                        for (const s of t)
                                                            if (s) {
                                                                const t = s.assetId,
                                                                    i = this._Str_21504(s.x || "", s.randomX || ""),
                                                                    n = this._Str_21504(s.y || "", s.randomY || ""),
                                                                    r = s.speedX ? s.speedX / cp.instance.getConfiguration("animation.fps") : 0,
                                                                    o = s.speedY ? s.speedY / cp.instance.getConfiguration("animation.fps") : 0;
                                                                e.push({
                                                                    asset: t,
                                                                    x: i,
                                                                    y: n,
                                                                    speedX: r,
                                                                    speedY: o
                                                                })
                                                            }
                                                }
                                                t++
                                            }
                                            h._Str_23489(t, e, this._Str_2697)
                                        }
                                    }
                                }
                                this._Str_3453(n, o) || o.dispose()
                            }
                        }
                        _Str_21504(t, e) {
                            let s = 0;
                            if (t.length > 0 && "%" === t.charAt(t.length - 1) && (t = t.substr(0, t.length - 1), s = parseFloat(t) / 100), e.length > 0) {
                                const t = 1e4,
                                    i = Ad._Str_1612(1, 0, t)[0] / t;
                                "%" === e.charAt(e.length - 1) && (e = e.substr(0, e.length - 1), s += i * parseFloat(e) / 100)
                            }
                            return s
                        }
                        render(e, s, i, n, r, o, a, c = 0, _ = 0, h = 0, l = 0, u = 0) {
                            let d = this._Str_3491(s);
                            if (d || (d = this._Str_3491(t.DEFAULT)), !d) return null;
                            e && e.clear();
                            let g = d.render(e, i, n, r, o, a, c, _, h, l, u);
                            if (g && g !== e && (g = g.clone(), !g)) return null;
                            let m = null;
                            return m = !d.isStatic(r) && t._Str_3536 > 0 ? new yd(g, Math.round(u / t._Str_3536) * t._Str_3536 + t._Str_3536) : new yd(g, -1), m
                        }
                        getTextureIdentifier(t, e) {
                            return e ? e.x < 0 ? t + "_0" : t + "_1" : super.getTextureIdentifier(t, e)
                        }
                    }
                    return t._Str_3536 = 500, t
                })();
            class Xd extends Wd {
                initializePlanes() {
                    if (!this.data) return;
                    const t = this.data.floors;
                    t && t.length && this._Str_24495(t)
                }
                _Str_24495(t) {
                    if (t)
                        for (const e in t) {
                            const s = t[e];
                            if (!s) continue;
                            const i = s.id,
                                n = s.visualizations,
                                r = new Yd;
                            this._Str_9137(r, n), this._Str_3453(i, r) || r.dispose()
                        }
                }
                render(t, e, s, i, n, r, o, a = 0, c = 0, _ = 0, h = 0, l = 0) {
                    let u = this._Str_3491(e);
                    if (u || (u = this._Str_3491(Wd.DEFAULT)), !u) return null;
                    t && t.beginFill(16777215).drawRect(0, 0, t.width, t.height).endFill();
                    let d = u.render(t, s, i, n, r, o, a, c);
                    return d && d !== t && (d = d.clone(), !d) ? null : new yd(d, -1)
                }
            }
            let qd = (() => {
                class t extends Gd {
                    render(t, e, s, i, n, r) {
                        const o = this._Str_6009(i);
                        if (!o || !o.geometry) return null;
                        const a = o.geometry.getScreenPoint(new K(0, 0, 0)),
                            c = o.geometry.getScreenPoint(new K(0, 0, s / o.geometry.scale)),
                            _ = o.geometry.getScreenPoint(new K(0, e / o.geometry.scale, 0));
                        return a && c && _ && (e = Math.round(Math.abs(a.x - _.x)), s = Math.round(Math.abs(a.y - c.y))), o.render(t, e, s, n, r)
                    }
                }
                return t._Str_2531 = 16777215, t._Str_5433 = 45, t._Str_5509 = 30, t
            })();
            class Jd extends Wd {
                initializePlanes() {
                    if (!this.data) return;
                    const t = this.data.walls;
                    t && t.length && this._Str_24495(t)
                }
                _Str_24495(t) {
                    if (t)
                        for (const e in t) {
                            const s = t[e];
                            if (!s) continue;
                            const i = s.id,
                                n = s.visualizations,
                                r = new qd;
                            this._Str_9137(r, n), this._Str_3453(i, r) || r.dispose()
                        }
                }
                render(t, e, s, i, n, r, o, a = 0, c = 0, _ = 0, h = 0, l = 0) {
                    let u = this._Str_3491(e);
                    if (u || (u = this._Str_3491(Wd.DEFAULT)), !u) return null;
                    if (t) {
                        const e = t.getBounds();
                        t.clear(), t.drawRect(e.x, e.y, e.width, e.height)
                    }
                    let d = u.render(t, s, i, n, r, o);
                    return d && d !== t && (d = d.clone(), !d) ? null : new yd(d, -1)
                }
                getTextureIdentifier(t, e) {
                    return e ? `${t}_${e.x}_${e.y}_${e.z}` : super.getTextureIdentifier(t, e)
                }
            }
            class Qd extends d {
                constructor() {
                    super(), this._wallRasterizer = new Jd, this._floorRasterizer = new Xd, this._landscapeRasterizer = new Kd, this._maskManager = new Nd, this._initialized = !1
                }
                initialize(t) {
                    const e = t.wallData;
                    e && this._wallRasterizer.initialize(e);
                    const s = t.floorData;
                    s && this._floorRasterizer.initialize(s);
                    const i = t.landscapeData;
                    i && this._landscapeRasterizer.initialize(i);
                    const n = t.maskData;
                    return n && this._maskManager.initialize(n), !0
                }
                onDispose() {
                    this._wallRasterizer && (this._wallRasterizer.dispose(), this._wallRasterizer = null), this._floorRasterizer && (this._floorRasterizer.dispose(), this._floorRasterizer = null), this._landscapeRasterizer && (this._landscapeRasterizer.dispose(), this._landscapeRasterizer = null), this._maskManager && (this._maskManager.dispose(), this._maskManager = null), super.onDispose()
                }
                setGraphicAssetCollection(t) {
                    this._initialized || (this._wallRasterizer._Str_6703(t), this._floorRasterizer._Str_6703(t), this._landscapeRasterizer._Str_6703(t), this._maskManager._Str_6703(t), this._initialized = !0)
                }
                _Str_3355() {
                    this._wallRasterizer && this._wallRasterizer._Str_3355(), this._floorRasterizer && this._floorRasterizer._Str_3355(), this._landscapeRasterizer && this._landscapeRasterizer._Str_3355()
                }
                get wallRasterizer() {
                    return this._wallRasterizer
                }
                get floorRasterizer() {
                    return this._floorRasterizer
                }
                get landscapeRasterizer() {
                    return this._landscapeRasterizer
                }
                get maskManager() {
                    return this._maskManager
                }
            }
            let $d = (() => {
                class t extends du {
                    constructor() {
                        super(), this._data = null, this._roomPlaneParser = new Zo, this._roomPlaneBitmapMaskParser = new Rd, this._geometryUpdateId = -1, this._directionX = 0, this._directionY = 0, this._directionZ = 0, this._floorThickness = 1, this._wallThickness = 1, this._holeUpdateTime = NaN, this._Str_2540 = [], this._Str_4864 = [], this._Str_6648 = [], this._roomScale = 0, this._lastUpdateTime = -1e3, this._updateIntervalTime = 250, this._wallType = null, this._floorType = null, this._landscapeType = null, this._colorBackgroundOnly = !0, this._color = 16777215, this._redColor = 255, this._greenColor = 255, this._blueColor = 255, this._typeVisibility = [], this._Str_5928 = 0, this._maskData = null, this._isPlaneSet = !1, this._typeVisibility[Cd.TYPE_UNDEFINED] = !1, this._typeVisibility[Cd.TYPE_FLOOR] = !0, this._typeVisibility[Cd.TYPE_WALL] = !0, this._typeVisibility[Cd.TYPE_LANDSCAPE] = !0
                    }
                    static getTextureCache(e) {
                        const s = t.RENDER_TEXTURE_CACHE.get(t.LAST_VISUALIZATION);
                        return s ? s.getValue(e) : null
                    }
                    static addTextureCache(e, s) {
                        if (!t.LAST_VISUALIZATION) return;
                        let i = t.RENDER_TEXTURE_CACHE.get(t.LAST_VISUALIZATION);
                        i || (i = new x, t.RENDER_TEXTURE_CACHE.set(t.LAST_VISUALIZATION, i)), i.add(e, s)
                    }
                    initialize(t) {
                        return t instanceof Qd && (this._data = t, super.initialize(t), this._data.setGraphicAssetCollection(this.asset), !0)
                    }
                    dispose() {
                        super.dispose(), this.clearPlanes(), this._Str_2540 = null, this._Str_4864 = null, this._Str_6648 = null, this._roomPlaneParser && (this._roomPlaneParser.dispose(), this._roomPlaneParser = null), this._roomPlaneBitmapMaskParser && (this._roomPlaneBitmapMaskParser.dispose(), this._roomPlaneBitmapMaskParser = null), this._data && (this._data._Str_3355(), this._data = null);
                        const e = t.RENDER_TEXTURE_CACHE.get(this);
                        if (e) {
                            for (const t of e.getValues()) t.destroy(!0);
                            e.dispose(), t.RENDER_TEXTURE_CACHE.delete(this)
                        }
                    }
                    reset() {
                        super.reset(), this._floorType = null, this._wallType = null, this._landscapeType = null, this._maskData = null, this._geometryUpdateId = -1, this._roomScale = 0
                    }
                    update(e, s, i, n) {
                        if (!this.object || !e) return;
                        t.LAST_VISUALIZATION = this;
                        let r = 0;
                        const o = t.RENDER_TEXTURE_CACHE.get(t.LAST_VISUALIZATION);
                        o && (r = o.length);
                        const a = this.updateGeometry(e),
                            c = this.object.model;
                        let _ = !1;
                        if (this.updateThickness(c) && (_ = !0), this.updateHole(c) && (_ = !0), this._Str_25732() && o && r && setTimeout(() => {
                                for (; r;) {
                                    const t = o.getWithIndex(0);
                                    t && (t.destroy(!0), o.remove(o.getKey(0))), r--
                                }
                            }, 0), _ = this.updateMasks(c), !(s < this._lastUpdateTime + this._updateIntervalTime) || a || _) {
                            if (this.updatePlanes(c) && (_ = !0), this._Str_16913(e, a, s) && (_ = !0), _) {
                                let t = 0;
                                for (; t < this._Str_4864.length;) {
                                    const e = this.getSprite(this._Str_6648[t]),
                                        s = this._Str_4864[t];
                                    if (e && s && s.type !== Cd.TYPE_LANDSCAPE)
                                        if (this._colorBackgroundOnly) {
                                            let t = s.color;
                                            t = (t >> 24 << 24) + ((t >> 16 & 255) * this._blueColor / 255 << 16) + ((t >> 8 & 255) * this._greenColor / 255 << 8) + (255 & t) * this._redColor / 255, e.color = t
                                        } else e.color = s.color;
                                    t++
                                }
                                this.updateSpriteCounter++
                            }
                            this.updateModelCounter = c.updateCounter, this._lastUpdateTime = s
                        }
                    }
                    updateGeometry(t) {
                        if (!t) return !1;
                        if (this._geometryUpdateId === t.updateId) return !1;
                        this._geometryUpdateId = t.updateId, this._boundingRectangle = null;
                        const e = t.direction;
                        return !(!e || e.x === this._directionX && e.y === this._directionY && e.z === this._directionZ && t.scale === this._roomScale || (this._directionX = e.x, this._directionY = e.y, this._directionZ = e.z, this._roomScale = t.scale, 0))
                    }
                    updateThickness(t) {
                        if (this.updateModelCounter === t.updateCounter) return !1;
                        const e = t.getValue(j.ROOM_FLOOR_THICKNESS),
                            s = t.getValue(j.ROOM_WALL_THICKNESS);
                        return !(isNaN(e) || isNaN(s) || e === this._floorThickness && s === this._wallThickness || (this._floorThickness = e, this._wallThickness = s, this.clearPlanes(), 0))
                    }
                    updateHole(t) {
                        if (this.updateModelCounter === t.updateCounter) return !1;
                        const e = t.getValue(j.ROOM_FLOOR_HOLE_UPDATE_TIME);
                        return !isNaN(e) && e !== this._holeUpdateTime && (this._holeUpdateTime = e, this.clearPlanes(), !0)
                    }
                    updateMasks(t) {
                        if (this.updateModelCounter === t.updateCounter) return !1;
                        let e = !1;
                        const s = t.getValue(j.ROOM_PLANE_MASK_XML);
                        s !== this._maskData && (this._Str_15935(s), this._maskData = s, e = !0);
                        const i = t.getValue(j.ROOM_BACKGROUND_COLOR);
                        i !== this._color && (this._color = i, this._redColor = 255 & this._color, this._greenColor = this._color >> 8 & 255, this._blueColor = this._color >> 16 & 255, e = !0);
                        const n = t.getValue(j.ROOM_COLORIZE_BG_ONLY) || !1;
                        return n !== this._colorBackgroundOnly && (this._colorBackgroundOnly = n, e = !0), e
                    }
                    updatePlanes(t) {
                        if (this.updateModelCounter === t.updateCounter) return !1;
                        const e = t.getValue(j.ROOM_FLOOR_TYPE),
                            s = t.getValue(j.ROOM_WALL_TYPE),
                            i = t.getValue(j.ROOM_LANDSCAPE_TYPE);
                        this.updatePlaneTypes(e, s, i);
                        const n = 1 === t.getValue(j.ROOM_FLOOR_VISIBILITY),
                            r = 1 === t.getValue(j.ROOM_WALL_VISIBILITY),
                            o = 1 === t.getValue(j.ROOM_LANDSCAPE_VISIBILITY);
                        return this.updatePlaneVisibility(n, r, o), !0
                    }
                    clearPlanes() {
                        if (this._Str_2540) {
                            for (; this._Str_2540.length;) {
                                const t = this._Str_2540[0];
                                t && t.dispose(), this._Str_2540.pop()
                            }
                            this._Str_2540 = [], this._Str_2540 = []
                        }
                        this._isPlaneSet = !1, this._Str_5928 = this._Str_5928 + 1, this.reset()
                    }
                    _Str_25732() {
                        if (!this.object || this._isPlaneSet) return !1;
                        isNaN(this._floorThickness) || (this._roomPlaneParser.floorThicknessMultiplier = this._floorThickness), isNaN(this._wallThickness) || (this._roomPlaneParser.wallThicknessMultiplier = this._wallThickness);
                        const e = this.object.model.getValue(j.ROOM_MAP_DATA);
                        if (!this._roomPlaneParser.initializeFromMapData(e)) return;
                        const s = this._Str_23949(),
                            i = this._Str_23063();
                        let n = 0,
                            r = this.object.model.getValue(j.ROOM_RANDOM_SEED),
                            o = 0;
                        for (; o < this._roomPlaneParser.planeCount;) {
                            const e = this._roomPlaneParser.getPlaneLocation(o),
                                a = this._roomPlaneParser.getPlaneLeftSide(o),
                                c = this._roomPlaneParser.getPlaneRightSide(o),
                                _ = this._roomPlaneParser.getPlaneSecondaryNormals(o),
                                h = this._roomPlaneParser.getPlaneType(o);
                            let l = null;
                            if (!(e && a && c)) return; {
                                const u = K.crossProduct(a, c);
                                if (r = 7613 * r + 517, l = null, h === ko.PLANE_FLOOR) {
                                    const s = e.x + a.x + .5,
                                        i = e.y + c.y + .5,
                                        n = Math.trunc(s) - s,
                                        o = Math.trunc(i) - i;
                                    l = new Cd(this.object.getLocation(), e, a, c, Cd.TYPE_FLOOR, !0, _, r, -n, -o), l.color = 0 !== u.z ? t._Str_18544 : 0 !== u.x ? t._Str_16664 : t._Str_18640, this._data && (l.rasterizer = this._data.floorRasterizer)
                                } else h === ko.PLANE_WALL ? (l = new Cd(this.object.getLocation(), e, a, c, Cd.TYPE_WALL, !0, _, r), (a.length < 1 || c.length < 1) && (l._Str_18448 = !1), l.color = 0 === u.x && 0 === u.y ? t._Str_14868 : u.y > 0 ? t._Str_14503 : 0 === u.y ? t._Str_15851 : t._Str_13715, this._data && (l.rasterizer = this._data.wallRasterizer)) : h === ko.PLANE_LANDSCAPE ? (l = new Cd(this.object.getLocation(), e, a, c, Cd.TYPE_LANDSCAPE, !0, _, r, n, 0, s, i), l.color = u.y > 0 ? t._Str_17403 : 0 == u.y ? t._Str_16113 : t._Str_18370, this._data && (l.rasterizer = this._data.landscapeRasterizer), n += a.length) : h == ko.PLANE_BILLBOARD && (l = new Cd(this.object.getLocation(), e, a, c, Cd.TYPE_WALL, !0, _, r), (a.length < 1 || c.length < 1) && (l._Str_18448 = !1), l.color = 0 == u.x && 0 == u.y ? t._Str_14868 : u.y > 0 ? t._Str_14503 : 0 == u.y ? t._Str_15851 : t._Str_13715);
                                if (l) {
                                    l._Str_16279 = this._data.maskManager;
                                    let t = 0;
                                    for (; t < this._roomPlaneParser.getPlaneMaskCount(o);) {
                                        const e = this._roomPlaneParser.getPlaneMaskLeftSideLoc(o, t),
                                            s = this._roomPlaneParser.getPlaneMaskRightSideLoc(o, t),
                                            i = this._roomPlaneParser.getPlaneMaskLeftSideLength(o, t),
                                            n = this._roomPlaneParser.getPlaneMaskRightSideLength(o, t);
                                        l._Str_24758(e, s, i, n), t++
                                    }
                                    this._Str_2540.push(l)
                                }
                            }
                            o++
                        }
                        return this._isPlaneSet = !0, this._Str_18024(), !0
                    }
                    _Str_18024() {
                        this.setSpriteCount(this._Str_2540.length);
                        let t = 0;
                        for (; t < this._Str_2540.length;) {
                            const e = this._Str_2540[t],
                                s = this.getSprite(t);
                            e && s && e._Str_5424 && e._Str_4968 && (s.alphaTolerance = e.type === Cd.TYPE_WALL && (e._Str_5424.length < 1 || e._Str_4968.length < 1) ? lu._Str_9268 : lu._Str_9735, s.tag = e.type === Cd.TYPE_WALL ? "plane.wall@" + (t + 1) : e.type === Cd.TYPE_FLOOR ? "plane.floor@" + (t + 1) : "plane@" + (t + 1), s.spriteType = nl._Str_8616), t++
                        }
                    }
                    _Str_23949() {
                        let t = 0,
                            e = 0;
                        for (; e < this._roomPlaneParser.planeCount;) this._roomPlaneParser.getPlaneType(e) === ko.PLANE_LANDSCAPE && (t += this._roomPlaneParser.getPlaneLeftSide(e).length), e++;
                        return t
                    }
                    _Str_23063() {
                        let t = 0,
                            e = 0;
                        for (; e < this._roomPlaneParser.planeCount;) {
                            if (this._roomPlaneParser.getPlaneType(e) === ko.PLANE_LANDSCAPE) {
                                const s = this._roomPlaneParser.getPlaneRightSide(e);
                                s.length > t && (t = s.length)
                            }
                            e++
                        }
                        return t > 5 && (t = 5), t
                    }
                    updatePlaneTypes(t, e, s) {
                        if (t !== this._floorType ? this._floorType = t : t = null, e !== this._wallType ? this._wallType = e : e = null, s !== this._landscapeType ? this._landscapeType = s : s = null, !t && !e && !s) return !1;
                        let i = 0;
                        for (; i < this._Str_2540.length;) {
                            const n = this._Str_2540[i];
                            n && (n.type === Cd.TYPE_FLOOR && t ? n.id = t : n.type === Cd.TYPE_WALL && e ? n.id = e : n.type === Cd.TYPE_LANDSCAPE && s && (n.id = s)), i++
                        }
                        return !0
                    }
                    updatePlaneVisibility(t, e, s) {
                        t === this._typeVisibility[Cd.TYPE_FLOOR] && e === this._typeVisibility[Cd.TYPE_WALL] && s === this._typeVisibility[Cd.TYPE_LANDSCAPE] || (this._typeVisibility[Cd.TYPE_FLOOR] = t, this._typeVisibility[Cd.TYPE_WALL] = e, this._typeVisibility[Cd.TYPE_LANDSCAPE] = s, this._Str_4864 = [], this._Str_6648 = [])
                    }
                    _Str_16913(e, s, i) {
                        if (!e || !this.object) return;
                        this._Str_5928++, s && (this._Str_4864 = [], this._Str_6648 = []);
                        const n = this._Str_4864.length > 0;
                        let r = this._Str_4864;
                        this._Str_4864.length || (r = this._Str_2540);
                        let o = 0,
                            a = !1,
                            c = 0;
                        for (; c < r.length;) {
                            let s = c;
                            n && (s = this._Str_6648[c]);
                            const _ = this.getSprite(s);
                            if (_) {
                                const h = r[c];
                                h ? (_.id = h.uniqueId, h.update(e, i) && (h.visible && (o = h.relativeDepth + this._Str_24891 + s / 1e3, h.type !== Cd.TYPE_FLOOR && (o = h.relativeDepth + this._Str_25403 + s / 1e3, (h._Str_5424.length < 1 || h._Str_4968.length < 1) && (o += .5 * t._Str_8621)), this._Str_7421(_, h, "plane " + s + " " + e.scale, o)), a = !0), _.visible != (h.visible && this._typeVisibility[h.type]) && (_.visible = !_.visible, a = !0), _.visible && (n || (this._Str_4864.push(h), this._Str_6648.push(c)))) : (_.id = 0, _.visible && (_.visible = !1, a = !0))
                            }
                            c++
                        }
                        return a
                    }
                    _Str_15935(t) {
                        if (!t) return;
                        this._roomPlaneBitmapMaskParser.initialize(t);
                        const e = [],
                            s = [];
                        let i = !1,
                            n = 0;
                        for (; n < this._Str_2540.length;) {
                            const t = this._Str_2540[n];
                            t && (t._Str_25213(), t.type === Cd.TYPE_LANDSCAPE && e.push(n)), n++
                        }
                        for (const r of this._roomPlaneBitmapMaskParser.masks.values()) {
                            const t = this._roomPlaneBitmapMaskParser._Str_21678(r),
                                e = this._roomPlaneBitmapMaskParser._Str_19038(r),
                                n = this._roomPlaneBitmapMaskParser._Str_21644(r);
                            if (e) {
                                let r = 0;
                                for (; r < this._Str_2540.length;) {
                                    const o = this._Str_2540[r];
                                    if ((o.type === Cd.TYPE_WALL || o.type === Cd.TYPE_LANDSCAPE) && o && o.location && o.normal) {
                                        const a = K.dif(e, o.location);
                                        if (Math.abs(K.scalarProjection(a, o.normal)) < .01 && o._Str_5424 && o._Str_4968) {
                                            const e = K.scalarProjection(a, o._Str_5424),
                                                c = K.scalarProjection(a, o._Str_4968);
                                            o.type === Cd.TYPE_WALL || o.type === Cd.TYPE_LANDSCAPE && n === Sd.HOLE ? o._Str_24569(t, e, c) : o.type === Cd.TYPE_LANDSCAPE && (o._Str_14801 || (i = !0), o._Str_14801 = !0, s.push(r))
                                        }
                                    }
                                    r++
                                }
                            }
                        }
                        for (n = 0; n < e.length;) {
                            const t = e[n];
                            s.indexOf(t) < 0 && (this._Str_2540[t]._Str_14801 = !1, i = !0), n++
                        }
                        i && (this._Str_4864 = [], this._Str_6648 = [])
                    }
                    _Str_7421(t, e, s, i) {
                        const n = e.offset;
                        t.offsetX = -n.x, t.offsetY = -n.y, t.relativeDepth = i, t.color = e.color, t.texture = this._Str_22446(e, s), t.name = s + "_" + this._Str_5928
                    }
                    _Str_22446(t, e) {
                        return t.bitmapData
                    }
                    getBoundingRectangle() {
                        return this._boundingRectangle || (this._boundingRectangle = super.getBoundingRectangle()), new u.k(this._boundingRectangle.x, this._boundingRectangle.y, this._boundingRectangle.width, this._boundingRectangle.height)
                    }
                    get _Str_19113() {
                        const t = [];
                        for (const e of this._Str_4864) t.push(e);
                        return t
                    }
                    get _Str_24891() {
                        return t._Str_8621 + .1
                    }
                    get _Str_25403() {
                        return t._Str_8621 + .5
                    }
                }
                return t.LAST_VISUALIZATION = null, t.RENDER_TEXTURE_CACHE = new Map, t._Str_18544 = 16777215, t._Str_18640 = 14540253, t._Str_16664 = 12303291, t._Str_14503 = 16777215, t._Str_15851 = 13421772, t._Str_13715 = 10066329, t._Str_14868 = 10066329, t._Str_17403 = 16777215, t._Str_16113 = 13421772, t._Str_18370 = 10066329, t._Str_8621 = 1e3, t
            })();
            class tg extends Yu {
                constructor() {
                    super(), this._tileHeight = 0
                }
                getLayerYOffset(t, e, s) {
                    return 1 === s ? (this._tileHeight = this.object.model.getValue(j.TILE_CURSOR_HEIGHT), 32 * -this._tileHeight) : super.getLayerYOffset(t, e, s)
                }
            }
            let eg = (() => {
                    class t {
                        constructor() {
                            this._visualizationDatas = new Map
                        }
                        getVisualization(t) {
                            const e = this.getVisualizationType(t);
                            return e ? new e : null
                        }
                        getVisualizationType(t) {
                            if (!t) return null;
                            let e = null;
                            switch (t) {
                                case B.ROOM:
                                    e = $d;
                                    break;
                                case B.TILE_CURSOR:
                                    e = tg;
                                    break;
                                case B.USER:
                                case B.BOT:
                                case B.RENTABLE_BOT:
                                    e = Iu;
                                    break;
                                case B.PET_ANIMATED:
                                    e = fd;
                                    break;
                                case B.FURNITURE_STATIC:
                                    e = Gu;
                                    break;
                                case B.FURNITURE_ANIMATED:
                                    e = Yu;
                                    break;
                                case B.FURNITURE_RESETTING_ANIMATED:
                                    e = cd;
                                    break;
                                case B.FURNITURE_BADGE_DISPLAY:
                                    e = ku;
                                    break;
                                case B.FURNITURE_BG:
                                    e = _d;
                                    break;
                                case B.FURNITURE_BB:
                                    e = Zu;
                                    break;
                                case B.FURNITURE_BOTTLE:
                                    e = ju;
                                    break;
                                case B.FURNITURE_BUILDER_PLACEHOLDER:
                                    e = Bu;
                                    break;
                                case B.FURNITURE_COUNTER_CLOCK:
                                    e = Hu;
                                    break;
                                case B.FURNITURE_CUBOID:
                                    e = Wu;
                                    break;
                                case B.FURNITURE_EXTERNAL_IMAGE:
                                    e = Xu;
                                    break;
                                case B.FURNITURE_FIREWORKS:
                                    e = qu;
                                    break;
                                case B.FURNITURE_GIFT_WRAPPED_FIREWORKS:
                                    e = Ju;
                                    break;
                                case B.FURNITURE_GIFT_WRAPPED:
                                    e = Qu;
                                    break;
                                case B.FURNITURE_GUILD_CUSTOMIZED:
                                    e = $u;
                                    break;
                                case B.FURNITURE_GUILD_ISOMETRIC_BADGE:
                                    e = td;
                                    break;
                                case B.FURNITURE_HABBOWHEEL:
                                    e = ed;
                                    break;
                                case B.FURNITURE_MANNEQUIN:
                                    e = id;
                                    break;
                                case B.FURNITURE_PARTY_BEAMER:
                                    e = nd;
                                    break;
                                case B.FURNITURE_PLANET_SYSTEM:
                                    e = rd;
                                    break;
                                case B.FURNITURE_POSTER:
                                    e = od;
                                    break;
                                case B.FURNITURE_QUEUE_TILE:
                                    e = ad;
                                    break;
                                case B.FURNITURE_SCORE_BOARD:
                                    e = hd;
                                    break;
                                case B.FURNITURE_SOUNDBLOCK:
                                    e = ld;
                                    break;
                                case B.FURNITURE_STICKIE:
                                    e = ud;
                                    break;
                                case B.FURNITURE_VAL_RANDOMIZER:
                                    e = dd;
                                    break;
                                case B.FURNITURE_VOTE_COUNTER:
                                    e = gd;
                                    break;
                                case B.FURNITURE_VOTE_MAJORITY:
                                    e = md;
                                    break;
                                case B.FURNITURE_WATER_AREA:
                                    e = pd
                            }
                            return e || (g.log("Unknown Visualization: " + t), null)
                        }
                        getVisualizationData(e, s, i) {
                            const n = this._visualizationDatas.get(e);
                            if (n) return n;
                            let r = null;
                            switch (s) {
                                case B.FURNITURE_STATIC:
                                case B.FURNITURE_GIFT_WRAPPED:
                                case B.FURNITURE_BB:
                                case B.FURNITURE_BG:
                                case B.FURNITURE_STICKIE:
                                case B.FURNITURE_BUILDER_PLACEHOLDER:
                                    r = new Pu;
                                    break;
                                case B.FURNITURE_ANIMATED:
                                case B.FURNITURE_RESETTING_ANIMATED:
                                case B.FURNITURE_POSTER:
                                case B.FURNITURE_HABBOWHEEL:
                                case B.FURNITURE_VAL_RANDOMIZER:
                                case B.FURNITURE_BOTTLE:
                                case B.FURNITURE_PLANET_SYSTEM:
                                case B.FURNITURE_QUEUE_TILE:
                                case B.FURNITURE_PARTY_BEAMER:
                                case B.FURNITURE_COUNTER_CLOCK:
                                case B.FURNITURE_WATER_AREA:
                                case B.FURNITURE_SCORE_BOARD:
                                case B.FURNITURE_FIREWORKS:
                                case B.FURNITURE_GIFT_WRAPPED_FIREWORKS:
                                case B.FURNITURE_GUILD_CUSTOMIZED:
                                case B.FURNITURE_GUILD_ISOMETRIC_BADGE:
                                case B.FURNITURE_VOTE_COUNTER:
                                case B.FURNITURE_VOTE_MAJORITY:
                                case B.FURNITURE_SOUNDBLOCK:
                                case B.FURNITURE_BADGE_DISPLAY:
                                case B.FURNITURE_EXTERNAL_IMAGE:
                                case B.FURNITURE_YOUTUBE:
                                case B.TILE_CURSOR:
                                    r = new Fu;
                                    break;
                                case B.FURNITURE_MANNEQUIN:
                                    r = new sd;
                                    break;
                                case B.ROOM:
                                    r = new Qd;
                                    break;
                                case B.USER:
                                case B.BOT:
                                case B.RENTABLE_BOT:
                                    r = new Su;
                                    break;
                                case B.PET_ANIMATED:
                                    r = new Ed
                            }
                            return r ? r.initialize(i) ? ((r instanceof Su || r instanceof sd) && (r.avatarManager = cp.instance.avatar), t.CACHING_ENABLED && this._visualizationDatas.set(e, r), r) : (r.dispose(), null) : null
                        }
                    }
                    return t.CACHING_ENABLED = !0, t
                })(),
                sg = (() => {
                    class t {}
                    return t.DOG = 0, t.CAT = 1, t.CROCODILE = 2, t.TERRIER = 3, t.BEAR = 4, t.PIG = 5, t.LION = 6, t.RHINO = 7, t.SPIDER = 8, t.TURTLE = 9, t.CHICKEN = 10, t.FROG = 11, t.DRAGON = 12, t.MONSTER = 13, t.MONKEY = 14, t.HORSE = 15, t.MONSTERPLANT = 16, t.BUNNY = 17, t.BUNNYEVIL = 18, t.BUNNYDEPRESSED = 19, t.BUNNYLOVE = 20, t.PIGEONGOOD = 21, t.PIGEONEVIL = 22, t.DEMONMONKEY = 23, t.BABYBEAR = 24, t.BABYTERRIER = 25, t.GNOME = 26, t.LEPRECHAUN = 27, t.KITTENBABY = 28, t.PUPPYBABY = 29, t.PIGLETNBABY = 30, t.HALOOMPA = 31, t.FOOLS = 32, t.PTEROSAUR = 33, t.VELOCIRAPTOR = 34, t
                })(),
                ig = (() => {
                    class t {}
                    return t.ROOM_MIN_X = "room_min_x", t.ROOM_MAX_X = "room_max_x", t.ROOM_MIN_Y = "room_min_y", t.ROOM_MAX_Y = "room_max_y", t.ROOM_IS_PUBLIC = "room_is_public", t.ROOM_Z_SCALE = "room_z_scale", t.AD_DISPLAY_DELAY = "ad_display_delay", t.IS_PLAYING_GAME = "is_playing_game", t.RESTRICTS_DRAGGING = "restricts_dragging", t.RESTRICTS_SCALING = "restricts_scaling", t.RESTRICTED_SCALE = "room_scale", t
                })();
            class ng {
                constructor(t, e) {
                    this._width = t, this._height = e, this._heights = [], this._isNotStackable = [], this._isRoomTile = [];
                    let s = t * e;
                    for (; s > 0;) this._heights.push(0), this._isNotStackable.push(!1), this._isRoomTile.push(!1), s--
                }
                dispose() {
                    this._width = 0, this._height = 0, this._height = null, this._isNotStackable = null, this._isRoomTile = null
                }
                validPosition(t, e) {
                    return t >= 0 && t < this._width && e >= 0 && e < this._height
                }
                getTileHeight(t, e) {
                    return this.validPosition(t, e) ? this._heights[e * this._width + t] : 0
                }
                setTileHeight(t, e, s) {
                    this.validPosition(t, e) && (this._heights[e * this._width + t] = s)
                }
                setStackingBlocked(t, e, s) {
                    this.validPosition(t, e) && (this._isNotStackable[e * this._width + t] = s)
                }
                setIsRoomTile(t, e, s) {
                    this.validPosition(t, e) && (this._isRoomTile[e * this._width + t] = s)
                }
                validateLocation(t, e, s, i, n, r, o, a, c, _ = -1) {
                    let h = 0,
                        l = 0;
                    if (!this.validPosition(t, e) || !this.validPosition(t + s - 1, e + i - 1)) return !1;
                    (n < 0 || n >= this._width) && (n = 0), (r < 0 || r >= this._height) && (r = 0), o = Math.min(o, this._width - n), a = Math.min(a, this._height - r), -1 === _ && (_ = this.getTileHeight(t, e));
                    let u = e;
                    for (; u < e + i;) {
                        for (h = t; h < t + s;) {
                            if (h < n || h >= n + o || u < r || u >= r + a)
                                if (l = u * this._width + h, c) {
                                    if (!this._isRoomTile[l]) return !1
                                } else if (this._isNotStackable[l] || !this._isRoomTile[l] || Math.abs(this._heights[l] - _) > .01) return !1;
                            h++
                        }
                        u++
                    }
                    return !0
                }
                get width() {
                    return this._width
                }
                get height() {
                    return this._height
                }
            }
            let rg = (() => {
                class t {
                    constructor() {
                        this._isDisposed = !1, this._scale = 64, this._heightMap = [], this._width = 0, this._height = 0, this._floorHeight = 0
                    }
                    get disposed() {
                        return this._isDisposed
                    }
                    get scale() {
                        return this._scale
                    }
                    set scale(t) {
                        this._scale = t
                    }
                    dispose() {
                        this.reset(), this._isDisposed = !0
                    }
                    initialize(t, e, s) {
                        if (t <= this._width && e <= this._height) return this._width = t, this._height = e, void(this._floorHeight = s);
                        this.reset();
                        let i = 0;
                        for (; i < e;) {
                            const e = [];
                            this._heightMap.push(e);
                            let s = 0;
                            for (; s < t;) e.push(0), s++;
                            i++
                        }
                        this._width = t, this._height = e, this._floorHeight = s
                    }
                    reset() {
                        this._heightMap = []
                    }
                    setHeight(t, e, s) {
                        if (t < 0 || t >= this._width || e < 0 || e >= this._height) return !1;
                        const i = this._heightMap[e];
                        return !!i && (i[t] = s, !0)
                    }
                    getHeight(t, e) {
                        if (t < 0 || t >= this._width || e < 0 || e >= this._height) return 0;
                        const s = this._heightMap[e];
                        return s ? s[t] : 0
                    }
                    getLocation(e, s, i, n, r) {
                        let o, a, c;
                        if (0 == e && 0 == s)
                            if (e = this._width, s = this._height, o = Math.round(this.scale / 10), r == t.R) {
                                for (c = this._width - 1; c >= 0;) {
                                    for (a = 1; a < this._height;) {
                                        if (this.getHeight(c, a) <= this._floorHeight) {
                                            a - 1 < s && (e = c, s = a - 1);
                                            break
                                        }
                                        a++
                                    }
                                    c--
                                }
                                n += this.scale / 4 - o / 2, i += this.scale / 2
                            } else {
                                for (a = this._height - 1; a >= 0;) {
                                    for (c = 1; c < this._width;) {
                                        if (this.getHeight(c, a) <= this._floorHeight) {
                                            c - 1 < e && (e = c - 1, s = a);
                                            break
                                        }
                                        c++
                                    }
                                    a--
                                }
                                n += this.scale / 4 - o / 2, i -= o
                            }
                        let _ = e,
                            h = s,
                            l = this.getHeight(e, s);
                        return r == t.R ? (_ += i / (this._scale / 2) - .5, h += .5, l -= (n - i / 2) / (this._scale / 2)) : (h += (this._scale / 2 - i) / (this._scale / 2) - .5, _ += .5, l -= (n - (this._scale / 2 - i) / 2) / (this._scale / 2)), new K(_, h, l)
                    }
                    _Str_24084(e, s, i) {
                        let n, r, o, a, c, _ = 0,
                            h = 0;
                        r = Math.ceil(e), _ = r - e;
                        let l = 0;
                        for (n = 0; n < this._width;) {
                            if (r >= 0 && r < this._height) {
                                if (this.getHeight(n, r) <= this._floorHeight) {
                                    o = n - 1, a = r, h = n, i = t.L;
                                    break
                                }
                                if (this.getHeight(n, r + 1) <= this._floorHeight) {
                                    o = n, a = r, h = a - e, i = t.R;
                                    break
                                }
                            }
                            r++, n++
                        }
                        const u = this.scale / 2 * _;
                        let d = -h * this.scale / 2;
                        return d += 18 * -s / 32 * this.scale / 2, l = this.getHeight(o, a), c = l * this.scale / 2 + d, c += i == t.R ? _ * this.scale / 4 : (1 - _) * this.scale / 4, this.getLocation(o, a, u, c, i)
                    }
                    _Str_22875(e, s) {
                        if (null == e) return null;
                        let i = 0,
                            n = 0,
                            r = 0,
                            o = 0,
                            a = "",
                            c = 0;
                        if (90 == s) i = Math.floor(e.x - .5), n = Math.floor(e.y + .5), c = this.getHeight(i, n), r = this._scale / 2 - this._scale / 2 * (e.y - n + .5), o = this._scale / 2 * (c - e.z) + (this._scale / 2 - r) / 2, a = t.L;
                        else {
                            if (180 != s) return null;
                            i = Math.floor(e.x + .5), n = Math.floor(e.y - .5), c = this.getHeight(i, n), r = this._scale / 2 * (e.x + .5 - i), o = this._scale / 2 * (c - e.z) + r / 2, a = t.R
                        }
                        return [i, n, r, o, a]
                    }
                    _Str_21860(t, e) {
                        const s = this._Str_22875(t, e);
                        return null == s ? null : ":w=" + Math.trunc(s[0]) + "," + Math.trunc(s[1]) + " l=" + Math.trunc(s[2]) + "," + Math.trunc(s[3]) + " " + s[4]
                    }
                    getDirection(e) {
                        return e == t.R ? 180 : 90
                    }
                    _Str_24141(t, e) {
                        const s = this.getHeight(t, e),
                            i = s + 1;
                        return s + (Math.trunc(this.getHeight(t - 1, e - 1)) == i || Math.trunc(this.getHeight(t, e - 1)) == i || Math.trunc(this.getHeight(t + 1, e - 1)) == i || Math.trunc(this.getHeight(t - 1, e)) == i || Math.trunc(this.getHeight(t + 1, e)) == i || Math.trunc(this.getHeight(t - 1, e + 1)) == i || Math.trunc(this.getHeight(t, e + 1)) == i || Math.trunc(this.getHeight(t + 1, e + 1)) == i ? .5 : 0)
                    }
                    _Str_10375(t, e) {
                        return t >= 0 && t < this._width && e >= 0 && e < this._height && this._heightMap[e][t] >= 0
                    }
                }
                return t.DEFAULT_SCALE = 32, t.L = "l", t.R = "r", t
            })();
            class og extends d {
                constructor(t) {
                    super(), this._connection = null, this._roomCreator = t, this._planeParser = new Zo, this._latestEntryTileEvent = null, this._currentRoomId = 0, this._ownUserId = 0, this._initialConnection = !0
                }
                onDispose() {
                    super.onDispose(), this._connection = null, this._roomCreator = null, this._latestEntryTileEvent = null, this._planeParser && (this._planeParser.dispose(), this._planeParser = null)
                }
                setConnection(t) {
                    !this._connection && t && (this._connection = t, this._connection.addMessageEvent(new cc(this.onUserInfoEvent.bind(this))), this._connection.addMessageEvent(new Wo(this.onRoomModelNameEvent.bind(this))), this._connection.addMessageEvent(new Ko(this.onRoomPaintEvent.bind(this))), this._connection.addMessageEvent(new Bo(this.onRoomModelEvent.bind(this))), this._connection.addMessageEvent(new Lo(this.onRoomHeightMapEvent.bind(this))), this._connection.addMessageEvent(new Po(this.onRoomHeightMapUpdateEvent.bind(this))), this._connection.addMessageEvent(new qo(this.onRoomThicknessEvent.bind(this))), this._connection.addMessageEvent(new No(this.onRoomDoorEvent.bind(this))), this._connection.addMessageEvent(new jr(this.onRoomRollingEvent.bind(this))), this._connection.addMessageEvent(new so(this.onFurnitureAliasesEvent.bind(this))), this._connection.addMessageEvent(new Kr(this.onFurnitureFloorAddEvent.bind(this))), this._connection.addMessageEvent(new qr(this.onFurnitureFloorEvent.bind(this))), this._connection.addMessageEvent(new Qr(this.onFurnitureFloorRemoveEvent.bind(this))), this._connection.addMessageEvent(new to(this.onFurnitureFloorUpdateEvent.bind(this))), this._connection.addMessageEvent(new To(this.onFurnitureWallAddEvent.bind(this))), this._connection.addMessageEvent(new yo(this.onFurnitureWallEvent.bind(this))), this._connection.addMessageEvent(new Co(this.onFurnitureWallRemoveEvent.bind(this))), this._connection.addMessageEvent(new Uo(this.onFurnitureWallUpdateEvent.bind(this))), this._connection.addMessageEvent(new io(this.onFurnitureDataEvent.bind(this))), this._connection.addMessageEvent(new ro(this.onFurnitureItemDataEvent.bind(this))), this._connection.addMessageEvent(new lo(this.onFurnitureStateEvent.bind(this))), this._connection.addMessageEvent(new _a(this.onRoomUnitDanceEvent.bind(this))), this._connection.addMessageEvent(new la(this.onRoomUnitEffectEvent.bind(this))), this._connection.addMessageEvent(new ma(this.onRoomUnitEvent.bind(this))), this._connection.addMessageEvent(new ba(this.onRoomUnitExpressionEvent.bind(this))), this._connection.addMessageEvent(new fa(this.onRoomUnitHandItemEvent.bind(this))), this._connection.addMessageEvent(new Ia(this.onRoomUnitIdleEvent.bind(this))), this._connection.addMessageEvent(new va(this.onRoomUnitInfoEvent.bind(this))), this._connection.addMessageEvent(new Oa(this.onRoomUnitNumberEvent.bind(this))), this._connection.addMessageEvent(new Aa(this.onRoomUnitRemoveEvent.bind(this))), this._connection.addMessageEvent(new Da(this.onRoomUnitStatusEvent.bind(this))), this._connection.addMessageEvent(new ia(this.onRoomUnitChatEvent.bind(this))), this._connection.addMessageEvent(new na(this.onRoomUnitChatEvent.bind(this))), this._connection.addMessageEvent(new ra(this.onRoomUnitChatEvent.bind(this))), this._connection.addMessageEvent(new aa(this.onRoomUnitTypingEvent.bind(this))), this._connection.addMessageEvent(new $o(this.onPetFigureUpdateEvent.bind(this))), this._connection.addMessageEvent(new ea(this.onYouArePlayingGameEvent.bind(this))), this._connection.addMessageEvent(new _o(this.onFurnitureState2Event.bind(this))))
                }
                setRoomId(t) {
                    0 !== this._currentRoomId && this._roomCreator && this._roomCreator.destroyRoom(this._currentRoomId), this._currentRoomId = t, this._latestEntryTileEvent = null
                }
                clearRoomId() {
                    this._currentRoomId = 0, this._latestEntryTileEvent = null
                }
                onUserInfoEvent(t) {
                    if (!(t instanceof cc && t.connection)) return;
                    const e = t.getParser();
                    e && (this._ownUserId = e.userInfo.userId)
                }
                onRoomModelNameEvent(t) {
                    if (t instanceof Wo && t.connection) {
                        if (this._currentRoomId !== t.getParser().roomId && this.setRoomId(t.getParser().roomId), this._roomCreator && this._roomCreator.setRoomInstanceModelName(t.getParser().roomId, t.getParser().name), this._initialConnection) return t.connection.send(new $_), void(this._initialConnection = !1);
                        t.connection.send(new ph)
                    }
                }
                onRoomPaintEvent(t) {
                    if (!(t instanceof Ko)) return;
                    const e = t.getParser();
                    e && this._roomCreator && this._roomCreator.updateRoomInstancePlaneType(this._currentRoomId, e.floorType, e.wallType, e.landscapeType)
                }
                onRoomModelEvent(t) {
                    if (!(t instanceof Bo && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = this._roomCreator.getLegacyWallGeometry(this._currentRoomId);
                    if (!s) return;
                    this._planeParser.reset();
                    const i = e.width,
                        n = e.height;
                    this._planeParser.initializeTileMap(i, n);
                    let r = null;
                    this._latestEntryTileEvent && (r = this._latestEntryTileEvent.getParser());
                    let o = -1,
                        a = -1,
                        c = 0,
                        _ = 0,
                        h = 0;
                    for (; h < n;) {
                        let t = 0;
                        for (; t < i;) {
                            const s = e.getHeight(t, h);
                            (h > 0 && h < n - 1 || t > 0 && t < i - 1) && s != Zo.TILE_BLOCKED && (null == r || t == r.x && h == r.y) && (e.getHeight(t, h - 1) == Zo.TILE_BLOCKED && e.getHeight(t - 1, h) == Zo.TILE_BLOCKED && e.getHeight(t, h + 1) == Zo.TILE_BLOCKED && (o = t + .5, a = h, c = s, _ = 90), e.getHeight(t, h - 1) == Zo.TILE_BLOCKED && e.getHeight(t - 1, h) == Zo.TILE_BLOCKED && e.getHeight(t + 1, h) == Zo.TILE_BLOCKED && (o = t, a = h + .5, c = s, _ = 180)), this._planeParser.setTileHeight(t, h, s), t++
                        }
                        h++
                    }
                    this._planeParser.setTileHeight(Math.floor(o), Math.floor(a), c), this._planeParser.initializeFromTileData(e.wallHeight), this._planeParser.setTileHeight(Math.floor(o), Math.floor(a), c + this._planeParser.wallHeight), 64 === e.scale ? (this._planeParser.restrictsDragging = !0, this._planeParser.restrictsScaling = !0, this._planeParser.restrictedScale = .5) : (this._planeParser.restrictsDragging = !1, this._planeParser.restrictsScaling = !1, this._planeParser.restrictedScale = 1), s.scale = rg.DEFAULT_SCALE, s.initialize(i, n, this._planeParser.floorHeight);
                    let l = e.height - 1;
                    for (; l >= 0;) {
                        let t = e.width - 1;
                        for (; t >= 0;) s.setHeight(t, l, this._planeParser.getTileHeight(t, l)), t--;
                        l--
                    }
                    const u = this._planeParser.getMapData();
                    u.doors.push({
                        x: o,
                        y: a,
                        z: c,
                        dir: _
                    }), this._roomCreator.createRoomInstance(this._currentRoomId, u)
                }
                onRoomHeightMapEvent(t) {
                    if (!(t instanceof Lo && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = e.width,
                        i = e.height,
                        n = new ng(s, i);
                    let r = 0;
                    for (; r < i;) {
                        let t = 0;
                        for (; t < s;) n.setTileHeight(t, r, e.getTileHeight(t, r)), n.setStackingBlocked(t, r, e.getStackingBlocked(t, r)), n.setIsRoomTile(t, r, e.isRoomTile(t, r)), t++;
                        r++
                    }
                    this._roomCreator.setFurnitureStackingHeightMap(this._currentRoomId, n)
                }
                onRoomHeightMapUpdateEvent(t) {
                    if (!(t instanceof Po && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = this._roomCreator.getFurnitureStackingHeightMap(this._currentRoomId);
                    if (s) {
                        for (; e.next();) s.setTileHeight(e.x, e.y, e.tileHeight()), s.setStackingBlocked(e.x, e.y, e.isStackingBlocked()), s.setIsRoomTile(e.x, e.y, e.isRoomTile());
                        this._roomCreator._Str_17722(this._currentRoomId, "RoomMessageHandler.onRoomHeightMapUpdateEvent()")
                    }
                }
                onRoomThicknessEvent(t) {
                    if (!(t instanceof qo)) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = e.thicknessWall,
                        i = e.thicknessFloor;
                    this._roomCreator && (this._roomCreator.updateRoomInstancePlaneVisibility(this._currentRoomId, !e.hideWalls, !0), this._roomCreator.updateRoomInstancePlaneThickness(this._currentRoomId, s, i))
                }
                onRoomDoorEvent(t) {
                    t instanceof No && (this._latestEntryTileEvent = t)
                }
                onRoomRollingEvent(t) {
                    if (!(t instanceof jr && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    this._roomCreator.updateRoomObjectFloor(this._currentRoomId, e.rollerId, null, null, 1, null), this._roomCreator.updateRoomObjectFloor(this._currentRoomId, e.rollerId, null, null, 2, null);
                    const s = e.itemsRolling;
                    if (s && s.length)
                        for (const n of s) n && this._roomCreator.rollRoomObjectFloor(this._currentRoomId, n.id, n.location, n.targetLocation);
                    const i = e.unitRolling;
                    if (i) {
                        this._roomCreator.updateRoomObjectUserLocation(this._currentRoomId, i.id, i.location, i.targetLocation);
                        const t = this._roomCreator.getRoomObjectUser(this._currentRoomId, i.id);
                        if (t && t.type !== Z.MONSTER_PLANT) {
                            let t = "std";
                            switch (i.movementType) {
                                case Vr.MOVE:
                                    t = "mv";
                                    break;
                                case Vr.SLIDE:
                                    t = "std"
                            }
                            this._roomCreator.updateRoomObjectUserPosture(this._currentRoomId, i.id, t)
                        }
                    }
                }
                onFurnitureAliasesEvent(t) {
                    t instanceof so && t.connection && this._roomCreator && (t.getParser(), this._connection.send(new ph))
                }
                onFurnitureFloorAddEvent(t) {
                    if (!(t instanceof Kr && t.connection && this._roomCreator)) return;
                    const e = t.getParser().item;
                    e && this.addRoomObjectFurnitureFloor(this._currentRoomId, e)
                }
                onFurnitureFloorEvent(t) {
                    if (!(t instanceof qr && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = e.items.length;
                    let i = 0;
                    for (; i < s;) {
                        const t = e.items[i];
                        t && this.addRoomObjectFurnitureFloor(this._currentRoomId, t), i++
                    }
                }
                onFurnitureFloorRemoveEvent(t) {
                    if (!(t instanceof Qr && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    e && (e.delay > 0 ? setTimeout(() => {
                        this._roomCreator.removeRoomObjectFloor(this._currentRoomId, e.itemId, e.isExpired ? -1 : e.userId, !0)
                    }, e.delay) : this._roomCreator.removeRoomObjectFloor(this._currentRoomId, e.itemId, e.isExpired ? -1 : e.userId, !0))
                }
                onFurnitureFloorUpdateEvent(t) {
                    if (!(t instanceof to && t.connection && this._roomCreator)) return;
                    const e = t.getParser().item;
                    if (!e) return;
                    const s = new K(e.x, e.y, e.z),
                        i = new K(e.direction);
                    this._roomCreator.updateRoomObjectFloor(this._currentRoomId, e.itemId, s, i, e.data.state, e.data), this._roomCreator.updateRoomObjectFloorHeight(this._currentRoomId, e.itemId, e.stackHeight), this._roomCreator.updateRoomObjectFloorExpiration(this._currentRoomId, e.itemId, e.expires)
                }
                onFurnitureWallAddEvent(t) {
                    if (!(t instanceof To && t.connection && this._roomCreator)) return;
                    const e = t.getParser().item;
                    e && this.addRoomObjectFurnitureWall(this._currentRoomId, e)
                }
                onFurnitureWallEvent(t) {
                    if (!(t instanceof yo && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = e.items.length;
                    let i = 0;
                    for (; i < s;) {
                        const t = e.items[i];
                        t && this.addRoomObjectFurnitureWall(this._currentRoomId, t), i++
                    }
                }
                onFurnitureWallRemoveEvent(t) {
                    if (!(t instanceof Co && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    e && this._roomCreator.removeRoomObjectWall(this._currentRoomId, e.itemId, e.userId)
                }
                onFurnitureWallUpdateEvent(t) {
                    if (!(t instanceof Uo && t.connection && this._roomCreator)) return;
                    const e = this._roomCreator.getLegacyWallGeometry(this._currentRoomId);
                    if (!e) return;
                    const s = t.getParser().item;
                    if (!s) return;
                    const i = e.getLocation(s.width, s.height, s.localX, s.localY, s.direction),
                        n = new K(e.getDirection(s.direction));
                    this._roomCreator.updateRoomObjectWall(this._currentRoomId, s.itemId, i, n, s.state, s.stuffData), this._roomCreator.updateRoomObjectWallExpiration(this._currentRoomId, s.itemId, s.secondsToExpiration)
                }
                onFurnitureDataEvent(t) {
                    if (!(t instanceof io && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    this._roomCreator.updateRoomObjectFloor(this._currentRoomId, e.furnitureId, null, null, e.objectData.state, e.objectData)
                }
                onFurnitureItemDataEvent(t) {
                    if (!(t instanceof ro && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    this._roomCreator.updateRoomObjectWallItemData(this._currentRoomId, e.furnitureId, e.data)
                }
                onFurnitureStateEvent(t) {
                    if (!(t instanceof lo && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    this._roomCreator.updateRoomObjectFloor(this._currentRoomId, e.itemId, null, null, e.state, new Si)
                }
                onFurnitureState2Event(t) {
                    if (!(t instanceof _o && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    this._roomCreator.updateRoomObjectFloor(this._currentRoomId, e.itemId, null, null, e.value, new Si)
                }
                onRoomUnitDanceEvent(t) {
                    t instanceof _a && t.connection && this._roomCreator && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, t.getParser().unitId, j.FIGURE_DANCE, t.getParser().danceId)
                }
                onRoomUnitEffectEvent(t) {
                    t instanceof la && t.connection && this._roomCreator && this._roomCreator.updateRoomObjectUserEffect(this._currentRoomId, t.getParser().unitId, t.getParser().effectId, t.getParser().delay)
                }
                onRoomUnitEvent(t) {
                    if (!(t instanceof ma && t.connection && this._roomCreator)) return;
                    const e = t.getParser().users;
                    if (e && e.length)
                        for (const s of e) {
                            if (!s) continue;
                            const t = new K(s.x, s.y, s.z),
                                e = new K(s.dir);
                            this._roomCreator.addRoomObjectUser(this._currentRoomId, s.roomIndex, t, e, s.dir, s.userType, s.figure), s.webID === this._ownUserId && (this._roomCreator.setRoomSessionOwnUser(this._currentRoomId, s.roomIndex), this._roomCreator.updateRoomObjectUserOwn(this._currentRoomId, s.roomIndex)), this._roomCreator.updateRoomObjectUserFigure(this._currentRoomId, s.roomIndex, s.figure, s.sex, s.subType, s.isRiding), Z.getTypeString(s.userType) === Z.PET && this._roomCreator.getPetTypeId(s.figure) === sg.MONSTERPLANT && this._roomCreator.updateRoomObjectUserPosture(this._currentRoomId, s.roomIndex, s.petPosture)
                        }
                }
                onRoomUnitExpressionEvent(t) {
                    t instanceof ba && t.connection && this._roomCreator && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, t.getParser().unitId, j.FIGURE_EXPRESSION, t.getParser().expression)
                }
                onRoomUnitHandItemEvent(t) {
                    t instanceof fa && t.connection && this._roomCreator && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, t.getParser().unitId, j.FIGURE_CARRY_OBJECT, t.getParser().handId)
                }
                onRoomUnitIdleEvent(t) {
                    t instanceof Ia && t.connection && this._roomCreator && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, t.getParser().unitId, j.FIGURE_SLEEP, t.getParser().isIdle ? 1 : 0)
                }
                onRoomUnitInfoEvent(t) {
                    t instanceof va && t.connection && this._roomCreator && this._roomCreator.updateRoomObjectUserFigure(this._currentRoomId, t.getParser().unitId, t.getParser().figure, t.getParser().gender)
                }
                onRoomUnitNumberEvent(t) {
                    if (!(t instanceof Oa && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    e && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, e.unitId, j.FIGURE_NUMBER_VALUE, e.value)
                }
                onRoomUnitRemoveEvent(t) {
                    t instanceof Aa && t.connection && this._roomCreator && this._roomCreator.removeRoomObjectUser(this._currentRoomId, t.getParser().unitId)
                }
                onRoomUnitStatusEvent(t) {
                    if (!(t instanceof Da && t.connection && this._roomCreator)) return;
                    const e = t.getParser().statuses;
                    if (!e || !e.length) return;
                    const s = this._roomCreator.getRoomInstance(this._currentRoomId);
                    if (!s) return;
                    const i = s.model.getValue(ig.ROOM_Z_SCALE) || 1;
                    for (const n of e) {
                        if (!n) continue;
                        let t = n.height;
                        t && (t /= i);
                        const e = new K(n.x, n.y, n.z + t),
                            s = new K(n.direction);
                        let r = null;
                        n.didMove && (r = new K(n.targetX, n.targetY, n.targetZ)), this._roomCreator.updateRoomObjectUserLocation(this._currentRoomId, n.id, e, r, n.canStandUp, t, s, n.headDirection), this._roomCreator.updateRoomObjectUserFlatControl(this._currentRoomId, n.id, null);
                        let o = !0,
                            a = !1,
                            c = j.STD,
                            _ = "";
                        if (n.actions && n.actions.length)
                            for (const i of n.actions)
                                if (i) switch (i.action) {
                                    case "flatctrl":
                                        this._roomCreator.updateRoomObjectUserFlatControl(this._currentRoomId, n.id, i.value);
                                        break;
                                    case "sign":
                                        1 === n.actions.length && (o = !1), this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, n.id, j.FIGURE_SIGN, parseInt(i.value));
                                        break;
                                    case "gst":
                                        1 === n.actions.length && (o = !1), this._roomCreator.updateRoomObjectUserPetGesture(this._currentRoomId, n.id, i.value);
                                        break;
                                    case "wav":
                                    case "mv":
                                        a = !0, c = i.action, _ = i.value;
                                        break;
                                    case "trd":
                                        break;
                                    default:
                                        a = !0, c = i.action, _ = i.value
                                }
                        a ? this._roomCreator.updateRoomObjectUserPosture(this._currentRoomId, n.id, c, _) : o && this._roomCreator.updateRoomObjectUserPosture(this._currentRoomId, n.id, j.STD, "")
                    }
                }
                onRoomUnitChatEvent(t) {
                    if (!t.connection || !this._roomCreator) return;
                    const e = t.getParser();
                    e && (this._roomCreator.updateRoomObjectUserGesture(this._currentRoomId, e.roomIndex, e.gesture), this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, e.roomIndex, j.FIGURE_TALK, e.message.length / 10))
                }
                onRoomUnitTypingEvent(t) {
                    t instanceof aa && t.connection && this._roomCreator && this._roomCreator.updateRoomObjectUserAction(this._currentRoomId, t.getParser().unitId, j.FIGURE_IS_TYPING, t.getParser().isTyping ? 1 : 0)
                }
                onPetFigureUpdateEvent(t) {
                    if (!(t instanceof $o && t.connection && this._roomCreator)) return;
                    const e = t.getParser();
                    e && this._roomCreator.updateRoomObjectUserFigure(this._currentRoomId, e.roomIndex, e.figureData.figuredata, "", "", e.isRiding)
                }
                onYouArePlayingGameEvent(t) {
                    if (!t) return;
                    const e = t.getParser();
                    e && this._roomCreator.setRoomEngineGameMode(this._currentRoomId, e.isPlaying)
                }
                addRoomObjectFurnitureFloor(t, e) {
                    if (!e || !this._roomCreator) return;
                    const s = new K(e.x, e.y, e.z),
                        i = new K(e.direction);
                    e.spriteName ? this._roomCreator.addFurnitureFloorByTypeName(t, e.itemId, e.spriteName, s, i, e.state, e.data, NaN, e.expires, e.usagePolicy, e.userId, e.username, !0, !0, e.stackHeight) : this._roomCreator.addFurnitureFloor(t, e.itemId, e.spriteId, s, i, e.state, e.data, NaN, e.expires, e.usagePolicy, e.userId, e.username, !0, !0, e.stackHeight)
                }
                addRoomObjectFurnitureWall(t, e) {
                    if (!e || !this._roomCreator) return;
                    const s = this._roomCreator.getLegacyWallGeometry(t);
                    if (!s) return;
                    let i = null;
                    e._Str_22379 || (i = s.getLocation(e.width, e.height, e.localX, e.localY, e.direction));
                    const n = new K(s.getDirection(e.direction));
                    this._roomCreator.addFurnitureWall(t, e.itemId, e.spriteId, i, n, e.state, e.stuffData, e.secondsToExpiration, e.usagePolicy, e.userId, e.username)
                }
                get currentRoomId() {
                    return this._currentRoomId
                }
            }
            let ag = (() => {
                    class t {}
                    return t.CATALOG = "catalog", t.INVENTORY = "inventory", t
                })(),
                cg = (() => {
                    class t extends Qh {
                        constructor(e, s, i, n, r, o) {
                            super(t.ROOM_COLOR, e), this._state = s, this._presetId = i, this._effectId = n, this._color = r, this._brightness = o
                        }
                        get state() {
                            return this._state
                        }
                        get _Str_14686() {
                            return this._presetId
                        }
                        get _Str_6815() {
                            return this._effectId
                        }
                        get color() {
                            return this._color
                        }
                        get _Str_5123() {
                            return this._brightness
                        }
                    }
                    return t.ROOM_COLOR = "REDSE_ROOM_COLOR", t
                })();
            class _g extends Al {
                constructor(t, e, s, i, n, r, o, a, c, _, h, l, u) {
                    super(t, e, s, i), this._wallLocation = "", this._x = 0, this._y = 0, this._z = 0, this._direction = 0, this._placedInRoom = !1, this._placedOnFloor = !1, this._placedOnWall = !1, this._instanceData = null, this._wallLocation = n, this._x = r, this._y = o, this._z = a, this._direction = c, this._placedInRoom = _, this._placedOnFloor = h, this._placedOnWall = l, this._instanceData = u
                }
                get _Str_7031() {
                    return this._wallLocation
                }
                get x() {
                    return this._x
                }
                get y() {
                    return this._y
                }
                get z() {
                    return this._z
                }
                get direction() {
                    return this._direction
                }
                get _Str_4057() {
                    return this._placedInRoom
                }
                get _Str_23888() {
                    return this._placedOnFloor
                }
                get _Str_23432() {
                    return this._placedOnWall
                }
                get _Str_4766() {
                    return this._instanceData
                }
            }
            class hg extends Al {
                constructor(t, e, s, i, n, r) {
                    super(t, e, s, i), this._droppedObjectId = n, this._droppedObjectCategory = r
                }
                get droppedObjectId() {
                    return this._droppedObjectId
                }
                get droppedObjectCategory() {
                    return this._droppedObjectCategory
                }
            }
            let lg = (() => {
                    class t extends Al {
                        constructor(t, e, s, i, n = null) {
                            super(t, e, s, i), this._widget = n
                        }
                        get widget() {
                            return this._widget
                        }
                    }
                    return t.OPEN_WIDGET = "RETWE_OPEN_WIDGET", t.CLOSE_WIDGET = "RETWE_CLOSE_WIDGET", t.OPEN_FURNI_CONTEXT_MENU = "RETWE_OPEN_FURNI_CONTEXT_MENU", t.CLOSE_FURNI_CONTEXT_MENU = "RETWE_CLOSE_FURNI_CONTEXT_MENU", t.REQUEST_PLACEHOLDER = "RETWE_REQUEST_PLACEHOLDER", t.REQUEST_CREDITFURNI = "RETWE_REQUEST_CREDITFURNI", t.REQUEST_STICKIE = "RETWE_REQUEST_STICKIE", t.REQUEST_PRESENT = "RETWE_REQUEST_PRESENT", t.REQUEST_TROPHY = "RETWE_REQUEST_TROPHY", t.REQUEST_TEASER = "RETWE_REQUEST_TEASER", t.REQUEST_ECOTRONBOX = "RETWE_REQUEST_ECOTRONBOX", t.REQUEST_DIMMER = "RETWE_REQUEST_DIMMER", t.REMOVE_DIMMER = "RETWE_REMOVE_DIMMER", t.REQUEST_CLOTHING_CHANGE = "RETWE_REQUEST_CLOTHING_CHANGE", t.REQUEST_PLAYLIST_EDITOR = "RETWE_REQUEST_PLAYLIST_EDITOR", t.REQUEST_MANNEQUIN = "RETWE_REQUEST_MANNEQUIN", t.REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG = "ROWRE_REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG", t.REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG = "ROWRE_REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG", t.REQUEST_BACKGROUND_COLOR = "RETWE_REQUEST_BACKGROUND_COLOR", t.REQUEST_MYSTERYBOX_OPEN_DIALOG = "RETWE_REQUEST_MYSTERYBOX_OPEN_DIALOG", t.REQUEST_EFFECTBOX_OPEN_DIALOG = "RETWE_REQUEST_EFFECTBOX_OPEN_DIALOG", t.REQUEST_MYSTERYTROPHY_OPEN_DIALOG = "RETWE_REQUEST_MYSTERYTROPHY_OPEN_DIALOG", t.REQUEST_ACHIEVEMENT_RESOLUTION_ENGRAVING = "RETWE_REQUEST_ACHIEVEMENT_RESOLUTION_ENGRAVING", t.REQUEST_ACHIEVEMENT_RESOLUTION_FAILED = "RETWE_REQUEST_ACHIEVEMENT_RESOLUTION_FAILED", t.REQUEST_FRIEND_FURNITURE_CONFIRM = "RETWE_REQUEST_FRIEND_FURNITURE_CONFIRM", t.REQUEST_FRIEND_FURNITURE_ENGRAVING = "RETWE_REQUEST_FRIEND_FURNITURE_ENGRAVING", t.REQUEST_BADGE_DISPLAY_ENGRAVING = "RETWE_REQUEST_BADGE_DISPLAY_ENGRAVING", t.REQUEST_HIGH_SCORE_DISPLAY = "RETWE_REQUEST_HIGH_SCORE_DISPLAY", t.REQUEST_HIDE_HIGH_SCORE_DISPLAY = "RETWE_REQUEST_HIDE_HIGH_SCORE_DISPLAY", t.REQUEST_INTERNAL_LINK = "RETWE_REQUEST_INTERNAL_LINK", t.REQUEST_ROOM_LINK = "RETWE_REQUEST_ROOM_LINK", t
                })(),
                ug = (() => {
                    class t extends $h {
                        constructor(t, e, s, i = !0) {
                            super(t, e), this._badgeId = s, this._groupBadge = i
                        }
                        get badgeId() {
                            return this._badgeId
                        }
                        get groupBadge() {
                            return this._groupBadge
                        }
                    }
                    return t.LOAD_BADGE = "ROBAE_LOAD_BADGE", t
                })(),
                dg = (() => {
                    class t extends $h {
                        constructor(e, s, i, n, r, o) {
                            super(t.DIMMER_STATE, e), this._state = s, this._presetId = i, this._effectId = n, this._color = r, this._brightness = o
                        }
                        get state() {
                            return this._state
                        }
                        get _Str_14686() {
                            return this._presetId
                        }
                        get _Str_6815() {
                            return this._effectId
                        }
                        get color() {
                            return this._color
                        }
                        get _Str_5123() {
                            return this._brightness
                        }
                    }
                    return t.DIMMER_STATE = "RODSUE_DIMMER_STATE", t
                })(),
                gg = (() => {
                    class t extends $h {
                        constructor(t, e) {
                            super(t, e)
                        }
                    }
                    return t.ADD_HOLE = "ROFHO_ADD_HOLE", t.REMOVE_HOLE = "ROFHO_REMOVE_HOLE", t
                })(),
                mg = (() => {
                    class t extends Qh {
                        constructor(t, e, s, i, n, r) {
                            super(t, e), this._enable = s, this._hue = i, this._saturation = n, this._lightness = r
                        }
                        get enable() {
                            return this._enable
                        }
                        get hue() {
                            return this._hue
                        }
                        get saturation() {
                            return this._saturation
                        }
                        get lightness() {
                            return this._lightness
                        }
                    }
                    return t.ROOM_BACKGROUND_COLOR = "ROHSLCEE_ROOM_BACKGROUND_COLOR", t
                })(),
                pg = (() => {
                    class t extends $h {
                        constructor(t, e, s, i, n, r) {
                            super(t, e), this._enable = s, this._hue = i, this._saturation = n, this._lightness = r
                        }
                        get enable() {
                            return this._enable
                        }
                        get hue() {
                            return this._hue
                        }
                        get saturation() {
                            return this._saturation
                        }
                        get lightness() {
                            return this._lightness
                        }
                    }
                    return t.ROOM_BACKGROUND_COLOR = "ROHSLCEE_ROOM_BACKGROUND_COLOR", t
                })(),
                bg = (() => {
                    class t extends $h {
                        constructor(t, e) {
                            super(t, e)
                        }
                    }
                    return t.POSITION_CHANGED = "ROME_POSITION_CHANGED", t.OBJECT_REMOVED = "ROME_OBJECT_REMOVED", t
                })(),
                Eg = (() => {
                    class t extends $h {
                        constructor(t, e, s = 0) {
                            super(t, e), this._state = s
                        }
                        get state() {
                            return this._state
                        }
                    }
                    return t.STATE_CHANGE = "ROSCE_STATE_CHANGE", t.STATE_RANDOM = "ROSCE_STATE_RANDOM", t
                })();
            class fg extends tl {
                constructor(t, e, s, i, n, r, o = !1, a = !1, c = !1, _ = !1) {
                    super(t, e, s, o, a, c, _), this._tileX = i, this._tileY = n, this._tileZ = r
                }
                get tileX() {
                    return this._tileX
                }
                get tileY() {
                    return this._tileY
                }
                get tileZ() {
                    return this._tileZ
                }
                get _Str_16836() {
                    return Math.trunc(this._tileX + .499)
                }
                get _Str_17676() {
                    return Math.trunc(this._tileY + .499)
                }
                get _Str_21459() {
                    return Math.trunc(this._tileZ + .499)
                }
            }
            class Sg extends tl {
                constructor(t, e, s, i, n, r, o, a, c, _ = !1, h = !1, l = !1, u = !1) {
                    super(t, e, s, _, h, l, u), this._wallLocation = new K, this._wallWd = new K, this._wallHt = new K, this._wallLocation.assign(i), this._wallWd.assign(n), this._wallHt.assign(r), this._x = o, this._y = a, this._direction = c
                }
                get wallLocation() {
                    return this._wallLocation
                }
                get wallWidth() {
                    return this._wallWd
                }
                get wallHeight() {
                    return this._wallHt
                }
                get x() {
                    return this._x
                }
                get y() {
                    return this._y
                }
                get direction() {
                    return this._direction
                }
            }
            let Ig = (() => {
                class t extends $h {
                    constructor(t, e) {
                        super(t, e)
                    }
                }
                return t.OPEN_WIDGET = "ROWRE_OPEN_WIDGET", t.CLOSE_WIDGET = "ROWRE_CLOSE_WIDGET", t.OPEN_FURNI_CONTEXT_MENU = "ROWRE_OPEN_FURNI_CONTEXT_MENU", t.CLOSE_FURNI_CONTEXT_MENU = "ROWRE_CLOSE_FURNI_CONTEXT_MENU", t.PLACEHOLDER = "ROWRE_PLACEHOLDER", t.CREDITFURNI = "ROWRE__CREDITFURNI", t.STICKIE = "ROWRE__STICKIE", t.PRESENT = "ROWRE_PRESENT", t.TROPHY = "ROWRE_TROPHY", t.TEASER = "ROWRE_TEASER", t.ECOTRONBOX = "ROWRE_ECOTRONBOX", t.DIMMER = "ROWRE_DIMMER", t.WIDGET_REMOVE_DIMMER = "ROWRE_WIDGET_REMOVE_DIMMER", t.CLOTHING_CHANGE = "ROWRE_CLOTHING_CHANGE", t.JUKEBOX_PLAYLIST_EDITOR = "ROWRE_JUKEBOX_PLAYLIST_EDITOR", t.MANNEQUIN = "ROWRE_MANNEQUIN", t.PET_PRODUCT_MENU = "ROWRE_PET_PRODUCT_MENU", t.GUILD_FURNI_CONTEXT_MENU = "ROWRE_GUILD_FURNI_CONTEXT_MENU", t.MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG = "ROWRE_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG", t.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG = "ROWRE_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG", t.BACKGROUND_COLOR = "ROWRE_BACKGROUND_COLOR", t.MYSTERYBOX_OPEN_DIALOG = "ROWRE_MYSTERYBOX_OPEN_DIALOG", t.EFFECTBOX_OPEN_DIALOG = "ROWRE_EFFECTBOX_OPEN_DIALOG", t.MYSTERYTROPHY_OPEN_DIALOG = "ROWRE_MYSTERYTROPHY_OPEN_DIALOG", t.ACHIEVEMENT_RESOLUTION_OPEN = "ROWRE_ACHIEVEMENT_RESOLUTION_OPEN", t.ACHIEVEMENT_RESOLUTION_ENGRAVING = "ROWRE_ACHIEVEMENT_RESOLUTION_ENGRAVING", t.ACHIEVEMENT_RESOLUTION_FAILED = "ROWRE_ACHIEVEMENT_RESOLUTION_FAILED", t.FRIEND_FURNITURE_CONFIRM = "ROWRE_FRIEND_FURNITURE_CONFIRM", t.FRIEND_FURNITURE_ENGRAVING = "ROWRE_FRIEND_FURNITURE_ENGRAVING", t.BADGE_DISPLAY_ENGRAVING = "ROWRE_BADGE_DISPLAY_ENGRAVING", t.HIGH_SCORE_DISPLAY = "ROWRE_HIGH_SCORE_DISPLAY", t.HIDE_HIGH_SCORE_DISPLAY = "ROWRE_HIDE_HIGH_SCORE_DISPLAY", t.INERNAL_LINK = "ROWRE_INTERNAL_LINK", t.ROOM_LINK = "ROWRE_ROOM_LINK", t
            })();
            class Rg extends Nl {
                constructor(t) {
                    super(), this._selected = t
                }
                get selected() {
                    return this._selected
                }
            }
            class vg extends Nl {
                constructor(t) {
                    super(), this._selected = t
                }
                get selected() {
                    return this._selected
                }
            }
            class Tg extends el {
                constructor(t, e, s, i, n = !1) {
                    super(t, null), this._height = e, this._visible = s, this._sourceEventId = i, this._toggleVisibility = n
                }
                get height() {
                    return this._height
                }
                get visible() {
                    return this._visible
                }
                get _Str_20637() {
                    return this._sourceEventId
                }
                get toggleVisibility() {
                    return this._toggleVisibility
                }
            }
            let Og = (() => {
                    class t extends el {
                        constructor(t) {
                            super(null, null), this._type = t
                        }
                        get type() {
                            return this._type
                        }
                    }
                    return t.ENABLED = "ROVUM_ENABLED", t.DISABLED = "ROVUM_DISABLED", t
                })(),
                yg = (() => {
                    class t {}
                    return t.OBJECT_UNDEFINED = "OBJECT_UNDEFINED", t.OBJECT_MOVE = "OBJECT_MOVE", t.OBJECT_PLACE = "OBJECT_PLACE", t.OBJECT_ROTATE_POSITIVE = "OBJECT_ROTATE_POSITIVE", t.OBJECT_ROTATE_NEGATIVE = "OBJECT_ROTATE_NEGATIVE", t.OBJECT_MOVE_TO = "OBJECT_MOVE_TO", t.OBJECT_PLACE_TO = "OBJECT_PLACE_TO", t.OBJECT_PICKUP = "OBJECT_PICKUP", t.OBJECT_PICKUP_BOT = "OBJECT_PICKUP_BOT", t.OBJECT_PICKUP_PET = "OBJECT_PICKUP_PET", t.OBJECT_EJECT = "OBJECT_EJECT", t.OBJECT_SAVE_STUFF_DATA = "OBJECT_SAVE_STUFF_DATA", t
                })();
            class Ag {
                constructor(t, e, s, i, n, r = 0, o = null, a = null, c = -1, _ = -1, h = null) {
                    this._id = 0, this._category = 0, this._operation = "", this._loc = null, this._dir = null, this._typeId = 0, this._instanceData = null, this._stuffData = null, this._state = -1, this._animFrame = -1, this._posture = null, this._id = t, this._category = e, this._operation = s, this._loc = new K, this._loc.assign(i), this._dir = new K, this._dir.assign(n), this._typeId = r, this._instanceData = o, this._stuffData = a, this._state = c, this._animFrame = _, this._posture = h
                }
                get id() {
                    return this._id
                }
                get category() {
                    return this._category
                }
                get operation() {
                    return this._operation
                }
                get loc() {
                    return this._loc
                }
                get dir() {
                    return this._dir
                }
                get typeId() {
                    return this._typeId
                }
                get _Str_4766() {
                    return this._instanceData
                }
                get stuffData() {
                    return this._stuffData
                }
                get state() {
                    return this._state
                }
                get _Str_15896() {
                    return this._animFrame
                }
                get posture() {
                    return this._posture
                }
                dispose() {
                    this._loc = null, this._dir = null
                }
            }
            class Cg extends d {
                constructor(t) {
                    super(), this._roomEngine = t, this._eventIds = new Map, this._selectedAvatarId = -1, this._selectedObjectId = -1, this._selectedObjectCategory = -2, this._whereYouClickIsWhereYouGo = !0, this._objectPlacementSource = null, this.onRoomEngineObjectEvent = this.onRoomEngineObjectEvent.bind(this), this._roomEngine.events.addEventListener(Al.ADDED, this.onRoomEngineObjectEvent)
                }
                dispose() {
                    this._eventIds && (this._eventIds = null), this._roomEngine.events.removeEventListener(Al.ADDED, this.onRoomEngineObjectEvent), this._roomEngine = null
                }
                onRoomEngineObjectEvent(t) {
                    let e = this.getSelectedRoomObjectData(t.roomId);
                    if (e && e.operation === yg.OBJECT_PLACE && e.id === t.objectId) {
                        const s = this._roomEngine.getRoomObject(t.roomId, e.id, e.category);
                        if (s && s.model && e.category === V.FLOOR) {
                            const i = s.model.getValue(j.FURNITURE_ALLOWED_DIRECTIONS);
                            if (i && i.length) {
                                const n = new K(i[0]);
                                if (s.setDirection(n), this._Str_16022(t.roomId, e.id, e.category, e.loc, n, e.operation, e.typeId, e._Str_4766, e.stuffData, e.state, e._Str_15896, e.posture), e = this.getSelectedRoomObjectData(t.roomId), !e) return
                            }
                        }
                        this.setFurnitureAlphaMultiplier(s, .5)
                    }
                }
                _Str_20330(t, e, s) {
                    if (!t || !e) return;
                    if (rl.isRunning()) return;
                    let i = this._roomEngine.getRoomObjectCategoryForType(e.type);
                    if (i === V.ROOM || this._roomEngine.isPlayingGame() && i === V.UNIT || (i = V.MINIMUM), this._Str_18648(i, t.type) === t._Str_3463) {
                        if (t.type === sl.MOUSE_CLICK || t.type === sl.DOUBLE_CLICK || t.type === sl.MOUSE_DOWN || t.type === sl.MOUSE_UP || t.type === sl.MOUSE_MOVE) return
                    } else t._Str_3463 && this._Str_11142(i, t.type, t._Str_3463);
                    e.mouseHandler && e.mouseHandler.mouseEvent(t, s)
                }
                processRoomObjectPlacement(t, e, s, i, n, r = null, o = null, a = -1, c = -1, _ = null) {
                    this._objectPlacementSource = t;
                    const h = new K(-100, -100),
                        l = new K(0);
                    return this.setSelectedRoomObjectData(e, s, i, h, l, yg.OBJECT_PLACE, n, r, o, a, c, _), this._roomEngine && (this._roomEngine._Str_16645(n, i, !1, r, o, a, c, _), this._roomEngine._Str_7972(!1)), !0
                }
                _Str_8675(t) {
                    return this._Str_13199(t), !0
                }
                _Str_18648(t, e) {
                    const s = this._eventIds.get(t);
                    return s && s.get(e) || null
                }
                _Str_11142(t, e, s) {
                    let i = this._eventIds.get(t);
                    i || (i = new Map, this._eventIds.set(t, i)), i.delete(e), i.set(e, s)
                }
                handleRoomObjectEvent(t, e) {
                    if (t)
                        if (t instanceof tl) this.handleRoomObjectMouseEvent(t, e);
                        else switch (t.type) {
                            case Eg.STATE_CHANGE:
                            case Eg.STATE_RANDOM:
                                return void this.onRoomObjectStateChangedEvent(t, e);
                            case dg.DIMMER_STATE:
                                return void this.onRoomObjectDimmerStateUpdateEvent(t, e);
                            case bg.POSITION_CHANGED:
                            case bg.OBJECT_REMOVED:
                                return void this.onRoomObjectMoveEvent(t, e);
                            case Ig.OPEN_WIDGET:
                            case Ig.CLOSE_WIDGET:
                            case Ig.OPEN_FURNI_CONTEXT_MENU:
                            case Ig.CLOSE_FURNI_CONTEXT_MENU:
                            case Ig.PLACEHOLDER:
                            case Ig.CREDITFURNI:
                            case Ig.STICKIE:
                            case Ig.PRESENT:
                            case Ig.TROPHY:
                            case Ig.TEASER:
                            case Ig.ECOTRONBOX:
                            case Ig.DIMMER:
                            case Ig.WIDGET_REMOVE_DIMMER:
                            case Ig.CLOTHING_CHANGE:
                            case Ig.JUKEBOX_PLAYLIST_EDITOR:
                            case Ig.MANNEQUIN:
                            case Ig.PET_PRODUCT_MENU:
                            case Ig.GUILD_FURNI_CONTEXT_MENU:
                            case Ig.MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG:
                            case Ig.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG:
                            case Ig.BACKGROUND_COLOR:
                            case Ig.MYSTERYBOX_OPEN_DIALOG:
                            case Ig.EFFECTBOX_OPEN_DIALOG:
                            case Ig.MYSTERYTROPHY_OPEN_DIALOG:
                            case Ig.ACHIEVEMENT_RESOLUTION_OPEN:
                            case Ig.ACHIEVEMENT_RESOLUTION_ENGRAVING:
                            case Ig.ACHIEVEMENT_RESOLUTION_FAILED:
                            case Ig.FRIEND_FURNITURE_CONFIRM:
                            case Ig.FRIEND_FURNITURE_ENGRAVING:
                            case Ig.BADGE_DISPLAY_ENGRAVING:
                            case Ig.HIGH_SCORE_DISPLAY:
                            case Ig.HIDE_HIGH_SCORE_DISPLAY:
                            case Ig.INERNAL_LINK:
                            case Ig.ROOM_LINK:
                                return void this.onRoomObjectWidgetRequestEvent(t, e);
                            case Cl.DICE_ACTIVATE:
                            case Cl.DICE_OFF:
                            case Cl.USE_HABBOWHEEL:
                            case Cl.STICKIE:
                            case Cl.ENTER_ONEWAYDOOR:
                                return void this.onRoomObjectFurnitureActionEvent(t, e);
                            case gg.ADD_HOLE:
                            case gg.REMOVE_HOLE:
                                return void this.onRoomObjectFloorHoleEvent(t, e);
                            case ug.LOAD_BADGE:
                                return void this.onRoomObjectBadgeAssetEvent(t, e);
                            case Cl.MOUSE_ARROW:
                            case Cl.MOUSE_BUTTON:
                                return void this.handleMousePointer(t, e);
                            case pg.ROOM_BACKGROUND_COLOR:
                                return void this.onHSLColorEnableEvent(t, e);
                            default:
                                return void g.log("Unhandled Event: " + t.constructor.name, "Object ID: " + t.object.id)
                        }
                }
                handleRoomObjectMouseEvent(t, e) {
                    if (t && t.type) switch (t.type) {
                        case tl.CLICK:
                            return void this.handleRoomObjectMouseClickEvent(t, e);
                        case tl.MOUSE_MOVE:
                            return void this.handleRoomObjectMouseMoveEvent(t, e);
                        case tl.MOUSE_DOWN:
                            return void this.handleRoomObjectMouseDownEvent(t, e);
                        case tl.MOUSE_ENTER:
                            return void this.handleRoomObjectMouseEnterEvent(t, e);
                        case tl.MOUSE_LEAVE:
                            return void this.handleRoomObjectMouseLeaveEvent(t, e)
                    }
                }
                handleRoomObjectMouseClickEvent(t, e) {
                    if (!t) return;
                    let s = yg.OBJECT_UNDEFINED;
                    const i = this.getSelectedRoomObjectData(e);
                    i && (s = i.operation);
                    let n = !1,
                        r = !1;
                    this._whereYouClickIsWhereYouGo && (s && s !== yg.OBJECT_UNDEFINED || (n = this._Str_23423(e, t)));
                    const o = this._roomEngine.getRoomObjectCategoryForType(t.objectType);
                    switch (s) {
                        case yg.OBJECT_MOVE:
                            o === V.ROOM ? i && this.processRoomObjectOperation(e, i.id, i.category, yg.OBJECT_MOVE_TO) : o === V.UNIT && (i && t.objectType === Z.MONSTER_PLANT && this.processRoomObjectOperation(e, i.id, i.category, yg.OBJECT_MOVE_TO), t.eventId || this._Str_11142(V.ROOM, sl.MOUSE_CLICK, t.eventId), this._Str_19253(e, t.objectId, o)), r = !0, -1 !== t.objectId && this._Str_17481(e, t.objectId, o);
                            break;
                        case yg.OBJECT_PLACE:
                            if (o === V.ROOM) this._Str_19271(e, t instanceof fg, t instanceof Sg);
                            else if (o === V.UNIT) switch (t.objectType) {
                                case Z.MONSTER_PLANT:
                                case Z.RENTABLE_BOT:
                                    this._Str_19271(e, t instanceof fg, t instanceof Sg);
                                    break;
                                default:
                                    t.eventId && this._Str_11142(V.ROOM, sl.MOUSE_CLICK, t.eventId), this._Str_19253(e, t.objectId, o)
                            }
                            break;
                        case yg.OBJECT_UNDEFINED:
                            o === V.ROOM ? !n && t instanceof fg && this.onRoomObjectTileMouseEvent(e, t) : (this._Str_17481(e, t.objectId, o), o === V.UNIT ? (!t.ctrlKey || t.altKey || t.shiftKey || t.objectType !== Z.RENTABLE_BOT ? !t.ctrlKey || t.altKey || t.shiftKey || t.objectType !== Z.MONSTER_PLANT ? t.ctrlKey || t.altKey || !t.shiftKey || t.objectType !== Z.MONSTER_PLANT || this.processRoomObjectOperation(e, t.objectId, o, yg.OBJECT_ROTATE_POSITIVE) : this.processRoomObjectOperation(e, t.objectId, o, yg.OBJECT_PICKUP_PET) : this.processRoomObjectOperation(e, t.objectId, o, yg.OBJECT_PICKUP_BOT), n = !0) : o !== V.FLOOR && o !== V.WALL || (t.altKey || t.ctrlKey || t.shiftKey) && (t.ctrlKey || t.altKey || !t.shiftKey ? !t.ctrlKey || t.altKey || t.shiftKey || this.processRoomObjectOperation(e, t.objectId, o, yg.OBJECT_PICKUP) : o === V.FLOOR && this._roomEngine.events && this._roomEngine.events.dispatchEvent(new Al(Al.REQUEST_ROTATE, e, t.objectId, o)), n = !0), t.eventId && n && this._Str_11142(V.ROOM, sl.MOUSE_CLICK, t.eventId))
                    }
                    if (o === V.ROOM) {
                        const s = this._Str_18648(V.MINIMUM, sl.MOUSE_CLICK),
                            i = this._Str_18648(V.UNIT, sl.MOUSE_CLICK);
                        s === t.eventId || i === t.eventId || r || (this._Str_16209(e), this._roomEngine.events && this._roomEngine.events.dispatchEvent(new Al(Al.DESELECTED, e, -1, V.MINIMUM)), this._Str_12227(e, 0, !1))
                    }
                }
                handleRoomObjectMouseMoveEvent(t, e) {
                    if (!t) return;
                    let s = yg.OBJECT_UNDEFINED;
                    const i = this.getSelectedRoomObjectData(e);
                    i && (s = i.operation);
                    const n = this._roomEngine.getRoomObjectCategoryForType(t.objectType);
                    if (this._roomEngine) {
                        const s = this._roomEngine.getRoomObjectCursor(e);
                        if (s && s.logic) {
                            let i = null;
                            t instanceof fg ? i = this._Str_23824(t, e) : t.object && -1 !== t.object.id ? this._whereYouClickIsWhereYouGo && (i = this._Str_25124(n, e, t)) : i = new Tg(null, 0, !1, t.eventId), s.processUpdateMessage(i)
                        }
                    }
                    switch (s) {
                        case yg.OBJECT_MOVE:
                            return void(n === V.ROOM && this._Str_24048(t, e));
                        case yg.OBJECT_PLACE:
                            return void(n === V.ROOM && this._Str_22548(t, e))
                    }
                }
                handleRoomObjectMouseDownEvent(t, e) {
                    if (!t) return;
                    let s = yg.OBJECT_UNDEFINED;
                    const i = this.getSelectedRoomObjectData(e);
                    i && (s = i.operation);
                    const n = this._roomEngine.getRoomObjectCategoryForType(t.objectType);
                    switch (s) {
                        case yg.OBJECT_UNDEFINED:
                            return void(n !== V.FLOOR && n !== V.WALL && t.objectType !== Z.MONSTER_PLANT || (t.altKey && !t.ctrlKey && !t.shiftKey || this._Str_25211(t)) && this._roomEngine.events && this._roomEngine.events.dispatchEvent(new Al(Al.REQUEST_MOVE, e, t.objectId, n)))
                    }
                }
                handleRoomObjectMouseEnterEvent(t, e) {
                    const s = t.objectId,
                        i = this._roomEngine.getRoomObjectCategoryForType(t.objectType);
                    this._roomEngine.events && this._roomEngine.events.dispatchEvent(new Al(Al.MOUSE_ENTER, e, s, i))
                }
                handleRoomObjectMouseLeaveEvent(t, e) {
                    const s = t.objectId,
                        i = this._roomEngine.getRoomObjectCategoryForType(t.objectType);
                    if (i !== V.ROOM && i === V.UNIT) {
                        const t = this._roomEngine.getRoomObjectCursor(e);
                        t && t.processUpdateMessage(new eu(0, null))
                    }
                    this._roomEngine.events && this._roomEngine.events.dispatchEvent(new Al(Al.MOUSE_LEAVE, e, s, i))
                }
                onRoomObjectStateChangedEvent(t, e) {
                    if (t) switch (t.type) {
                        case Eg.STATE_CHANGE:
                            return void this.updateRoomObjectState(e, t.object.id, t.object.type, t.state, !1);
                        case Eg.STATE_RANDOM:
                            return void this.updateRoomObjectState(e, t.object.id, t.object.type, t.state, !0)
                    }
                }
                onRoomObjectDimmerStateUpdateEvent(t, e) {
                    if (t) switch (t.type) {
                        case dg.DIMMER_STATE:
                            return void this._roomEngine.events.dispatchEvent(new cg(e, t.state, t._Str_14686, t._Str_6815, t.color, t._Str_5123))
                    }
                }
                onRoomObjectMoveEvent(t, e) {
                    if (t && this._roomEngine) switch (t.type) {
                        case bg.POSITION_CHANGED:
                            {
                                const s = t.objectId,
                                    i = this._roomEngine.getRoomObjectCategoryForType(t.objectType),
                                    n = this._roomEngine.getRoomObject(e, s, i),
                                    r = this._roomEngine.getRoomObjectSelectionArrow(e);
                                if (n && r && r.logic) {
                                    const t = n.getLocation();
                                    r.logic.processUpdateMessage(new el(t, null))
                                }
                                return
                            }
                        case bg.OBJECT_REMOVED:
                            return void this._Str_12227(e, 0, !1)
                    }
                }
                onRoomObjectWidgetRequestEvent(t, e) {
                    if (!t || !this._roomEngine) return;
                    const s = t.objectId,
                        i = this._roomEngine.getRoomObjectCategoryForType(t.objectType),
                        n = this._roomEngine.events;
                    if (n) switch (t.type) {
                        case Ig.OPEN_WIDGET:
                            return void n.dispatchEvent(new lg(lg.OPEN_WIDGET, e, s, i, t.object.logic.widget));
                        case Ig.CLOSE_WIDGET:
                            return void n.dispatchEvent(new lg(lg.CLOSE_WIDGET, e, s, i, t.object.logic.widget));
                        case Ig.TROPHY:
                            return void n.dispatchEvent(new lg(lg.REQUEST_TROPHY, e, s, i));
                        case Ig.CREDITFURNI:
                            return void n.dispatchEvent(new lg(lg.REQUEST_CREDITFURNI, e, s, i));
                        case Ig.INERNAL_LINK:
                            return void n.dispatchEvent(new lg(lg.REQUEST_INTERNAL_LINK, e, s, i));
                        case Ig.ROOM_LINK:
                            return void n.dispatchEvent(new lg(lg.REQUEST_ROOM_LINK, e, s, i));
                        case Ig.HIGH_SCORE_DISPLAY:
                            return void n.dispatchEvent(new lg(lg.REQUEST_HIGH_SCORE_DISPLAY, e, s, i));
                        case Ig.HIDE_HIGH_SCORE_DISPLAY:
                            return void n.dispatchEvent(new lg(lg.REQUEST_HIDE_HIGH_SCORE_DISPLAY, e, s, i));
                        case Ig.STICKIE:
                            return void n.dispatchEvent(new lg(lg.REQUEST_STICKIE, e, s, i));
                        case Ig.DIMMER:
                            return void n.dispatchEvent(new lg(lg.REQUEST_DIMMER, e, s, i));
                        case Ig.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG:
                            n.dispatchEvent(new lg(lg.REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG, e, s, i));
                            break;
                        case Ig.MYSTERYBOX_OPEN_DIALOG:
                            n.dispatchEvent(new lg(lg.REQUEST_MYSTERYBOX_OPEN_DIALOG, e, s, i));
                            break;
                        case Ig.MYSTERYTROPHY_OPEN_DIALOG:
                            n.dispatchEvent(new lg(lg.REQUEST_MYSTERYTROPHY_OPEN_DIALOG, e, s, i));
                            break;
                        case Ig.EFFECTBOX_OPEN_DIALOG:
                            n.dispatchEvent(new lg(lg.REQUEST_EFFECTBOX_OPEN_DIALOG, e, s, i));
                            break;
                        case Ig.MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG:
                            n.dispatchEvent(new lg(lg.REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG, e, s, i));
                            break;
                        case Ig.BACKGROUND_COLOR:
                            n.dispatchEvent(new lg(lg.REQUEST_BACKGROUND_COLOR, e, s, i));
                            break;
                        case Ig.FRIEND_FURNITURE_ENGRAVING:
                            n.dispatchEvent(new lg(lg.REQUEST_FRIEND_FURNITURE_ENGRAVING, e, s, i))
                    }
                }
                onRoomObjectFurnitureActionEvent(t, e) {
                    t && this.useObject(e, t.object.id, t.object.type, t.type)
                }
                onRoomObjectFloorHoleEvent(t, e) {
                    if (t) switch (t.type) {
                        case gg.ADD_HOLE:
                            return void this._roomEngine.addRoomInstanceFloorHole(e, t.objectId);
                        case gg.REMOVE_HOLE:
                            return void this._roomEngine.removeRoomInstanceFloorHole(e, t.objectId)
                    }
                }
                onRoomObjectBadgeAssetEvent(t, e) {
                    if (t && this._roomEngine) switch (t.type) {
                        case ug.LOAD_BADGE:
                            {
                                const s = t.objectId,
                                    i = this._roomEngine.getRoomObjectCategoryForType(t.objectType);
                                return void this._roomEngine.loadRoomObjectBadgeImage(e, s, i, t.badgeId, t.groupBadge)
                            }
                    }
                }
                handleMousePointer(t, e) {
                    t && this._roomEngine.updateMousePointer(t.type, t.objectId, t.objectType)
                }
                onHSLColorEnableEvent(t, e) {
                    if (t && this._roomEngine) switch (t.type) {
                        case pg.ROOM_BACKGROUND_COLOR:
                            return void this._roomEngine.events.dispatchEvent(new mg(mg.ROOM_BACKGROUND_COLOR, e, t.enable, t.hue, t.saturation, t.lightness))
                    }
                }
                onRoomObjectTileMouseEvent(t, e) {
                    if (!this._roomEngine || this._roomEngine.isDecorating || !this._roomEngine.roomSessionManager) return;
                    const s = this._roomEngine.roomSessionManager.getSession(t);
                    s && !s.isSpectator && this.sendWalkUpdate(e._Str_16836, e._Str_17676)
                }
                _Str_24048(t, e) {
                    if (!t || !this._roomEngine) return;
                    if (!this._roomEngine.events) return;
                    const s = this.getSelectedRoomObjectData(e);
                    if (!s) return;
                    const i = this._roomEngine.getRoomObject(e, s.id, s.category);
                    if (!i) return;
                    let n = !0;
                    if (s.category === V.FLOOR || s.category === V.UNIT) {
                        const r = this._roomEngine.getFurnitureStackingHeightMap(e);
                        t instanceof fg && this._Str_18155(i, s, Math.trunc(t.tileX + .5), Math.trunc(t.tileY + .5), r) || (this._Str_18155(i, s, s.loc.x, s.loc.y, r), n = !1)
                    } else s.category === V.WALL && (n = !1, t instanceof Sg && this._Str_22090(i, s, t.wallLocation, t.wallWidth, t.wallHeight, t.x, t.y, t.direction) && (n = !0), n || (i.setLocation(s.loc), i.setDirection(s.dir)), this._roomEngine.updateRoomObjectMask(e, s.id, n));
                    n ? (this.setFurnitureAlphaMultiplier(i, .5), this._roomEngine._Str_7972(!1)) : (this.setFurnitureAlphaMultiplier(i, 0), this._roomEngine._Str_7972(!0))
                }
                _Str_22548(t, e) {
                    if (!t || !this._roomEngine) return;
                    if (!this._roomEngine.events) return;
                    const s = this.getSelectedRoomObjectData(e);
                    if (!s) return;
                    const i = this._roomEngine.getRoomObject(e, s.id, s.category);
                    if (i) {
                        let n = !0;
                        const r = this._roomEngine.getFurnitureStackingHeightMap(e);
                        s.category === V.FLOOR ? t instanceof fg && this._Str_18155(i, s, t._Str_16836, t._Str_17676, r) || (this._roomEngine.removeRoomObjectFloor(e, s.id), n = !1) : s.category === V.WALL ? (n = !1, t instanceof Sg && this._Str_22090(i, s, t.wallLocation, t.wallWidth, t.wallHeight, t.x, t.y, t.direction) && (n = !0), n || this._roomEngine.removeRoomObjectWall(e, s.id), this._roomEngine.updateRoomObjectMask(e, s.id, n)) : s.category === V.UNIT && t instanceof fg && !this._Str_25586(i, Math.floor(t.tileX + .5), Math.floor(t.tileY + .5), this._roomEngine.getLegacyWallGeometry(e)) && (this._roomEngine.removeRoomObjectUser(e, s.id), n = !1), this._roomEngine._Str_7972(!n)
                    } else {
                        if (s.category === V.FLOOR && t instanceof fg) this._roomEngine.addFurnitureFloor(e, s.id, s.typeId, s.loc, s.dir, 0, s.stuffData, parseInt(s._Str_4766), -1, 0, 0, "", !1);
                        else if (s.category === V.WALL && t instanceof Sg) this._roomEngine.addFurnitureWall(e, s.id, s.typeId, s.loc, s.dir, 0, s._Str_4766, 0);
                        else if (s.category === V.UNIT && t instanceof fg) {
                            this._roomEngine.addRoomObjectUser(e, s.id, new K, new K(180), 180, s.typeId, s._Str_4766);
                            const t = this._roomEngine.getRoomObject(e, s.id, s.category);
                            t && s.posture && t.model.setValue(j.FIGURE_POSTURE, s.posture)
                        }
                        this._roomEngine._Str_7972(!0)
                    }
                }
                _Str_18155(t, e, s, i, n) {
                    if (!t || !e) return !1;
                    const r = new K;
                    r.assign(t.getDirection()), t.setDirection(e.dir);
                    const o = new K(s, i, 0),
                        a = new K;
                    a.assign(t.getDirection());
                    let c = this._Str_21004(t, o, e.loc, e.dir, n);
                    return c || (a.x = this._Str_17555(t, !0), t.setDirection(a), c = this._Str_21004(t, o, e.loc, e.dir, n)), c ? (t.setLocation(c), a && t.setDirection(a), !0) : (t.setDirection(r), !1)
                }
                _Str_22090(t, e, s, i, n, r, o, a) {
                    if (!t || !e) return !1;
                    const c = new K(a),
                        _ = this._Str_25568(t, s, i, n, r, o, e);
                    return !!_ && (t.setLocation(_), t.setDirection(c), !0)
                }
                _Str_21004(t, e, s, i, n) {
                    if (!t || !t.model || !e) return null;
                    let r = null;
                    const o = t.getDirection();
                    if (!o) return null;
                    if (!s || !i) return null;
                    if (e.x === s.x && e.y === s.y && o.x === i.x) return r = new K, r.assign(s), r;
                    let a = t.model.getValue(j.FURNITURE_SIZE_X),
                        c = t.model.getValue(j.FURNITURE_SIZE_Y);
                    a < 1 && (a = 1), c < 1 && (c = 1);
                    const _ = s.x,
                        h = s.y;
                    let l = a,
                        u = c,
                        d = 0,
                        g = Math.trunc(Math.trunc(o.x + 45) % 360 / 90);
                    if (1 !== g && 3 !== g || (d = a, a = c, c = d), g = Math.trunc(Math.trunc(i.x + 45) % 360 / 90), 1 !== g && 3 !== g || (d = l, l = u, u = d), n && e) {
                        const s = 1 === t.model.getValue(j.FURNITURE_ALWAYS_STACKABLE);
                        return n.validateLocation(e.x, e.y, a, c, _, h, l, u, s) ? new K(e.x, e.y, n.getTileHeight(e.x, e.y)) : null
                    }
                    return null
                }
                _Str_25568(t, e, s, i, n, r, o) {
                    if (null == t || null == t.model || null == e || null == s || null == i || null == o) return null;
                    const a = t.model.getValue(j.FURNITURE_SIZE_X),
                        c = t.model.getValue(j.FURNITURE_SIZE_Z),
                        _ = t.model.getValue(j.FURNITURE_CENTER_Z);
                    if ((n < a / 2 || n > s.length - a / 2 || r < _ || r > i.length - (c - _)) && (n < a / 2 && n <= s.length - a / 2 ? n = a / 2 : n >= a / 2 && n > s.length - a / 2 && (n = s.length - a / 2), r < _ && r <= i.length - (c - _) ? r = _ : r >= _ && r > i.length - (c - _) && (r = i.length - (c - _))), n < a / 2 || n > s.length - a / 2 || r < _ || r > i.length - (c - _)) return null;
                    let h = K.sum(K.product(s, n / s.length), K.product(i, r / i.length));
                    return h = K.sum(e, h), h
                }
                updateRoomObjectState(t, e, s, i, n) {
                    const r = this._roomEngine.getRoomObjectCategoryForType(s);
                    this.sendStateUpdate(t, e, r, i, n)
                }
                useObject(t, e, s, i) {
                    if (this._roomEngine && this._roomEngine.connection) switch (i) {
                        case Cl.DICE_ACTIVATE:
                            return void this._roomEngine.connection.send(new rh(e));
                        case Cl.DICE_OFF:
                            return void this._roomEngine.connection.send(new oh(e));
                        case Cl.USE_HABBOWHEEL:
                            return void this._roomEngine.connection.send(new nh(e));
                        case Cl.STICKIE:
                            return void this._roomEngine.connection.send(new j_(e));
                        case Cl.ENTER_ONEWAYDOOR:
                            return void this._roomEngine.connection.send(new _h(e))
                    }
                }
                sendStateUpdate(t, e, s, i, n) {
                    return !this._roomEngine || !this._roomEngine.connection || (s === V.FLOOR ? this._roomEngine.connection.send(n ? new hh(e, i) : new ch(e, i)) : s === V.WALL && this._roomEngine.connection.send(new uh(e, i)), !0)
                }
                sendWalkUpdate(t, e) {
                    this._roomEngine && this._roomEngine.connection && this._roomEngine.connection.send(new Uh(t, e))
                }
                _Str_25124(t, e, s) {
                    if (t !== V.FLOOR) return null;
                    const i = this._roomEngine.getRoomObject(e, s.objectId, V.FLOOR);
                    if (!i) return null;
                    const n = this._Str_21925(i, s);
                    if (!n) return null;
                    if (!this._roomEngine.getFurnitureStackingHeightMap(e)) return null;
                    const r = n.z;
                    return new Tg(new K(n.x, n.y, i.getLocation().z), r, !0, s.eventId)
                }
                _Str_23423(t, e) {
                    const s = this._roomEngine.getRoomObject(t, e.objectId, V.FLOOR),
                        i = this._Str_21925(s, e);
                    return !!i && (this.sendWalkUpdate(i.x, i.y), !0)
                }
                _Str_21925(t, e) {
                    if (!t || !e) return null;
                    const s = this._roomEngine.sessionDataManager.getFloorItemDataByName(t.type);
                    if (!s) return null;
                    if (!s.canStandOn && !s.canSitOn && !s.canLayOn) return null;
                    const i = t.model;
                    if (!i) return null;
                    const n = t.getLocation(),
                        r = t.getDirection();
                    let o = i.getValue(j.FURNITURE_SIZE_X),
                        a = i.getValue(j.FURNITURE_SIZE_Y);
                    const c = i.getValue(j.FURNITURE_SIZE_Z);
                    90 !== r.x && 270 !== r.x || ([o, a] = [a, o]), o < 1 && (o = 1), a < 1 && (a = 1);
                    const _ = this._roomEngine.getActiveRoomInstanceRenderingCanvas();
                    if (!_) return null;
                    const h = _.geometry.scale,
                        l = (h / 2 + e.spriteOffsetX + e.localX) / (h / 4),
                        u = (e.spriteOffsetY + e.localY + (c - (s.canSitOn ? .5 : 0)) * h / 2) / (h / 4),
                        d = (l - 2 * u) / 4,
                        g = Math.floor(n.x + (l + 2 * u) / 4),
                        m = Math.floor(n.y - d + 1);
                    let p = !1;
                    return (g < n.x || g >= n.x + o || m < n.y || m >= n.y + a) && (p = !0), p ? null : new K(g, m, s.canSitOn ? c - .5 : c)
                }
                _Str_23824(t, e) {
                    if (this._whereYouClickIsWhereYouGo) return new Tg(new K(t._Str_16836, t._Str_17676, t._Str_21459), 0, !0, t.eventId);
                    const s = this._roomEngine.getRoomObjectCursor(e);
                    if (s && s.visualization) {
                        const s = t._Str_16836,
                            i = t._Str_17676,
                            n = t._Str_21459;
                        if (this._roomEngine.getRoomInstance(e)) {
                            const r = this._roomEngine.getRoomTileObjectMap(e);
                            if (r) {
                                const o = r._Str_19056(s, i),
                                    a = this._roomEngine.getFurnitureStackingHeightMap(e);
                                if (a) {
                                    if (o && o.model && o.model.getValue(j.FURNITURE_IS_VARIABLE_HEIGHT) > 0) {
                                        const r = a.getTileHeight(s, i),
                                            o = this._roomEngine.getLegacyWallGeometry(e).getHeight(s, i);
                                        return new Tg(new K(s, i, n), r - o, !0, t.eventId)
                                    }
                                    return new Tg(new K(s, i, n), 0, !0, t.eventId)
                                }
                            }
                        }
                    }
                    return null
                }
                _Str_19271(t, e, s) {
                    const i = this.getSelectedRoomObjectData(t);
                    if (!i) return;
                    let n = null,
                        r = i.id;
                    const o = i.category;
                    let a = 0,
                        c = 0,
                        _ = 0,
                        h = 0,
                        l = "";
                    if (this._roomEngine && this._roomEngine.connection && (n = this._roomEngine.getRoomObject(t, r, o), n)) {
                        const e = n.getLocation();
                        if (h = n.getDirection().x, o === V.FLOOR || o === V.UNIT) a = e.x, c = e.y, _ = e.z;
                        else if (o === V.WALL) {
                            a = e.x, c = e.y, _ = e.z;
                            const s = this._roomEngine.getLegacyWallGeometry(t);
                            s && (l = s._Str_21860(e, h))
                        }
                        h = (h / 45 % 8 + 8) % 8, r < 0 && o === V.UNIT && (r *= -1), this._objectPlacementSource !== ag.CATALOG && (o === V.UNIT ? i.typeId === ua.PET || i.typeId === ua.RENTABLE_BOT && this._roomEngine.connection.send(new H_(r, Math.floor(a), Math.floor(c))) : void 0 !== n.model.getValue(j.FURNITURE_IS_STICKIE) ? this._roomEngine.connection.send(new ih(r, l)) : this._roomEngine.connection.send(new eh(r, o, l, a, c, h)))
                    }
                    this._roomEngine.setPlacedRoomObjectData(t, new Ag(i.id, i.category, null, i.dir, null)), this._Str_13199(t), this._roomEngine && this._roomEngine.events && this._roomEngine.events.dispatchEvent(new _g(Al.PLACED, t, r, o, l, a, c, _, h, n && n.id === i.id, e, s, i._Str_4766))
                }
                processRoomObjectWallOperation(t, e, s, i, n) {
                    return !!this._roomEngine && !!this._roomEngine.getRoomObject(t, e, s)
                }
                processRoomObjectFloorOperation(t, e, s, i) {
                    return !!this._roomEngine
                }
                processRoomObjectOperation(t, e, s, i) {
                    if (!this._roomEngine) return !1;
                    const n = this._roomEngine.getRoomObject(t, e, s);
                    if (!n) return !1;
                    let r = !0;
                    switch (i) {
                        case yg.OBJECT_ROTATE_POSITIVE:
                        case yg.OBJECT_ROTATE_NEGATIVE:
                            if (this._roomEngine.connection) {
                                let s = 0;
                                s = this._Str_17555(n, i != yg.OBJECT_ROTATE_NEGATIVE);
                                const r = n.getLocation().x,
                                    o = n.getLocation().y;
                                if (this.isValidLocation(n, new K(s), this._roomEngine.getFurnitureStackingHeightMap(t)))
                                    if (s = Math.trunc(s / 45), n.type === Z.MONSTER_PLANT) {
                                        const s = this._roomEngine.roomSessionManager.getSession(t);
                                        s && s.userDataManager.getUserDataByIndex(e)
                                    } else this._roomEngine.connection.send(new Q_(e, r, o, s))
                            }
                            break;
                        case yg.OBJECT_EJECT:
                        case yg.OBJECT_PICKUP:
                            this._roomEngine.connection && this._roomEngine.connection.send(new th(s, e));
                            break;
                        case yg.OBJECT_PICKUP_PET:
                            if (this._roomEngine.connection) {
                                const s = this._roomEngine.roomSessionManager.getSession(t);
                                if (s) {
                                    const t = s.userDataManager.getUserDataByIndex(e);
                                    s.pickupPet(t.webID)
                                }
                            }
                            break;
                        case yg.OBJECT_PICKUP_BOT:
                            if (this._roomEngine.connection) {
                                const s = this._roomEngine.roomSessionManager.getSession(t);
                                if (s) {
                                    const t = s.userDataManager.getUserDataByIndex(e);
                                    s.pickupBot(t.webID)
                                }
                            }
                            break;
                        case yg.OBJECT_MOVE:
                            r = !1, this.setFurnitureAlphaMultiplier(n, .5), this.setSelectedRoomObjectData(t, n.id, s, n.getLocation(), n.getDirection(), i), this._roomEngine._Str_16645(n.id, s, !0), this._roomEngine._Str_7972(!1);
                            break;
                        case yg.OBJECT_MOVE_TO:
                            {
                                const i = this.getSelectedRoomObjectData(t);
                                if (this._Str_16022(t, i.id, i.category, i.loc, i.dir, yg.OBJECT_MOVE_TO, i.typeId, i._Str_4766, i.stuffData, i.state, i._Str_15896, i.posture), this.setFurnitureAlphaMultiplier(n, 1), this._roomEngine._Str_17948(), this._roomEngine.connection)
                                    if (s === V.FLOOR) {
                                        const t = n.getDirection().x % 360,
                                            s = n.getLocation();
                                        this._roomEngine.connection.send(new Q_(e, s.x, s.y, t / 45))
                                    } else if (s === V.WALL) {
                                    const s = n.getDirection().x % 360,
                                        i = this._roomEngine.getLegacyWallGeometry(t);
                                    if (i) {
                                        const t = i._Str_21860(n.getLocation(), s);
                                        t && this._roomEngine.connection.send(new mh(e, t))
                                    }
                                }
                                break
                            }
                    }
                    return r && this._Str_13199(t), !0
                }
                _Str_17555(t, e) {
                    if (!t || !t.model) return 0;
                    let s = 0,
                        i = 0,
                        n = [];
                    n = t.model.getValue(t.type === Z.MONSTER_PLANT ? j.PET_ALLOWED_DIRECTIONS : j.FURNITURE_ALLOWED_DIRECTIONS);
                    let r = t.getDirection().x;
                    if (n && n.length) {
                        if (s = n.indexOf(r), s < 0) {
                            for (s = 0, i = 0; i < n.length && !(r <= n[i]);) s++, i++;
                            s %= n.length
                        }
                        s = e ? (s + 1) % n.length : (s - 1 + n.length) % n.length, r = n[s]
                    }
                    return r
                }
                isValidLocation(t, e, s) {
                    if (!t || !t.model || !e) return !1;
                    const i = t.getDirection(),
                        n = t.getLocation();
                    if (!i || !n) return !1;
                    if (i.x % 180 == e.x % 180) return !0;
                    let r = t.model.getValue(j.FURNITURE_SIZE_X),
                        o = t.model.getValue(j.FURNITURE_SIZE_Y);
                    r < 1 && (r = 1), o < 1 && (o = 1);
                    let a = r,
                        c = o,
                        _ = Math.trunc(Math.trunc(e.x + 45) % 360 / 90);
                    if (1 !== _ && 3 !== _ || ([r, o] = [o, r]), _ = Math.trunc(Math.trunc(i.x + 45) % 360 / 90), 1 !== _ && 3 !== _ || ([a, c] = [c, a]), s && n) {
                        const e = 1 === t.model.getValue(j.FURNITURE_ALWAYS_STACKABLE);
                        if (s.validateLocation(n.x, n.y, r, o, n.x, n.y, a, c, e, n.z)) return !0
                    }
                    return !1
                }
                _Str_19253(t, e, s) {
                    const i = this.getSelectedRoomObjectData(t);
                    i && this._roomEngine.getRoomObject(t, e, s) && this._roomEngine && this._roomEngine.events && this._roomEngine.events.dispatchEvent(new hg(Al.PLACED_ON_USER, t, e, s, i.id, i.category))
                }
                _Str_17481(t, e, s) {
                    if (!this._roomEngine) return;
                    const i = this._roomEngine.events;
                    if (i) switch (s) {
                        case V.UNIT:
                        case V.FLOOR:
                        case V.WALL:
                            if (s === V.UNIT) this._Str_16209(t), this._Str_12227(t, e, !0);
                            else if (this._Str_12227(t, 0, !1), e !== this._selectedObjectId) {
                                this._Str_16209(t);
                                const i = this._roomEngine.getRoomObject(t, e, s);
                                i && i.logic && (i.logic.processUpdateMessage(new vg(!0)), this._selectedObjectId = e, this._selectedObjectCategory = s)
                            }
                            return void i.dispatchEvent(new Al(Al.SELECTED, t, e, s))
                    }
                }
                _Str_16209(t) {
                    if (-1 === this._selectedObjectId) return;
                    const e = this._roomEngine.getRoomObject(t, this._selectedObjectId, this._selectedObjectCategory);
                    e && e.logic && (e.logic.processUpdateMessage(new vg(!1)), this._selectedObjectId = -1, this._selectedObjectCategory = V.MINIMUM)
                }
                _Str_12227(t, e, s) {
                    if (!this._roomEngine) return;
                    const i = V.UNIT,
                        n = this._roomEngine.getRoomObject(t, this._selectedAvatarId, i);
                    n && n.logic && (n.logic.processUpdateMessage(new Rg(!1)), this._selectedAvatarId = -1);
                    let r = !1;
                    if (s) {
                        const s = this._roomEngine.getRoomObject(t, e, i);
                        if (s && s.logic) {
                            s.logic.processUpdateMessage(new Rg(!0)), r = !0, this._selectedAvatarId = e;
                            const t = s.getLocation();
                            t && this._roomEngine.connection.send(new Ah(~~t.x, ~~t.y))
                        }
                    }
                    const o = this._roomEngine.getRoomObjectSelectionArrow(t);
                    o && o.logic && o.logic.processUpdateMessage(new Og(r ? Og.ENABLED : Og.DISABLED))
                }
                _Str_13199(t) {
                    if (!this._roomEngine) return;
                    this._roomEngine._Str_17948();
                    const e = this.getSelectedRoomObjectData(t);
                    if (e) {
                        if (e.operation === yg.OBJECT_MOVE || e.operation === yg.OBJECT_MOVE_TO) {
                            const s = this._roomEngine.getRoomObject(t, e.id, e.category);
                            s && e.operation !== yg.OBJECT_MOVE_TO && (s.setLocation(e.loc), s.setDirection(e.dir)), this.setFurnitureAlphaMultiplier(s, 1), e.category === V.WALL && this._roomEngine.updateRoomObjectMask(t, e.id, !0), this._Str_16022(t, e.id, e.category, e.loc, e.dir, yg.OBJECT_MOVE, e.typeId, e._Str_4766, e.stuffData, e.state, e._Str_15896, e.posture)
                        } else if (e.operation === yg.OBJECT_PLACE) {
                            const s = e.id;
                            switch (e.category) {
                                case V.FLOOR:
                                    this._roomEngine.removeRoomObjectFloor(t, s);
                                    break;
                                case V.WALL:
                                    this._roomEngine.removeRoomObjectWall(t, s);
                                    break;
                                case V.UNIT:
                                    this._roomEngine.removeRoomObjectUser(t, s)
                            }
                        }
                        this._roomEngine.setSelectedRoomObjectData(t, null)
                    }
                }
                getSelectedRoomObjectData(t) {
                    return this._roomEngine ? this._roomEngine.getSelectedRoomObjectData(t) : null
                }
                setFurnitureAlphaMultiplier(t, e) {
                    t && t.model && t.model.setValue(j.FURNITURE_ALPHA_MULTIPLIER, e)
                }
                _Str_25211(t) {
                    return this._roomEngine.isDecorating && !(t.ctrlKey || t.shiftKey)
                }
                cancelRoomObjectPlacement(t) {
                    return this._Str_13199(t), !0
                }
                setSelectedRoomObjectData(t, e, s, i, n, r, o = 0, a = null, c = null, _ = -1, h = -1, l = null) {
                    if (this._Str_13199(t), !this._roomEngine) return;
                    const u = new Ag(e, s, r, i, n, o, a, c, _, h, l);
                    this._roomEngine.setSelectedRoomObjectData(t, u)
                }
                _Str_16022(t, e, s, i, n, r, o = 0, a = null, c = null, _ = -1, h = -1, l = null) {
                    if (!this._roomEngine) return null;
                    const u = new Ag(e, s, r, i, n, o, a, c, _, h, l);
                    this._roomEngine.setSelectedRoomObjectData(t, u)
                }
                _Str_25586(t, e, s, i) {
                    return !!i._Str_10375(e, s) && (t.setLocation(new K(e, s, i.getHeight(e, s))), !0)
                }
                modifyWallItemData(t, e, s, i) {
                    return !(!this._roomEngine || !this._roomEngine.connection || (this._roomEngine.connection.send(new B_(e, s, i)), 0))
                }
                deleteWallItem(t, e) {
                    return !(!this._roomEngine || !this._roomEngine.connection || (this._roomEngine.connection.send(new z_(e)), 0))
                }
                get engine() {
                    return this._roomEngine
                }
                get selectedAvatarId() {
                    return this._selectedAvatarId
                }
            }
            class Mg extends d {
                constructor() {
                    super(), this._object = null, this._events = null, this._time = 0
                }
                initialize(t) {}
                onDispose() {
                    this._object = null
                }
                update(t) {
                    this._time = t
                }
                processUpdateMessage(t) {
                    t && this._object && (this._object.setLocation(t.location), this._object.setDirection(t.direction))
                }
                getEventTypes() {
                    return []
                }
                mergeTypes(t, e) {
                    const s = t.concat();
                    for (const i of e) !i || s.indexOf(i) >= 0 || s.push(i);
                    return s
                }
                mouseEvent(t, e) {}
                useObject() {}
                setObject(t) {
                    if (this._object !== t) {
                        if (this._object && this._object.setLogic(null), !t) return this.dispose(), void(this._object = null);
                        this._object = t, this._object.setLogic(this)
                    }
                }
                tearDown() {}
                get object() {
                    return this._object
                }
                get eventDispatcher() {
                    return this._events
                }
                set eventDispatcher(t) {
                    this._events = t
                }
                get widget() {
                    return null
                }
                get contextMenu() {
                    return null
                }
                get time() {
                    return this._time
                }
            }
            let Ug = (() => {
                    class t extends Mg {
                        constructor() {
                            super(), this._liftAmount = 0, this._location = new K, this._locationDelta = new K, this._lastUpdateTime = 0, this._changeTime = 0, this._updateInterval = 500
                        }
                        dispose() {
                            this._liftAmount = 0, super.dispose()
                        }
                        update(e) {
                            super.update(e);
                            const s = this.getLocationOffset(),
                                i = this.object && this.object.model;
                            if (i && (s ? this._liftAmount !== s.z && (this._liftAmount = s.z, i.setValue(j.FURNITURE_LIFT_AMOUNT, this._liftAmount)) : 0 !== this._liftAmount && (this._liftAmount = 0, i.setValue(j.FURNITURE_LIFT_AMOUNT, this._liftAmount))), this._locationDelta.length > 0 || s) {
                                const e = t.TEMP_VECTOR;
                                let i = this.time - this._changeTime;
                                i === this._updateInterval >> 1 && i++, i > this._updateInterval && (i = this._updateInterval), this._locationDelta.length > 0 ? (e.assign(this._locationDelta), e.multiply(i / this._updateInterval), e.add(this._location)) : e.assign(this._location), s && e.add(s), this.object.setLocation(e), i === this._updateInterval && (this._locationDelta.x = 0, this._locationDelta.y = 0, this._locationDelta.z = 0)
                            }
                            this._lastUpdateTime = this.time
                        }
                        setObject(t) {
                            super.setObject(t), t && this._location.assign(t.getLocation())
                        }
                        processUpdateMessage(t) {
                            if (t) return super.processUpdateMessage(t), t.location && this._location.assign(t.location), t instanceof Ql ? this.processMoveMessage(t) : void 0
                        }
                        processMoveMessage(t) {
                            t && this.object && t.location && (this._changeTime = this._lastUpdateTime, this._locationDelta.assign(t.targetLocation), this._locationDelta.subtract(this._location))
                        }
                        getLocationOffset() {
                            return null
                        }
                        get lastUpdateTime() {
                            return this._lastUpdateTime
                        }
                    }
                    return t.TEMP_VECTOR = new K, t
                })(),
                Dg = (() => {
                    class t extends Ug {
                        constructor() {
                            super(), this._selected = !1, this._reportedLocation = null, this._effectChangeTimeStamp = 0, this._newEffect = 0, this._blinkingStartTimestamp = cp.instance.time + this.randomBlinkStartTimestamp(), this._blinkingEndTimestamp = 0, this._talkingEndTimestamp = 0, this._talkingPauseStartTimestamp = 0, this._talkingPauseEndTimestamp = 0, this._carryObjectStartTimestamp = 0, this._carryObjectEndTimestamp = 0, this._allowUseCarryObject = !1, this._animationEndTimestamp = 0, this._signEndTimestamp = 0, this._gestureEndTimestamp = 0, this._numberValueEndTimestamp = 0
                        }
                        getEventTypes() {
                            const t = [tl.CLICK, bg.POSITION_CHANGED, tl.MOUSE_ENTER, tl.MOUSE_LEAVE, Cl.MOUSE_BUTTON, Cl.MOUSE_ARROW];
                            return this.mergeTypes(super.getEventTypes(), t)
                        }
                        dispose() {
                            this._selected && this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new bg(bg.OBJECT_REMOVED, this.object)), super.dispose(), this._reportedLocation = null
                        }
                        update(t) {
                            if (super.update(t), this._selected && this.object && this.eventDispatcher) {
                                const t = this.object.getLocation();
                                this._reportedLocation && this._reportedLocation.x === t.x && this._reportedLocation.y === t.y && this._reportedLocation.z === t.z || (this._reportedLocation || (this._reportedLocation = new K), this._reportedLocation.assign(t), this.eventDispatcher.dispatchEvent(new bg(bg.POSITION_CHANGED, this.object)))
                            }
                            const e = this.object && this.object.model;
                            e && this.updateModel(this.time, e)
                        }
                        updateModel(t, e) {
                            this._talkingEndTimestamp > 0 && (t > this._talkingEndTimestamp ? (e.setValue(j.FIGURE_TALK, 0), this._talkingEndTimestamp = 0, this._talkingPauseStartTimestamp = 0, this._talkingPauseEndTimestamp = 0) : this._talkingPauseEndTimestamp || this._talkingPauseStartTimestamp ? this._talkingPauseStartTimestamp > 0 && t > this._talkingPauseStartTimestamp ? (e.setValue(j.FIGURE_TALK, 0), this._talkingPauseStartTimestamp = 0) : this._talkingPauseEndTimestamp > 0 && t > this._talkingPauseEndTimestamp && (e.setValue(j.FIGURE_TALK, 1), this._talkingPauseEndTimestamp = 0) : (this._talkingPauseStartTimestamp = t + this.randomTalkingPauseStartTimestamp(), this._talkingPauseEndTimestamp = this._talkingPauseStartTimestamp + this.randomTalkingPauseEndTimestamp())), this._animationEndTimestamp > 0 && t > this._animationEndTimestamp && (e.setValue(j.FIGURE_EXPRESSION, 0), this._animationEndTimestamp = 0), this._gestureEndTimestamp > 0 && t > this._gestureEndTimestamp && (e.setValue(j.FIGURE_GESTURE, 0), this._gestureEndTimestamp = 0), this._signEndTimestamp > 0 && t > this._signEndTimestamp && (e.setValue(j.FIGURE_SIGN, -1), this._signEndTimestamp = 0), this._carryObjectEndTimestamp > 0 && t > this._carryObjectEndTimestamp && (e.setValue(j.FIGURE_CARRY_OBJECT, 0), e.setValue(j.FIGURE_USE_OBJECT, 0), this._carryObjectStartTimestamp = 0, this._carryObjectEndTimestamp = 0, this._allowUseCarryObject = !1), this._allowUseCarryObject && t - this._carryObjectStartTimestamp > 5e3 && e.setValue(j.FIGURE_USE_OBJECT, (t - this._carryObjectStartTimestamp) % 1e4 < 1e3 ? 1 : 0), this._blinkingStartTimestamp > -1 && t > this._blinkingStartTimestamp && (e.setValue(j.FIGURE_BLINK, 1), this._blinkingStartTimestamp = t + this.randomBlinkStartTimestamp(), this._blinkingEndTimestamp = t + this.randomBlinkEndTimestamp()), this._blinkingEndTimestamp > 0 && t > this._blinkingEndTimestamp && (e.setValue(j.FIGURE_BLINK, 0), this._blinkingEndTimestamp = 0), this._effectChangeTimeStamp > 0 && t > this._effectChangeTimeStamp && (e.setValue(j.FIGURE_EFFECT, this._newEffect), this._effectChangeTimeStamp = 0), this._numberValueEndTimestamp > 0 && t > this._numberValueEndTimestamp && (e.setValue(j.FIGURE_NUMBER_VALUE, 0), this._numberValueEndTimestamp = 0)
                        }
                        processUpdateMessage(e) {
                            if (!e || !this.object) return;
                            super.processUpdateMessage(e);
                            const s = this.object && this.object.model;
                            if (s) {
                                if (e instanceof Kl) return s.setValue(j.FIGURE_POSTURE, e.postureType), void s.setValue(j.FIGURE_POSTURE_PARAMETER, e.parameter);
                                if (e instanceof Ll) return s.setValue(j.FIGURE_TALK, 1), void(this._talkingEndTimestamp = this.time + 1e3 * e.numberOfWords);
                                if (e instanceof Jl) s.setValue(j.FIGURE_IS_TYPING, e.isTyping ? 1 : 0);
                                else {
                                    if (e instanceof $l) return s.setValue(j.HEAD_DIRECTION, e.headDirection), s.setValue(j.FIGURE_CAN_STAND_UP, e.canStandUp), void s.setValue(j.FIGURE_VERTICAL_OFFSET, e.baseY);
                                    if (e instanceof Vl) return s.setValue(j.FIGURE_GESTURE, e.gesture), void(this._gestureEndTimestamp = this.time + 3e3);
                                    if (e instanceof Gl) return s.setValue(j.FIGURE_EXPRESSION, e.expressionType), this._animationEndTimestamp = St.getExpressionTimeout(s.getValue(j.FIGURE_EXPRESSION)), void(this._animationEndTimestamp > -1 && (this._animationEndTimestamp += this.time));
                                    if (e instanceof xl) s.setValue(j.FIGURE_DANCE, e.danceStyle);
                                    else {
                                        if (e instanceof ql) return s.setValue(j.FIGURE_SLEEP, e.isSleeping ? 1 : 0), void(this._blinkingStartTimestamp = e.isSleeping ? -1 : this.time + this.randomBlinkStartTimestamp());
                                        if (e instanceof Wl) return s.setValue(j.FIGURE_NUMBER_VALUE, e.value), void(this._numberValueEndTimestamp = this.time + 3e3);
                                        if (e instanceof Pl) this.updateAvatarEffect(e.effect, e.delayMilliseconds, s);
                                        else {
                                            if (e instanceof wl) return s.setValue(j.FIGURE_CARRY_OBJECT, e.itemType), s.setValue(j.FIGURE_USE_OBJECT, 0), void(0 === e.itemType ? (this._carryObjectStartTimestamp = 0, this._carryObjectEndTimestamp = 0, this._allowUseCarryObject = !1) : (this._carryObjectStartTimestamp = this.time, e.itemType < t.MAX_HAND_ID ? (this._carryObjectEndTimestamp = 0, this._allowUseCarryObject = e.itemType <= t.MAX_HAND_USE_ID) : (this._carryObjectEndTimestamp = this._carryObjectStartTimestamp + 1500, this._allowUseCarryObject = !1)));
                                            if (e instanceof tu) s.setValue(j.FIGURE_USE_OBJECT, e.itemType);
                                            else {
                                                if (e instanceof Xl) return s.setValue(j.FIGURE_SIGN, e.signType), void(this._signEndTimestamp = this.time + 5e3);
                                                if (!(e instanceof kl)) return e instanceof Yl ? (s.setValue(j.FIGURE, e.figure), void s.setValue(j.GENDER, e.gender)) : e instanceof Rg ? (this._selected = e.selected, void(this._reportedLocation = null)) : void(e instanceof Bl && s.setValue(j.OWN_USER, 1));
                                                s.setValue(j.FIGURE_FLAT_CONTROL, e.level)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        updateAvatarEffect(e, s, i) {
                            if (e === t._Str_13364) this._effectChangeTimeStamp = cp.instance.time + t._Str_8860, this._newEffect = t._Str_15351;
                            else if (e === t._Str_13733) this._effectChangeTimeStamp = cp.instance.time + t._Str_8860, this._newEffect = t._Str_13094;
                            else if (i.getValue(j.FIGURE_EFFECT) === t._Str_15351) this._effectChangeTimeStamp = cp.instance.time + t._Str_8860, this._newEffect = e, e = t._Str_13364;
                            else if (i.getValue(j.FIGURE_EFFECT) === t._Str_13094) this._effectChangeTimeStamp = cp.instance.time + t._Str_8860, this._newEffect = e, e = t._Str_13733;
                            else {
                                if (0 !== s) return this._effectChangeTimeStamp = cp.instance.time + s, void(this._newEffect = e);
                                this._effectChangeTimeStamp = 0
                            }
                            i.setValue(j.FIGURE_EFFECT, e)
                        }
                        mouseEvent(t, e) {
                            let s = null;
                            switch (t.type) {
                                case sl.MOUSE_CLICK:
                                    s = tl.CLICK;
                                    break;
                                case sl.ROLL_OVER:
                                    s = tl.MOUSE_ENTER, this.object.model && this.object.model.setValue(j.FIGURE_HIGHLIGHT, 1), this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Cl(Cl.MOUSE_BUTTON, this.object));
                                    break;
                                case sl.ROLL_OUT:
                                    s = tl.MOUSE_LEAVE, this.object.model && this.object.model.setValue(j.FIGURE_HIGHLIGHT, 0), this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Cl(Cl.MOUSE_ARROW, this.object))
                            }
                            s && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new tl(s, this.object, t._Str_3463, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown))
                        }
                        randomTalkingPauseStartTimestamp() {
                            return 100 + 200 * Math.random()
                        }
                        randomTalkingPauseEndTimestamp() {
                            return 75 + 75 * Math.random()
                        }
                        randomBlinkStartTimestamp() {
                            return 4500 + 1e3 * Math.random()
                        }
                        randomBlinkEndTimestamp() {
                            return 50 + 200 * Math.random()
                        }
                    }
                    return t.MAX_HAND_ID = 999999999, t.MAX_HAND_USE_ID = 999, t._Str_13364 = 28, t._Str_8860 = 500, t._Str_15351 = 29, t._Str_13733 = 184, t._Str_13094 = 185, t
                })(),
                Ng = (() => {
                    class t extends Ug {
                        constructor() {
                            super(), this._sizeX = 0, this._sizeY = 0, this._sizeZ = 0, this._centerX = 0, this._centerY = 0, this._centerZ = 0, this._directions = [], this._mouseOver = !1, this._locationOffset = new K, this._bouncingStep = 0, this._storedRotateMessage = null, this._directionInitialized = !1
                        }
                        getEventTypes() {
                            const t = [Eg.STATE_CHANGE, tl.CLICK, tl.MOUSE_DOWN];
                            return this.widget && t.push(Ig.OPEN_WIDGET, Ig.CLOSE_WIDGET), this.contextMenu && t.push(Ig.OPEN_FURNI_CONTEXT_MENU, Ig.CLOSE_FURNI_CONTEXT_MENU), this.mergeTypes(super.getEventTypes(), t)
                        }
                        initialize(t) {
                            if (!t) return;
                            const e = this.object && this.object.model;
                            if (!e) return;
                            const s = t.dimensions;
                            if (!s) return;
                            this._sizeX = s.x, this._sizeY = s.y, this._sizeZ = s.z, this._centerX = this._sizeX / 2, this._centerY = this._sizeY / 2, this._centerZ = this._sizeZ / 2;
                            const i = t.directions;
                            if (i && i.length) {
                                for (const t of i) this._directions.push(t);
                                this._directions.sort((t, e) => t - e)
                            }
                            e.setValue(j.FURNITURE_SIZE_X, this._sizeX), e.setValue(j.FURNITURE_SIZE_Y, this._sizeY), e.setValue(j.FURNITURE_SIZE_Z, this._sizeZ), e.setValue(j.FURNITURE_CENTER_X, this._centerX), e.setValue(j.FURNITURE_CENTER_Y, this._centerY), e.setValue(j.FURNITURE_CENTER_Z, this._centerZ), e.setValue(j.FURNITURE_ALLOWED_DIRECTIONS, this._directions), e.setValue(j.FURNITURE_ALPHA_MULTIPLIER, 1)
                        }
                        dispose() {
                            super.dispose(), this._storedRotateMessage = null, this._directions = null
                        }
                        setObject(t) {
                            super.setObject(t), t && t.getLocation().length && (this._directionInitialized = !0)
                        }
                        getAdClickUrl(t) {
                            return t.getValue(j.FURNITURE_AD_URL)
                        }
                        update(e) {
                            super.update(e), this._bouncingStep > 0 && (this._bouncingStep++, this._bouncingStep > t.BOUNCING_STEPS && (this._bouncingStep = 0))
                        }
                        processUpdateMessage(t) {
                            if (t instanceof eu) this.processDataUpdateMessage(t);
                            else if (t instanceof iu) this.processObjectHeightUpdateMessage(t);
                            else if (t instanceof nu) this.processItemDataUpdateMessage(t);
                            else {
                                if (this._mouseOver = !1, t.location && t.direction) {
                                    if (!(t instanceof Ql)) {
                                        const e = this.object.getDirection(),
                                            s = this.object.getLocation();
                                        e.x !== t.direction.x && this._directionInitialized && s.x === t.location.x && s.y === t.location.y && s.z === t.location.z && (this._bouncingStep = 1, this._storedRotateMessage = new el(t.location, t.direction), t = null)
                                    }
                                    this._directionInitialized = !0
                                }
                                t instanceof vg && this.contextMenu && this.eventDispatcher && this.object && this.eventDispatcher.dispatchEvent(new Ig(t.selected ? Ig.OPEN_FURNI_CONTEXT_MENU : Ig.CLOSE_FURNI_CONTEXT_MENU, this.object)), super.processUpdateMessage(t)
                            }
                        }
                        processDataUpdateMessage(t) {
                            t && (this.object.setState(t.state, 0), t.data && t.data.writeRoomObjectModel(this.object.model), this.object.model.setValue(j.FURNITURE_EXTRAS, t.extra), this.object.model.setValue(j.FURNITURE_STATE_UPDATE_TIME, this.lastUpdateTime))
                        }
                        processObjectHeightUpdateMessage(t) {
                            t && this.object.model.setValue(j.FURNITURE_SIZE_Z, t.height)
                        }
                        processItemDataUpdateMessage(t) {
                            t && this.object.model.setValue(j.FURNITURE_ITEMDATA, t.data)
                        }
                        mouseEvent(t, e) {
                            switch (this.getAdClickUrl(this.object.model), t.type) {
                                case sl.MOUSE_MOVE:
                                    if (this.eventDispatcher) {
                                        const e = new tl(tl.MOUSE_MOVE, this.object, t._Str_3463, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown);
                                        e.localX = t.localX, e.localY = t.localY, e.spriteOffsetX = t.spriteOffsetX, e.spriteOffsetY = t.spriteOffsetY, this.eventDispatcher.dispatchEvent(e)
                                    }
                                    return;
                                case sl.ROLL_OVER:
                                    if (!this._mouseOver) {
                                        if (this.eventDispatcher) {
                                            const e = new tl(tl.MOUSE_ENTER, this.object, t._Str_3463, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown);
                                            e.localX = t.localX, e.localY = t.localY, e.spriteOffsetX = t.spriteOffsetX, e.spriteOffsetY = t.spriteOffsetY, this.eventDispatcher.dispatchEvent(e)
                                        }
                                        this._mouseOver = !0
                                    }
                                    return;
                                case sl.ROLL_OUT:
                                    if (this._mouseOver) {
                                        if (this.eventDispatcher) {
                                            const e = new tl(tl.MOUSE_LEAVE, this.object, t._Str_3463, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown);
                                            e.localX = t.localX, e.localY = t.localY, e.spriteOffsetX = t.spriteOffsetX, e.spriteOffsetY = t.spriteOffsetY, this.eventDispatcher.dispatchEvent(e)
                                        }
                                        this._mouseOver = !1
                                    }
                                    return;
                                case sl.DOUBLE_CLICK:
                                    return void this.useObject();
                                case sl.MOUSE_CLICK:
                                    if (this.eventDispatcher) {
                                        const e = new tl(tl.CLICK, this.object, t._Str_3463, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown);
                                        e.localX = t.localX, e.localY = t.localY, e.spriteOffsetX = t.spriteOffsetX, e.spriteOffsetY = t.spriteOffsetY, this.eventDispatcher.dispatchEvent(e)
                                    }
                                    return void(this.eventDispatcher && this.object && this.contextMenu && this.eventDispatcher.dispatchEvent(new Ig(Ig.OPEN_FURNI_CONTEXT_MENU, this.object)));
                                case sl.MOUSE_DOWN:
                                    if (this.eventDispatcher) {
                                        const e = new tl(tl.MOUSE_DOWN, this.object, t._Str_3463, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown);
                                        this.eventDispatcher.dispatchEvent(e)
                                    }
                                    return
                            }
                        }
                        getLocationOffset() {
                            return this._bouncingStep <= 0 ? null : (this._locationOffset.x = 0, this._locationOffset.y = 0, this._bouncingStep <= t.BOUNCING_STEPS / 2 ? this._locationOffset.z = t.BOUNCING_Z * this._bouncingStep : this._bouncingStep <= t.BOUNCING_STEPS && (this._storedRotateMessage && (super.processUpdateMessage(this._storedRotateMessage), this._storedRotateMessage = null), this._locationOffset.z = t.BOUNCING_Z * (t.BOUNCING_STEPS - this._bouncingStep)), this._locationOffset)
                        }
                        useObject() {
                            this.object && (this.getAdClickUrl(this.object.model), this.eventDispatcher && (this.widget && this.eventDispatcher.dispatchEvent(new Ig(Ig.OPEN_WIDGET, this.object)), this.eventDispatcher.dispatchEvent(new Eg(Eg.STATE_CHANGE, this.object))))
                        }
                        tearDown() {
                            this.widget && 1 === this.object.model.getValue(j.FURNITURE_REAL_ROOM_OBJECT) && this.eventDispatcher.dispatchEvent(new Ig(Ig.CLOSE_WIDGET, this.object)), super.tearDown()
                        }
                    }
                    return t.BOUNCING_STEPS = 8, t.BOUNCING_Z = .0625, t
                })();
            class wg extends Ng {
                getEventTypes() {
                    const t = [ug.LOAD_BADGE];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                processUpdateMessage(t) {
                    if (super.processUpdateMessage(t), this.object)
                        if (t instanceof eu) {
                            const e = t.data;
                            e instanceof vi && this.updateBadge(e.getValue(1))
                        } else t instanceof su && "loading_icon" !== t.assetName && (this.object.model.setValue(j.FURNITURE_BADGE_ASSET_NAME, t.assetName), this.object.model.setValue(j.FURNITURE_BADGE_IMAGE_STATUS, 1), this.update(cp.instance.time))
                }
                mouseEvent(t, e) {
                    if (t && e && this.object) switch (t.type) {
                        case sl.DOUBLE_CLICK:
                            return void this.useObject();
                        default:
                            return void super.mouseEvent(t, e)
                    }
                }
                useObject() {
                    this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Ig(Ig.BADGE_DISPLAY_ENGRAVING, this.object))
                }
                updateBadge(t) {
                    "" !== t && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new ug(ug.LOAD_BADGE, this.object, t, !1))
                }
            }
            class Lg extends Ng {
                constructor() {
                    super(), this.onRoomToObjectOwnAvatarMoveEvent = this.onRoomToObjectOwnAvatarMoveEvent.bind(this)
                }
                initialize(t) {
                    super.initialize(t), this.eventDispatcher && this.eventDispatcher.addEventListener(Ul.ROAME_MOVE_TO, this.onRoomToObjectOwnAvatarMoveEvent)
                }
                tearDown() {
                    this.eventDispatcher && this.eventDispatcher.removeEventListener(Ul.ROAME_MOVE_TO, this.onRoomToObjectOwnAvatarMoveEvent), super.tearDown()
                }
                onRoomToObjectOwnAvatarMoveEvent(t) {
                    if (!t || !this.object) return;
                    const e = this.object.getLocation(),
                        s = t.targetLocation;
                    if (!s) return;
                    let i = this.object.model.getValue(j.FURNITURE_SIZE_X),
                        n = this.object.model.getValue(j.FURNITURE_SIZE_Y);
                    const r = (Math.floor(this.object.getDirection().x) + 45) % 360 / 90;
                    1 !== r && 3 !== r || ([i, n] = [n, i]), this.object.setState(s.x >= e.x && s.x < e.x + i && s.y >= e.y && s.y < e.y + n ? 1 : 0, 0)
                }
            }
            class xg extends Ng {
                getEventTypes() {
                    const t = [Eg.STATE_CHANGE];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                mouseEvent(t, e) {
                    if (!t || !e || !this.object) return;
                    let s = null;
                    switch (t.type) {
                        case sl.DOUBLE_CLICK:
                            switch (t.spriteTag) {
                                case "start_stop":
                                    s = new Eg(Eg.STATE_CHANGE, this.object, 1);
                                    break;
                                case "reset":
                                    s = new Eg(Eg.STATE_CHANGE, this.object, 2)
                            }
                            if (this.eventDispatcher && s) return void this.eventDispatcher.dispatchEvent(s)
                    }
                    super.mouseEvent(t, e)
                }
                useObject() {
                    this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Eg(Eg.STATE_CHANGE, this.object, 1))
                }
            }
            class Pg extends Ng {
                getEventTypes() {
                    const t = [Ig.CREDITFURNI];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                initialize(t) {
                    super.initialize(t);
                    let e = 0;
                    t.credits && "" !== t.credits && t.credits.length > 0 && (e = parseInt(t.credits)), this.object.model.setValue(j.FURNITURE_CREDIT_VALUE, e)
                }
                mouseEvent(t, e) {
                    if (t && e && this.object) switch (t.type) {
                        case sl.DOUBLE_CLICK:
                            return void this.useObject();
                        default:
                            super.mouseEvent(t, e)
                    }
                }
                useObject() {
                    this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Ig(Ig.CREDITFURNI, this.object))
                }
            }
            let Fg = (() => {
                class t {}
                return t.CHAT_WIDGET = "RWE_CHAT_WIDGET", t.INFOSTAND = "RWE_INFOSTAND", t.ME_MENU = "RWE_ME_MENU", t.CHAT_INPUT_WIDGET = "RWE_CHAT_INPUT_WIDGET", t.FURNI_PLACEHOLDER = "RWE_FURNI_PLACEHOLDER", t.FURNI_CREDIT_WIDGET = "RWE_FURNI_CREDIT_WIDGET", t.FURNI_STICKIE_WIDGET = "RWE_FURNI_STICKIE_WIDGET", t.FURNI_TROPHY_WIDGET = "RWE_FURNI_TROPHY_WIDGET", t.FURNI_LOVELOCK_WIDGET = "RWE_FURNI_LOVELOCK_WIDGET", t.FURNI_PRESENT_WIDGET = "RWE_FURNI_PRESENT_WIDGET", t.FURNI_ECOTRONBOX_WIDGET = "RWE_FURNI_ECOTRONBOX_WIDGET", t.FURNI_PET_PACKAGE_WIDGET = "RWE_FURNI_PET_PACKAGE_WIDGET", t.PLAYLIST_EDITOR_WIDGET = "RWE_PLAYLIST_EDITOR_WIDGET", t.DOORBELL = "RWE_DOORBELL", t.LOADINGBAR = "RWE_LOADINGBAR", t.ROOM_QUEUE = "RWE_ROOM_QUEUE", t.ROOM_POLL = "RWE_ROOM_POLL", t.ROOM_VOTE = "RWE_ROOM_VOTE", t.USER_CHOOSER = "RWE_USER_CHOOSER", t.FURNI_CHOOSER = "RWE_FURNI_CHOOSER", t.ROOM_DIMMER = "RWE_ROOM_DIMMER", t.FRIEND_REQUEST = "RWE_FRIEND_REQUEST", t.CLOTHING_CHANGE = "RWE_CLOTHING_CHANGE", t.CONVERSION_TRACKING = "RWE_CONVERSION_TRACKING", t.USER_NOTIFICATION = "RWE_USER_NOTIFICATION", t.FRIENDS_BAR = "RWE_FRIENDS_BAR", t.PURSE_WIDGET = "RWE_PURSE_WIDGET", t.AVATAR_INFO = "RWE_AVATAR_INFO", t.WELCOME_GIFT = "RWE_WELCOME_GIFT", t.SPAMWALL_POSTIT_WIDGET = "RWE_SPAMWALL_POSTIT_WIDGET", t.EFFECTS = "RWE_EFFECTS", t.MANNEQUIN = "RWE_MANNEQUIN", t.FURNITURE_CONTEXT_MENU = "RWE_FURNITURE_CONTEXT_MENU", t.LOCATION_WIDGET = "RWE_LOCATION_WIDGET", t.CAMERA = "RWE_CAMERA", t.ROOM_THUMBNAIL_CAMERA = "RWE_ROOM_THUMBNAIL_CAMERA", t.ROOM_BACKGROUND_COLOR = "RWE_ROOM_BACKGROUND_COLOR", t.CUSTOM_USER_NOTIFICATION = "RWE_CUSTOM_USER_NOTIFICATION", t.FURNI_ACHIEVEMENT_RESOLUTION_ENGRAVING = "RWE_FURNI_ACHIEVEMENT_RESOLUTION_ENGRAVING", t.FRIEND_FURNI_CONFIRM = "RWE_FRIEND_FURNI_CONFIRM", t.FRIEND_FURNI_ENGRAVING = "RWE_FRIEND_FURNI_ENGRAVING", t.HIGH_SCORE_DISPLAY = "RWE_HIGH_SCORE_DISPLAY", t.INTERNAL_LINK = "RWE_INTERNAL_LINK", t.CUSTOM_STACK_HEIGHT = "RWE_CUSTOM_STACK_HEIGHT", t.YOUTUBE = "RWE_YOUTUBE", t.RENTABLESPACE = "RWE_RENTABLESPACE", t.VIMEO = "RWE_VIMEO", t.ROOM_TOOLS = "RWE_ROOM_TOOLS", t.EXTERNAL_IMAGE = "RWE_EXTERNAL_IMAGE", t.WORD_QUIZZ = "RWE_WORD_QUIZZ", t.UI_HELP_BUBBLE = "RWE_UI_HELP_BUBBLE", t.ROOM_LINK = "RWE_ROOM_LINK", t.CRAFTING = "RWE_CRAFTING", t.ROOMGAME_CHECKERS = "RWE_GAME_CHECKERS", t
            })();
            class Gg extends Ng {
                getEventTypes() {
                    const t = [Cl.MOUSE_BUTTON, Cl.MOUSE_ARROW];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                mouseEvent(t, e) {
                    if (t && e && this.object) {
                        switch (t.type) {
                            case sl.ROLL_OVER:
                                this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Cl(Cl.MOUSE_BUTTON, this.object));
                                break;
                            case sl.ROLL_OUT:
                                this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Cl(Cl.MOUSE_ARROW, this.object))
                        }
                        super.mouseEvent(t, e)
                    }
                }
            }
            class Yg extends Gg {
                initialize(t) {
                    super.initialize(t), this.object && this.object.model && this.object.model.setValue(j.FURNITURE_ALWAYS_STACKABLE, 1)
                }
                get widget() {
                    return Fg.CUSTOM_STACK_HEIGHT
                }
            }
            class kg extends Ng {
                constructor() {
                    super(), this._noTags = !1, this._noTagsLastStateActivate = !1
                }
                getEventTypes() {
                    const t = [Cl.DICE_ACTIVATE, Cl.DICE_OFF];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                mouseEvent(t, e) {
                    if (!t || !e || !this.object) return;
                    let s = null;
                    switch (t.type) {
                        case sl.DOUBLE_CLICK:
                            return this._noTags ? this._noTagsLastStateActivate && 0 !== this.object.getState(0) && 100 !== this.object.getState(0) ? (s = new Cl(Cl.DICE_OFF, this.object), this._noTagsLastStateActivate = !1) : (s = new Cl(Cl.DICE_ACTIVATE, this.object), this._noTagsLastStateActivate = !0) : "activate" === t.spriteTag || 0 === this.object.getState(0) || 100 === this.object.getState(0) ? s = new Cl(Cl.DICE_ACTIVATE, this.object) : "deactivate" === t.spriteTag && (s = new Cl(Cl.DICE_OFF, this.object)), void(s && this.eventDispatcher && this.eventDispatcher.dispatchEvent(s))
                    }
                    super.mouseEvent(t, e)
                }
            }
            class Vg extends Ng {
                constructor() {
                    super(), this._showStateOnceRendered = !1, this._updateCount = 0
                }
                getEventTypes() {
                    const t = [Ig.INERNAL_LINK];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                initialize(t) {
                    super.initialize(t), t.action && 1 === t.action.startState && (this._showStateOnceRendered = !0)
                }
                update(t) {
                    super.update(t), this._showStateOnceRendered && (this._updateCount++, this._showStateOnceRendered && this._updateCount > 20 && (this.setAutomaticStateIndex(1), this._showStateOnceRendered = !1))
                }
                setAutomaticStateIndex(t) {
                    this.object && this.object.model && this.object.model.setValue(j.FURNITURE_AUTOMATIC_STATE_INDEX, t)
                }
                mouseEvent(t, e) {
                    t && e && (t.type === sl.DOUBLE_CLICK && this.setAutomaticStateIndex(0), super.mouseEvent(t, e))
                }
                useObject() {
                    this.eventDispatcher && this.object && this.eventDispatcher.dispatchEvent(new Ig(Ig.INERNAL_LINK, this.object))
                }
            }
            class Zg extends Ng {
                getEventTypes() {
                    const t = [Ig.ROOM_LINK];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                initialize(t) {
                    super.initialize(t), t.action && t.action.link && "" !== t.action.link && t.action.link.length > 0 && this.object && this.object.model && this.object.model.setValue(j.FURNITURE_INTERNAL_LINK, t.action.link)
                }
                dispose() {
                    super.dispose(), this._timer && (clearTimeout(this._timer), this._timer = null)
                }
                setAutomaticStateIndex(t) {
                    this.object && this.object.model && this.object.model.setValue(j.FURNITURE_AUTOMATIC_STATE_INDEX, t)
                }
                useObject() {
                    this.setAutomaticStateIndex(1), this._timer && (clearTimeout(this._timer), this._timer = null), this._timer = setTimeout(() => {
                        this.setAutomaticStateIndex(0), this._timer = null
                    }, 2500), this.eventDispatcher && this.object && this.eventDispatcher.dispatchEvent(new Ig(Ig.ROOM_LINK, this.object))
                }
            }
            class jg extends Gg {
                initialize(t) {
                    if (super.initialize(t), t && this.object && this.object.model) {
                        let e = "";
                        t.maskType && "" !== t.maskType && t.maskType.length > 0 && (e = t.maskType), this.object.model.setValue(j.FURNITURE_USES_PLANE_MASK, 0), this.object.model.setValue(j.FURNITURE_PLANE_MASK_TYPE, e)
                    }
                }
                mouseEvent(t, e) {
                    if (t && e && this.object) {
                        switch (t.type) {
                            case sl.DOUBLE_CLICK:
                                this.useObject()
                        }
                        super.mouseEvent(t, e)
                    }
                }
                get widget() {
                    return Fg.EXTERNAL_IMAGE
                }
            }
            class Bg extends Ng {}
            let Hg = (() => {
                    class t extends Gg {
                        constructor() {
                            super(), this._currentState = -1, this._currentLocation = null
                        }
                        getEventTypes() {
                            const t = [gg.ADD_HOLE, gg.REMOVE_HOLE];
                            return this.mergeTypes(super.getEventTypes(), t)
                        }
                        dispose() {
                            this._currentState === t._Str_9306 && this.eventDispatcher.dispatchEvent(new gg(gg.REMOVE_HOLE, this.object)), super.dispose()
                        }
                        update(t) {
                            super.update(t), this._Str_25016()
                        }
                        processUpdateMessage(e) {
                            if (super.processUpdateMessage(e), !this.object) return;
                            e instanceof eu && this._Str_21445(this.object.getState(0));
                            const s = this.object.getLocation();
                            this._currentLocation ? s.x === this._currentLocation.x && s.y === this._currentLocation.y || this._currentState === t._Str_9306 && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new gg(gg.ADD_HOLE, this.object)) : this._currentLocation = new K, this._currentLocation.assign(s)
                        }
                        _Str_21445(e) {
                            e !== this._currentState && (this.eventDispatcher && (e === t._Str_9306 ? this.eventDispatcher.dispatchEvent(new gg(gg.ADD_HOLE, this.object)) : this._currentState === t._Str_9306 && this.eventDispatcher.dispatchEvent(new gg(gg.REMOVE_HOLE, this.object))), this._currentState = e)
                        }
                        _Str_25016() {
                            if (!this.object) return;
                            const t = this.object.model;
                            if (!t) return;
                            const e = t.getValue(j.FURNITURE_AUTOMATIC_STATE_INDEX);
                            isNaN(e) || this._Str_21445(e % 2)
                        }
                    }
                    return t._Str_9306 = 0, t
                })(),
                Wg = (() => {
                    class t extends Gg {
                        processUpdateMessage(e) {
                            if (super.processUpdateMessage(e), e instanceof eu) {
                                const s = e.data;
                                s instanceof vi && (this.updateGroupId(s.getValue(t.GROUPID_KEY)), this.updateBadge(s.getValue(t.BADGE_KEY)), this.updateColors(s.getValue(t.COLOR1_KEY), s.getValue(t.COLOR2_KEY)))
                            }
                        }
                        updateGroupId(t) {
                            this.object.model.setValue(j.FURNITURE_GUILD_CUSTOMIZED_GUILD_ID, parseInt(t))
                        }
                        updateBadge(t) {
                            this.object.model.setValue(j.FURNITURE_GUILD_CUSTOMIZED_BADGE, t)
                        }
                        updateColors(t, e) {
                            this.object.model.setValue(j.FURNITURE_GUILD_CUSTOMIZED_COLOR_1, parseInt(t, 16)), this.object.model.setValue(j.FURNITURE_GUILD_CUSTOMIZED_COLOR_2, parseInt(e, 16))
                        }
                    }
                    return t.GROUPID_KEY = 1, t.BADGE_KEY = 2, t.COLOR1_KEY = 3, t.COLOR2_KEY = 4, t
                })(),
                zg = (() => {
                    class t extends Ng {
                        constructor() {
                            super(...arguments), this._state = -1
                        }
                        getEventTypes() {
                            return [Ig.HIGH_SCORE_DISPLAY, Ig.HIDE_HIGH_SCORE_DISPLAY]
                        }
                        tearDown() {
                            1 === this.object.model.getValue(j.FURNITURE_REAL_ROOM_OBJECT) && this.eventDispatcher.dispatchEvent(new Ig(Ig.HIDE_HIGH_SCORE_DISPLAY, this.object)), super.tearDown()
                        }
                        processUpdateMessage(e) {
                            super.processUpdateMessage(e), 1 === this.object.model.getValue(j.FURNITURE_REAL_ROOM_OBJECT) && e instanceof eu && (this.eventDispatcher.dispatchEvent(new Ig(e.state === t.SHOW_WIDGET_IN_STATE ? Ig.HIGH_SCORE_DISPLAY : Ig.HIDE_HIGH_SCORE_DISPLAY, this.object)), this._state = e.state)
                        }
                        mouseEvent(t, e) {
                            if (t && e && this.object) switch (t.type) {
                                case sl.DOUBLE_CLICK:
                                    return void this.useObject();
                                default:
                                    super.mouseEvent(t, e)
                            }
                        }
                    }
                    return t.SHOW_WIDGET_IN_STATE = 1, t
                })();
            class Kg extends Ng {
                getEventTypes() {
                    const t = [Eg.STATE_CHANGE];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                mouseEvent(t, e) {
                    if (!t || !e || !this.object) return;
                    let s = null;
                    switch (t.type) {
                        case sl.DOUBLE_CLICK:
                            switch (t.spriteTag) {
                                case "off":
                                    s = new Eg(Eg.STATE_CHANGE, this.object, 3)
                            }
                            break;
                        case sl.MOUSE_CLICK:
                            switch (t.spriteTag) {
                                case "inc":
                                    s = new Eg(Eg.STATE_CHANGE, this.object, 2);
                                    break;
                                case "dec":
                                    s = new Eg(Eg.STATE_CHANGE, this.object, 1)
                            }
                    }
                    this.eventDispatcher && s ? this.eventDispatcher.dispatchEvent(s) : super.mouseEvent(t, e)
                }
                useObject() {
                    this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Eg(Eg.STATE_CHANGE, this.object, 3))
                }
            }
            class Xg extends Gg {
                constructor() {
                    super(), this._nextState = 0, this._nextStateTimestamp = 0
                }
                update(t) {
                    if (this._nextStateTimestamp > 0 && t >= this._nextStateTimestamp) {
                        this._nextStateTimestamp = 0;
                        const t = new Si;
                        t.setString(this._nextState.toString()), super.processUpdateMessage(new eu(this._nextState, t))
                    }
                    super.update(t)
                }
                processUpdateMessage(t) {
                    if (t instanceof eu) return this.processUpdate(t);
                    super.processUpdateMessage(t)
                }
                processUpdate(t) {
                    if (!t) return;
                    const e = t.state / 1e3,
                        s = t.state % 1e3;
                    if (s) this._nextState = e, this._nextStateTimestamp = this.time + s;
                    else {
                        this._nextStateTimestamp = 0;
                        const t = new Si;
                        t.setString(e.toString()), super.processUpdateMessage(new eu(e, t))
                    }
                }
            }
            let qg = (() => {
                class t extends Ng {
                    getEventTypes() {
                        const t = [Ig.MANNEQUIN];
                        return this.mergeTypes(super.getEventTypes(), t)
                    }
                    processUpdateMessage(t) {
                        super.processUpdateMessage(t), t instanceof eu && (t.data.writeRoomObjectModel(this.object.model), this.processObjectData())
                    }
                    processObjectData() {
                        if (!this.object || !this.object.model) return;
                        const e = new Ii;
                        e.initializeFromRoomObjectModel(this.object.model), this.object.model.setValue(j.FURNITURE_MANNEQUIN_GENDER, e.getValue(t.GENDER)), this.object.model.setValue(j.FURNITURE_MANNEQUIN_FIGURE, e.getValue(t.FIGURE)), this.object.model.setValue(j.FURNITURE_MANNEQUIN_NAME, e.getValue(t.OUTFIT_NAME))
                    }
                    mouseEvent(t, e) {
                        if (t && e && this.object) {
                            switch (t.type) {
                                case sl.DOUBLE_CLICK:
                                    return void this.useObject()
                            }
                            super.mouseEvent(t, e)
                        }
                    }
                    useObject() {
                        this.eventDispatcher && this.object && this.eventDispatcher.dispatchEvent(new Ig(Ig.MANNEQUIN, this.object))
                    }
                }
                return t.GENDER = "GENDER", t.FIGURE = "FIGURE", t.OUTFIT_NAME = "OUTFIT_NAME", t
            })();
            class Jg extends Gg {
                initialize(t) {
                    super.initialize(t), this.object && this.object.model && this.object.model.setValue(j.FURNITURE_IS_VARIABLE_HEIGHT, 1)
                }
            }
            class Qg extends Ng {
                getEventTypes() {
                    const t = [Cl.ENTER_ONEWAYDOOR];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                mouseEvent(t, e) {
                    if (t && e && this.object) {
                        switch (t.type) {
                            case sl.DOUBLE_CLICK:
                                return void this.useObject()
                        }
                        super.mouseEvent(t, e)
                    }
                }
                useObject() {
                    this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Cl(Cl.ENTER_ONEWAYDOOR, this.object))
                }
            }
            class $g extends Ng {}
            class tm extends Ng {}
            class em extends Gg {
                getEventTypes() {
                    const t = [Ig.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                useObject() {
                    this.eventDispatcher.dispatchEvent(new Ig(Ig.PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG, this.object))
                }
            }
            class sm extends Gg {}
            class im extends Gg {
                constructor() {
                    super(), this._roomColorUpdated = !1
                }
                getEventTypes() {
                    const t = [Ig.BACKGROUND_COLOR, pg.ROOM_BACKGROUND_COLOR];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                dispose() {
                    this._roomColorUpdated && (this.eventDispatcher && this.object && 1 === this.object.model.getValue(j.FURNITURE_REAL_ROOM_OBJECT) && this.eventDispatcher.dispatchEvent(new pg(pg.ROOM_BACKGROUND_COLOR, this.object, !1, 0, 0, 0)), this._roomColorUpdated = !1), super.dispose()
                }
                processUpdateMessage(t) {
                    super.processUpdateMessage(t), t instanceof eu && (t.data.writeRoomObjectModel(this.object.model), 1 === this.object.model.getValue(j.FURNITURE_REAL_ROOM_OBJECT) && this.processColorUpdate())
                }
                processColorUpdate() {
                    if (!this.object || !this.object.model) return;
                    const t = new Ri;
                    t.initializeFromRoomObjectModel(this.object.model);
                    const e = t.getValue(0),
                        s = t.getValue(1),
                        i = t.getValue(2),
                        n = t.getValue(3);
                    e > -1 && s > -1 && i > -1 && n > -1 && (this.object.model.setValue(j.FURNITURE_ROOM_BACKGROUND_COLOR_HUE, s), this.object.model.setValue(j.FURNITURE_ROOM_BACKGROUND_COLOR_SATURATION, i), this.object.model.setValue(j.FURNITURE_ROOM_BACKGROUND_COLOR_LIGHTNESS, n), this.object.setState(e, 0), this.eventDispatcher && this.eventDispatcher.dispatchEvent(new pg(pg.ROOM_BACKGROUND_COLOR, this.object, 1 === e, s, i, n)), this._roomColorUpdated = !0)
                }
                mouseEvent(t, e) {
                    if (t && e && this.object) switch (t.type) {
                        case sl.DOUBLE_CLICK:
                            return void(this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Ig(Ig.BACKGROUND_COLOR, this.object)));
                        default:
                            super.mouseEvent(t, e)
                    }
                }
            }
            let nm = (() => {
                    class t {}
                    return t.INFOSTAND_EXTRA_PARAM = "RWEIEP_INFOSTAND_EXTRA_PARAM", t.JUKEBOX = "RWEIEP_JUKEBOX", t.USABLE_PRODUCT = "RWEIEP_USABLE_PRODUCT", t.SONGDISK = "RWEIEP_SONGDISK", t.CRACKABLE_FURNI = "RWEIEP_CRACKABLE_FURNI", t.BRANDING_OPTIONS = "RWEIEP_BRANDING_OPTIONS", t.USABLE = "RWEIEP_USABLE", t
                })(),
                rm = (() => {
                    class t extends el {
                        constructor(t) {
                            super(null, null), this._type = t
                        }
                        get type() {
                            return this._type
                        }
                    }
                    return t.IMAGE_LOADED = "ROAUM_IMAGE_LOADED", t.IMAGE_LOADING_FAILED = "ROAUM_IMAGE_FAILED", t
                })(),
                om = (() => {
                    class t extends Ng {
                        constructor() {
                            super(), this._hasClickUrl = !1
                        }
                        processUpdateMessage(t) {
                            super.processUpdateMessage(t), t instanceof eu && this.processAdDataUpdateMessage(t), t instanceof rm && this.processAdUpdate(t)
                        }
                        processAdDataUpdateMessage(e) {
                            if (!e) return;
                            const s = new Ii;
                            s.initializeFromRoomObjectModel(this.object.model);
                            const i = parseInt(s.getValue(t.STATE));
                            isNaN(i) || this.object.getState(0) === i || this.object.setState(i, 0);
                            const n = s.getValue(t.IMAGEURL_KEY),
                                r = this.object.model.getValue(j.FURNITURE_BRANDING_IMAGE_URL);
                            r && r === n || (this.object.model.setValue(j.FURNITURE_BRANDING_IMAGE_URL, n), this.object.model.setValue(j.FURNITURE_BRANDING_IMAGE_STATUS, 0), this.downloadBackground());
                            const o = s.getValue(t.CLICKURL_KEY);
                            if (o) {
                                const t = this.object.model.getValue(j.FURNITURE_BRANDING_URL);
                                t && t === o || this.object.model && this.object.model.setValue(j.FURNITURE_BRANDING_URL, o)
                            }
                            const a = parseInt(s.getValue(t.OFFSETX_KEY)),
                                c = parseInt(s.getValue(t.OFFSETY_KEY)),
                                _ = parseInt(s.getValue(t.OFFSETZ_KEY));
                            isNaN(a) || this.object.model.setValue(j.FURNITURE_BRANDING_OFFSET_X, a), isNaN(c) || this.object.model.setValue(j.FURNITURE_BRANDING_OFFSET_Y, c), isNaN(_) || this.object.model.setValue(j.FURNITURE_BRANDING_OFFSET_Z, _);
                            let h = t.IMAGEURL_KEY + "=" + (null !== n ? n : "") + "\t";
                            this._hasClickUrl && (h = h + (t.CLICKURL_KEY + "=") + (null !== o ? o : "") + "\t"), h = h + (t.OFFSETX_KEY + "=") + a + "\t", h = h + (t.OFFSETY_KEY + "=") + c + "\t", h = h + (t.OFFSETZ_KEY + "=") + _ + "\t", this.object.model.setValue(nm.INFOSTAND_EXTRA_PARAM, nm.BRANDING_OPTIONS + h)
                        }
                        processAdUpdate(t) {
                            if (t && this.object) switch (t.type) {
                                case rm.IMAGE_LOADED:
                                    this.object.model.setValue(j.FURNITURE_BRANDING_IMAGE_STATUS, 1);
                                    break;
                                case rm.IMAGE_LOADING_FAILED:
                                    this.object.model.setValue(j.FURNITURE_BRANDING_IMAGE_STATUS, -1)
                            }
                        }
                        downloadBackground() {
                            const t = this.object && this.object.model;
                            if (!t) return;
                            const e = t.getValue(j.FURNITURE_BRANDING_IMAGE_URL),
                                s = t.getValue(j.FURNITURE_BRANDING_IMAGE_STATUS);
                            if (!e || "" === e || 1 === s) return;
                            const i = cp.instance.core && cp.instance.core.asset;
                            i && (i.getTexture(e) ? this.processUpdateMessage(new rm(rm.IMAGE_LOADED)) : i.downloadAsset(e, t => {
                                this.processUpdateMessage(new rm(t ? rm.IMAGE_LOADED : rm.IMAGE_LOADING_FAILED))
                            }))
                        }
                    }
                    return t.STATE = "state", t.IMAGEURL_KEY = "imageUrl", t.CLICKURL_KEY = "clickUrl", t.OFFSETX_KEY = "offsetX", t.OFFSETY_KEY = "offsetY", t.OFFSETZ_KEY = "offsetZ", t
                })();
            class am extends om {
                getAdClickUrl(t) {
                    return null
                }
            }
            class cm extends om {
                constructor() {
                    super(), this._hasClickUrl = !0
                }
                getAdClickUrl(t) {
                    return t.getValue(j.FURNITURE_BRANDING_URL)
                }
            }
            class _m extends Ng {
                constructor() {
                    super(), this._roomColorUpdated = !1
                }
                getEventTypes() {
                    const t = [Ig.DIMMER, Ig.WIDGET_REMOVE_DIMMER, dg.DIMMER_STATE];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                dispose() {
                    this._roomColorUpdated && this.eventDispatcher && this.object && (1 === this.object.model.getValue(j.FURNITURE_REAL_ROOM_OBJECT) && (this.eventDispatcher.dispatchEvent(new dg(this.object, 0, 1, 1, 16777215, 255)), this.eventDispatcher.dispatchEvent(new Ig(Ig.WIDGET_REMOVE_DIMMER, this.object))), this._roomColorUpdated = !1), super.dispose()
                }
                processUpdateMessage(t) {
                    if (t instanceof eu) {
                        if (t.data) {
                            const e = t.data.getLegacyString();
                            1 === this.object.model.getValue(j.FURNITURE_REAL_ROOM_OBJECT) && this.processDimmerData(e), super.processUpdateMessage(new eu(this.getStateFromDimmerData(e), t.data))
                        }
                    } else super.processUpdateMessage(t)
                }
                getStateFromDimmerData(t) {
                    if (!t) return 0;
                    const e = t.split(",");
                    return e.length >= 5 ? parseInt(e[0]) - 1 : 0
                }
                processDimmerData(t) {
                    if (!t) return;
                    const e = t.split(",");
                    if (e.length >= 5) {
                        const s = this.getStateFromDimmerData(t),
                            i = parseInt(e[1]),
                            n = parseInt(e[2]);
                        let r = parseInt(e[3].substr(1), 16),
                            o = parseInt(e[4]);
                        s || (r = 16777215, o = 255), this.eventDispatcher && this.object && (this.eventDispatcher.dispatchEvent(new dg(this.object, s, i, n, r, o)), this._roomColorUpdated = !0)
                    }
                }
                useObject() {
                    this.eventDispatcher.dispatchEvent(new Ig(Ig.DIMMER, this.object))
                }
                update(t) {
                    if (super.update(t), this.object && this.object.model && 1 === this.object.model.getValue(j.FURNITURE_REAL_ROOM_OBJECT)) {
                        const t = this.object.model.getValue(j.FURNITURE_DATA);
                        t && t.length > 0 && (this.object.model.setValue(j.FURNITURE_DATA, ""), this.processDimmerData(t))
                    }
                }
            }
            let hm = (() => {
                class t extends Ng {
                    constructor() {
                        super(), this._score = 0, this._scoreIncreaser = 50, this._scoreTimer = 0
                    }
                    processUpdateMessage(t) {
                        if (t instanceof eu) return this.updateScore(t.state);
                        super.processUpdateMessage(t)
                    }
                    updateScore(e) {
                        this._score = e;
                        const s = this.object.getState(0);
                        if (this._score !== s) {
                            let e = this._score - s;
                            e < 0 && (e = -e), this._scoreIncreaser = e * t._Str_3536 > t._Str_5967 ? t._Str_5967 / e : t._Str_3536, this._scoreTimer = cp.instance.time
                        }
                    }
                    update(t) {
                        super.update(t);
                        const e = this.object.getState(0);
                        if (e !== this._score && t >= this._scoreTimer + this._scoreIncreaser) {
                            const s = t - this._scoreTimer;
                            let i = s / this._scoreIncreaser,
                                n = 1;
                            this._score < e && (n = -1), i > n * (this._score - e) && (i = n * (this._score - e)), this.object.setState(e + n * i, 0), this._scoreTimer = t - (s - i * this._scoreIncreaser)
                        }
                    }
                }
                return t._Str_3536 = 50, t._Str_5967 = 3e3, t
            })();
            class lm extends Gg {}
            let um = (() => {
                class t extends Ng {
                    getEventTypes() {
                        const t = [Ig.STICKIE, Cl.STICKIE];
                        return this.mergeTypes(super.getEventTypes(), t)
                    }
                    initialize(t) {
                        super.initialize(t), this.updateColor(), this.object && this.object.model.setValue(j.FURNITURE_IS_STICKIE, "")
                    }
                    processUpdateMessage(t) {
                        super.processUpdateMessage(t), t instanceof nu && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Ig(Ig.STICKIE, this.object)), this.updateColor()
                    }
                    updateColor() {
                        if (!this.object) return;
                        const e = this.object.model.getValue(j.FURNITURE_DATA);
                        let s = t.STICKIE_COLORS.indexOf(e);
                        s < 0 && (s = 3), this.object.model.setValue(j.FURNITURE_COLOR, s + 1)
                    }
                    mouseEvent(t, e) {
                        if (t && e && this.object) switch (t.type) {
                            case sl.DOUBLE_CLICK:
                                return void this.useObject();
                            default:
                                super.mouseEvent(t, e)
                        }
                    }
                    useObject() {
                        this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Cl(Cl.STICKIE, this.object))
                    }
                }
                return t.STICKIE_COLORS = ["9CCEFF", "FF9CFF", "9CFF9C", "FFFF33"], t
            })();
            class dm extends Ng {
                getEventTypes() {
                    const t = [Ig.TROPHY];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                mouseEvent(t, e) {
                    if (t && e && this.object) {
                        switch (t.type) {
                            case sl.DOUBLE_CLICK:
                                return void this.useObject()
                        }
                        super.mouseEvent(t, e)
                    }
                }
                useObject() {
                    this.eventDispatcher && this.object && this.eventDispatcher.dispatchEvent(new Ig(Ig.TROPHY, this.object))
                }
            }
            let gm = (() => {
                class t extends Gg {
                    constructor() {
                        super(), this._total = 0, this._lastUpdate = 0, this._interval = 33
                    }
                    processUpdateMessage(t) {
                        if (super.processUpdateMessage(t), t instanceof eu) {
                            const e = t.data;
                            if (!e) return;
                            this._Str_24990(e.result)
                        }
                    }
                    _Str_24990(e) {
                        if (this._total = e, !this._lastUpdate) return this.object.model.setValue(j.FURNITURE_VOTE_COUNTER_COUNT, e), void(this._lastUpdate = cp.instance.time);
                        if (this._total !== this._Str_8221) {
                            const e = Math.abs(this._total - this._Str_8221);
                            this._interval = e * t._Str_3536 > t._Str_5967 ? t._Str_5967 / e : t._Str_3536, this._lastUpdate = cp.instance.time
                        }
                    }
                    update(t) {
                        if (super.update(t), this.object && this._Str_8221 !== this._total && t >= this._lastUpdate + this._interval) {
                            const e = t - this._lastUpdate;
                            let s = e / this._interval,
                                i = 1;
                            this._total < this._Str_8221 && (i = -1), s > i * (this._total - this._Str_8221) && (s = i * (this._total - this._Str_8221)), this.object.model.setValue(j.FURNITURE_VOTE_COUNTER_COUNT, this._Str_8221 + i * s), this._lastUpdate = t - (e - s * this._interval)
                        }
                    }
                    get _Str_8221() {
                        return this.object.model.getValue(j.FURNITURE_VOTE_COUNTER_COUNT)
                    }
                }
                return t._Str_3536 = 33, t._Str_5967 = 1e3, t
            })();
            class mm extends Gg {
                processUpdateMessage(t) {
                    if (super.processUpdateMessage(t), this.object && t instanceof eu) {
                        const e = t.data;
                        e instanceof Ti && this.object.model.setValue(j.FURNITURE_VOTE_MAJORITY_RESULT, e.result)
                    }
                }
            }
            class pm extends Gg {
                initialize(t) {
                    super.initialize(t);
                    let e = "";
                    t.maskType && "" !== t.maskType && t.maskType.length > 0 && (e = t.maskType), this.object.model.setValue(j.FURNITURE_USES_PLANE_MASK, 0), this.object.model.setValue(j.FURNITURE_PLANE_MASK_TYPE, e)
                }
            }
            class bm extends Ug {
                constructor() {
                    super(), this._selected = !1, this._reportedLocation = null, this._postureIndex = 0, this._gestureIndex = 0, this._headDirectionDelta = 0, this._directions = [], this._talkingEndTimestamp = 0, this._gestureEndTimestamp = 0, this._expressionEndTimestamp = 0
                }
                getEventTypes() {
                    const t = [tl.CLICK, bg.POSITION_CHANGED];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                initialize(t) {
                    if (!t) return;
                    const e = this.object && this.object.model;
                    if (!e) return;
                    const s = t.directions;
                    if (s && s.length) {
                        for (const t of s) this._directions.push(t);
                        this._directions.sort((t, e) => t - e)
                    }
                    e.setValue(j.PET_ALLOWED_DIRECTIONS, this._directions)
                }
                dispose() {
                    this._selected && this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new bg(bg.OBJECT_REMOVED, this.object)), this._directions = null, this._reportedLocation = null
                }
                update(t) {
                    if (super.update(t), this._selected && this.object && this.eventDispatcher) {
                        const t = this.object.getLocation();
                        this._reportedLocation && this._reportedLocation.x === t.x && this._reportedLocation.y === t.y && this._reportedLocation.z === t.z || (this._reportedLocation || (this._reportedLocation = new K), this._reportedLocation.assign(t), this.eventDispatcher.dispatchEvent(new bg(bg.POSITION_CHANGED, this.object)))
                    }
                    this.object && this.object.model && this.updateModel(t, this.object.model)
                }
                updateModel(t, e) {
                    this._gestureEndTimestamp > 0 && t > this._gestureEndTimestamp && (e.setValue(j.FIGURE_GESTURE, null), this._gestureEndTimestamp = 0), this._talkingEndTimestamp > 0 && t > this._talkingEndTimestamp && (e.setValue(j.FIGURE_TALK, 0), this._talkingEndTimestamp = 0), this._expressionEndTimestamp > 0 && t > this._expressionEndTimestamp && (e.setValue(j.FIGURE_EXPRESSION, 0), this._expressionEndTimestamp = 0)
                }
                processUpdateMessage(t) {
                    if (!t || !this.object) return;
                    super.processUpdateMessage(t);
                    const e = this.object && this.object.model;
                    if (e)
                        if (t instanceof $l) e.setValue(j.HEAD_DIRECTION, t.headDirection);
                        else {
                            if (t instanceof Yl) {
                                const s = new fl(t.figure);
                                return e.setValue(j.FIGURE, t.figure), e.setValue(j.RACE, t.subType), e.setValue(j.PET_PALETTE_INDEX, s.paletteId), e.setValue(j.PET_COLOR, s.color), e.setValue(j.PET_TYPE, s.typeId), e.setValue(j.PET_CUSTOM_LAYER_IDS, s.customLayerIds), e.setValue(j.PET_CUSTOM_PARTS_IDS, s.customPartIds), e.setValue(j.PET_CUSTOM_PALETTE_IDS, s.customPaletteIds), void e.setValue(j.PET_IS_RIDING, t.isRiding ? 1 : 0)
                            }
                            if (t instanceof Kl) e.setValue(j.FIGURE_POSTURE, t.postureType);
                            else {
                                if (t instanceof Ll) return e.setValue(j.FIGURE_TALK, 1), void(this._talkingEndTimestamp = this.time + 1e3 * t.numberOfWords);
                                if (!(t instanceof ql)) return t instanceof Hl ? (e.setValue(j.FIGURE_GESTURE, t.gesture), void(this._gestureEndTimestamp = this.time + 3e3)) : t instanceof Rg ? (this._selected = t.selected, void(this._reportedLocation = null)) : void 0;
                                e.setValue(j.FIGURE_SLEEP, t.isSleeping ? 1 : 0)
                            }
                        }
                }
                mouseEvent(t, e) {
                    let s = null;
                    switch (t.type) {
                        case sl.MOUSE_CLICK:
                            s = tl.CLICK;
                            break;
                        case sl.DOUBLE_CLICK:
                            break;
                        case sl.MOUSE_DOWN:
                            this.object.model.getValue(j.PET_TYPE) == sg.MONSTERPLANT && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new tl(tl.MOUSE_DOWN, this.object, t._Str_3463, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown))
                    }
                    s && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new tl(s, this.object, t._Str_3463, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown))
                }
            }
            class Em {
                static int2rgb(t) {
                    return "rgba(" + [(16711680 & (t >>>= 0)) >>> 16, (65280 & t) >>> 8, 255 & t, 1].join(",") + ")"
                }
                static _Str_22130(t) {
                    const e = (t >> 16 & 255) / 255,
                        s = (t >> 8 & 255) / 255,
                        i = (255 & t) / 255,
                        n = Math.max(e, s, i),
                        r = Math.min(e, s, i),
                        o = n - r;
                    let a = 0,
                        c = 0,
                        _ = 0;
                    return 0 == o ? a = 0 : n == e ? a = s > i ? 60 * (s - i) / o : 60 * (s - i) / o + 360 : n == s ? a = 60 * (i - e) / o + 120 : n == i && (a = 60 * (e - s) / o + 240), c = .5 * (n + r), _ = 0 == o ? 0 : c <= .5 ? o / c * .5 : o / (1 - c) * .5, (Math.round(a / 360 * 255) << 16) + (Math.round(255 * _) << 8) + Math.round(255 * c)
                }
                static _Str_13949(t) {
                    let e, s, i, n, r;
                    const o = (t >> 16 & 255) / 255,
                        a = (t >> 8 & 255) / 255,
                        c = (255 & t) / 255;
                    let _ = 0,
                        h = 0,
                        l = 0;
                    return a > 0 ? (e = 0, s = 0, e = c < .5 ? c * (1 + a) : c + a - c * a, s = 2 * c - e, i = o + 1 / 3, n = o, r = o - 1 / 3, i < 0 ? i += 1 : i > 1 && i--, n < 0 ? n += 1 : n > 1 && n--, r < 0 ? r += 1 : r > 1 && r--, _ = 6 * i < 1 ? s + 6 * (e - s) * i : 2 * i < 1 ? e : 3 * i < 2 ? s + 6 * (e - s) * (2 / 3 - i) : s, h = 6 * n < 1 ? s + 6 * (e - s) * n : 2 * n < 1 ? e : 3 * n < 2 ? s + 6 * (e - s) * (2 / 3 - n) : s, l = 6 * r < 1 ? s + 6 * (e - s) * r : 2 * r < 1 ? e : 3 * r < 2 ? s + 6 * (e - s) * (2 / 3 - r) : s) : (_ = c, h = c, l = c), (Math.round(255 * _) << 16) + (Math.round(255 * h) << 8) + Math.round(255 * l)
                }
                static rgb2xyz(t) {
                    let e = (t >> 16 & 255) / 255,
                        s = (t >> 8 & 255) / 255,
                        i = (t >> 0 & 255) / 255;
                    return e > .04045 ? e = Math.pow((e + .055) / 1.055, 2.4) : e /= 12.92, s > .04045 ? s = Math.pow((s + .055) / 1.055, 2.4) : s /= 12.92, i > .04045 ? i = Math.pow((i + .055) / 1.055, 2.4) : i /= 12.92, e *= 100, s *= 100, i *= 100, new K(.4124 * e + .3576 * s + .1805 * i, .2126 * e + .7152 * s + .0722 * i, .0193 * e + .1192 * s + .9505 * i)
                }
                static _Str_22784(t) {
                    let e = t.x / 95.047,
                        s = t.y / 100,
                        i = t.z / 108.883;
                    return e = e > .008856 ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116, s = s > .008856 ? Math.pow(s, 1 / 3) : 7.787 * s + 16 / 116, i = i > .008856 ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116, new K(116 * s - 16, 500 * (e - s), 200 * (s - i))
                }
                static rgb2CieLab(t) {
                    return Em._Str_22784(Em.rgb2xyz(t))
                }
            }
            class fm extends Mg {
                constructor() {
                    super(), this._planeParser = new Zo, this._planeBitmapMaskParser = new Rd, this._color = 16777215, this._Str_3576 = 255, this._Str_14932 = 16777215, this._Str_17003 = 255, this._Str_11287 = 16777215, this._Str_16460 = 255, this._Str_9785 = 0, this._Str_17191 = 1500, this._lastHoleUpdate = 0, this._needsMapUpdate = !1
                }
                getEventTypes() {
                    const t = [tl.MOUSE_MOVE, tl.CLICK];
                    return this.mergeTypes(super.getEventTypes(), t)
                }
                dispose() {
                    super.dispose(), this._planeParser && (this._planeParser.dispose(), this._planeParser = null), this._planeBitmapMaskParser && (this._planeBitmapMaskParser.dispose(), this._planeBitmapMaskParser = null)
                }
                initialize(t) {
                    t && this.object && t instanceof Go && this._planeParser.initializeFromMapData(t) && (this.object.model.setValue(j.ROOM_MAP_DATA, t), this.object.model.setValue(j.ROOM_BACKGROUND_COLOR, 16777215), this.object.model.setValue(j.ROOM_FLOOR_VISIBILITY, 1), this.object.model.setValue(j.ROOM_WALL_VISIBILITY, 1), this.object.model.setValue(j.ROOM_LANDSCAPE_VISIBILITY, 1))
                }
                update(t) {
                    if (super.update(t), this._Str_24703(t), this._needsMapUpdate) {
                        if (this._lastHoleUpdate && t - this._lastHoleUpdate < 5) return;
                        const e = this.object && this.object.model;
                        if (e) {
                            const s = this._planeParser.getMapData();
                            e.setValue(j.ROOM_MAP_DATA, s), e.setValue(j.ROOM_FLOOR_HOLE_UPDATE_TIME, t), this._planeParser.initializeFromMapData(s)
                        }
                        this._lastHoleUpdate = 0, this._needsMapUpdate = !1
                    }
                }
                _Str_24703(t) {
                    if (!this.object || !this._Str_9785) return;
                    let e = this._color,
                        s = this._Str_3576;
                    if (t - this._Str_9785 >= this._Str_17191) e = this._Str_11287, s = this._Str_16460, this._Str_9785 = 0;
                    else {
                        let i = this._Str_14932 >> 16 & 255,
                            n = this._Str_14932 >> 8 & 255,
                            r = 255 & this._Str_14932;
                        const o = (t - this._Str_9785) / this._Str_17191;
                        i += ((this._Str_11287 >> 16 & 255) - i) * o, n += ((this._Str_11287 >> 8 & 255) - n) * o, r += ((255 & this._Str_11287) - r) * o, e = (i << 16) + (n << 8) + r, s = this._Str_17003 + (this._Str_16460 - this._Str_17003) * o, this._color = e, this._Str_3576 = s
                    }
                    let i = Em._Str_22130(e);
                    i = (16776960 & i) + s, e = Em._Str_13949(i), this.object.model && this.object.model.setValue(j.ROOM_BACKGROUND_COLOR, e)
                }
                processUpdateMessage(t) {
                    if (!t || !this.object) return;
                    const e = this.object.model;
                    e && (t instanceof hu ? this.onObjectRoomUpdateMessage(t, e) : t instanceof au ? this.onObjectRoomMaskUpdateMessage(t, e) : t instanceof _u ? this.onObjectRoomPlaneVisibilityUpdateMessage(t, e) : t instanceof cu ? this.onObjectRoomPlanePropertyUpdateMessage(t, e) : t instanceof ou ? this.onObjectRoomFloorHoleUpdateMessage(t, e) : t instanceof ru && this.onObjectRoomColorUpdateMessage(t, e))
                }
                onObjectRoomUpdateMessage(t, e) {
                    switch (t.type) {
                        case hu.ROOM_FLOOR_UPDATE:
                            return void e.setValue(j.ROOM_FLOOR_TYPE, t.value);
                        case hu.ROOM_WALL_UPDATE:
                            return void e.setValue(j.ROOM_WALL_TYPE, t.value);
                        case hu.ROOM_LANDSCAPE_UPDATE:
                            return void e.setValue(j.ROOM_LANDSCAPE_TYPE, t.value)
                    }
                }
                onObjectRoomMaskUpdateMessage(t, e) {
                    let s = null,
                        i = !1;
                    switch (t.type) {
                        case au.ADD_MASK:
                            s = Sd.WINDOW, t.maskCategory === au.HOLE && (s = Sd.HOLE), this._planeBitmapMaskParser.addMask(t.maskId, t.maskType, t.maskLocation, s), i = !0;
                            break;
                        case au._Str_10260:
                            i = this._planeBitmapMaskParser._Str_23574(t.maskId)
                    }
                    i && e.setValue(j.ROOM_PLANE_MASK_XML, this._planeBitmapMaskParser._Str_5598())
                }
                onObjectRoomPlaneVisibilityUpdateMessage(t, e) {
                    let s = 0;
                    switch (t.visible && (s = 1), t.type) {
                        case _u.FLOOR_VISIBILITY:
                            return void e.setValue(j.ROOM_FLOOR_VISIBILITY, s);
                        case _u.WALL_VISIBILITY:
                            return e.setValue(j.ROOM_WALL_VISIBILITY, s), void e.setValue(j.ROOM_LANDSCAPE_VISIBILITY, s)
                    }
                }
                onObjectRoomPlanePropertyUpdateMessage(t, e) {
                    switch (t.type) {
                        case cu.FLOOR_THICKNESS:
                            return void e.setValue(j.ROOM_FLOOR_THICKNESS, t.value);
                        case cu.WALL_THICKNESS:
                            return void e.setValue(j.ROOM_WALL_THICKNESS, t.value)
                    }
                }
                onObjectRoomFloorHoleUpdateMessage(t, e) {
                    switch (t.type) {
                        case ou.ADD:
                            return this._planeParser.addFloorHole(t.id, t.x, t.y, t.width, t.height), void(this._needsMapUpdate = !0);
                        case ou.REMOVE:
                            return this._planeParser.removeFloorHole(t.id), void(this._needsMapUpdate = !0)
                    }
                    this._lastHoleUpdate = this.time
                }
                onObjectRoomColorUpdateMessage(t, e) {
                    t && e && (this._Str_14932 = this._color, this._Str_17003 = this._Str_3576, this._Str_11287 = t.color, this._Str_16460 = t.light, this._Str_9785 = this.time, this._Str_17191 = 1500, e.setValue(j.ROOM_COLORIZE_BG_ONLY, t.backgroundOnly))
                }
                mouseEvent(t, e) {
                    if (!(t && e && this.object && this.object.model)) return;
                    const s = t.spriteTag;
                    let i = 0;
                    if (s && s.indexOf("@") >= 0 && (i = parseInt(s.substr(s.indexOf("@") + 1))), i < 1 || i > this._planeParser.planeCount) return void(t.type === sl.ROLL_OUT && this.object.model.setValue(j.ROOM_SELECTED_PLANE, 0));
                    i--;
                    let n = null;
                    const r = this._planeParser.getPlaneLocation(i),
                        o = this._planeParser.getPlaneLeftSide(i),
                        a = this._planeParser.getPlaneRightSide(i),
                        c = this._planeParser.getPlaneNormalDirection(i),
                        _ = this._planeParser.getPlaneType(i);
                    if (null == r || null == o || null == a || null == c) return;
                    const h = o.length,
                        l = a.length;
                    if (0 == h || 0 == l) return;
                    const d = new u.j(t.screenX, t.screenY);
                    if (n = e.getPlanePosition(d, r, o, a), !n) return void this.object.model.setValue(j.ROOM_SELECTED_PLANE, 0);
                    const g = K.product(o, n.x / h);
                    g.add(K.product(a, n.y / l)), g.add(r);
                    const m = g.x,
                        p = g.y,
                        b = g.z;
                    if (!(n.x >= 0 && n.x < h && n.y >= 0 && n.y < l)) return void this.object.model.setValue(j.ROOM_SELECTED_PLANE, 0);
                    this.object.model.setValue(j.ROOM_SELECTED_X, m), this.object.model.setValue(j.ROOM_SELECTED_Y, p), this.object.model.setValue(j.ROOM_SELECTED_Z, b), this.object.model.setValue(j.ROOM_SELECTED_PLANE, i + 1);
                    let E = null;
                    switch (t.type === sl.MOUSE_MOVE || t.type === sl.ROLL_OVER ? E = tl.MOUSE_MOVE : t.type === sl.MOUSE_CLICK && (E = tl.CLICK), t.type) {
                        case sl.MOUSE_MOVE:
                        case sl.ROLL_OVER:
                        case sl.MOUSE_CLICK:
                            {
                                let e = null;
                                if (_ === ko.PLANE_FLOOR) e = new fg(E, this.object, t._Str_3463, m, p, b, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown);
                                else if (_ === ko.PLANE_WALL || _ === ko.PLANE_LANDSCAPE) {
                                    let s = 90;
                                    c && (s = c.x + 90, s > 360 && (s -= 360)), e = new Sg(E, this.object, t._Str_3463, r, o, a, o.length * n.x / h, a.length * n.y / l, s, t.altKey, t.ctrlKey, t.shiftKey, t.buttonDown)
                                }
                                return void(this.eventDispatcher && this.eventDispatcher.dispatchEvent(e))
                            }
                    }
                }
            }
            class Sm extends Mg {
                initialize(t) {
                    this.object && (this.object.model.setValue(j.FURNITURE_ALPHA_MULTIPLIER, 1), this.object.setState(1, 0))
                }
                processUpdateMessage(t) {
                    if (super.processUpdateMessage(t), t instanceof Og && this.object) switch (t.type) {
                        case Og.ENABLED:
                            return void this.object.setState(0, 0);
                        case Og.DISABLED:
                            return void this.object.setState(1, 0)
                    }
                }
            }
            let Im = (() => {
                    class t extends Mg {
                        constructor() {
                            super(), this._lastEventId = null, this._isHidden = !1
                        }
                        initialize(e) {
                            this.object && (this.object.model.setValue(j.FURNITURE_ALPHA_MULTIPLIER, 1), this.object.setState(t.CURSOR_HIDDEN_STATE, 0))
                        }
                        processUpdateMessage(e) {
                            e instanceof Tg && (this._lastEventId && this._lastEventId === e._Str_20637 || (e.toggleVisibility && (this._isHidden = !this._isHidden), super.processUpdateMessage(e), this.object && (this._isHidden ? this.object.setState(t.CURSOR_HIDDEN_STATE, 0) : e.visible ? (this.object.model.setValue(j.TILE_CURSOR_HEIGHT, e.height), this.object.setState(e.height > .8 ? t.CURSOR_HEIGHT_STATE : t.CURSOR_VISIBLE_STATE)) : this.object.setState(t.CURSOR_HIDDEN_STATE, 0)), this._lastEventId = e._Str_20637))
                        }
                    }
                    return t.CURSOR_VISIBLE_STATE = 0, t.CURSOR_HIDDEN_STATE = 1, t.CURSOR_HEIGHT_STATE = 6, t
                })(),
                Rm = (() => {
                    class t {}
                    return t.FURNITURE_BASIC = "furniture_basic", t.FURNITURE_MULTISTATE = "furniture_multistate", t.FURNITURE_MULTIHEIGHT = "furniture_multiheight", t.FURNITURE_RANDOMSTATE = "furniture_randomstate", t.FURNITURE_PLACEHOLDER = "furniture_placeholder", t.FURNITURE_CREDIT = "furniture_credit", t.FURNITURE_STICKIE = "furniture_stickie", t.FURNITURE_PRESENT = "furniture_present", t.FURNITURE_TROPHY = "furniture_trophy", t.FURNITURE_ECOTRON_BOX = "furniture_ecotron_box", t.FURNITURE_DICE = "furniture_dice", t.FURNITURE_HOCKEY_SCORE = "furniture_hockey_score", t.FURNITURE_HABBOWHEEL = "furniture_habbowheel", t.FURNITURE_ONE_WAY_DOOR = "furniture_one_way_door", t.FURNITURE_PLANET_SYSTEM = "furniture_planet_system", t.FURNITURE_WINDOW = "furniture_window", t.FURNITURE_EXTERNAL_IMAGE_WALLITEM = "furniture_external_image_wallitem", t.FURNITURE_ROOMDIMMER = "furniture_roomdimmer", t.FURNITURE_SOUND_MACHINE = "furniture_sound_machine", t.FURNITURE_JUKEBOX = "furniture_jukebox", t.FURNITURE_CRACKABLE = "furniture_crackable", t.FURNITURE_PUSHABLE = "furniture_pushable", t.FURNITURE_CLOTHING_CHANGE = "furniture_clothing_change", t.FURNITURE_COUNTER_CLOCK = "furniture_counter_clock", t.FURNITURE_SCORE = "furniture_score", t.FURNITURE_ES = "furniture_es", t.FURNITURE_FIREWORKS = "furniture_fireworks", t.FURNITURE_SONG_DISK = "furniture_song_disk", t.FURNITURE_BB = "furniture_bb", t.FURNITURE_BG = "furniture_bg", t.FURNITURE_WELCOME_GIFT = "furniture_welcome_gift", t.FURNITURE_FLOOR_HOLE = "furniture_floor_hole", t.FURNITURE_MANNEQUIN = "furniture_mannequin", t.FURNITURE_GUILD_CUSTOMIZED = "furniture_guild_customized", t.FURNITURE_GROUP_FORUM_TERMINAL = "furniture_group_forum_terminal", t.FURNITURE_PET_CUSTOMIZATION = "furniture_pet_customization", t.FURNITURE_CUCKOO_CLOCK = "furniture_cuckoo_clock", t.FURNITURE_VOTE_COUNTER = "furniture_vote_counter", t.FURNITURE_VOTE_MAJORITY = "furniture_vote_majority", t.FURNITURE_SOUNDBLOCK = "furniture_soundblock", t.FURNITURE_RANDOM_TELEPORT = "furniture_random_teleport", t.FURNITURE_MONSTERPLANT_SEED = "furniture_monsterplant_seed", t.FURNITURE_PURCHASABLE_CLOTHING = "furniture_purchasable_clothing", t.FURNITURE_BACKGROUND_COLOR = "furniture_background_color", t.FURNITURE_MYSTERYBOX = "furniture_mysterybox", t.FURNITURE_EFFECTBOX = "furniture_effectbox", t.FURNITURE_MYSTERYTROPHY = "furniture_mysterytrophy", t.FURNITURE_ACHIEVEMENT_RESOLUTION = "furniture_achievement_resolution", t.FURNITURE_LOVELOCK = "furniture_lovelock", t.FURNITURE_WILDWEST_WANTED = "furniture_wildwest_wanted", t.FURNITURE_HWEEN_LOVELOCK = "furniture_hween_lovelock", t.FURNITURE_BADGE_DISPLAY = "furniture_badge_display", t.FURNITURE_HIGH_SCORE = "furniture_high_score", t.FURNITURE_INTERNAL_LINK = "furniture_internal_link", t.FURNITURE_CUSTOM_STACK_HEIGHT = "furniture_custom_stack_height", t.FURNITURE_YOUTUBE = "furniture_youtube", t.FURNITURE_RENTABLE_SPACE = "furniture_rentable_space", t.FURNITURE_CHANGE_STATE_WHEN_STEP_ON = "furniture_change_state_when_step_on", t.FURNITURE_VIMEO = "furniture_vimeo", t.FURNITURE_EDITABLE_INTERNAL_LINK = "furniture_editable_internal_link", t.FURNITURE_EDITABLE_ROOM_LINK = "furniture_editable_room_link", t.FURNITURE_CRAFTING_GIZMO = "furniture_crafting_gizmo", t.ROOM = "room", t.USER = "user", t.BOT = "bot", t.RENTABLE_BOT = "rentable_bot", t.PET = "pet", t.TILE_CURSOR = "tile_cursor", t.SELECTION_ARROW = "selection_arrow", t.GAME_SNOWBALL = "game_snowball", t.GAME_SNOWSPLASH = "game_snowsplash", t
                })(),
                vm = (() => {
                    class t extends Gg {
                        constructor() {
                            super(...arguments), this._state = -1
                        }
                        get engravingDialogType() {
                            return 0
                        }
                        initialize(t) {
                            super.initialize(t), this.object && this.object.model.setValue(j.FURNITURE_FRIENDFURNI_ENGRAVING, this.engravingDialogType)
                        }
                        processUpdateMessage(t) {
                            if (t instanceof eu) {
                                const e = t.data;
                                this._state = e ? e.state : t.state
                            }
                            super.processUpdateMessage(t)
                        }
                        getEventTypes() {
                            const t = [Ig.FRIEND_FURNITURE_ENGRAVING];
                            return this.mergeTypes(super.getEventTypes(), t)
                        }
                        useObject() {
                            this._state == t.STATE_LOCKED ? this.object && this.eventDispatcher && this.eventDispatcher.dispatchEvent(new Ig(Ig.FRIEND_FURNITURE_ENGRAVING, this.object)) : super.useObject()
                        }
                    }
                    return t.STATE_UNINITIALIZED = -1, t.STATE_UNLOCKED = 0, t.STATE_LOCKED = 1, t
                })();
            class Tm {
                constructor() {
                    this._events = new m, this._cachedEvents = new Map, this._registeredEvents = new Map, this._functions = []
                }
                getLogic(t) {
                    const e = this.getLogicType(t);
                    if (!e) return null;
                    const s = new e;
                    if (!s) return null;
                    if (s.eventDispatcher = this._events, !this._cachedEvents.get(t)) {
                        this._cachedEvents.set(t, !0);
                        const e = s.getEventTypes();
                        for (const t of e) t && this.registerEventType(t)
                    }
                    return s
                }
                registerEventType(t) {
                    if (!this._registeredEvents.get(t)) {
                        this._registeredEvents.set(t, !0);
                        for (const e of this._functions) e && this._events.addEventListener(t, e)
                    }
                }
                registerEventFunction(t) {
                    if (t && !(this._functions.indexOf(t) >= 0)) {
                        this._functions.push(t);
                        for (const e of this._registeredEvents.keys()) e && this._events.addEventListener(e, t)
                    }
                }
                removeEventFunction(t) {
                    if (!t) return;
                    const e = this._functions.indexOf(t);
                    if (-1 !== e) {
                        this._functions.splice(e, 1);
                        for (const e of this._registeredEvents.keys()) e && this._events.removeEventListener(e, t)
                    }
                }
                getLogicType(t) {
                    if (!t) return null;
                    let e = null;
                    switch (t) {
                        case Rm.ROOM:
                            e = fm;
                            break;
                        case Rm.TILE_CURSOR:
                            e = Im;
                            break;
                        case Rm.SELECTION_ARROW:
                            e = Sm;
                            break;
                        case Rm.USER:
                        case Rm.BOT:
                        case Rm.RENTABLE_BOT:
                            e = Dg;
                            break;
                        case Rm.PET:
                            e = bm;
                            break;
                        case Rm.FURNITURE_BASIC:
                            e = Ng;
                            break;
                        case Rm.FURNITURE_BADGE_DISPLAY:
                            e = wg;
                            break;
                        case Rm.FURNITURE_CHANGE_STATE_WHEN_STEP_ON:
                            e = Lg;
                            break;
                        case Rm.FURNITURE_COUNTER_CLOCK:
                            e = xg;
                            break;
                        case Rm.FURNITURE_CREDIT:
                            e = Pg;
                            break;
                        case Rm.FURNITURE_CUSTOM_STACK_HEIGHT:
                            e = Yg;
                            break;
                        case Rm.FURNITURE_DICE:
                            e = kg;
                            break;
                        case Rm.FURNITURE_EDITABLE_INTERNAL_LINK:
                            e = Vg;
                            break;
                        case Rm.FURNITURE_EDITABLE_ROOM_LINK:
                            e = Zg;
                            break;
                        case Rm.FURNITURE_EXTERNAL_IMAGE_WALLITEM:
                            e = jg;
                            break;
                        case Rm.FURNITURE_FIREWORKS:
                            e = Bg;
                            break;
                        case Rm.FURNITURE_FLOOR_HOLE:
                            e = Hg;
                            break;
                        case Rm.FURNITURE_GUILD_CUSTOMIZED:
                            e = Wg;
                            break;
                        case Rm.FURNITURE_HIGH_SCORE:
                            e = zg;
                            break;
                        case Rm.FURNITURE_HOCKEY_SCORE:
                            e = Kg;
                            break;
                        case Rm.FURNITURE_ES:
                            e = Xg;
                            break;
                        case Rm.FURNITURE_MANNEQUIN:
                            e = qg;
                            break;
                        case Rm.FURNITURE_MULTIHEIGHT:
                            e = Jg;
                            break;
                        case Rm.FURNITURE_MULTISTATE:
                            e = Gg;
                            break;
                        case Rm.FURNITURE_ONE_WAY_DOOR:
                            e = Qg;
                            break;
                        case Rm.FURNITURE_PET_CUSTOMIZATION:
                            e = $g;
                            break;
                        case Rm.FURNITURE_PRESENT:
                            e = tm;
                            break;
                        case Rm.FURNITURE_PURCHASABLE_CLOTHING:
                            e = em;
                            break;
                        case Rm.FURNITURE_PUSHABLE:
                            e = sm;
                            break;
                        case Rm.FURNITURE_BACKGROUND_COLOR:
                            e = im;
                            break;
                        case Rm.FURNITURE_BG:
                            e = am;
                            break;
                        case Rm.FURNITURE_BB:
                            e = cm;
                            break;
                        case Rm.FURNITURE_ROOMDIMMER:
                            e = _m;
                            break;
                        case Rm.FURNITURE_SCORE:
                            e = hm;
                            break;
                        case Rm.FURNITURE_SOUNDBLOCK:
                            e = lm;
                            break;
                        case Rm.FURNITURE_STICKIE:
                            e = um;
                            break;
                        case Rm.FURNITURE_TROPHY:
                            e = dm;
                            break;
                        case Rm.FURNITURE_VOTE_COUNTER:
                            e = gm;
                            break;
                        case Rm.FURNITURE_VOTE_MAJORITY:
                            e = mm;
                            break;
                        case Rm.FURNITURE_WINDOW:
                            e = pm;
                            break;
                        case Rm.FURNITURE_LOVELOCK:
                            e = vm;
                            break;
                        default:
                            e = Ng
                    }
                    return e || (g.log("Unknown Logic: " + t), null)
                }
                get events() {
                    return this._events
                }
            }
            class Om {
                constructor(t, e, s, i, n, r, o, a = NaN, c = -1, _ = 0, h = 0, l = "", u = !0, d = !0, g = -1) {
                    this._id = t, this._typeId = e, this._type = s, this._state = r, this._data = o, this._extra = a, this._expiryTime = c, this._usagePolicy = _, this._ownerId = h, this._ownerName = l, this._synchronized = u, this._realRoomObject = d, this._sizeZ = g, this._location = new K, this._direction = new K, this._location.assign(i), this._direction.assign(n)
                }
                get id() {
                    return this._id
                }
                get typeId() {
                    return this._typeId
                }
                get type() {
                    return this._type
                }
                get location() {
                    return this._location
                }
                get direction() {
                    return this._direction
                }
                get state() {
                    return this._state
                }
                get data() {
                    return this._data
                }
                get extra() {
                    return this._extra
                }
                get expiryTime() {
                    return this._expiryTime
                }
                get usagePolicy() {
                    return this._usagePolicy
                }
                get ownerId() {
                    return this._ownerId
                }
                get ownerName() {
                    return this._ownerName
                }
                get synchronized() {
                    return this._synchronized
                }
                get realRoomObject() {
                    return this._realRoomObject
                }
                get sizeZ() {
                    return this._sizeZ
                }
            }
            class ym {
                constructor(t, e) {
                    this._roomId = t, this._data = e, this._floorType = null, this._wallType = null, this._landscapeType = null
                }
                get roomId() {
                    return this._roomId
                }
                get data() {
                    return this._data
                }
                get floorType() {
                    return this._floorType
                }
                set floorType(t) {
                    this._floorType = t
                }
                get wallType() {
                    return this._wallType
                }
                set wallType(t) {
                    this._wallType = t
                }
                get landscapeType() {
                    return this._landscapeType
                }
                set landscapeType(t) {
                    this._landscapeType = t
                }
            }
            let Am = (() => {
                class t {
                    constructor() {
                        this._targetId = -1, this._targetCategory = -2, this._targetLoc = null, this._moveDistance = 0, this._previousMoveSpeed = 0, this._maintainPreviousMoveSpeed = !1, this._currentLoc = null, this._limitedLocX = !1, this._limitedLocY = !1, this._centeredLocX = !1, this._centeredLocY = !1, this._screenWd = 0, this._screenHt = 0, this._scale = 0, this._roomWd = 0, this._roomHt = 0, this._geometryUpdateId = -1, this._scaleChanged = !1, this._targetObjectLoc = new K
                    }
                    get location() {
                        return this._currentLoc
                    }
                    get _Str_10760() {
                        return this._targetId
                    }
                    set _Str_10760(t) {
                        this._targetId = t
                    }
                    get _Str_16562() {
                        return this._targetCategory
                    }
                    set _Str_16562(t) {
                        this._targetCategory = t
                    }
                    get _Str_16185() {
                        return this._targetObjectLoc
                    }
                    set _Str_16185(t) {
                        this._targetObjectLoc.assign(t)
                    }
                    get _Str_10235() {
                        return this._limitedLocX
                    }
                    set _Str_10235(t) {
                        this._limitedLocX = t
                    }
                    get _Str_10446() {
                        return this._limitedLocY
                    }
                    set _Str_10446(t) {
                        this._limitedLocY = t
                    }
                    get _Str_8564() {
                        return this._centeredLocX
                    }
                    set _Str_8564(t) {
                        this._centeredLocX = t
                    }
                    get _Str_8690() {
                        return this._centeredLocY
                    }
                    set _Str_8690(t) {
                        this._centeredLocY = t
                    }
                    get _Str_7609() {
                        return this._screenWd
                    }
                    set _Str_7609(t) {
                        this._screenWd = t
                    }
                    get _Str_7902() {
                        return this._screenHt
                    }
                    set _Str_7902(t) {
                        this._screenHt = t
                    }
                    get scale() {
                        return this._scale
                    }
                    set scale(t) {
                        this._scale != t && (this._scale = t, this._scaleChanged = !0)
                    }
                    get _Str_18975() {
                        return this._roomWd
                    }
                    set _Str_18975(t) {
                        this._roomWd = t
                    }
                    get _Str_15953() {
                        return this._roomHt
                    }
                    set _Str_15953(t) {
                        this._roomHt = t
                    }
                    get _Str_16377() {
                        return this._geometryUpdateId
                    }
                    set _Str_16377(t) {
                        this._geometryUpdateId = t
                    }
                    get _Str_12536() {
                        return null != this._targetLoc && null != this._currentLoc
                    }
                    set target(t) {
                        let e;
                        null == this._targetLoc && (this._targetLoc = new K), this._targetLoc.x == t.x && this._targetLoc.y == t.y && this._targetLoc.z == t.z || (this._targetLoc.assign(t), e = K.dif(this._targetLoc, this._currentLoc), this._moveDistance = e.length, this._maintainPreviousMoveSpeed = !0)
                    }
                    dispose() {
                        this._targetLoc = null, this._currentLoc = null
                    }
                    _Str_20685(t) {
                        null == this._currentLoc && (this._currentLoc = new K, this._currentLoc.assign(t))
                    }
                    _Str_25467(t) {
                        null == this._currentLoc && (this._currentLoc = new K), this._currentLoc.assign(t)
                    }
                    update(e, s) {
                        let i, n, r, o, a;
                        if (this._followDuration > 0 && null != this._targetLoc && null != this._currentLoc) {
                            if (this._scaleChanged) return this._scaleChanged = !1, this._currentLoc = this._targetLoc, void(this._targetLoc = null);
                            i = K.dif(this._targetLoc, this._currentLoc), i.length > this._moveDistance && (this._moveDistance = i.length), i.length <= s ? (this._currentLoc = this._targetLoc, this._targetLoc = null, this._previousMoveSpeed = 0) : (n = Math.sin(Math.PI * i.length / this._moveDistance), r = .5 * s, o = this._moveDistance / t.MOVE_SPEED_DENOMINATOR, a = r + (o - r) * n, this._maintainPreviousMoveSpeed && (a < this._previousMoveSpeed ? (a = this._previousMoveSpeed, a > i.length && (a = i.length)) : this._maintainPreviousMoveSpeed = !1), this._previousMoveSpeed = a, i.divide(i.length), i.multiply(a), this._currentLoc = K.sum(this._currentLoc, i))
                        }
                    }
                    reset() {
                        this._geometryUpdateId = -1
                    }
                    _Str_19465(t) {
                        this._followDuration = t
                    }
                }
                return t.MOVE_SPEED_DENOMINATOR = 12, t
            })();
            class Cm {
                constructor(t, e) {
                    this._tileObjectMap = new Map;
                    let s = 0;
                    for (; s < e;) this._tileObjectMap.set(s, new Map), s++;
                    this._width = t, this._height = e
                }
                clear() {
                    for (const t of this._tileObjectMap.values()) t && t.clear();
                    this._tileObjectMap.clear()
                }
                populate(t) {
                    this.clear();
                    for (const e of t) this._Str_21192(e)
                }
                dispose() {
                    this._tileObjectMap = null, this._width = 0, this._height = 0
                }
                _Str_19056(t, e) {
                    if (t >= 0 && t < this._width && e >= 0 && e < this._height) {
                        const s = this._tileObjectMap.get(e);
                        if (s) return s.get(t)
                    }
                    return null
                }
                _Str_23932(t, e, s) {
                    if (s.isReady) {
                        if (t >= 0 && t < this._width && e >= 0 && e < this._height) {
                            const i = this._tileObjectMap.get(e);
                            i && i.set(t, s)
                        }
                    } else g.log("Assigning non initialized object to tile object map!")
                }
                _Str_21192(t) {
                    if (!t || !t.model || !t.isReady) return;
                    const e = t.getLocation(),
                        s = t.getDirection();
                    if (!e || !s) return;
                    let i = t.model.getValue(j.FURNITURE_SIZE_X),
                        n = t.model.getValue(j.FURNITURE_SIZE_Y);
                    i < 1 && (i = 1), n < 1 && (n = 1);
                    const r = Math.trunc(s.x + 45) % 360 / 90;
                    1 !== r && 3 !== r || ([i, n] = [n, i]);
                    let o = e.y;
                    for (; o < e.y + n;) {
                        let s = e.x;
                        for (; s < e.x + i;) {
                            const i = this._Str_19056(s, o);
                            (!i || i !== t && i.getLocation().z <= e.z) && this._Str_23932(s, o, t), s++
                        }
                        o++
                    }
                }
            }
            class Mm {
                constructor(t) {
                    this._roomId = t, this._modelName = null, this._legacyGeometry = new rg, this._tileObjectMap = null, this._roomCamera = new Am, this._selectedObject = null, this._placedObject = null, this._furnitureStackingHeightMap = null, this._floorStack = new Map, this._wallStack = new Map, this._mouseButtonCursorOwners = []
                }
                dispose() {}
                setModelName(t) {
                    this._modelName = t
                }
                setSelectedObject(t) {
                    this._selectedObject && this._selectedObject.dispose(), this._selectedObject = t
                }
                setPlacedObject(t) {
                    this._placedObject && this._placedObject.dispose(), this._placedObject = t
                }
                setFurnitureStackingHeightMap(t) {
                    this._furnitureStackingHeightMap && this._furnitureStackingHeightMap.dispose(), this._furnitureStackingHeightMap = t, this._tileObjectMap && this._tileObjectMap.dispose(), this._furnitureStackingHeightMap && (this._tileObjectMap = new Cm(this._furnitureStackingHeightMap.width, this._furnitureStackingHeightMap.height))
                }
                addPendingFurnitureFloor(t) {
                    t && (this._floorStack.delete(t.id), this._floorStack.set(t.id, t))
                }
                removePendingFunitureFloor(t) {
                    const e = this._floorStack.get(t);
                    return e ? (this._floorStack.delete(t), e) : null
                }
                getPendingFurnitureFloor(t) {
                    const e = this._floorStack.get(t);
                    return e ? (this._floorStack.delete(t), e) : null
                }
                getNextPendingFurnitureFloor() {
                    if (!this._floorStack.size) return null;
                    const t = this._floorStack.keys();
                    return this.getPendingFurnitureFloor(t.next().value)
                }
                addPendingFurnitureWall(t) {
                    t && (this._wallStack.delete(t.id), this._wallStack.set(t.id, t))
                }
                removePendingFurnitureWall(t) {
                    const e = this._wallStack.get(t);
                    return e ? (this._wallStack.delete(t), e) : null
                }
                getPendingFurnitureWall(t) {
                    const e = this._wallStack.get(t);
                    return e ? (this._wallStack.delete(t), e) : null
                }
                getNextPendingFurnitureWall() {
                    if (!this._wallStack.size) return null;
                    const t = this._wallStack.keys();
                    return this.getPendingFurnitureWall(t.next().value)
                }
                _Str_16810(t) {
                    return -1 === this._mouseButtonCursorOwners.indexOf(t) && (this._mouseButtonCursorOwners.push(t), !0)
                }
                _Str_11959(t) {
                    const e = this._mouseButtonCursorOwners.indexOf(t);
                    return e > -1 && (this._mouseButtonCursorOwners.splice(e, 1), !0)
                }
                _Str_22598() {
                    return this._mouseButtonCursorOwners.length > 0
                }
                get roomId() {
                    return this._roomId
                }
                get modelName() {
                    return this._modelName
                }
                get legacyGeometry() {
                    return this._legacyGeometry
                }
                get tileObjectMap() {
                    return this._tileObjectMap
                }
                get roomCamera() {
                    return this._roomCamera
                }
                get selectedObject() {
                    return this._selectedObject
                }
                get placedObject() {
                    return this._placedObject
                }
                get furnitureStackingHeightMap() {
                    return this._furnitureStackingHeightMap
                }
            }
            class Um {
                constructor(t, e) {
                    this._object = t, this._groupBadge = e
                }
                get object() {
                    return this._object
                }
                get groupBadge() {
                    return this._groupBadge
                }
            }
            let Dm = (() => {
                    class t {
                        constructor() {
                            this._Str_3008 = 0, this._Str_18433 = 0
                        }
                        static _Str_22230(e, s) {
                            const i = [];
                            for (const n of e)
                                if (n)
                                    if ("boutique_mannequin1" === n.type && 0 === n.name.indexOf("mannequin_")) {
                                        const e = s.getRoomObject(s.activeRoomId, n.objectId, V.FLOOR);
                                        if (e) {
                                            const s = e.visualization.getSpriteList();
                                            if (s)
                                                for (const e of s) e.x = e.x + (n.x + n.width / 2 + t._Str_16967), e.y = e.y + (n.y + n.height + t._Str_18197), e.z = e.z + n.z, i.push(e)
                                        }
                                    } else i.push(n);
                            return i
                        }
                        static _Str_22564(t, e) {
                            return t.z < e.z ? 1 : -1
                        }
                        static _Str_20789(t, e, s) {
                            return !0
                        }
                        static _Str_14110(t, e, s, i) {
                            const n = [];
                            if (t.x == e.x ? n.push(t, s, e, i) : t.x == s.x ? n.push(t, e, s, i) : e.x < t.x && e.y > t.y || e.x > t.x && e.y < t.y ? n.push(t, s, e, i) : n.push(t, e, s, i), n[0].x < n[1].x) {
                                let t = n[0];
                                n[0] = n[1], n[1] = t, t = n[2], n[2] = n[3], n[3] = t
                            }
                            if (n[0].y < n[2].y) {
                                let t = n[0];
                                n[0] = n[2], n[2] = t, t = n[1], n[1] = n[3], n[3] = t
                            }
                            return n
                        }
                        _Str_4536(e, s, i, n) {
                            const r = [];
                            let o = s.getSortableSpriteList();
                            const a = i._Str_21072(i.activeRoomId, V.UNIT);
                            for (const c of a)
                                if (c.id !== n) {
                                    const e = c.visualization.getSpriteList();
                                    if (e) {
                                        let n = 0,
                                            r = 0;
                                        for (const t of o)
                                            if (t.name === "avatar_" + c.id) {
                                                n = t.z, r = t.y + t.height - s.geometry.scale / 4;
                                                break
                                            }
                                        const a = i.getRoomObjectScreenLocation(i.activeRoomId, c.id, V.UNIT, s.id);
                                        if (a) {
                                            0 === r && (r = a.y);
                                            for (const i of e) i.x = i.x + (a.x - s.screenOffsetX), i.y = i.y + r, i.z = i.z + n, 0 !== i.name.indexOf("h_std_fx29_") && 0 !== i.name.indexOf("h_std_fx185_") || (i.y = i.y + t._Str_18565), o.push(i)
                                        }
                                    }
                                }
                            o = t._Str_22230(o, i), o.sort(t._Str_22564);
                            for (const c of o) null !== c.name && c.name.length > 0 && 0 !== c.name.indexOf("tile_cursor_") && t._Str_20789(c, e, s) && (n < 0 || c.objectId != n) && (r.push(this._Str_25132(c, e, s, i)), this._Str_6409 || (this._Str_6409 = c.z), this._Str_3008++);
                            return JSON.stringify(r)
                        }
                        _Str_24177(t) {
                            return JSON.stringify(new Object)
                        }
                        _Str_25132(e, s, i, n) {
                            let r = [];
                            const o = {};
                            let a = e.name;
                            return -1 !== e.name.indexOf("@") && (r = e.name.split("@"), a = r[0]), o.name = a, o.x = e.x - s.x, o.y = e.y - s.y, o.x = o.x + i.screenOffsetX, o.y = o.y + i.screenOffsetY, o.z = e.z, e.alpha && "255" !== e.alpha.toString() && (o.alpha = e.alpha), e.flipH && (o.flipH = e.flipH), e.skew && (o.skew = e.skew), e.frame && (o.frame = e.frame), e.color && e.color.length > 0 && (o.color = parseInt(e.color)), e.blendMode && "normal" !== e.blendMode && (o.blendMode = e.blendMode), 0 === a.indexOf("http") && (o.width = e.width, o.height = e.height, this._Str_18433++, this._Str_18433 > t._Str_17558 && (o.name = "box")), e.posture && (o.posture = e.posture), o
                        }
                        _Str_25196(e, s, i) {
                            const n = new u.j(0, 0),
                                r = new u.j(e.width, 0),
                                o = new u.j(0, e.height),
                                a = new u.j(e.width, e.height),
                                c = t._Str_14110(n, r, o, a);
                            let _ = 0;
                            i.length > 0 ? (_ = i[0].z, this._Str_6409 && (_ = Math.max(this._Str_6409, _))) : _ = this._Str_6409 ? this._Str_6409 : 0, _ += 1.776104 * this._Str_3008 + 2.31743 * i.length;
                            const h = new vd(null, s);
                            return h.cornerPoints = c, h.z = _, h
                        }
                        _Str_25623(t, e, s) {
                            const i = new Map;
                            let n = 1;
                            this._Str_6409 && (n += this._Str_6409);
                            for (const a of t) i.set(a.uniqueId, {
                                plane: a,
                                z: n
                            });
                            const r = e._Str_14588();
                            r.sort((t, e) => e.z - t.z), r.reverse();
                            let o = [];
                            for (const a of r) {
                                const t = a.sprite;
                                if (t) {
                                    const e = i.get(t.id);
                                    e && (i.delete(t.id), e.z = a.z, o.push(e))
                                }
                            }
                            return o = o.concat(Array.from(i.values())), o
                        }
                        _Str_22985(e, s, i, n) {
                            const r = [],
                                o = i.getRoomObject(i.activeRoomId, Nm.ROOM_OBJECT_ID, V.ROOM).visualization;
                            if (o) {
                                const a = s.geometry,
                                    c = this._Str_25623(o._Str_19113, s, i),
                                    _ = cp.instance.stage;
                                for (const i of c) {
                                    const n = i.plane,
                                        o = [],
                                        c = K.sum(n.location, n._Str_5424),
                                        h = a.getScreenPoint(n.location),
                                        l = a.getScreenPoint(c),
                                        u = a.getScreenPoint(K.sum(n.location, n._Str_4968)),
                                        d = a.getScreenPoint(K.sum(c, n._Str_4968));
                                    o.push(h, l, u, d);
                                    let g = 0,
                                        m = 0;
                                    for (const t of o) t.x += _.width / 2, t.y += _.height / 2, t.x += s.screenOffsetX, t.y += s.screenOffsetY, t.x += -e.x, t.y += -e.y, t.x < 0 ? g-- : t.x >= e.width && g++, t.y < 0 ? m-- : t.y >= e.height && m++;
                                    if (4 === Math.abs(g) || 4 === Math.abs(m));
                                    else {
                                        const e = t._Str_14110(h, l, u, d);
                                        for (const t of n._Str_22136(a)) t.cornerPoints = e, t.z = i.z, r.push(t)
                                    }
                                }
                                r.unshift(this._Str_25196(e, n, r))
                            }
                            return r
                        }
                    }
                    return t._Str_16967 = 1, t._Str_18197 = -16, t._Str_18565 = -52, t._Str_17558 = 30, t
                })(),
                Nm = (() => {
                    class t extends L {
                        constructor(t) {
                            super(), this._communication = t, this._sessionDataManager = null, this._roomSessionManager = null, this._roomManager = null, this._roomObjectEventHandler = new Cg(this), this._roomMessageHandler = new og(this), this._roomContentLoader = new H, this._ready = !1, this._activeRoomId = -1, this._activeRoomActiveCanvas = -1, this._roomInstanceDatas = new Map, this._roomDatas = new Map, this._roomRendererFactory = new pl, this._visualizationFactory = new eg, this._logicFactory = new Tm, this._activeRoomActiveCanvasMouseX = 0, this._activeRoomActiveCanvasMouseY = 0, this._activeRoomIsDragged = !1, this._activeRoomWasDragged = !1, this._activeRoomDragStartX = 0, this._activeRoomDragStartY = 0, this._activeRoomDragX = 0, this._activeRoomDragY = 0, this._skipFurnitureCreationForNextFrame = !1, this._mouseCursorUpdate = !1, this._imageObjectIdBank = null, this._imageCallbacks = new Map, this._thumbnailCallbacks = new Map, this._roomDraggingAlwaysCenters = !1, this._roomAllowsDragging = !0, this._badgeListenerObjects = new Map, this.runVisibilityUpdate = this.runVisibilityUpdate.bind(this), this.processRoomObjectEvent = this.processRoomObjectEvent.bind(this), this.onRoomSessionEvent = this.onRoomSessionEvent.bind(this), this.onBadgeImageReadyEvent = this.onBadgeImageReadyEvent.bind(this)
                        }
                        onInit() {
                            this._ready || (this._imageObjectIdBank = new bl(1e3), this._thumbnailObjectIdBank = new bl(1e3), this._logicFactory.registerEventFunction(this.processRoomObjectEvent), this._roomManager && (this._roomManager.setContentLoader(this._roomContentLoader), this._roomManager.addUpdateCategory(V.FLOOR), this._roomManager.addUpdateCategory(V.WALL), this._roomManager.addUpdateCategory(V.UNIT), this._roomManager.addUpdateCategory(V.CURSOR), this._roomManager.addUpdateCategory(V.ROOM)), this._roomMessageHandler.setConnection(this._communication.connection), this._roomContentLoader.initialize(this.events), this._roomContentLoader.setSessionDataManager(this._sessionDataManager), this._roomContentLoader.setIconListener(this), this._roomSessionManager && (this._roomSessionManager.events.addEventListener(Tl.STARTED, this.onRoomSessionEvent), this._roomSessionManager.events.addEventListener(Tl.ENDED, this.onRoomSessionEvent)), cp.instance.ticker.add(this.update, this), document.addEventListener("visibilitychange", this.runVisibilityUpdate))
                        }
                        onDispose() {
                            if (this._ready) {
                                for (const [t, e] of this._roomInstanceDatas) this.removeRoomInstance(t);
                                document.removeEventListener("visibilitychange", this.runVisibilityUpdate), cp.instance.ticker.remove(this.update, this), this._roomObjectEventHandler && this._roomObjectEventHandler.dispose(), this._roomMessageHandler && this._roomMessageHandler.dispose(), this._roomSessionManager && (this._roomSessionManager.events.removeEventListener(Tl.STARTED, this.onRoomSessionEvent), this._roomSessionManager.events.removeEventListener(Tl.ENDED, this.onRoomSessionEvent))
                            }
                        }
                        onRoomSessionEvent(t) {
                            if (t instanceof Tl) switch (t.type) {
                                case Tl.STARTED:
                                    return void(this._roomMessageHandler && this._roomMessageHandler.setRoomId(t.session.roomId));
                                case Tl.ENDED:
                                    return void(this._roomMessageHandler && (this._roomMessageHandler.clearRoomId(), this.removeRoomInstance(t.session.roomId)))
                            }
                        }
                        setActiveRoomId(t) {
                            this._activeRoomId = t
                        }
                        destroyRoom(t) {
                            this.removeRoomInstance(t)
                        }
                        getRoomInstance(t) {
                            return this._roomManager && this._roomManager.getRoomInstance(this.getRoomId(t)) || null
                        }
                        removeRoomInstance(t) {
                            this.getRoomInstance(t) && this._roomManager && this._roomManager.removeRoomInstance(this.getRoomId(t));
                            const e = this._roomInstanceDatas.get(t);
                            e && (this._roomInstanceDatas.delete(e.roomId), e.dispose()), this.events.dispatchEvent(new Qh(Qh.DISPOSED, t))
                        }
                        createRoomInstance(t, e) {
                            let s = "111",
                                i = "201",
                                n = "1";
                            if (!this._ready) {
                                let r = this._roomDatas.get(t);
                                return r && (this._roomDatas.delete(t), s = r.floorType, i = r.wallType, n = r.landscapeType), r = new ym(t, e), r.floorType = s, r.wallType = i, r.landscapeType = n, this._roomDatas.set(t, r), void g.log("Room Engine not initilized yet, can not create room. Room data stored for later initialization.")
                            }
                            if (!e) return void g.log("Room property messages received before floor height map, will initialize when floor height map received.");
                            const r = this._roomDatas.get(t);
                            r && (this._roomDatas.delete(t), r.floorType && (s = r.floorType), r.wallType && (i = r.wallType), r.landscapeType && (n = r.landscapeType)), this.setupRoomInstance(t, e, s, i, n, this.getRoomInstanceModelName(t)) && (this._roomAllowsDragging = !e.restrictsDragging, this.events.dispatchEvent(new Qh(Qh.INITIALIZED, t)))
                        }
                        setupRoomInstance(e, s, i, n, r, o) {
                            if (!this._ready || !this._roomManager) return;
                            const a = this._roomManager.createRoomInstance(this.getRoomId(e));
                            if (!a) return null;
                            const c = a.createRoomObjectAndInitalize(t.ROOM_OBJECT_ID, t.ROOM_OBJECT_TYPE, V.ROOM);
                            if (a.model.setValue(ig.ROOM_IS_PUBLIC, 0), a.model.setValue(ig.ROOM_Z_SCALE, 1), s && (a.model.setValue(ig.RESTRICTS_DRAGGING, s.restrictsDragging), a.model.setValue(ig.RESTRICTS_SCALING, s.restrictsScaling), a.model.setValue(ig.RESTRICTED_SCALE, s.restrictedScale), s.dimensions)) {
                                const t = s.dimensions.minX,
                                    e = s.dimensions.maxX,
                                    i = s.dimensions.minY,
                                    n = s.dimensions.maxY;
                                a.model.setValue(ig.ROOM_MIN_X, t), a.model.setValue(ig.ROOM_MAX_X, e), a.model.setValue(ig.ROOM_MIN_Y, i), a.model.setValue(ig.ROOM_MAX_Y, n);
                                const r = 423 * t + 671 * e + 913 * i + 7509 * n;
                                c && c.model && c.model.setValue(j.ROOM_RANDOM_SEED, r)
                            }
                            const _ = c && c.logic || null;
                            if (_ && (_.initialize(s), i && (_.processUpdateMessage(new hu(hu.ROOM_FLOOR_UPDATE, i)), a.model.setValue(j.ROOM_FLOOR_TYPE, i)), n && (_.processUpdateMessage(new hu(hu.ROOM_WALL_UPDATE, n)), a.model.setValue(j.ROOM_WALL_TYPE, n)), r && (_.processUpdateMessage(new hu(hu.ROOM_LANDSCAPE_UPDATE, r)), a.model.setValue(j.ROOM_LANDSCAPE_TYPE, r))), s && s.doors.length) {
                                let t = 0;
                                for (; t < s.doors.length;) {
                                    const e = s.doors[t];
                                    if (e) {
                                        const s = e.x,
                                            i = e.y,
                                            n = e.z,
                                            r = e.dir,
                                            o = au.DOOR,
                                            c = "door_" + t,
                                            h = new K(s, i, n);
                                        _.processUpdateMessage(new au(au.ADD_MASK, c, o, h, au.HOLE)), 90 !== r && 180 !== r || (90 === r && (a.model.setValue(j.ROOM_DOOR_X, s - .5), a.model.setValue(j.ROOM_DOOR_Y, i)), 180 === r && (a.model.setValue(j.ROOM_DOOR_X, s), a.model.setValue(j.ROOM_DOOR_Y, i - .5)), a.model.setValue(j.ROOM_DOOR_Z, n), a.model.setValue(j.ROOM_DOOR_DIR, r))
                                    }
                                    t++
                                }
                            }
                            return a.createRoomObjectAndInitalize(t.CURSOR_OBJECT_ID, t.CURSOR_OBJECT_TYPE, V.CURSOR), a
                        }
                        getRoomInstanceDisplay(e, s, i, n, r) {
                            const o = this.getRoomInstance(e);
                            if (!o) return null;
                            let a = o.renderer;
                            if (!a && (a = this._roomRendererFactory.createRenderer(), !a)) return null;
                            a.roomObjectVariableAccurateZ = j.OBJECT_ACCURATE_Z_VALUE, o.setRenderer(a);
                            const c = a.createCanvas(s, i, n, r);
                            if (!c) return null;
                            if (o.model.getValue(ig.RESTRICTS_SCALING)) {
                                let t = o.model.getValue(ig.RESTRICTED_SCALE);
                                t || (t = 1), c.setScale(t), c.restrictsScaling = !0
                            } else c.restrictsScaling = !1;
                            if (c.setMouseListener(this._roomObjectEventHandler), c.geometry) {
                                c.geometry.z_scale = o.model.getValue(ig.ROOM_Z_SCALE);
                                const e = o.model.getValue(j.ROOM_DOOR_X),
                                    s = o.model.getValue(j.ROOM_DOOR_Y),
                                    i = o.model.getValue(j.ROOM_DOOR_Z),
                                    n = o.model.getValue(j.ROOM_DOOR_DIR),
                                    r = new K(e, s, i);
                                let a = null;
                                90 === n && (a = new K(-2e3, 0, 0)), 180 === n && (a = new K(0, -2e3, 0)), c.geometry.setDisplacement(r, a);
                                const _ = c.master;
                                if (_) {
                                    const e = u.n.from(u.p.EMPTY);
                                    e.name = t.OVERLAY, e.interactive = !1, _.addChild(e)
                                }
                            }
                            return c.master
                        }
                        setRoomInstanceRenderingCanvasMask(t, e, s) {
                            const i = this.getRoomInstanceRenderingCanvas(t, e);
                            i && i.setMask(s)
                        }
                        setRoomInstanceRenderingCanvasScale(t, e, s, i = null, n = null, r = !1, o = !1) {
                            const a = this.getRoomInstanceRenderingCanvas(t, e);
                            if (a) {
                                if (a.restrictsScaling && !r) return;
                                a.setScale(s, i, n, r, o), this.events.dispatchEvent(new Qh(Qh.ROOM_ZOOMED, t))
                            }
                        }
                        getRoomInstanceRenderingCanvas(t, e = -1) {
                            const s = this.getRoomInstance(t);
                            if (!s) return null;
                            const i = s.renderer;
                            return i ? (-1 === e && (e = this._activeRoomActiveCanvas), i.getCanvas(e) || null) : null
                        }
                        getActiveRoomInstanceRenderingCanvas() {
                            return this.getRoomInstanceRenderingCanvas(this._activeRoomId, this._activeRoomActiveCanvas)
                        }
                        getRoomInstanceRenderingCanvasOffset(t, e = -1) {
                            -1 === e && (e = this._activeRoomActiveCanvas);
                            const s = this.getRoomInstanceRenderingCanvas(t, e);
                            return s ? new u.j(s.screenOffsetX, s.screenOffsetY) : null
                        }
                        setRoomInstanceRenderingCanvasOffset(t, e, s) {
                            const i = this.getRoomInstanceRenderingCanvas(t, e);
                            return !(!i || !s || (i.screenOffsetX = s.x, i.screenOffsetY = s.y, 0))
                        }
                        getRoomInstanceRenderingCanvasScale(t = -1e3, e = -1) {
                            -1e3 === t && (t = this._activeRoomId), -1 === e && (e = this._activeRoomActiveCanvas);
                            const s = this.getRoomInstanceRenderingCanvas(t, e);
                            return s ? s.scale : 1
                        }
                        initializeRoomInstanceRenderingCanvas(t, e, s, i) {
                            const n = this.getRoomInstanceRenderingCanvas(t, e);
                            n && n.initialize(s, i)
                        }
                        getRoomInstanceGeometry(t, e = -1) {
                            const s = this.getRoomInstance(t);
                            if (!s) return null;
                            const i = s.renderer;
                            if (!i) return null; - 1 === e && (e = this._activeRoomActiveCanvas);
                            const n = i.getCanvas(e);
                            return n ? n.geometry : null
                        }
                        getRoomInstanceVariable(t, e) {
                            const s = this.getRoomInstance(t);
                            return s && s.model && s.model.getValue(e) || null
                        }
                        updateRoomInstancePlaneVisibility(t, e, s = !0) {
                            const i = this.getRoomOwnObject(t);
                            return !!i && (i.processUpdateMessage(new _u(_u.WALL_VISIBILITY, e)), i.processUpdateMessage(new _u(_u.FLOOR_VISIBILITY, s)), !0)
                        }
                        updateRoomInstancePlaneThickness(t, e, s) {
                            const i = this.getRoomOwnObject(t);
                            return !!i && (i.processUpdateMessage(new cu(cu.WALL_THICKNESS, e)), i.processUpdateMessage(new cu(cu.FLOOR_THICKNESS, s)), !0)
                        }
                        updateRoomInstancePlaneType(t, e = null, s = null, i = null, n = !1) {
                            const r = this.getRoomOwnObject(t),
                                o = this.getRoomInstance(t);
                            if (!r) {
                                let n = this._roomDatas.get(t);
                                return n || (n = new ym(t, null), this._roomDatas.set(t, n)), e && (n.floorType = e), s && (n.wallType = s), i && (n.landscapeType = i), !0
                            }
                            return e && (o && !n && o.model.setValue(j.ROOM_FLOOR_TYPE, e), r.processUpdateMessage(new hu(hu.ROOM_FLOOR_UPDATE, e))), s && (o && !n && o.model.setValue(j.ROOM_WALL_TYPE, s), r.processUpdateMessage(new hu(hu.ROOM_WALL_UPDATE, s))), i && (o && !n && o.model.setValue(j.ROOM_LANDSCAPE_TYPE, i), r.processUpdateMessage(new hu(hu.ROOM_LANDSCAPE_UPDATE, i))), !0
                        }
                        _Str_17804(t, e, s, i) {
                            const n = this.getRoomOwnObject(t);
                            if (!n || !n.logic) return !1;
                            const r = new ru(ru.BACKGROUND_COLOR, e, s, i);
                            return n.logic.processUpdateMessage(r), this.events.dispatchEvent(new yl(t, e, s, i)), !0
                        }
                        addRoomInstanceFloorHole(t, e) {
                            if (e < 0) return;
                            const s = this.getRoomOwnObject(t),
                                i = this.getRoomObjectFloor(t, e);
                            if (s && s.logic && i && i.model) {
                                const t = i.getLocation(),
                                    n = i.model.getValue(j.FURNITURE_SIZE_X),
                                    r = i.model.getValue(j.FURNITURE_SIZE_Y);
                                s.processUpdateMessage(new ou(ou.ADD, e, t.x, t.y, n, r))
                            }
                        }
                        removeRoomInstanceFloorHole(t, e) {
                            if (e < 0) return;
                            const s = this.getRoomOwnObject(t);
                            s && s.processUpdateMessage(new ou(ou.REMOVE, e))
                        }
                        setRoomEngineGameMode(t, e) {
                            const s = this.getRoomInstance(t);
                            if (!s) return;
                            const i = e ? 1 : 0;
                            s.model.setValue(ig.IS_PLAYING_GAME, i), this.events.dispatchEvent(new Qh(0 === i ? Qh.NORMAL_MODE : Qh.GAME_MODE, t))
                        }
                        isPlayingGame() {
                            return this.getRoomInstance(this._activeRoomId).model.getValue(ig.IS_PLAYING_GAME) > 0
                        }
                        disableUpdate(t) {
                            t ? cp.instance.ticker.remove(this.update, this) : (cp.instance.ticker.remove(this.update, this), cp.instance.ticker.add(this.update, this))
                        }
                        runUpdate() {
                            this.update(1)
                        }
                        runVisibilityUpdate() {
                            document.hidden || this.update(1, !0)
                        }
                        update(t, e = !1) {
                            this._roomManager && (t = cp.instance.time, rl.turnVisualizationOn(), this.processPendingFurniture(), this._roomManager.update(t, e), this._Str_22919(t), this._mouseCursorUpdate && this.setPointer(), rl.turnVisualizationOff())
                        }
                        setPointer() {
                            this._mouseCursorUpdate = !1;
                            const t = this.getRoomInstanceData(this._activeRoomId);
                            t && t._Str_22598() ? document.body.style.cursor = "pointer" : document.body.style.cursor = "auto"
                        }
                        processPendingFurniture() {
                            if (this._skipFurnitureCreationForNextFrame) return void(this._skipFurnitureCreationForNextFrame = !1);
                            const t = (new Date).valueOf();
                            for (const e of this._roomInstanceDatas.values()) {
                                if (!e) continue;
                                let s = null,
                                    i = 0,
                                    n = !1;
                                for (; s = e.getNextPendingFurnitureFloor();)
                                    if (n = this.processPendingFurnitureFloor(e.roomId, s.id, s), !(++i % 5) && (new Date).valueOf() - t >= 40) {
                                        this._skipFurnitureCreationForNextFrame = !0;
                                        break
                                    }
                                for (; !this._skipFurnitureCreationForNextFrame && (s = e.getNextPendingFurnitureWall());)
                                    if (n = this.processPendingFurnitureWall(e.roomId, s.id, s), !(++i % 5) && (new Date).valueOf() - t >= 40) {
                                        this._skipFurnitureCreationForNextFrame = !0;
                                        break
                                    }
                                if (n && this._roomManager && (this._roomManager.getRoomInstance(this.getRoomId(e.roomId)).hasUninitializedObjects() || this.objectsInitialized(e.roomId.toString())), this._skipFurnitureCreationForNextFrame) return
                            }
                        }
                        onRoomEngineInitalized(t) {
                            if (t) {
                                this._ready = !0, this.events.dispatchEvent(new Qh(Qh.ENGINE_INITIALIZED, 0));
                                for (const t of this._roomDatas.values()) t && this.createRoomInstance(t.roomId, t.data)
                            }
                        }
                        processPendingFurnitureFloor(t, e, s) {
                            if (!s) {
                                const i = this.getRoomInstanceData(t);
                                if (i && (s = i.getPendingFurnitureFloor(e)), !s) return !1
                            }
                            let i = s.type;
                            i || (i = this.getFurnitureFloorName(s.typeId));
                            const n = this.createRoomObjectFloor(t, e, i);
                            if (!n) return !1;
                            const r = n.model;
                            if (r && (r.setValue(j.FURNITURE_COLOR, this.getFurnitureFloorColorIndex(s.typeId)), r.setValue(j.FURNITURE_TYPE_ID, s.typeId), r.setValue(j.FURNITURE_REAL_ROOM_OBJECT, s.realRoomObject ? 1 : 0), r.setValue(j.FURNITURE_EXPIRY_TIME, s.expiryTime), r.setValue(j.FURNITURE_EXPIRTY_TIMESTAMP, cp.instance.time), r.setValue(j.FURNITURE_USAGE_POLICY, s.usagePolicy), r.setValue(j.FURNITURE_OWNER_ID, s.ownerId), r.setValue(j.FURNITURE_OWNER_NAME, s.ownerName)), !this.updateRoomObjectFloor(t, e, s.location, s.direction, s.state, s.data, s.extra)) return !1;
                            if (s.sizeZ >= 0 && !this.updateRoomObjectFloorHeight(t, e, s.sizeZ)) return !1;
                            this.events && this.events.dispatchEvent(new Al(Al.ADDED, t, e, V.FLOOR));
                            const o = this.getPlacedRoomObjectData(t);
                            return o && o.id === e && o.category === V.FLOOR && this.selectRoomObject(t, e, V.FLOOR), n.isReady && s.synchronized && this._Str_21543(t, n), !0
                        }
                        processPendingFurnitureWall(t, e, s) {
                            if (!s) {
                                const i = this.getRoomInstanceData(t);
                                if (i && (s = i.getPendingFurnitureWall(e)), !s) return !1
                            }
                            let i = "";
                            s.data && (i = s.data.getLegacyString());
                            let n = this.getFurnitureWallName(s.typeId, i);
                            n || (n = "");
                            const r = this.createRoomObjectWall(t, e, n);
                            if (!r) return !1;
                            const o = r.model;
                            if (o && (o.setValue(j.FURNITURE_COLOR, this.getFurnitureWallColorIndex(s.typeId)), o.setValue(j.FURNITURE_TYPE_ID, s.typeId), o.setValue(j.FURNITURE_REAL_ROOM_OBJECT, s.realRoomObject ? 1 : 0), o.setValue(j.OBJECT_ACCURATE_Z_VALUE, 1), o.setValue(j.FURNITURE_EXPIRY_TIME, s.expiryTime), o.setValue(j.FURNITURE_EXPIRTY_TIMESTAMP, cp.instance.time), o.setValue(j.FURNITURE_USAGE_POLICY, s.usagePolicy), o.setValue(j.FURNITURE_OWNER_ID, s.ownerId), o.setValue(j.FURNITURE_OWNER_NAME, s.ownerName)), !this.updateRoomObjectWall(t, e, s.location, s.direction, s.state, i)) return !1;
                            this.events && this.events.dispatchEvent(new Al(Al.ADDED, t, e, V.WALL));
                            const a = this.getPlacedRoomObjectData(t);
                            return a && Math.abs(a.id) === e && a.category === V.WALL && this.selectRoomObject(t, e, V.WALL), !0
                        }
                        setRoomSessionOwnUser(t, e) {
                            if (!this._roomSessionManager) return;
                            const s = this._roomSessionManager.getSession(t);
                            s && s.setOwnRoomIndex(e);
                            const i = this.getRoomCamera(t);
                            i && (i._Str_10760 = e, i._Str_16562 = V.UNIT, i._Str_19465(this._Str_19549))
                        }
                        get _Str_19549() {
                            return 1e3
                        }
                        _Str_22919(t) {
                            for (const s of this._roomInstanceDatas.values()) {
                                if (!s) continue;
                                const e = s.roomCamera;
                                if (!e) continue;
                                const i = this.getRoomObject(s.roomId, e._Str_10760, e._Str_16562);
                                i && (s.roomId === this._activeRoomId && this._activeRoomIsDragged || this._Str_25242(s.roomId, 1, i.getLocation(), t))
                            }
                            const e = this.getRoomInstanceRenderingCanvas(this._activeRoomId, 1);
                            e && this._activeRoomIsDragged && (e.screenOffsetX = e.screenOffsetX + this._activeRoomDragX, e.screenOffsetY = e.screenOffsetY + this._activeRoomDragY, this._activeRoomDragX = 0, this._activeRoomDragY = 0)
                        }
                        _Str_25242(t, e, s, i) {
                            const n = this.getRoomInstanceRenderingCanvas(t, e),
                                r = this.getRoomInstanceData(t);
                            if (!n || !r || 1 !== n.scale) return;
                            const o = n.geometry,
                                a = r.roomCamera,
                                c = this.getRoomInstance(t);
                            if (!o || !a || !c) return;
                            const _ = this._Str_25261(t, e);
                            if (!_) return;
                            let h = Math.floor(s.z) + 1;
                            const l = Math.round(_.width),
                                d = Math.round(_.height),
                                g = this.getCanvasBoundingRectangle(e);
                            if (g && (g.right < 0 || g.bottom < 0 || g.left >= l || g.top >= d) && a.reset(), a._Str_7609 !== l || a._Str_7902 !== d || a.scale !== o.scale || a._Str_16377 !== o.updateId || !K.isEqual(s, a._Str_16185) || a._Str_12536) {
                                a._Str_16185 = s;
                                const t = new K;
                                t.assign(s), t.x = Math.round(t.x), t.y = Math.round(t.y);
                                const e = c.model.getValue(ig.ROOM_MIN_X) - .5,
                                    r = c.model.getValue(ig.ROOM_MIN_Y) - .5,
                                    m = c.model.getValue(ig.ROOM_MAX_X) + .5,
                                    p = c.model.getValue(ig.ROOM_MAX_Y) + .5,
                                    b = Math.round((e + m) / 2),
                                    E = Math.round((r + p) / 2),
                                    f = 2;
                                let S = new u.j(t.x - b, t.y - E);
                                const I = o.scale / Math.sqrt(2),
                                    R = I / 2,
                                    v = new u.i;
                                v.rotate(-(o.direction.x + 90) / 180 * Math.PI), S = v.apply(S), S.y = S.y * (R / I);
                                const T = _.width / 2 / I - 1,
                                    O = _.height / 2 / R - 1;
                                let y = 0,
                                    A = 0,
                                    C = 0,
                                    M = 0,
                                    U = o.getScreenPoint(new K(b, E, f));
                                if (!U) return;
                                if (U.x = U.x + Math.round(_.width / 2), U.y = U.y + Math.round(_.height / 2), !g) return void o.adjustLocation(new K(0, 0), 25);
                                if (g.x += -n.screenOffsetX, g.y += -n.screenOffsetY, !(g.width > 1 && g.height > 1)) return void o.adjustLocation(new K(-30, -30), 25);
                                y = (g.left - U.x - .25 * o.scale) / I, C = (g.right - U.x + .25 * o.scale) / I, A = (g.top - U.y - .5 * o.scale) / R, M = (g.bottom - U.y + .5 * o.scale) / R;
                                let D = !1,
                                    N = !1,
                                    w = !1,
                                    L = !1;
                                Math.round((C - y) * I) < _.width ? (h = 2, S.x = (C + y) / 2, w = !0) : (S.x > C - T && (S.x = C - T, D = !0), S.x < y + T && (S.x = y + T, D = !0)), Math.round((M - A) * R) < _.height ? (h = 2, S.y = (M + A) / 2, L = !0) : (S.y > M - O && (S.y = M - O, N = !0), S.y < A + O && (S.y = A + O, N = !0), N && (S.y = S.y / (R / I))), v.invert(), S = v.apply(S), S.x = S.x + b, S.y = S.y + E;
                                let x = .35,
                                    P = .2,
                                    F = .2;
                                const G = 10,
                                    Y = 10;
                                if (F * l > 100 && (F = 100 / l), x * d > 150 && (x = 150 / d), P * d > 150 && (P = 150 / d), a._Str_10235 && a._Str_7609 == l && a._Str_7902 == d && (F = 0), a._Str_10446 && a._Str_7609 == l && a._Str_7902 == d && (x = 0, P = 0), _.width = _.width * (1 - 2 * F), _.height = _.height * (1 - (x + P)), _.width < G && (_.width = G), _.height < Y && (_.height = Y), x + P > 0 ? (_.x += -_.width / 2, _.y += P / (x + P) * -_.height) : (_.x += -_.width / 2, _.y += -_.height / 2), U = o.getScreenPoint(t), !U) return;
                                if (U) {
                                    U.x = U.x + n.screenOffsetX, U.y = U.y + n.screenOffsetY, t.z = h, t.x = Math.round(2 * S.x) / 2, t.y = Math.round(2 * S.y) / 2, a.location || (o.location = t, a._Str_20685(this._Str_11555 ? new K(0, 0, 0) : t));
                                    const e = o.getScreenPoint(t),
                                        s = new K(0, 0, 0);
                                    e && (s.x = e.x, s.y = e.y), (U.x < _.left || U.x > _.right) && !a._Str_8564 || (U.y < _.top || U.y > _.bottom) && !a._Str_8690 || w && !a._Str_8564 && a._Str_7609 != l || L && !a._Str_8690 && a._Str_7902 != d || a._Str_18975 != g.width || a._Str_15953 != g.height || a._Str_7609 != l || a._Str_7902 != d ? (a._Str_10235 = D, a._Str_10446 = N, a.target = this._Str_11555 ? s : t) : (D || (a._Str_10235 = !1), N || (a._Str_10446 = !1))
                                }
                                a._Str_8564 = w, a._Str_8690 = L, a._Str_7609 = l, a._Str_7902 = d, a.scale = o.scale, a._Str_16377 = o.updateId, a._Str_18975 = g.width, a._Str_15953 = g.height, this._sessionDataManager.isCameraFollowDisabled || a.update(i, this._Str_11555 ? 8 : .5), this._Str_11555 ? (n.screenOffsetX = -a.location.x, n.screenOffsetY = -a.location.y) : o.adjustLocation(a.location, 25)
                            } else a._Str_10235 = !1, a._Str_10446 = !1, a._Str_8564 = !1, a._Str_8690 = !1
                        }
                        _Str_25261(t, e) {
                            const s = this.getRoomInstanceRenderingCanvas(t, e);
                            return s ? new u.k(0, 0, s.width, s.height) : null
                        }
                        getRoomObjectBoundingRectangle(t, e, s, i) {
                            const n = this.getRoomInstanceGeometry(t, i);
                            if (!n) return null;
                            const r = this.getRoomObject(t, e, s);
                            if (!r) return null;
                            const o = r.visualization;
                            if (!o) return null;
                            const a = o.getBoundingRectangle(),
                                c = this.getRoomInstanceRenderingCanvas(t, i),
                                _ = c ? c.scale : 1,
                                h = n.getScreenPoint(r.getLocation());
                            return h ? (a.x = a.x * _, a.y = a.y * _, a.width = a.width * _, a.height = a.height * _, h.x = h.x * _, h.y = h.y * _, a.x += h.x, a.y += h.y, c ? (a.x += c.width / 2 + c.screenOffsetX, a.y += c.height / 2 + c.screenOffsetY, a) : null) : null
                        }
                        getCanvasBoundingRectangle(e) {
                            return this.getRoomObjectBoundingRectangle(this._activeRoomId, t.ROOM_OBJECT_ID, V.ROOM, e)
                        }
                        getFurnitureFloorName(t) {
                            return this._roomContentLoader ? this._roomContentLoader.getFurnitureFloorNameForTypeId(t) : null
                        }
                        getFurnitureWallName(t, e = null) {
                            return this._roomContentLoader ? this._roomContentLoader.getFurnitureWallNameForTypeId(t, e) : null
                        }
                        getFurnitureFloorColorIndex(t) {
                            return this._roomContentLoader ? this._roomContentLoader.getFurnitureFloorColorIndex(t) : null
                        }
                        getFurnitureWallColorIndex(t) {
                            return this._roomContentLoader ? this._roomContentLoader.getFurnitureWallColorIndex(t) : null
                        }
                        getRoomInstanceData(t) {
                            const e = this._roomInstanceDatas.get(t);
                            if (e) return e;
                            const s = new Mm(t);
                            return this._roomInstanceDatas.set(s.roomId, s), s
                        }
                        getRoomInstanceModelName(t) {
                            const e = this.getRoomInstanceData(t);
                            return e ? e.modelName : null
                        }
                        setRoomInstanceModelName(t, e) {
                            const s = this.getRoomInstanceData(t);
                            s && s.setModelName(e)
                        }
                        getRoomTileObjectMap(t) {
                            const e = this.getRoomInstanceData(t);
                            return e ? e.tileObjectMap : null
                        }
                        getCurrentRoomCamera() {
                            return this.getRoomCamera(this._activeRoomId)
                        }
                        getRoomCamera(t) {
                            const e = this.getRoomInstanceData(t);
                            return e ? e.roomCamera : null
                        }
                        getSelectedRoomObjectData(t) {
                            const e = this.getRoomInstanceData(t);
                            return e ? e.selectedObject : null
                        }
                        setSelectedRoomObjectData(t, e) {
                            const s = this.getRoomInstanceData(t);
                            if (!s) return null;
                            s.setSelectedObject(e), e && s.setPlacedObject(null)
                        }
                        getPlacedRoomObjectData(t) {
                            const e = this.getRoomInstanceData(t);
                            return e ? e.placedObject : null
                        }
                        setPlacedRoomObjectData(t, e) {
                            const s = this.getRoomInstanceData(t);
                            if (!s) return null;
                            s.setPlacedObject(e)
                        }
                        cancelRoomObjectPlacement() {
                            this._roomObjectEventHandler && this._roomObjectEventHandler.cancelRoomObjectPlacement(this._activeRoomId)
                        }
                        getFurnitureStackingHeightMap(t) {
                            const e = this.getRoomInstanceData(t);
                            return e ? e.furnitureStackingHeightMap : null
                        }
                        setFurnitureStackingHeightMap(t, e) {
                            const s = this.getRoomInstanceData(t);
                            if (!s) return null;
                            s.setFurnitureStackingHeightMap(e)
                        }
                        getLegacyWallGeometry(t) {
                            const e = this.getRoomInstanceData(t);
                            return e ? e.legacyGeometry : null
                        }
                        createRoomObjectAndInitialize(t, e, s, i) {
                            const n = this.getRoomInstance(t);
                            return n ? n.createRoomObjectAndInitalize(e, s, i) : null
                        }
                        getTotalObjectsForManager(t, e) {
                            const s = this.getRoomInstance(t);
                            return s ? s.getTotalObjectsForManager(e) : 0
                        }
                        getRoomObject(t, e, s) {
                            const i = this.getRoomInstance(t);
                            return i ? i.getRoomObject(e, s) : null
                        }
                        getRoomObjectByIndex(t, e, s) {
                            const i = this.getRoomInstance(t);
                            return i ? i.getRoomObjectByIndex(e, s) : null
                        }
                        getRoomObjectCategoryForType(t) {
                            return t && this._roomContentLoader ? this._roomContentLoader.getCategoryForType(t) : V.MINIMUM
                        }
                        getRoomObjectCursor(e) {
                            return this.getRoomObject(e, t.CURSOR_OBJECT_ID, V.CURSOR)
                        }
                        getRoomObjectSelectionArrow(e) {
                            return this.getRoomObject(e, t.ARROW_OBJECT_ID, V.CURSOR)
                        }
                        getRoomOwnObject(e) {
                            return this.getRoomObject(e, t.ROOM_OBJECT_ID, V.ROOM)
                        }
                        getRoomObjectUser(t, e) {
                            return this.getRoomObject(t, e, V.UNIT)
                        }
                        removeRoomObjectUser(t, e) {
                            return this.removeRoomObject(t, e, V.UNIT)
                        }
                        createRoomObjectUser(t, e, s) {
                            return this.createRoomObjectAndInitialize(t, e, s, V.UNIT)
                        }
                        getRoomObjectFloor(t, e) {
                            return this.getRoomObject(t, e, V.FLOOR)
                        }
                        createRoomObjectFloor(t, e, s) {
                            return this.createRoomObjectAndInitialize(t, e, s, V.FLOOR)
                        }
                        removeRoomObjectFloor(t, e, s = -1, i = !1) {
                            const n = this.getRoomInstanceData(t);
                            if (n && n.removePendingFunitureFloor(e), this._sessionDataManager && s === this._sessionDataManager.userId && !Ol.isBuilderClubId(e)) {
                                const s = this.getRoomObject(t, e, V.FLOOR);
                                if (s) {
                                    const i = this.getRoomObjectScreenLocation(t, e, V.FLOOR, this._activeRoomActiveCanvas);
                                    if (i && 1 !== s.model.getValue(j.FURNITURE_DISABLE_PICKING_ANIMATION)) {
                                        const t = s.model.getValue(j.FURNITURE_TYPE_ID),
                                            e = s.model.getValue(j.FURNITURE_EXTRAS),
                                            n = s.model.getValue(j.FURNITURE_DATA_FORMAT),
                                            r = Oi.getData(n),
                                            o = this.getFurnitureFloorIcon(t, null, e, r).data;
                                        if (o) {
                                            const t = cp.instance.renderer.extract.image(o);
                                            if (this.events) {
                                                const e = new Rl(t, i.x, i.y);
                                                e.iconName = Sl.INVENTORY, this.events.dispatchEvent(e)
                                            }
                                        }
                                    }
                                }
                            }
                            this.removeRoomObject(t, e, V.FLOOR), this.setMouseDefault(t, V.FLOOR, e), i && this._Str_17722(t, "RoomEngine.disposeObjectFurniture()")
                        }
                        getRoomObjectWall(t, e) {
                            return this.getRoomObject(t, e, V.WALL)
                        }
                        removeRoomObjectWall(t, e, s = -1) {
                            if (this._sessionDataManager && s === this._sessionDataManager.userId && !Ol.isBuilderClubId(e)) {
                                const s = this.getRoomObject(t, e, V.WALL);
                                if (s && -1 === s.type.indexOf("post_it") && -1 === s.type.indexOf("external_image_wallitem")) {
                                    const i = this.getRoomObjectScreenLocation(t, e, V.WALL, this._activeRoomActiveCanvas);
                                    if (i) {
                                        const t = s.model.getValue(j.FURNITURE_TYPE_ID),
                                            e = s.model.getValue(j.FURNITURE_DATA),
                                            n = this.getFurnitureWallIcon(t, null, e).data;
                                        if (n) {
                                            const t = cp.instance.renderer.extract.image(n);
                                            if (this.events) {
                                                const e = new Rl(t, i.x, i.y);
                                                e.iconName = Sl.INVENTORY, this.events.dispatchEvent(e)
                                            }
                                        }
                                    }
                                }
                            }
                            this.removeRoomObject(t, e, V.WALL), this.updateRoomObjectMask(t, e, !1), this.setMouseDefault(t, V.WALL, e)
                        }
                        createRoomObjectWall(t, e, s) {
                            return this.createRoomObjectAndInitialize(t, e, s, V.WALL)
                        }
                        removeRoomObject(t, e, s) {
                            const i = this.getRoomInstance(t);
                            if (!i) return null;
                            i.removeRoomObject(e, s), this.events && this.events.dispatchEvent(new Al(Al.REMOVED, t, e, s))
                        }
                        addFurnitureFloor(t, e, s, i, n, r, o, a = NaN, c = -1, _ = 0, h = 0, l = "", u = !0, d = !0, g = -1) {
                            const m = this.getRoomInstanceData(t);
                            if (!m) return !1;
                            const p = new Om(e, s, null, i, n, r, o, a, c, _, h, l, u, d, g);
                            return m.addPendingFurnitureFloor(p), !0
                        }
                        addFurnitureFloorByTypeName(t, e, s, i, n, r, o, a = NaN, c = -1, _ = 0, h = 0, l = "", u = !0, d = !0, g = -1) {
                            const m = this.getRoomInstanceData(t);
                            if (!m) return !1;
                            const p = new Om(e, 0, s, i, n, r, o, a, c, _, h, l, u, d, g);
                            return m.addPendingFurnitureFloor(p), !0
                        }
                        addFurnitureWall(t, e, s, i, n, r, o, a = -1, c = 0, _ = 0, h = "", l = !0) {
                            const u = this.getRoomInstanceData(t);
                            if (!u) return !1;
                            const d = new Si;
                            d.setString(o);
                            const g = new Om(e, s, null, i, n, r, d, NaN, a, c, _, h, !0, l);
                            return u.addPendingFurnitureWall(g), !0
                        }
                        updateRoomObjectFloor(t, e, s, i, n, r, o = NaN) {
                            const a = this.getRoomObjectFloor(t, e);
                            return !!a && (a.processUpdateMessage(new el(s, i)), a.processUpdateMessage(new eu(n, r, o)), !0)
                        }
                        updateRoomObjectWall(t, e, s, i, n, r = null) {
                            const o = this.getRoomObjectWall(t, e);
                            if (!o || !o.logic) return !1;
                            const a = new el(s, i),
                                c = new Si,
                                _ = new eu(n, c);
                            return c.setString(r), o.logic.processUpdateMessage(a), o.logic.processUpdateMessage(_), this.updateRoomObjectMask(t, e), !0
                        }
                        updateRoomObjectWallItemData(t, e, s) {
                            const i = this.getRoomObjectWall(t, e);
                            return !(!i || !i.logic || (i.logic.processUpdateMessage(new nu(s)), 0))
                        }
                        updateRoomObjectFloorHeight(t, e, s) {
                            const i = this.getRoomObjectFloor(t, e);
                            return !!i && (i.processUpdateMessage(new iu(null, null, s)), !0)
                        }
                        updateRoomObjectFloorExpiration(t, e, s) {
                            const i = this.getRoomObjectFloor(t, e);
                            return !!i && (i.model.setValue(j.FURNITURE_EXPIRY_TIME, s), i.model.setValue(j.FURNITURE_EXPIRTY_TIMESTAMP, cp.instance.time), !0)
                        }
                        updateRoomObjectWallExpiration(t, e, s) {
                            const i = this.getRoomObjectWall(t, e);
                            return !!i && (i.model.setValue(j.FURNITURE_EXPIRY_TIME, s), i.model.setValue(j.FURNITURE_EXPIRTY_TIMESTAMP, cp.instance.time), !0)
                        }
                        updateRoomObjectMask(t, e, s = !0) {
                            const i = V.WALL + "_" + e,
                                n = this.getRoomObjectWall(t, e);
                            let r = null;
                            if (n && n.model) {
                                if (n.model.getValue(j.FURNITURE_USES_PLANE_MASK) > 0) {
                                    const t = n.model.getValue(j.FURNITURE_PLANE_MASK_TYPE),
                                        e = n.getLocation();
                                    r = s ? new au(au.ADD_MASK, i, t, e) : new au(au._Str_10260, i)
                                }
                            } else r = new au(au._Str_10260, i);
                            const o = this.getRoomOwnObject(t);
                            o && o.logic && r && o.logic.processUpdateMessage(r)
                        }
                        rollRoomObjectFloor(t, e, s, i) {
                            const n = this.getRoomObjectFloor(t, e);
                            n && n.processUpdateMessage(new Ql(s, i, null, !!i))
                        }
                        updateRoomObjectWallLocation(t, e, s) {
                            const i = this.getRoomObjectWall(t, e);
                            return !!i && (i.logic && i.logic.processUpdateMessage(new Ql(s, null, null)), this.updateRoomObjectMask(t, e), !0)
                        }
                        addRoomObjectUser(t, e, s, i, n, r, o) {
                            if (this.getRoomObjectUser(t, e)) return !1;
                            let a = Z.getTypeString(r);
                            a === Z.PET && (a = this.getPetType(o));
                            const c = this.createRoomObjectUser(t, e, a);
                            return !!c && (c.processUpdateMessage(new $l(this.fixedUserLocation(t, s), null, i, n, !1, 0)), o && c.processUpdateMessage(new Yl(o)), this.events && this.events.dispatchEvent(new Al(Al.ADDED, t, e, V.UNIT)), !0)
                        }
                        updateRoomObjectUserLocation(t, e, s, i, n = !1, r = 0, o = null, a = NaN) {
                            const c = this.getRoomObjectUser(t, e);
                            if (!c) return !1;
                            s || (s = c.getLocation()), o || (o = c.getDirection()), isNaN(a) && (a = c.model.getValue(j.HEAD_DIRECTION)), c.processUpdateMessage(new $l(this.fixedUserLocation(t, s), this.fixedUserLocation(t, i), o, a, n, r));
                            const _ = this._roomSessionManager && this._roomSessionManager.getSession(t) || null;
                            return _ && _.ownRoomIndex === e && this._logicFactory.events.dispatchEvent(new Ul(Ul.ROAME_MOVE_TO, i)), !0
                        }
                        fixedUserLocation(t, e) {
                            if (!e) return null;
                            const s = this.getFurnitureStackingHeightMap(t),
                                i = this.getLegacyWallGeometry(t);
                            if (!s || !i) return e;
                            let n = e.z;
                            const r = s.getTileHeight(e.x, e.y),
                                o = i.getHeight(e.x, e.y);
                            return Math.abs(n - r) < .1 && Math.abs(r - o) < .1 && (n = i._Str_24141(e.x, e.y)), new K(e.x, e.y, n)
                        }
                        updateRoomObjectUserAction(t, e, s, i, n = null) {
                            const r = this.getRoomObjectUser(t, e);
                            if (!r) return !1;
                            let o = null;
                            switch (s) {
                                case j.FIGURE_TALK:
                                    o = new Ll(i);
                                    break;
                                case j.FIGURE_SLEEP:
                                    o = new ql(1 === i);
                                    break;
                                case j.FIGURE_IS_TYPING:
                                    o = new Jl(1 === i);
                                    break;
                                case j.FIGURE_IS_MUTED:
                                    o = new jl(1 === i);
                                    break;
                                case j.FIGURE_CARRY_OBJECT:
                                    o = new wl(i, n);
                                    break;
                                case j.FIGURE_USE_OBJECT:
                                    o = new tu(i);
                                    break;
                                case j.FIGURE_DANCE:
                                    o = new xl(i);
                                    break;
                                case j.FIGURE_GAINED_EXPERIENCE:
                                    o = new Fl(i);
                                    break;
                                case j.FIGURE_NUMBER_VALUE:
                                    o = new Wl(i);
                                    break;
                                case j.FIGURE_SIGN:
                                    o = new Xl(i);
                                    break;
                                case j.FIGURE_EXPRESSION:
                                    o = new Gl(i);
                                    break;
                                case j.FIGURE_IS_PLAYING_GAME:
                                    o = new zl(1 === i);
                                    break;
                                case j.FIGURE_GUIDE_STATUS:
                                    o = new Zl(i)
                            }
                            return !!o && (r.processUpdateMessage(o), !0)
                        }
                        updateRoomObjectUserFigure(t, e, s, i = null, n = null, r = !1) {
                            const o = this.getRoomObjectUser(t, e);
                            return !!o && (o.processUpdateMessage(new Yl(s, i, n, r)), !0)
                        }
                        updateRoomObjectUserFlatControl(t, e, s) {
                            const i = this.getRoomObjectUser(t, e);
                            return !!i && (i.processUpdateMessage(new kl(parseInt(s))), !0)
                        }
                        updateRoomObjectUserEffect(t, e, s, i = 0) {
                            const n = this.getRoomObjectUser(t, e);
                            return !!n && (n.processUpdateMessage(new Pl(s, i)), !0)
                        }
                        updateRoomObjectUserGesture(t, e, s) {
                            const i = this.getRoomObjectUser(t, e);
                            return !!i && (i.processUpdateMessage(new Vl(s)), !0)
                        }
                        updateRoomObjectUserPetGesture(t, e, s) {
                            const i = this.getRoomObjectUser(t, e);
                            return !!i && (i.processUpdateMessage(new Hl(s)), !0)
                        }
                        updateRoomObjectUserPosture(t, e, s, i = null) {
                            const n = this.getRoomObjectUser(t, e);
                            return !!n && (n.processUpdateMessage(new Kl(s, i)), !0)
                        }
                        updateRoomObjectUserOwn(t, e) {
                            const s = this.getRoomObjectUser(t, e);
                            s && s.processUpdateMessage(new Bl)
                        }
                        useRoomObject(t, e) {
                            const s = this.getRoomObject(this._activeRoomId, t, e);
                            if (s) {
                                const t = s.logic;
                                if (t) return t.useObject(), !0
                            }
                            return !1
                        }
                        objectInitialized(e, s, i) {
                            const n = this.getRoomIdFromString(e);
                            i === V.WALL && this.updateRoomObjectMask(n, s);
                            const r = this.getRoomObject(n, s, i);
                            if (r && r.model && r.logic) {
                                const t = r.model.getValue(j.FURNITURE_DATA_FORMAT);
                                if (!isNaN(t)) {
                                    const e = Oi.getData(t);
                                    e.initializeFromRoomObjectModel(r.model), r.processUpdateMessage(new eu(r.getState(0), e))
                                }
                                this.events.dispatchEvent(new Al(Al.CONTENT_UPDATED, n, s, i))
                            }
                            e !== t.TEMPORARY_ROOM && this._Str_21543(n, r)
                        }
                        changeObjectState(t, e, s) {
                            const i = this.getRoomObject(t, e, s);
                            if (!i || !i.model) return;
                            let n = i.model.getValue(j.FURNITURE_AUTOMATIC_STATE_INDEX);
                            isNaN(n) ? n = 1 : n += 1, i.model.setValue(j.FURNITURE_AUTOMATIC_STATE_INDEX, n);
                            const r = i.model.getValue(j.FURNITURE_DATA_FORMAT),
                                o = Oi.getData(r);
                            o.initializeFromRoomObjectModel(i.model), i.logic && i.logic.processUpdateMessage(new eu(n, o))
                        }
                        loadRoomObjectBadgeImage(t, e, s, i, n = !0) {
                            if (!this._sessionDataManager) return;
                            const r = this.getRoomObjectFloor(t, e);
                            if (!r || !r.logic) return;
                            let o = n ? this._sessionDataManager.loadGroupBadgeImage(i) : this._sessionDataManager.loadBadgeImage(i);
                            if (o) this.putBadgeInObjectAssets(r, i, n);
                            else {
                                o = "loading_icon", this._badgeListenerObjects || (this._badgeListenerObjects = new Map), this._badgeListenerObjects.size || this._sessionDataManager.events.addEventListener(vl.IMAGE_READY, this.onBadgeImageReadyEvent);
                                let t = this._badgeListenerObjects.get(i);
                                t || (t = []), t.push(new Um(r, n)), this._badgeListenerObjects.set(i, t)
                            }
                            r.logic.processUpdateMessage(new su(i, o))
                        }
                        onBadgeImageReadyEvent(t) {
                            if (!this._sessionDataManager) return;
                            const e = this._badgeListenerObjects && this._badgeListenerObjects.get(t.badgeId);
                            if (e) {
                                for (const s of e) {
                                    if (!s) continue;
                                    this.putBadgeInObjectAssets(s.object, t.badgeId, s.groupBadge);
                                    const e = s.groupBadge ? this._sessionDataManager.loadGroupBadgeImage(t.badgeId) : this._sessionDataManager.loadBadgeImage(t.badgeId);
                                    s.object && s.object.logic && s.object.logic.processUpdateMessage(new su(t.badgeId, e))
                                }
                                this._badgeListenerObjects.delete(t.badgeId), this._badgeListenerObjects.size || this._sessionDataManager.events.removeEventListener(vl.IMAGE_READY, this.onBadgeImageReadyEvent)
                            }
                        }
                        putBadgeInObjectAssets(t, e, s = !1) {
                            if (!this._roomContentLoader || !this._sessionDataManager) return;
                            const i = s ? this._sessionDataManager.loadGroupBadgeImage(e) : this._sessionDataManager.loadBadgeImage(e),
                                n = s ? this._sessionDataManager.getGroupBadgeImage(e) : this._sessionDataManager.getBadgeImage(e);
                            n && this._roomContentLoader.addAssetToCollection(t.type, i, n)
                        }
                        dispatchMouseEvent(e, s, i, n, r, o, a, c) {
                            const _ = this.getRoomInstanceRenderingCanvas(this._activeRoomId, e);
                            if (!_) return;
                            const h = this.getRenderingCanvasOverlay(_),
                                l = this._Str_16498(h, t.OBJECT_ICON_SPRITE);
                            if (l) {
                                const t = l.getLocalBounds();
                                l.x = s - t.width / 2, l.y = i - t.height / 2
                            }
                            if (!this._Str_25871(_, s, i, n, r, o, a) && !_._Str_21232(s, i, n, r, o, a, c)) {
                                let e = null;
                                n === sl.MOUSE_CLICK ? (this.events && this.events.dispatchEvent(new Al(Al.DESELECTED, this._activeRoomId, -1, V.MINIMUM)), e = tl.CLICK) : n === sl.MOUSE_MOVE ? e = tl.MOUSE_MOVE : n === sl.MOUSE_DOWN ? e = tl.MOUSE_DOWN : n === sl.MOUSE_UP && (e = tl.MOUSE_UP), this._roomObjectEventHandler.handleRoomObjectEvent(new tl(e, this.getRoomObject(this._activeRoomId, t.ROOM_OBJECT_ID, V.ROOM), null, r), this._activeRoomId)
                            }
                            this._activeRoomActiveCanvas = e, this._activeRoomActiveCanvasMouseX = s, this._activeRoomActiveCanvasMouseY = i
                        }
                        _Str_25871(e, s, i, n, r, o, a) {
                            let c = s - this._activeRoomActiveCanvasMouseX,
                                _ = i - this._activeRoomActiveCanvasMouseY;
                            if (n === sl.MOUSE_DOWN) r || o || a || this.isDecorating || this._roomAllowsDragging && (this._activeRoomIsDragged = !0, this._activeRoomWasDragged = !1, this._activeRoomDragStartX = this._activeRoomActiveCanvasMouseX, this._activeRoomDragStartY = this._activeRoomActiveCanvasMouseY);
                            else if (n === sl.MOUSE_UP) {
                                if (this._activeRoomIsDragged && (this._activeRoomIsDragged = !1, this._activeRoomWasDragged)) {
                                    const t = this.getRoomInstanceData(this._activeRoomId);
                                    if (t) {
                                        const s = t.roomCamera;
                                        s && (this._Str_11555 && (s._Str_12536 || (s._Str_8564 = !1, s._Str_8690 = !1), s._Str_25467(new K(-e.screenOffsetX, -e.screenOffsetY))), this._roomDraggingAlwaysCenters && s.reset())
                                    }
                                }
                            } else if (n === sl.MOUSE_MOVE) this._activeRoomIsDragged && (this._activeRoomWasDragged || (c = s - this._activeRoomDragStartX, _ = i - this._activeRoomDragStartY, (c <= -t.DRAG_THRESHOLD || c >= t.DRAG_THRESHOLD || _ <= -t.DRAG_THRESHOLD || _ >= t.DRAG_THRESHOLD) && (this._activeRoomWasDragged = !0), c = 0, _ = 0), 0 == c && 0 == _ || (this._activeRoomDragX += c, this._activeRoomDragY += _, this._activeRoomWasDragged = !0));
                            else if ((n === sl.MOUSE_CLICK || n === sl.DOUBLE_CLICK) && (this._activeRoomIsDragged = !1, this._activeRoomWasDragged)) return this._activeRoomWasDragged = !1, !0;
                            return !1
                        }
                        updateMousePointer(t, e, s) {
                            const i = this.getRoomObjectCategoryForType(s);
                            switch (t) {
                                case Cl.MOUSE_BUTTON:
                                    return void this.setMouseButton(this._activeRoomId, i, e);
                                default:
                                    return void this.setMouseDefault(this._activeRoomId, i, e)
                            }
                        }
                        setMouseButton(t, e, s) {
                            if (!this._roomSessionManager) return;
                            const i = this._roomSessionManager.getSession(t);
                            if (i && (e !== V.FLOOR && e !== V.WALL || i.controllerLevel >= _r.GUEST)) {
                                const i = this.getRoomInstanceData(t);
                                i && i._Str_16810(e + "_" + s) && (this._mouseCursorUpdate = !0)
                            }
                        }
                        setMouseDefault(t, e, s) {
                            if (!this._roomSessionManager) return;
                            const i = this.getRoomInstanceData(t);
                            i && i._Str_11959(e + "_" + s) && (this._mouseCursorUpdate = !0)
                        }
                        processRoomObjectOperation(t, e, s) {
                            if (!this._roomObjectEventHandler) return !1;
                            this._roomObjectEventHandler.processRoomObjectOperation(this._activeRoomId, t, e, s)
                        }
                        processRoomObjectWallOperation(t, e, s, i) {
                            if (!this._roomObjectEventHandler) return !1;
                            e === V.WALL && this._roomObjectEventHandler.processRoomObjectWallOperation(this._activeRoomId, t, e, s, i)
                        }
                        processRoomObjectFloorOperation(t, e, s, i) {
                            if (!this._roomObjectEventHandler) return !1;
                            e === V.FLOOR && this._roomObjectEventHandler.processRoomObjectFloorOperation(this._activeRoomId, t, s, i)
                        }
                        processRoomObjectEvent(t) {
                            if (!this._roomObjectEventHandler) return;
                            const e = this.getRoomObjectRoomId(t.object);
                            if (!e) return;
                            const s = this.getRoomIdFromString(e);
                            this._roomObjectEventHandler.handleRoomObjectEvent(t, s)
                        }
                        processRoomObjectPlacement(t, e, s, i, n = null, r = null, o = -1, a = -1, c = null) {
                            const _ = this.getRoomInstance(this._activeRoomId);
                            return !(!_ || 0 !== _.model.getValue(ig.ROOM_IS_PUBLIC)) && !!this._roomObjectEventHandler && this._roomObjectEventHandler.processRoomObjectPlacement(t, this._activeRoomId, e, s, i, n, r, o, a, c)
                        }
                        getRoomObjectScreenLocation(t, e, s, i = -1) {
                            -1 == i && (i = this._activeRoomActiveCanvas);
                            const n = this.getRoomInstanceGeometry(t, i);
                            if (!n) return null;
                            const r = this.getRoomObject(t, e, s);
                            if (!r) return null;
                            const o = n.getScreenPoint(r.getLocation());
                            if (!o) return null;
                            const a = this.getRoomInstanceRenderingCanvas(t, i);
                            return a ? (o.x = o.x * a.scale, o.y = o.y * a.scale, o.x += a.width / 2 + a.screenOffsetX, o.y += a.height / 2 + a.screenOffsetY, o) : null
                        }
                        selectRoomObject(t, e, s) {
                            this._roomObjectEventHandler && this._roomObjectEventHandler._Str_17481(t, e, s)
                        }
                        _Str_8675() {
                            this._roomObjectEventHandler && this._roomObjectEventHandler._Str_8675(this._activeRoomId)
                        }
                        _Str_24651(t, e, s) {
                            if (!t || !s) return;
                            let i = this._Str_16498(t, e);
                            return i ? null : (i = u.n.from(s), i.name = e, t.addChild(i), i)
                        }
                        onRoomContentLoaded(t, e, s) {
                            if (!this._roomContentLoader || -1 === t) return;
                            this._thumbnailObjectIdBank._Str_15187(t - 1);
                            const i = this._thumbnailCallbacks.get(e);
                            if (i) {
                                this._thumbnailCallbacks.delete(e);
                                const s = this._roomContentLoader.getImage(e);
                                if (s)
                                    for (const e of i) e && e.imageReady(t, null, s)
                            }
                        }
                        _Str_16645(e, s, i, n = null, r = null, o = -1, a = -1, c = null) {
                            let _ = null,
                                h = 0,
                                l = null;
                            if (i) l = this.getRoomObjectImage(this._activeRoomId, e, s, new K, 1, null);
                            else if (this._roomContentLoader)
                                if (s === V.FLOOR ? (_ = this._roomContentLoader.getFurnitureFloorNameForTypeId(e), h = this._roomContentLoader.getFurnitureFloorColorIndex(e)) : s === V.WALL && (_ = this._roomContentLoader.getFurnitureWallNameForTypeId(e, n), h = this._roomContentLoader.getFurnitureWallColorIndex(e)), s === V.UNIT)
                                    if (_ = Z.getTypeString(e), "pet" === _) {
                                        _ = this.getPetType(n);
                                        const t = new fl(n);
                                        l = this.getRoomObjectPetImage(t.typeId, t.paletteId, t.color, new K(180), 64, null, !0, 0, t.customParts, c)
                                    } else l = this.getGenericRoomObjectImage(_, n, new K(180), 1, null, 0, null, r, o, a, c);
                            else l = this.getGenericRoomObjectImage(_, h.toString(), new K, 1, null, 0, n, r, o, a, c);
                            if (!l || !l.data) return;
                            const u = this.getActiveRoomInstanceRenderingCanvas();
                            if (!u) return;
                            const d = this.getRenderingCanvasOverlay(u);
                            this._Str_21215(d, t.OBJECT_ICON_SPRITE);
                            const g = this._Str_24651(d, t.OBJECT_ICON_SPRITE, l.data);
                            g && (g.x = this._activeRoomActiveCanvasMouseX - l.data.width / 2, g.y = this._activeRoomActiveCanvasMouseY - l.data.height / 2)
                        }
                        getRoomObjectImage(t, e, s, i, n, r, o = 0) {
                            if (!this._roomManager) return null;
                            let a = -1,
                                c = null,
                                _ = null,
                                h = "",
                                l = null;
                            const u = this.getRoomId(t),
                                d = this._roomManager.getRoomInstance(u);
                            if (d) {
                                const t = d.getRoomObject(e, s);
                                if (t && t.model) switch (a = t.id, c = t.type, s) {
                                    case V.FLOOR:
                                    case V.WALL:
                                        {
                                            h = t.model.getValue(j.FURNITURE_COLOR).toString(),
                                            l = t.model.getValue(j.FURNITURE_EXTRAS);
                                            const e = t.model.getValue(j.FURNITURE_DATA_FORMAT);e !== Si.FORMAT_KEY && (_ = Oi.getData(e), _.initializeFromRoomObjectModel(t.model));
                                            break
                                        }
                                    case V.UNIT:
                                        h = t.model.getValue(j.FIGURE)
                                }
                            }
                            return this.getGenericRoomObjectImage(c, h, i, n, r, o, l, _, -1, -1, null, a)
                        }
                        getFurnitureFloorIconUrl(t) {
                            let e = null,
                                s = "";
                            return this._roomContentLoader ? (e = this._roomContentLoader.getFurnitureFloorNameForTypeId(t), s = this._roomContentLoader.getFurnitureFloorColorIndex(t).toString(), this._roomContentLoader.getAssetIconUrl(e, s)) : null
                        }
                        getFurnitureFloorIcon(t, e, s = null, i = null) {
                            return this.getFurnitureFloorImage(t, new K, 1, e, 0, s, -1, -1, i)
                        }
                        getFurnitureWallIconUrl(t, e = null) {
                            let s = null,
                                i = "";
                            return this._roomContentLoader ? (s = this._roomContentLoader.getFurnitureWallNameForTypeId(t, e), i = this._roomContentLoader.getFurnitureWallColorIndex(t).toString(), this._roomContentLoader.getAssetIconUrl(s, i)) : null
                        }
                        getFurnitureWallIcon(t, e, s = null) {
                            return this.getFurnitureWallImage(t, new K, 1, e, 0, s)
                        }
                        getFurnitureFloorImage(t, e, s, i, n = 0, r = null, o = -1, a = -1, c = null) {
                            let _ = null,
                                h = "";
                            return this._roomContentLoader && (_ = this._roomContentLoader.getFurnitureFloorNameForTypeId(t), h = this._roomContentLoader.getFurnitureFloorColorIndex(t).toString()), 1 === s && i ? this.getGenericRoomObjectThumbnail(_, h, i, r, c) : this.getGenericRoomObjectImage(_, h, e, s, i, n, r, c, o, a)
                        }
                        getFurnitureWallImage(t, e, s, i, n = 0, r = null, o = -1, a = -1) {
                            let c = null,
                                _ = "";
                            return this._roomContentLoader && (c = this._roomContentLoader.getFurnitureWallNameForTypeId(t), _ = this._roomContentLoader.getFurnitureWallColorIndex(t).toString()), 1 === s && i ? this.getGenericRoomObjectThumbnail(c, _, i, r, null) : this.getGenericRoomObjectImage(c, _, e, s, i, n, r, null, o, a)
                        }
                        getRoomObjectPetImage(t, e, s, i, n, r, o = !0, a = 0, c = null, _ = null) {
                            let h = null,
                                l = t + " " + e + " " + s.toString(16);
                            if (o || (l += " head"), c) {
                                l = l + " " + c.length;
                                for (const t of c) l = l + " " + t.layerId + " " + t.partId + " " + t.paletteId
                            }
                            return this._roomContentLoader && (h = this._roomContentLoader.getPetNameForType(t)), this.getGenericRoomObjectImage(h, l, i, n, r, a, null, null, -1, -1, _)
                        }
                        getGenericRoomObjectImage(e, s, i, n, r, o = 0, a = null, c = null, _ = -1, h = -1, l = null, u = -1) {
                            if (!this._roomManager) return null;
                            const d = new Dl;
                            if (d.id = -1, !this._ready || !e) return d;
                            let g = this._roomManager.getRoomInstance(t.TEMPORARY_ROOM);
                            if (!g && (g = this._roomManager.createRoomInstance(t.TEMPORARY_ROOM), !g)) return d;
                            let m = this._imageObjectIdBank._Str_19709();
                            const p = this.getRoomObjectCategoryForType(e);
                            if (m < 0) return d;
                            m++;
                            const b = g.createRoomObjectAndInitalize(m, e, p);
                            if (!b || !b.model || !b.logic) return d;
                            const E = b.model;
                            switch (p) {
                                case V.FLOOR:
                                case V.WALL:
                                    E.setValue(j.FURNITURE_COLOR, parseInt(s));
                                    break;
                                case V.UNIT:
                                    if (e === Z.USER || e === Z.BOT || e === Z.RENTABLE_BOT || e === Z.PET) E.setValue(j.FIGURE, s);
                                    else {
                                        const t = new fl(s);
                                        E.setValue(j.PET_PALETTE_INDEX, t.paletteId), E.setValue(j.PET_COLOR, t.color), t.headOnly && E.setValue(j.PET_HEAD_ONLY, 1), t.hasCustomParts && (E.setValue(j.PET_CUSTOM_LAYER_IDS, t.customLayerIds), E.setValue(j.PET_CUSTOM_PARTS_IDS, t.customPartIds), E.setValue(j.PET_CUSTOM_PALETTE_IDS, t.customPaletteIds)), l && E.setValue(j.FIGURE_POSTURE, l)
                                    }
                            }
                            b.setDirection(i);
                            const f = b.visualization;
                            if (!f) return g.removeRoomObject(m, p), d;
                            (_ > -1 || c) && (c && "" !== c.getLegacyString() ? b.logic.processUpdateMessage(new eu(parseInt(c.getLegacyString()), c)) : b.logic.processUpdateMessage(new eu(_, c)));
                            const S = new ol(n, new K(-135, 30, 0), new K(11, 11, 5));
                            if (f.update(S, 0, !0, !1), h > 0) {
                                let t = 0;
                                for (; t < h;) f.update(S, 0, !0, !1), t++
                            }
                            const I = f.getImage(o, u);
                            if (d.data = I, d.id = m, !this.isRoomContentTypeLoaded(e) && r) {
                                let t = this._imageCallbacks.get(m.toString());
                                t || (t = [], this._imageCallbacks.set(m.toString(), t)), t.push(r), E.setValue(j.IMAGE_QUERY_SCALE, n)
                            } else g.removeRoomObject(m, p), this._imageObjectIdBank._Str_15187(m - 1), d.id = 0;
                            return S.dispose(), d
                        }
                        getGenericRoomObjectThumbnail(e, s, i, n = null, r = null) {
                            if (!this._roomManager) return null;
                            const o = new Dl;
                            if (o.id = -1, !this._ready || !e) return o;
                            let a = this._roomManager.getRoomInstance(t.TEMPORARY_ROOM);
                            if (!a && (a = this._roomManager.createRoomInstance(t.TEMPORARY_ROOM), !a)) return o;
                            let c = this._thumbnailObjectIdBank._Str_19709();
                            if (this.getRoomObjectCategoryForType(e), c < 0) return o;
                            c++, o.id = c, o.data = null, o.image = null;
                            const _ = [e, s].join("_"),
                                h = this._roomContentLoader.getImage(_);
                            if (!h && i) {
                                let t = this._thumbnailCallbacks.get(_);
                                t || (t = [], this._thumbnailCallbacks.set(_, t), this._roomContentLoader.downloadImage(c, e, s, null)), t.push(i)
                            } else h && (o.image = h), this._thumbnailObjectIdBank._Str_15187(c - 1), o.id = 0;
                            return o
                        }
                        initalizeTemporaryObjectsByType(e, s) {
                            const i = this._roomManager.getRoomInstance(t.TEMPORARY_ROOM);
                            if (!i || !this._roomContentLoader) return;
                            const n = this._roomContentLoader.getCategoryForType(e),
                                r = i.getManager(n);
                            let o = null,
                                a = 0;
                            if (r && r.objects.length)
                                for (const t of r.objects.getValues())
                                    if (t && t.model && t.type === e) {
                                        const e = t.id,
                                            s = t.visualization;
                                        let r = null;
                                        if (s) {
                                            const e = t.model.getValue(j.IMAGE_QUERY_SCALE);
                                            o && a !== e && (o.dispose(), o = null), o || (a = e, o = new ol(e, new K(-135, 30, 0), new K(11, 11, 5))), s.update(o, 0, !0, !1), r = s.image
                                        }
                                        i.removeRoomObject(e, n), this._imageObjectIdBank._Str_15187(e - 1);
                                        const c = this._imageCallbacks.get(e.toString());
                                        if (c) {
                                            this._imageCallbacks.delete(e.toString());
                                            for (const t of c) t && (r ? t.imageReady(e, r) : t.imageFailed(e))
                                        }
                                    }
                            o && o.dispose()
                        }
                        _Str_7972(e) {
                            const s = this.getActiveRoomInstanceRenderingCanvas();
                            if (!s) return;
                            const i = this.getRenderingCanvasOverlay(s),
                                n = this._Str_16498(i, t.OBJECT_ICON_SPRITE);
                            n && (n.visible = e)
                        }
                        _Str_17948() {
                            const e = this.getActiveRoomInstanceRenderingCanvas();
                            if (!e) return;
                            const s = this.getRenderingCanvasOverlay(e);
                            this._Str_21215(s, t.OBJECT_ICON_SPRITE)
                        }
                        getRenderingCanvasOverlay(e) {
                            if (!e) return null;
                            const s = e.master;
                            return s && s.getChildByName(t.OVERLAY) || null
                        }
                        _Str_21215(t, e) {
                            if (!t) return !1;
                            let s = t.children.length - 1;
                            for (; s >= 0;) {
                                const i = t.getChildAt(s);
                                if (i && i.name === e) {
                                    if (t.removeChildAt(s), i.children.length) {
                                        const t = i.getChildAt(0);
                                        t.parent.removeChild(t), t.destroy()
                                    }
                                    return !0
                                }
                                s--
                            }
                            return !1
                        }
                        _Str_16498(t, e) {
                            if (!t) return null;
                            let s = t.children.length - 1;
                            for (; s >= 0;) {
                                const i = t.getChildAt(s);
                                if (i && i.name === e) return i;
                                s--
                            }
                            return null
                        }
                        _Str_21072(t, e) {
                            if (this._ready) {
                                const s = this.getRoomId(t),
                                    i = this._roomManager.getRoomInstance(s);
                                if (i) return i.getRoomObjectsForCategory(e)
                            }
                            return []
                        }
                        _Str_21543(t, e) {
                            const s = this.getRoomInstanceData(t).tileObjectMap;
                            s && s._Str_21192(e)
                        }
                        _Str_17722(t, e) {
                            const s = this.getRoomInstanceData(t).tileObjectMap;
                            s && s.populate(this._Str_21072(t, V.FLOOR))
                        }
                        _Str_9972(t, e, s = !1, i = !0, n = !1, r = -1) {
                            let o = null;
                            if (o = r > -1 ? this.getRoomInstanceRenderingCanvas(this._activeRoomId, r) : this.getActiveRoomInstanceRenderingCanvas(), !o) return null;
                            n && o._Str_20787();
                            let a = -1;
                            i || null == this._roomSessionManager.getSession(this._activeRoomId) || (a = this._roomSessionManager.getSession(this._activeRoomId).ownRoomIndex);
                            const c = new Dm,
                                _ = c._Str_4536(t, o, this, a),
                                h = c._Str_24177(this),
                                l = c._Str_22985(t, o, this, e);
                            return n && o._Str_22174(), console.log(_, h, l), null
                        }
                        createRoomScreenshot(t, e) {
                            const s = this.getRoomInstanceRenderingCanvas(t, e);
                            if (!s) return;
                            const i = s.getDisplayAsTexture(),
                                n = cp.instance.renderer.extract.base64(i),
                                r = new Image;
                            r.src = n, window.open("").document.write(r.outerHTML)
                        }
                        objectsInitialized(t) {
                            const e = this.getRoomIdFromString(t);
                            this.events.dispatchEvent(new Qh(Qh.OBJECTS_INITIALIZED, e))
                        }
                        getRoomId(t) {
                            return t.toString()
                        }
                        getRoomIdFromString(t) {
                            if (!t) return -1;
                            const e = t.split("_");
                            return e.length <= 0 ? -1 : parseInt(e[0])
                        }
                        getRoomObjectRoomId(t) {
                            return t && t.model ? t.model.getValue(j.OBJECT_ROOM_ID) : null
                        }
                        getPetTypeId(t) {
                            let e = -1;
                            if (t) {
                                const s = t.split(" ");
                                s.length > 1 && (e = parseInt(s[0]))
                            }
                            return e
                        }
                        getPetType(t) {
                            if (!t) return null;
                            const e = t.split(" ");
                            if (e.length > 1) {
                                const t = parseInt(e[0]);
                                return this._roomContentLoader ? this._roomContentLoader.getPetNameForType(t) : "pet"
                            }
                            return null
                        }
                        isRoomContentTypeLoaded(t) {
                            return !!this._roomContentLoader && null !== this._roomContentLoader.getCollection(t)
                        }
                        modifyRoomObjectData(t, e, s, i) {
                            return !(!this._roomObjectEventHandler || e !== V.WALL) && this._roomObjectEventHandler.modifyWallItemData(this._activeRoomId, t, s, i)
                        }
                        deleteRoomObject(t, e) {
                            return !(!this._roomObjectEventHandler || e !== V.WALL) && this._roomObjectEventHandler.deleteWallItem(this._activeRoomId, t)
                        }
                        get connection() {
                            return this._communication.connection
                        }
                        get sessionDataManager() {
                            return this._sessionDataManager
                        }
                        set sessionDataManager(t) {
                            this._sessionDataManager = t
                        }
                        get roomSessionManager() {
                            return this._roomSessionManager
                        }
                        set roomSessionManager(t) {
                            this._roomSessionManager = t
                        }
                        get roomManager() {
                            return this._roomManager
                        }
                        set roomManager(t) {
                            this._roomManager = t
                        }
                        get objectEventHandler() {
                            return this._roomObjectEventHandler
                        }
                        get roomRendererFactory() {
                            return this._roomRendererFactory
                        }
                        get visualizationFactory() {
                            return this._visualizationFactory
                        }
                        get logicFactory() {
                            return this._logicFactory
                        }
                        get activeRoomId() {
                            return this._activeRoomId
                        }
                        get ready() {
                            return this._ready
                        }
                        get roomContentLoader() {
                            return this._roomContentLoader
                        }
                        get isDecorating() {
                            if (!this._roomSessionManager) return !1;
                            const t = this._roomSessionManager.getSession(this._activeRoomId);
                            return t && t.isDecorating || !1
                        }
                        get _Str_11555() {
                            return !0
                        }
                        get selectedAvatarId() {
                            return this._roomObjectEventHandler ? this._roomObjectEventHandler.selectedAvatarId : -1
                        }
                        getRoomObjectCount(t, e) {
                            return null == this._roomManager ? 0 : this._roomManager.getRoomInstance(t.toString()).getRoomObjectsForCategory(e).length
                        }
                    }
                    return t.ROOM_OBJECT_ID = -1, t.ROOM_OBJECT_TYPE = "room", t.CURSOR_OBJECT_ID = -2, t.CURSOR_OBJECT_TYPE = "tile_cursor", t.ARROW_OBJECT_ID = -3, t.ARROW_OBJECT_TYPE = "selection_arrow", t.OVERLAY = "overlay", t.OBJECT_ICON_SPRITE = "object_icon_sprite", t.DRAG_THRESHOLD = 15, t.TEMPORARY_ROOM = "temporary_room", t
                })(),
                wm = (() => {
                    class t {}
                    return t.NORMAL = 0, t.GENERIC = 1, t.BOT = 2, t
                })(),
                Lm = (() => {
                    class t extends Tl {
                        constructor(t, e, s, i, n, r = 0, o = null, a = -1) {
                            super(t, e), this._objectId = s, this._message = i, this._chatType = n, this._links = o, this._extraParam = a, this._style = r
                        }
                        get objectId() {
                            return this._objectId
                        }
                        get message() {
                            return this._message
                        }
                        get chatType() {
                            return this._chatType
                        }
                        get links() {
                            return this._links
                        }
                        get extraParam() {
                            return this._extraParam
                        }
                        get style() {
                            return this._style
                        }
                    }
                    return t.CHAT_EVENT = "RSCE_CHAT_EVENT", t.FLOOD_EVENT = "RSCE_FLOOD_EVENT", t.CHAT_NORMAL = 0, t.CHAT_WHISPER = 1, t.CHAT_SHOUT = 2, t._Str_5821 = 3, t._Str_6081 = 4, t._Str_8971 = 5, t._Str_5958 = 6, t._Str_6065 = 7, t._Str_5998 = 8, t._Str_5904 = 9, t._Str_8909 = 10, t
                })();
            class xm extends d {
                constructor(t, e) {
                    super(), this._connection = t, this._listener = e, this._roomId = 0
                }
                onDispose() {
                    this._connection = null, this._listener = null
                }
                setRoomId(t) {
                    this._roomId = t
                }
                get connection() {
                    return this._connection
                }
                get listener() {
                    return this._listener
                }
                get roomId() {
                    return this._roomId
                }
            }
            class Pm extends xm {
                constructor(t, e) {
                    super(t, e), t.addMessageEvent(new ia(this.onRoomUnitChatEvent.bind(this))), t.addMessageEvent(new na(this.onRoomUnitChatEvent.bind(this))), t.addMessageEvent(new ra(this.onRoomUnitChatEvent.bind(this))), t.addMessageEvent(new Qn(this.onRespectReceivedEvent.bind(this)))
                }
                onRoomUnitChatEvent(t) {
                    if (!this.listener) return;
                    const e = this.listener.getSession(this.roomId);
                    if (!e) return;
                    const s = t.getParser();
                    if (!s) return;
                    let i = Lm.CHAT_NORMAL;
                    t instanceof na ? i = Lm.CHAT_SHOUT : t instanceof ra && (i = Lm.CHAT_WHISPER);
                    const n = new Lm(Lm.CHAT_EVENT, e, s.roomIndex, s.message, i, s.bubble);
                    this.listener.events.dispatchEvent(n)
                }
                onRespectReceivedEvent(t) {
                    if (!this.listener) return;
                    const e = this.listener.getSession(this.roomId);
                    if (!e) return;
                    const s = t.getParser();
                    if (!s) return;
                    const i = e.userDataManager.getUserData(s.userId);
                    i && this.listener.events.dispatchEvent(new Lm(Lm.CHAT_EVENT, e, i.roomIndex, "", Lm._Str_5821, wm.GENERIC))
                }
            }
            let Fm = (() => {
                class t extends Tl {
                    constructor(t, e) {
                        super(t, e)
                    }
                }
                return t.RSDUE_ALLOW_PETS = "RSDUE_ALLOW_PETS", t
            })();
            class Gm extends xm {
                constructor(t, e) {
                    super(t, e), t.addMessageEvent(new Ar(this.onRoomInfoEvent.bind(this)))
                }
                onRoomInfoEvent(t) {
                    if (!(t instanceof Ar)) return;
                    const e = t.getParser();
                    if (!e) return;
                    if (e.roomForward) return;
                    const s = this.listener.getSession(this.roomId);
                    if (!s) return;
                    const i = e.data;
                    s.tradeMode = i.tradeMode, s.isGuildRoom = 0 !== i.habboGroupId, s.doorMode = i.doorMode, s.allowPets = i.allowPets, s.moderationSettings = e.moderation, this.listener.events.dispatchEvent(new Fm(Fm.RSDUE_ALLOW_PETS, s)), this.listener.events.dispatchEvent(new Tl(Tl.ROOM_DATA, s))
                }
            }
            class Ym {
                constructor(t, e, s, i) {
                    this._id = t, this._type = e, this._color = s, this._light = i
                }
                get id() {
                    return this._id
                }
                get type() {
                    return this._type
                }
                get color() {
                    return this._color
                }
                get _Str_4272() {
                    return this._light
                }
            }
            let km = (() => {
                class t extends Tl {
                    constructor(t, e) {
                        super(t, e), this._selectedPresetId = 0, this._presets = []
                    }
                    get _Str_10888() {
                        return this._presets.length
                    }
                    get selectedPresetId() {
                        return this._selectedPresetId
                    }
                    set selectedPresetId(t) {
                        this._selectedPresetId = t
                    }
                    _Str_17287(t, e, s, i) {
                        const n = new Ym(t, e, s, i);
                        this._presets[t - 1] = n
                    }
                    _Str_14989(t) {
                        return t < 0 || t >= this._presets.length ? null : this._presets[t]
                    }
                }
                return t.RSDPE_PRESETS = "RSDPE_PRESETS", t
            })();
            class Vm extends xm {
                constructor(t, e) {
                    super(t, e), t.addMessageEvent(new Io(this._Str_25786.bind(this)))
                }
                _Str_25786(t) {
                    if (!t) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = this.listener.getSession(this.roomId);
                    if (!s) return;
                    const i = new km(km.RSDPE_PRESETS, s);
                    i.selectedPresetId = e._Str_6226;
                    let n = 0;
                    for (; n < e._Str_10888;) {
                        const t = e._Str_14989(n);
                        t && i._Str_17287(t.id, t.type, t.color, t.intensity), n++
                    }
                    this.listener && this.listener.events.dispatchEvent(i)
                }
            }
            class Zm extends xm {
                constructor(t, e) {
                    super(t, e), t.addMessageEvent(new lr(this.onRoomRightsEvent.bind(this))), t.addMessageEvent(new cr(this.onRoomRightsClearEvent.bind(this))), t.addMessageEvent(new dr(this.onRoomRightsOwnerEvent.bind(this)))
                }
                onRoomRightsEvent(t) {
                    if (!(t instanceof lr)) return;
                    const e = this.listener.getSession(this.roomId);
                    e && e.setControllerLevel(t.getParser().controllerLevel)
                }
                onRoomRightsClearEvent(t) {
                    if (!(t instanceof cr)) return;
                    const e = this.listener.getSession(this.roomId);
                    e && e.setControllerLevel(_r.NONE)
                }
                onRoomRightsOwnerEvent(t) {
                    if (!(t instanceof dr)) return;
                    const e = this.listener.getSession(this.roomId);
                    e && e.setRoomOwner()
                }
            }
            let jm = (() => {
                    class t extends Tl {
                        constructor(t, e, s) {
                            super(t, e), this._userName = "", this._userName = s
                        }
                        get userName() {
                            return this._userName
                        }
                    }
                    return t.DOORBELL = "RSDE_DOORBELL", t.RSDE_REJECTED = "RSDE_REJECTED", t.RSDE_ACCEPTED = "RSDE_ACCEPTED", t
                })(),
                Bm = (() => {
                    class t extends xm {
                        constructor(t, e) {
                            super(t, e), t.addMessageEvent(new br(this.onRoomEnterEvent.bind(this))), t.addMessageEvent(new Wo(this.onRoomModelNameEvent.bind(this))), t.addMessageEvent(new ns(this.onDesktopViewEvent.bind(this))), t.addMessageEvent(new sr(this.onRoomDoorbellAcceptedEvent.bind(this))), t.addMessageEvent(new or(this.onRoomDoorbellRejectedEvent.bind(this)))
                        }
                        onRoomEnterEvent(e) {
                            e instanceof br && this.listener && this.listener.sessionUpdate(this.roomId, t.RS_CONNECTED)
                        }
                        onRoomModelNameEvent(e) {
                            if (!(e instanceof Wo)) return;
                            const s = this.roomId,
                                i = e.getParser().roomId;
                            this.listener && (this.listener.sessionReinitialize(s, i), this.listener.sessionUpdate(this.roomId, t.RS_READY))
                        }
                        onDesktopViewEvent(e) {
                            e instanceof ns && this.listener && this.listener.sessionUpdate(this.roomId, t.RS_DISCONNECTED)
                        }
                        onRoomDoorbellAcceptedEvent(t) {
                            if (!(t instanceof sr && this.listener)) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = e.userName;
                            if (s && s.length && this.listener.events) {
                                const t = this.listener.getSession(this.roomId);
                                if (!t) return;
                                this.listener.events.dispatchEvent(new jm(jm.RSDE_ACCEPTED, t, s))
                            }
                        }
                        onRoomDoorbellRejectedEvent(e) {
                            if (!(e instanceof or && this.listener)) return;
                            const s = e.getParser();
                            if (!s) return;
                            const i = s.userName;
                            if (i && i.length) {
                                if (this.listener.events) {
                                    const t = this.listener.getSession(this.roomId);
                                    if (!t) return;
                                    this.listener.events.dispatchEvent(new jm(jm.RSDE_REJECTED, t, i))
                                }
                            } else this.listener.sessionUpdate(this.roomId, t.RS_DISCONNECTED)
                        }
                    }
                    return t.RS_CONNECTED = "RS_CONNECTED", t.RS_READY = "RS_READY", t.RS_DISCONNECTED = "RS_DISCONNECTED", t
                })(),
                Hm = (() => {
                    class t extends Tl {
                        constructor(e, s, i) {
                            super(t.RSDE_DANCE, e), this._roomIndex = s, this._danceId = i
                        }
                        get roomIndex() {
                            return this._roomIndex
                        }
                        get danceId() {
                            return this._danceId
                        }
                    }
                    return t.RSDE_DANCE = "RSDE_DANCE", t
                })(),
                Wm = (() => {
                    class t extends Tl {
                        constructor(e, s, i) {
                            super(t.RSUBE_BADGES, e), this._userId = 0, this._badges = [], this._userId = s, this._badges = i
                        }
                        get userId() {
                            return this._userId
                        }
                        get badges() {
                            return this._badges
                        }
                    }
                    return t.RSUBE_BADGES = "RSUBE_BADGES", t
                })(),
                zm = (() => {
                    class t extends Tl {
                        constructor(e, s) {
                            super(t.USER_DATA_UPDATED, e), this._addedUsers = s
                        }
                        get addedUsers() {
                            return this._addedUsers
                        }
                    }
                    return t.USER_DATA_UPDATED = "RMUDUE_USER_DATA_UPDATED", t
                })();
            class Km {
                constructor(t) {
                    this._roomIndex = -1, this._name = "", this._type = 0, this._sex = "", this._figure = "", this._custom = "", this._webID = 0, this._groupID = "", this._groupStatus = 0, this._groupName = "", this._ownerId = 0, this._ownerName = "", this._petLevel = 0, this._rarityLevel = 0, this._roomIndex = t
                }
                get roomIndex() {
                    return this._roomIndex
                }
                get activityPoints() {
                    return this._activityPoints
                }
                set activityPoints(t) {
                    this._activityPoints = t
                }
                get name() {
                    return this._name
                }
                set name(t) {
                    this._name = t
                }
                get type() {
                    return this._type
                }
                set type(t) {
                    this._type = t
                }
                get sex() {
                    return this._sex
                }
                set sex(t) {
                    this._sex = t
                }
                get figure() {
                    return this._figure
                }
                set figure(t) {
                    this._figure = t
                }
                get custom() {
                    return this._custom
                }
                set custom(t) {
                    this._custom = t
                }
                get webID() {
                    return this._webID
                }
                set webID(t) {
                    this._webID = t
                }
                get guildId() {
                    return this._groupID
                }
                set guildId(t) {
                    this._groupID = t
                }
                get groupName() {
                    return this._groupName
                }
                set groupName(t) {
                    this._groupName = t
                }
                get groupStatus() {
                    return this._groupStatus
                }
                set groupStatus(t) {
                    this._groupStatus = t
                }
                get ownerId() {
                    return this._ownerId
                }
                set ownerId(t) {
                    this._ownerId = t
                }
                get ownerName() {
                    return this._ownerName
                }
                set ownerName(t) {
                    this._ownerName = t
                }
                get rarityLevel() {
                    return this._rarityLevel
                }
                set rarityLevel(t) {
                    this._rarityLevel = t
                }
                get hasSaddle() {
                    return this._hasSaddle
                }
                set hasSaddle(t) {
                    this._hasSaddle = t
                }
                get isRiding() {
                    return this._isRiding
                }
                set isRiding(t) {
                    this._isRiding = t
                }
                get canBreed() {
                    return this._canBreed
                }
                set canBreed(t) {
                    this._canBreed = t
                }
                get canHarvest() {
                    return this._canHarvest
                }
                set canHarvest(t) {
                    this._canHarvest = t
                }
                get canRevive() {
                    return this._canRevive
                }
                set canRevive(t) {
                    this._canRevive = t
                }
                get hasBreedingPermission() {
                    return this._hasBreedingPermission
                }
                set hasBreedingPermission(t) {
                    this._hasBreedingPermission = t
                }
                get petLevel() {
                    return this._petLevel
                }
                set petLevel(t) {
                    this._petLevel = t
                }
                get botSkills() {
                    return this._botSkills
                }
                set botSkills(t) {
                    this._botSkills = t
                }
                get isModerator() {
                    return this._Str_9831
                }
                set isModerator(t) {
                    this._Str_9831 = t
                }
            }
            class Xm extends xm {
                constructor(t, e) {
                    super(t, e), t.addMessageEvent(new ma(this.onRoomUnitEvent.bind(this))), t.addMessageEvent(new va(this.onRoomUnitInfoEvent.bind(this))), t.addMessageEvent(new Aa(this.onRoomUnitRemoveEvent.bind(this))), t.addMessageEvent(new _a(this.onRoomUnitDanceEvent.bind(this))), t.addMessageEvent(new ic(this.onUserCurrentBadgesEvent.bind(this))), t.addMessageEvent(new nr(this.onRoomDoorbellEvent.bind(this))), t.addMessageEvent(new hc(this.onUserNameChangeMessageEvent.bind(this)))
                }
                onRoomUnitEvent(t) {
                    if (!this.listener) return;
                    const e = this.listener.getSession(this.roomId);
                    if (!e) return;
                    const s = t.getParser().users,
                        i = [];
                    if (s && s.length)
                        for (const n of s) {
                            if (!n) continue;
                            const t = new Km(n.roomIndex);
                            t.name = n.name, t.custom = n.custom, t.activityPoints = n.activityPoints, t.figure = n.figure, t.type = n.userType, t.webID = n.webID, t.guildId = n.groupID, t.groupName = n.groupName, t.groupStatus = n.groupStatus, t.sex = n.sex, t.ownerId = n.ownerId, t.ownerName = n.ownerName, t.rarityLevel = n.rarityLevel, t.hasSaddle = n.hasSaddle, t.isRiding = n.isRiding, t.canBreed = n.canBreed, t.canHarvest = n.canHarvest, t.canRevive = n.canRevive, t.hasBreedingPermission = n.hasBreedingPermission, t.petLevel = n.petLevel, t.botSkills = n.botSkills, t.isModerator = n.isModerator, e.userDataManager.getUserData(n.roomIndex) || i.push(t), e.userDataManager.updateUserData(t)
                        }
                    this.listener.events.dispatchEvent(new zm(e, i))
                }
                onRoomUnitInfoEvent(t) {
                    if (!this.listener) return;
                    const e = this.listener.getSession(this.roomId);
                    if (!e) return;
                    const s = t.getParser();
                    s && (e.userDataManager.updateFigure(s.unitId, s.figure, s.gender, !1, !1), e.userDataManager.updateMotto(s.unitId, s.motto))
                }
                onRoomUnitRemoveEvent(t) {
                    if (!this.listener) return;
                    const e = this.listener.getSession(this.roomId);
                    e && e.userDataManager.removeUserData(t.getParser().unitId)
                }
                onRoomUnitDanceEvent(t) {
                    if (!this.listener) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = this.listener.getSession(this.roomId);
                    s && this.listener.events.dispatchEvent(new Hm(s, e.unitId, e.danceId))
                }
                onUserCurrentBadgesEvent(t) {
                    if (!this.listener) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = this.listener.getSession(this.roomId);
                    s && (s.userDataManager.setUserBadges(e.userId, e.badges), this.listener.events.dispatchEvent(new Wm(s, e.userId, e.badges)))
                }
                onRoomDoorbellEvent(t) {
                    if (!this.listener) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = e.userName;
                    if (!s || !s.length) return;
                    const i = this.listener.getSession(this.roomId);
                    i && this.listener.events.dispatchEvent(new jm(jm.DOORBELL, i, s))
                }
                onUserNameChangeMessageEvent(t) {
                    if (!this.listener) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = this.listener.getSession(this.roomId);
                    s && s.userDataManager.updateName(e.id, e.newName)
                }
            }
            let qm = (() => {
                    class t {
                        static _Str_22614(e) {
                            switch (e) {
                                case t._Str_9173:
                                    return "${trading.mode.free}";
                                case t._Str_14475:
                                    return "${trading.mode.controller}";
                                case t._Str_12752:
                                    return "${trading.mode.not.allowed}"
                            }
                            return ""
                        }
                    }
                    return t._Str_12752 = 0, t._Str_14475 = 1, t._Str_9173 = 2, t
                })(),
                Jm = (() => {
                    class t extends d {
                        constructor() {
                            super(), this._connection = null, this._userDataByType = new Map, this._userDataByRoomIndex = new Map, this._userBadges = new Map
                        }
                        onDispose() {
                            this._connection = null
                        }
                        setConnection(t) {
                            this._connection = t
                        }
                        getUserData(e) {
                            return this.getDataByType(e, t.TYPE_USER)
                        }
                        getPetData(e) {
                            return this.getDataByType(e, t.TYPE_PET)
                        }
                        getBotData(e) {
                            return this.getDataByType(e, t.TYPE_BOT)
                        }
                        getRentableBotData(e) {
                            return this.getDataByType(e, t.TYPE_RENTABLE_BOT)
                        }
                        getDataByType(t, e) {
                            const s = this._userDataByType.get(e);
                            return s && s.get(t) || null
                        }
                        getUserDataByIndex(t) {
                            return this._userDataByRoomIndex.get(t) || null
                        }
                        updateUserData(t) {
                            if (!t) return;
                            this.removeUserData(t.roomIndex);
                            let e = this._userDataByType.get(t.type);
                            e || (e = new Map, this._userDataByType.set(t.type, e)), e.set(t.webID, t), this._userDataByRoomIndex.set(t.roomIndex, t)
                        }
                        removeUserData(t) {
                            const e = this.getUserDataByIndex(t);
                            if (!e) return;
                            this._userDataByRoomIndex.delete(t);
                            const s = this._userDataByType.get(e.type);
                            s && s.delete(e.webID)
                        }
                        getUserBadges(t) {
                            return this._connection && this._connection.send(new Fh(t)), this._userBadges.get(t) || []
                        }
                        setUserBadges(t, e) {
                            this._userBadges.set(t, e)
                        }
                        updateFigure(t, e, s, i, n) {
                            const r = this.getUserDataByIndex(t);
                            r && (r.figure = e, r.sex = s, r.hasSaddle = i, r.isRiding = n)
                        }
                        updateName(t, e) {
                            const s = this.getUserDataByIndex(t);
                            s && (s.name = e)
                        }
                        updateMotto(t, e) {
                            const s = this.getUserDataByIndex(t);
                            s && (s.custom = e)
                        }
                        get connection() {
                            return this._connection
                        }
                    }
                    return t.TYPE_USER = 1, t.TYPE_PET = 2, t.TYPE_BOT = 3, t.TYPE_RENTABLE_BOT = 4, t
                })();
            class Qm extends d {
                constructor() {
                    super(), this._connection = null, this._userData = new Jm, this._roomId = 0, this._password = null, this._state = Tl.CREATED, this._tradeMode = qm._Str_12752, this._doorMode = 0, this._controllerLevel = _r.NONE, this._ownRoomIndex = -1, this._isGuildRoom = !1, this._isRoomOwner = !1, this._isDecorating = !1, this._isSpectator = !1, this._moderationSettings = null
                }
                onDispose() {
                    this._userData && (this._userData.dispose(), this._userData = null), this._connection = null
                }
                setConnection(t) {
                    !this._connection && t && (this._connection = t, this._userData && this._userData.setConnection(t))
                }
                setControllerLevel(t) {
                    this._controllerLevel = t >= _r.NONE && t <= _r.MODERATOR ? t : _r.NONE
                }
                setOwnRoomIndex(t) {
                    this._ownRoomIndex = t
                }
                setRoomOwner() {
                    this._isRoomOwner = !0
                }
                start() {
                    return !(this._state !== Tl.CREATED || !this._connection) && (this._state = Tl.STARTED, this.enterRoom())
                }
                enterRoom() {
                    return !!this._connection && (this._connection.send(new C_(this._roomId, this._password)), !0)
                }
                reset(t) {
                    t !== this._roomId && (this._roomId = t)
                }
                sendChatMessage(t, e) {
                    this._connection.send(new Eh(t, e))
                }
                sendShoutMessage(t, e) {
                    this._connection.send(new fh(t, e))
                }
                sendWhisperMessage(t, e, s) {
                    this._connection.send(new Sh(t, e, s))
                }
                sendChatTypingMessage(t) {
                    this._connection.send(t ? new Ih : new Rh)
                }
                sendMottoMessage(t) {
                    this._connection.send(new kh(t))
                }
                sendDanceMessage(t) {
                    this._connection.send(new Th(t))
                }
                sendExpressionMessage(t) {
                    this._connection.send(new vh(t))
                }
                sendSignMessage(t) {
                    t < 0 || t > 17 || this._connection.send(new Mh(t))
                }
                sendPostureMessage(t) {
                    this._connection.send(new Ch(t))
                }
                sendDoorbellApprovalMessage(t, e) {
                    this._connection.send(new A_(t, e))
                }
                sendAmbassadorAlertMessage(t) {
                    this._connection.send(new M_(t))
                }
                sendKickMessage(t) {
                    this._connection.send(new w_(t))
                }
                sendMuteMessage(t, e) {
                    this._connection.send(new x_(t, e, this._roomId))
                }
                sendBanMessage(t, e) {
                    this._connection.send(new U_(t, this._roomId, e))
                }
                sendGiveRightsMessage(t) {
                    this._connection.send(new N_(t))
                }
                sendTakeRightsMessage(t) {
                    this._connection.send(new P_(t))
                }
                updateMoodlightData(t, e, s, i, n) {
                    const r = "000000" + s.toString(16).toUpperCase(),
                        o = "#" + r.substring(r.length - 6);
                    this.connection.send(new q_(t, e, o, i, n))
                }
                toggleMoodlightState() {
                    this.connection.send(new J_)
                }
                pickupPet(t) {}
                pickupBot(t) {
                    this._connection && this._connection.send(new W_(t))
                }
                requestMoodlightSettings() {
                    this._connection && this._connection.send(new X_)
                }
                get connection() {
                    return this._connection
                }
                get userDataManager() {
                    return this._userData
                }
                get roomId() {
                    return this._roomId
                }
                set roomId(t) {
                    this._roomId = t
                }
                get password() {
                    return this._password
                }
                set password(t) {
                    this._password = t
                }
                get state() {
                    return this._state
                }
                get _Str_7411() {
                    return !0
                }
                get tradeMode() {
                    return this._tradeMode
                }
                set tradeMode(t) {
                    this._tradeMode = t
                }
                get doorMode() {
                    return this._doorMode
                }
                set doorMode(t) {
                    this._doorMode = t
                }
                get allowPets() {
                    return this._allowPets
                }
                set allowPets(t) {
                    this._allowPets = t
                }
                get controllerLevel() {
                    return this._controllerLevel
                }
                get ownRoomIndex() {
                    return this._ownRoomIndex
                }
                get isGuildRoom() {
                    return this._isGuildRoom
                }
                set isGuildRoom(t) {
                    this._isGuildRoom = t
                }
                get isRoomOwner() {
                    return this._isRoomOwner
                }
                get isDecorating() {
                    return this._isDecorating
                }
                set isDecorating(t) {
                    this._isDecorating = t
                }
                get isSpectator() {
                    return this._isSpectator
                }
                set isSpectator(t) {
                    this._isSpectator = t
                }
                get moderationSettings() {
                    return this._moderationSettings
                }
                set moderationSettings(t) {
                    this._moderationSettings = t
                }
            }
            class $m extends L {
                constructor(t, e) {
                    super(), this._communication = t, this._roomEngine = e, this._handlers = [], this._sessions = new Map, this._pendingSession = null, this._sessionStarting = !1, this._viewerSession = null, this.onRoomEngineEvent = this.onRoomEngineEvent.bind(this)
                }
                onInit() {
                    this.createHandlers(), this.processPendingSession(), this._roomEngine.events.addEventListener(Qh.ENGINE_INITIALIZED, this.onRoomEngineEvent)
                }
                onDispose() {
                    this._roomEngine.events.removeEventListener(Qh.ENGINE_INITIALIZED, this.onRoomEngineEvent), super.onDispose()
                }
                createHandlers() {
                    const t = this._communication && this._communication.connection;
                    t && this._handlers.push(new Pm(t, this), new Gm(t, this), new Vm(t, this), new Zm(t, this), new Bm(t, this), new Xm(t, this))
                }
                setHandlers(t) {
                    if (this._handlers && this._handlers.length)
                        for (const e of this._handlers) e && e.setRoomId(t.roomId)
                }
                onRoomEngineEvent(t) {
                    this.processPendingSession()
                }
                processPendingSession() {
                    this._pendingSession && this._roomEngine.ready && (this.addSession(this._pendingSession), this._pendingSession = null)
                }
                getSession(t) {
                    return this._sessions.get(this.getRoomId(t)) || null
                }
                createSession(t, e = null) {
                    const s = new Qm;
                    return s.roomId = t, s.password = e, this.addSession(s)
                }
                addSession(t) {
                    return this._roomEngine.ready ? (this._sessionStarting = !0, this._sessions.get(this.getRoomId(t.roomId)) && this.removeSession(t.roomId, !1), t.setConnection(this._communication.connection), this._sessions.set(this.getRoomId(t.roomId), t), this.events.dispatchEvent(new Tl(Tl.CREATED, t)), this._viewerSession = t, this.startSession(this._viewerSession), !0) : (this._pendingSession = t, !1)
                }
                startSession(t) {
                    return t.state !== Tl.STARTED && (this._sessionStarting = !1, t.start() ? (this.events.dispatchEvent(new Tl(Tl.STARTED, t)), this.setHandlers(t), !0) : (this.removeSession(t.roomId), !1))
                }
                removeSession(t, e = !0) {
                    const s = this.getSession(t);
                    s && (this._sessions.delete(this.getRoomId(t)), this.events.dispatchEvent(new Tl(Tl.ENDED, s, e)), s.dispose())
                }
                sessionUpdate(t, e) {
                    if (this.getSession(t)) switch (e) {
                        case Bm.RS_CONNECTED:
                        case Bm.RS_READY:
                            return;
                        case Bm.RS_DISCONNECTED:
                            return void this.removeSession(t)
                    }
                }
                sessionReinitialize(t, e) {
                    const s = this.getSession(t);
                    s && (this._sessions.delete(this.getRoomId(t)), s.reset(e), this._sessions.set(this.getRoomId(e), s), this.setHandlers(s))
                }
                getRoomId(t) {
                    return "hard_coded_room_id"
                }
                get communication() {
                    return this._communication
                }
                get roomEngine() {
                    return this._roomEngine
                }
                get viewerSession() {
                    return this._viewerSession
                }
            }
            let tp = (() => {
                class t {
                    static logEventLog(t) {
                        try {
                            h.available && h.call("logEventLog", t)
                        } catch (e) {
                            g.log("External interface not working, failed to log event log.")
                        }
                    }
                    static openPage(t) {
                        try {
                            h.available ? h.call("openPage", t) : g.log("External interface not available, openPage failed.")
                        } catch (e) {
                            g.log("Failed to open web page " + t)
                        }
                    }
                    static sendHeartBeat() {
                        try {
                            h.available && h.call("heartBeat")
                        } catch (t) {
                            g.log("Failed to send heartbeat")
                        }
                    }
                    static openWebPageAndMinimizeClient(e) {
                        try {
                            h.available && t.openPage(e)
                        } catch (s) {
                            g.log("Failed to open web page " + e)
                        }
                    }
                    static closeWebPageAndRestoreClient() {
                        try {
                            h.available && h.call("closeWebPageAndRestoreClient")
                        } catch (t) {
                            g.log("Failed to close web page and restore client!")
                        }
                    }
                    static openHabblet(t, e = null) {
                        try {
                            h.available && h.call("openHabblet", t, e)
                        } catch (s) {
                            g.log("Failed to open Habblet " + t)
                        }
                    }
                    static closeHabblet(t, e = null) {
                        try {
                            h.available && h.call("closeHabblet", t, e)
                        } catch (s) {
                            g.log("Failed to close Habblet " + t)
                        }
                    }
                    static send(t, e) {
                        try {
                            h.available && h.call("disconnect", t, e)
                        } catch (s) {
                            g.log("Failed to close send ")
                        }
                    }
                    static showGame(t) {
                        try {
                            h.available && h.callGame("showGame", t)
                        } catch (e) {
                            g.log("Failed to open game: " + e)
                        }
                    }
                    static hideGame() {
                        try {
                            h.available && h.callGame("hideGame")
                        } catch (t) {
                            g.log("Failed to hide game")
                        }
                    }
                    static open(t) {
                        try {
                            h.available ? h.call("openExternalLink", escape(t)) : g.log("External interface not available. Could not request to open: " + t)
                        } catch (e) {
                            g.log("External interface not working. Could not request to open: " + t)
                        }
                    }
                    static roomVisited(t) {
                        try {
                            h.available ? h.call("roomVisited", t) : g.log("External interface not available. Could not store last room visit.")
                        } catch (e) {
                            g.log("External interface not working. Could not store last room visit.")
                        }
                    }
                    static openMinimail(t) {
                        try {
                            h.available ? h.call("openMinimail", t) : g.log("External interface not available. Could not open minimail.")
                        } catch (e) {
                            g.log("External interface not working. Could not open minimail.")
                        }
                    }
                    static openNews() {
                        try {
                            h.available ? h.call("openNews") : g.log("External interface not available. Could not open news.")
                        } catch (t) {
                            g.log("External interface not working. Could not open news.")
                        }
                    }
                    static closeNews() {
                        try {
                            h.available ? h.call("closeNews") : g.log("External interface not available. Could not close news.")
                        } catch (t) {
                            g.log("External interface not working. Could not close news.")
                        }
                    }
                    static openAvatars() {
                        try {
                            h.available ? h.call("openAvatars") : g.log("External interface not available. Could not open avatars.")
                        } catch (t) {
                            g.log("External interface not working. Could not open avatars.")
                        }
                    }
                    static openRoomEnterAd() {
                        try {
                            h.available ? h.call("openRoomEnterAd") : g.log("External interface not available. Could not open roomenterad.")
                        } catch (t) {
                            g.log("External interface not working. Could not open roomenterad.")
                        }
                    }
                    static updateFigure(t) {
                        try {
                            h.available ? h.call("updateFigure", t) : g.log("External interface not available. Could not update figure.")
                        } catch (e) {
                            g.log("External interface not working. Could not update figure.")
                        }
                    }
                }
                return t.ADVERTISEMENT = "advertisement", t.OPENLINK = "openlink", t.OPENROOM = "openroom", t
            })();
            class ep {
                constructor(t, e) {
                    this._image = t, this._placeHolder = e
                }
                get image() {
                    return this._image
                }
                get placeHolder() {
                    return this._placeHolder
                }
            }
            let sp = (() => {
                    class t {
                        constructor(t, e) {
                            this._assets = t, this._events = e, this._requestedBadges = new Map
                        }
                        dispose() {
                            this._assets = null
                        }
                        getBadgeImage(t, e = "normal_badge", s = !0) {
                            let i = this.getBadgeTexture(t, e);
                            return !i && s && (i = this.getBadgePlaceholder()), i
                        }
                        getBadgeInfo(t) {
                            const e = this.getBadgeTexture(t);
                            return e ? new ep(e, !1) : new ep(this.getBadgePlaceholder(), !0)
                        }
                        loadBadgeImage(t, e = "normal_badge") {
                            return this._assets.getTexture(t) ? t : (this.getBadgeTexture(t, e), null)
                        }
                        getBadgeTexture(t, e = "normal_badge") {
                            const s = this._assets.getTexture(t);
                            if (s) return s.clone();
                            if (this._requestedBadges.get(t)) return null;
                            const i = this.getBadgeUrl(t, e);
                            return i && (this._requestedBadges.set(t, !0), this._assets.downloadAsset(i, e => {
                                if (e) {
                                    const e = this._assets.getTexture(t);
                                    e && this._events && this._events.dispatchEvent(new vl(t, e.clone()))
                                }
                            })), null
                        }
                        getBadgePlaceholder() {
                            const t = this._assets.getTexture("loading_icon");
                            return t ? t.clone() : null
                        }
                        getBadgeUrl(e, s = "normal_badge") {
                            let i = null;
                            switch (s) {
                                case t.NORMAL_BADGE:
                                    i = cp.instance.getConfiguration("badge.asset.url").replace("%badgename%", e);
                                    break;
                                case t.GROUP_BADGE:
                                    i = cp.instance.getConfiguration("badge.asset.group.url").replace("%badgedata%", e)
                            }
                            return i
                        }
                    }
                    return t.GROUP_BADGE = "group_badge", t.NORMAL_BADGE = "normal_badge", t
                })(),
                ip = (() => {
                    class t {}
                    return t.SUPER_USER = 9, t.ADMINISTRATOR = 8, t.COMMUNITY = 7, t.PLAYER_SUPPORT = 6, t.MODERATOR = 5, t.EMPLOYEE = 4, t.BUS_PARTNER = 3, t.PARTNER = 2, t.CELEBRITY = 1, t.NONE = 0, t
                })(),
                np = (() => {
                    class t extends o {
                        constructor(e) {
                            super(t.UNUE_NAME_UPDATED), this._name = e
                        }
                        get name() {
                            return this._name
                        }
                    }
                    return t.UNUE_NAME_UPDATED = "unue_name_updated", t
                })();
            class rp {
                constructor(t, e, s, i, n, r, o, a, c, _, h, l, u, d, g, m) {
                    const [p, b] = s.split("*");
                    this._type = t, this._id = e, this._fullName = s, this._className = p, this._colorId = parseInt(b) || 0, this._name = i, this._description = n, this._furniLine = r, this._offerId = l, this._adUrl = u, this._excludeDynamic = d, this._specialType = g, this._customParams = m, this._dimensions = a, this._canStandOn = c, this._canSitOn = _, this._canLayOn = h
                }
                get type() {
                    return this._type
                }
                get id() {
                    return this._id
                }
                get fullName() {
                    return this._fullName
                }
                get className() {
                    return this._className
                }
                get colorId() {
                    return this._colorId
                }
                get name() {
                    return this._name
                }
                get description() {
                    return this._description
                }
                get furniLine() {
                    return this._furniLine
                }
                get colors() {
                    return this._colors
                }
                get dimensions() {
                    return this._dimensions
                }
                get canStandOn() {
                    return this._canStandOn
                }
                get canSitOn() {
                    return this._canSitOn
                }
                get canLayOn() {
                    return this._canLayOn
                }
                get offerId() {
                    return this._offerId
                }
                get adUrl() {
                    return this._adUrl
                }
                get excludeDynamic() {
                    return this._excludeDynamic
                }
                get specialType() {
                    return this._specialType
                }
                get customParams() {
                    return this._customParams
                }
                get isExternalImage() {
                    return -1 !== this._className.indexOf("external_image")
                }
            }
            let op = (() => {
                class t extends m {
                    constructor(t, e, s) {
                        super(), this._floorItems = t, this._wallItems = e, this._localization = s
                    }
                    loadFurnitureData(t) {
                        if (!t) return;
                        const e = new XMLHttpRequest;
                        e.addEventListener("loadend", this.onFurnitureDataLoaded.bind(this, e)), e.addEventListener("error", this.onFurnitureDataError.bind(this, e)), e.open("GET", t), e.send()
                    }
                    onFurnitureDataLoaded(e) {
                        if (e) {
                            if (e.removeEventListener("loadend", this.onFurnitureDataLoaded.bind(this, e)), e.removeEventListener("error", this.onFurnitureDataError.bind(this, e)), e.responseText) {
                                const t = JSON.parse(e.responseText);
                                t.floorItems && this.parseFloorItems(t.floorItems), t.wallItems && this.parseWallItems(t.wallItems)
                            }
                            this.dispatchEvent(new o(t.FURNITURE_DATA_READY))
                        }
                    }
                    onFurnitureDataError(e) {
                        e || e.removeEventListener("loadend", this.onFurnitureDataLoaded.bind(this, e)), e.removeEventListener("error", this.onFurnitureDataError.bind(this, e)), this.dispatchEvent(new o(t.FURNITURE_DATA_ERROR))
                    }
                    parseFloorItems(t) {
                        if (t && t.length)
                            for (const e of t) {
                                if (!e) continue;
                                const t = new rp(k.FLOOR, e.id, e.className, e.name, e.description, e.furniLine, e.colors, e.dimensions, e.canStandOn, e.canSitOn, e.canLayOn, e.offerId, e.adUrl, e.excludeDynamic, e.specialType, e.customParams);
                                this._floorItems.set(t.id, t), this.updateLocalizations(t)
                            }
                    }
                    parseWallItems(t) {
                        if (t && t.length)
                            for (const e of t) {
                                if (!e) continue;
                                const t = new rp(k.WALL, e.id, e.className, e.name, e.description, e.furniLine, e.colors, e.dimensions, e.canStandOn, e.canSitOn, e.canLayOn, e.offerId, e.adUrl, e.excludeDynamic, e.specialType, e.customParams);
                                this._wallItems.set(t.id, t), this.updateLocalizations(t)
                            }
                    }
                    updateLocalizations(t) {
                        if (this._localization) switch (t.type) {
                            case k.FLOOR:
                                return this._localization.setValue("roomItem.name." + t.id, t.name), void this._localization.setValue("roomItem.desc." + t.id, t.description);
                            case k.WALL:
                                return this._localization.setValue("wallItem.name." + t.id, t.name), void this._localization.setValue("wallItem.desc." + t.id, t.description)
                        }
                    }
                }
                return t.FURNITURE_DATA_READY = "FDP_FURNITURE_DATA_READY", t.FURNITURE_DATA_ERROR = "FDP_FURNITURE_DATA_ERROR", t
            })();
            class ap extends L {
                constructor(t) {
                    super(), this._communication = t, this.resetUserInfo(), this._clubLevel = 0, this._securityLevel = 0, this._isAmbassador = !1, this._systemOpen = !1, this._systemShutdown = !1, this._isAuthenticHabbo = !1, this._isRoomCameraFollowDisabled = !1, this._uiFlags = 0, this._floorItems = new Map, this._wallItems = new Map, this._furnitureData = null, this._furnitureReady = !1, this._furnitureListenersNotified = !1, this._pendingFurnitureListeners = [], this._badgeImageManager = null, this.onFurnitureDataReadyEvent = this.onFurnitureDataReadyEvent.bind(this)
                }
                onInit() {
                    this.loadFurnitureData(), this.loadBadgeImageManager(), this._communication.registerMessageEvent(new rc(this.onUserFigureEvent.bind(this))), this._communication.registerMessageEvent(new cc(this.onUserInfoEvent.bind(this))), this._communication.registerMessageEvent(new ec(this.onUserPermissionsEvent.bind(this))), this._communication.registerMessageEvent(new Re(this.onAvailabilityStatusMessageEvent.bind(this))), this._communication.registerMessageEvent(new fc(this.onUserSettingsEvent.bind(this))), this._communication.registerMessageEvent(new Te(this.onChangeNameUpdateEvent.bind(this))), this._communication.registerMessageEvent(new hc(this.onUserNameChangeMessageEvent.bind(this))), this._communication.registerMessageEvent(new Wo(this.onRoomModelNameEvent.bind(this)))
                }
                onDispose() {
                    this.destroyFurnitureData(), super.onDispose()
                }
                resetUserInfo() {
                    this._userId = 0, this._name = null, this._figure = null, this._gender = null, this._realName = null, this._canChangeName = !1
                }
                loadFurnitureData() {
                    this.destroyFurnitureData(), this._furnitureData = new op(this._floorItems, this._wallItems, cp.instance.localization), this._furnitureData.addEventListener(op.FURNITURE_DATA_READY, this.onFurnitureDataReadyEvent), this._furnitureData.loadFurnitureData(cp.instance.getConfiguration("furnidata.url"))
                }
                loadBadgeImageManager() {
                    this._badgeImageManager || (this._badgeImageManager = new sp(cp.instance.core.asset, this.events))
                }
                getAllFurnitureData(t) {
                    if (!this._floorItems || !this._floorItems.size) return void(-1 === this._pendingFurnitureListeners.indexOf(t) && this._pendingFurnitureListeners.push(t));
                    const e = [];
                    for (const s of this._floorItems.values()) s && e.push(s);
                    for (const s of this._wallItems.values()) s && e.push(s);
                    return e && e.length ? e : null
                }
                removePendingFurniDataListener(t) {
                    if (!this._pendingFurnitureListeners) return;
                    const e = this._pendingFurnitureListeners.indexOf(t); - 1 !== e && this._pendingFurnitureListeners.splice(e, 1)
                }
                onUserFigureEvent(t) {
                    t && t.connection && (this._figure = t.getParser().figure, this._gender = t.getParser().gender, tp.updateFigure(this._figure))
                }
                onUserInfoEvent(t) {
                    if (!t || !t.connection) return;
                    this.resetUserInfo();
                    const e = t.getParser().userInfo;
                    e && (this._userId = e.userId, this._name = e.username, this._figure = e.figure, this._gender = e.gender, this._realName = e.realName, this._respectsReceived = e.respectsReceived, this._respectsLeft = e.respectsRemaining, this._respectsPetLeft = e.respectsPetRemaining, this._canChangeName = e.canChangeName)
                }
                onUserPermissionsEvent(t) {
                    t && t.connection && (this._clubLevel = t.getParser().clubLevel, this._securityLevel = t.getParser().securityLevel, this._isAmbassador = t.getParser().isAmbassador)
                }
                onAvailabilityStatusMessageEvent(t) {
                    if (!t || !t.connection) return;
                    const e = t.getParser();
                    if (e && (this._systemOpen = e.isOpen, this._systemShutdown = e.onShutdown, this._isAuthenticHabbo = e.isAuthenticUser, this._isAuthenticHabbo && this._furnitureReady && !this._furnitureListenersNotified && (this._furnitureListenersNotified = !0, this._pendingFurnitureListeners && this._pendingFurnitureListeners.length)))
                        for (const s of this._pendingFurnitureListeners) s && s.loadFurnitureData()
                }
                onUserSettingsEvent(t) {
                    if (!t || !t.connection) return;
                    const e = t.getParser();
                    e && (this._isRoomCameraFollowDisabled = e.cameraFollow, this._uiFlags = e.flags)
                }
                onChangeNameUpdateEvent(t) {
                    if (!t || !t.connection) return;
                    const e = t.getParser();
                    e && e.resultCode === Te._Str_5797 && (this._canChangeName = !1, this.events.dispatchEvent(new np(e.name)))
                }
                onUserNameChangeMessageEvent(t) {
                    if (!t || !t.connection) return;
                    const e = t.getParser();
                    e && e.webId === this.userId && (this._name = e.newName, this._canChangeName = !1, this.events.dispatchEvent(new np(this._name)))
                }
                onRoomModelNameEvent(t) {
                    if (!t) return;
                    const e = t.getParser();
                    e && tp.roomVisited(e.roomId)
                }
                onFurnitureDataReadyEvent(t) {
                    if (this._furnitureData.removeEventListener(op.FURNITURE_DATA_READY, this.onFurnitureDataReadyEvent), this._furnitureReady = !0, this._isAuthenticHabbo && !this._furnitureListenersNotified && (this._furnitureListenersNotified = !0, this._pendingFurnitureListeners && this._pendingFurnitureListeners.length))
                        for (const e of this._pendingFurnitureListeners) e && e.loadFurnitureData()
                }
                destroyFurnitureData() {
                    this._furnitureData && (this._furnitureData.dispose(), this._furnitureData = null)
                }
                getFloorItemData(t) {
                    return this._floorItems.get(t) || null
                }
                getFloorItemDataByName(t) {
                    if (!t || !this._floorItems || !this._floorItems.size) return null;
                    for (const e of this._floorItems.values())
                        if (e && e.className === t) return e
                }
                getWallItemData(t) {
                    return this._wallItems.get(t) || null
                }
                getWallItemDataByName(t) {
                    if (!t || !this._wallItems || !this._wallItems.size) return null;
                    for (const e of this._wallItems.values())
                        if (e && e.className === t) return e
                }
                getBadgeUrl(t) {
                    return this._badgeImageManager.getBadgeUrl(t)
                }
                getGroupBadgeUrl(t) {
                    return this._badgeImageManager.getBadgeUrl(t, sp.GROUP_BADGE)
                }
                getBadgeImage(t) {
                    return this._badgeImageManager.getBadgeImage(t)
                }
                getGroupBadgeImage(t) {
                    return this._badgeImageManager.getBadgeImage(t, sp.GROUP_BADGE)
                }
                loadBadgeImage(t) {
                    return this._badgeImageManager.loadBadgeImage(t)
                }
                loadGroupBadgeImage(t) {
                    return this._badgeImageManager.loadBadgeImage(t, sp.GROUP_BADGE)
                }
                isUserIgnored(t) {
                    return !1
                }
                hasSecurity(t) {
                    return this._securityLevel >= t
                }
                giveRespect(t) {
                    t < 0 || this._respectsLeft <= 0 || (this.send(new Hh(t)), this._respectsLeft--)
                }
                givePetRespect(t) {
                    t < 0 || this._respectsPetLeft <= 0 || (this.send(new y_(t)), this._respectsPetLeft--)
                }
                sendSpecialCommandMessage(t, e = 0) {
                    this.send(new Eh(t))
                }
                send(t) {
                    this._communication.connection.send(t)
                }
                get communication() {
                    return this._communication
                }
                get userId() {
                    return this._userId
                }
                get userName() {
                    return this._name
                }
                get figure() {
                    return this._figure
                }
                get gender() {
                    return this._gender
                }
                get realName() {
                    return this._realName
                }
                get respectsReceived() {
                    return this._respectsReceived
                }
                get respectsLeft() {
                    return this._respectsLeft
                }
                get respectsPetLeft() {
                    return this._respectsPetLeft
                }
                get canChangeName() {
                    return this._canChangeName
                }
                get clubLevel() {
                    return this._clubLevel
                }
                get securityLevel() {
                    return this._securityLevel
                }
                get isAmbassador() {
                    return this._isAmbassador
                }
                get isSystemOpen() {
                    return this._systemOpen
                }
                get isSystemShutdown() {
                    return this._systemShutdown
                }
                get isAuthenticHabbo() {
                    return this._isAuthenticHabbo
                }
                get isModerator() {
                    return this._securityLevel >= ip.MODERATOR
                }
                get isGodMode() {
                    return this.securityLevel >= ip.MODERATOR
                }
                get isCameraFollowDisabled() {
                    return this._isRoomCameraFollowDisabled
                }
                get uiFlags() {
                    return this._uiFlags
                }
            }
            u.s.SCALE_MODE = u.m.NEAREST;
            let cp = (() => {
                    class t extends u.a {
                        constructor(e, s) {
                            super(s), t.INSTANCE || (t.INSTANCE = this), this._nitroTimer = new G, this._core = e, this._events = new m, this._localization = new Jh, this._communication = new Kh(e.communication), this._avatar = new _e, this._roomEngine = new Nm(this._communication), this._sessionDataManager = new ap(this._communication), this._roomSessionManager = new $m(this._communication, this._roomEngine), this._roomManager = new J(this._roomEngine, this._roomEngine.visualizationFactory, this._roomEngine.logicFactory), this._linkTrackers = [], this._isReady = !1, this._isDisposed = !1, this._core.configuration.events.addEventListener(a.LOADED, this.onConfigurationLoadedEvent.bind(this)), this._roomEngine.events.addEventListener(Qh.ENGINE_INITIALIZED, this.onRoomEngineReady.bind(this))
                        }
                        static bootstrap() {
                            t.INSTANCE && (t.INSTANCE.dispose(), t.INSTANCE = null);
                            const e = document.createElement("canvas");
                            e.id = "client-wrapper", e.className = "client-canvas";
                            const s = new this(new F, {
                                transparent: !0,
                                autoDensity: !0,
                                resizeTo: window,
                                resolution: window.devicePixelRatio,
                                width: window.innerWidth,
                                height: window.innerHeight,
                                powerPreference: "high-performance",
                                view: e
                            });
                            e.addEventListener("webglcontextlost", () => s.events.dispatchEvent(new o(t.WEBGL_CONTEXT_LOST)));
                            const i = NitroConfig.sso;
                            s.communication.demo.setSSO(i)
                        }
                        init() {
                            if (!this._isReady && !this._isDisposed) {
                                if (this._avatar && this._avatar.init(), this._roomEngine && (this._roomEngine.sessionDataManager = this._sessionDataManager, this._roomEngine.roomSessionManager = this._roomSessionManager, this._roomEngine.roomManager = this._roomManager, this._roomEngine.init(), this._sessionDataManager && this._sessionDataManager.init(), this._roomManager && this._roomManager.init(), this._roomSessionManager && this._roomSessionManager.init()), new Xh(this._communication.connection), !this._communication.connection) throw new Error("No connection found");
                                this._isReady = !0
                            }
                        }
                        dispose() {
                            this._isDisposed || (this._roomManager && (this._roomManager.dispose(), this._roomManager = null), this._roomSessionManager && (this._roomSessionManager.dispose(), this._roomSessionManager = null), this._sessionDataManager && (this._sessionDataManager.dispose(), this._sessionDataManager = null), this._roomEngine && (this._roomEngine.dispose(), this._roomEngine = null), this._avatar && (this._avatar.dispose(), this._avatar = null), this._communication && (this._communication.dispose(), this._communication = null), super.destroy(), this._isDisposed = !0, this._isReady = !1)
                        }
                        onConfigurationLoadedEvent(e) {
                            const s = this.getConfiguration("animation.fps", 24);
                            this.getConfiguration("limits.fps", !0), t.instance.ticker.maxFPS = s
                        }
                        onRoomEngineReady(t) {
                            this.startSendingHeartBeat()
                        }
                        getConfiguration(t, e = null) {
                            return this._core.configuration.getValue(t, e)
                        }
                        getLocalization(t) {
                            return this._localization.getValue(t)
                        }
                        getLocalizationWithParameter(t, e, s) {
                            return this._localization.getValueWithParameter(t, e, s)
                        }
                        getLocalizationWithParameters(t, e, s) {
                            return this._localization.getValueWithParameters(t, e, s)
                        }
                        addLinkEventTracker(t) {
                            this._linkTrackers.indexOf(t) >= 0 || this._linkTrackers.push(t)
                        }
                        removeLinkEventTracker(t) {
                            const e = this._linkTrackers.indexOf(t); - 1 !== e && this._linkTrackers.splice(e, 1)
                        }
                        createLinkEvent(t) {
                            if (t && "" !== t)
                                for (const e of this._linkTrackers) {
                                    if (!e) continue;
                                    const s = e.eventUrlPrefix;
                                    s.length > 0 ? t.substr(0, s.length) === s && e.linkReceived(t) : e.linkReceived(t)
                                }
                        }
                        startSendingHeartBeat() {
                            this.sendHeartBeat(), setInterval(this.sendHeartBeat, 1e4)
                        }
                        sendHeartBeat() {
                            tp.sendHeartBeat()
                        }
                        get nitroTimer() {
                            return this._nitroTimer
                        }
                        get core() {
                            return this._core
                        }
                        get events() {
                            return this._events
                        }
                        get localization() {
                            return this._localization
                        }
                        get communication() {
                            return this._communication
                        }
                        get avatar() {
                            return this._avatar
                        }
                        get roomEngine() {
                            return this._roomEngine
                        }
                        get sessionDataManager() {
                            return this._sessionDataManager
                        }
                        get roomSessionManager() {
                            return this._roomSessionManager
                        }
                        get roomManager() {
                            return this._roomManager
                        }
                        get width() {
                            return this.renderer.width / this.renderer.resolution
                        }
                        get height() {
                            return this.renderer.height / this.renderer.resolution
                        }
                        get time() {
                            return this.ticker.lastTime
                        }
                        get isReady() {
                            return this._isReady
                        }
                        get isDisposed() {
                            return this._isDisposed
                        }
                        static get instance() {
                            return this.INSTANCE || null
                        }
                    }
                    return t.WEBGL_CONTEXT_LOST = "NE_WEBGL_CONTEXT_LOST", t.WEBGL_UNAVAILABLE = "NE_WEBGL_UNAVAILABLE", t.RELEASE_VERSION = "NITRO-0-4-0", t.READY = "NE_READY", t.INSTANCE = null, t
                })(),
                _p = (() => {
                    class t {
                        constructor() {
                            this._isReady = !1, this._avatarEditorVisible = !1, this._navigatorVisible = !1, this._catalogVisible = !1, this._inventoryVisible = !1, this._friendlistVisible = !1, this._userProfileVisible = !1, this._achievementsVisible = !1, this._meMenuVisible = !1, this._chatHistoryVisible = !1
                        }
                        showAvatarEditor() {
                            this._avatarEditorVisible = !0
                        }
                        hideAvatarEditor() {
                            this._avatarEditorVisible = !1
                        }
                        showNavigator() {
                            this._navigatorVisible = !0
                        }
                        hideNavigator() {
                            this._navigatorVisible = !1
                        }
                        toggleAvatarEditor() {
                            this._avatarEditorVisible = !this._avatarEditorVisible
                        }
                        toggleNavigator() {
                            this._navigatorVisible = !this._navigatorVisible
                        }
                        showCatalog() {
                            this._catalogVisible = !0
                        }
                        hideCatalog() {
                            this._catalogVisible = !1
                        }
                        toggleCatalog() {
                            this._catalogVisible = !this._catalogVisible
                        }
                        showInventory() {
                            this._inventoryVisible = !0
                        }
                        hideInventory() {
                            this._inventoryVisible = !1
                        }
                        toggleInventory() {
                            this._inventoryVisible = !this._inventoryVisible
                        }
                        showFriendList() {
                            this._friendlistVisible = !0
                        }
                        hideFriendList() {
                            this._friendlistVisible = !1
                        }
                        toggleFriendList() {
                            this._friendlistVisible = !this._friendlistVisible
                        }
                        showUserProfile() {
                            this._userProfileVisible = !0
                        }
                        hideUserProfile() {
                            this._userProfileVisible = !1
                        }
                        toggleUserProfile() {
                            this._userProfileVisible = !this._userProfileVisible
                        }
                        showAchievements() {
                            this._achievementsVisible = !0
                        }
                        hideAchievements() {
                            this._achievementsVisible = !1
                        }
                        toggleAchievements() {
                            this._achievementsVisible = !this._achievementsVisible
                        }
                        showMeMenu() {
                            this._meMenuVisible = !0
                        }
                        hideMeMenu() {
                            this._meMenuVisible = !1
                        }
                        toggleMeMenu() {
                            this._meMenuVisible = !this._meMenuVisible
                        }
                        showChatHistory() {
                            this._chatHistoryVisible = !0
                        }
                        hideChatHistory() {
                            this._chatHistoryVisible = !1
                        }
                        toggleChatHistory() {
                            this._chatHistoryVisible = !this._chatHistoryVisible
                        }
                        get avatarEditorVisible() {
                            return this._avatarEditorVisible
                        }
                        get navigatorVisible() {
                            return this._navigatorVisible
                        }
                        get catalogVisible() {
                            return this._catalogVisible
                        }
                        get inventoryVisible() {
                            return this._inventoryVisible
                        }
                        get friendListVisible() {
                            return this._friendlistVisible
                        }
                        get userProfileVisible() {
                            return this._userProfileVisible
                        }
                        get achievementsVisible() {
                            return this._achievementsVisible
                        }
                        get meMenuVisible() {
                            return this._meMenuVisible
                        }
                        get chatHistoryVisible() {
                            return this._chatHistoryVisible
                        }
                        set isReady(t) {
                            this._isReady = t
                        }
                        get isReady() {
                            return this._isReady
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })();
            var hp = s("ofXK"),
                lp = s("EVdn");

            function up(t, e) {
                if (1 & t && (i.Zb(0, "div", 7), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.Uc(t.message)
                }
            }
            const dp = function(t) {
                return {
                    width: t
                }
            };

            function gp(t, e) {
                if (1 & t && (i.Zb(0, "div", 9), i.Zb(1, "div", 10), i.Vb(2, "div", 11), i.Yb(), i.Zb(3, "div", 12), i.Tc(4, "%"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.tc("ngStyle", i.xc(1, dp, (t.percentage || 0) + "%"))
                }
            }
            let mp = (() => {
                class t {
                    constructor() {
                        this.message = "", this.percentage = 0, this.hideProgress = !1
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-loading"]
                    ],
                    inputs: {
                        message: "message",
                        percentage: "percentage",
                        hideProgress: "hideProgress"
                    },
                    decls: 9,
                    vars: 2,
                    consts: [
                        ["id", "habbo-loading"],
                        [1, "loading-component"],
                        [1, "loading-view"],
                        [1, "loading-bg"],
                        [1, "loading-habbo_logo"],
                        ["src", "", 1, "loading-room_bg"],
                        ["class", "loading-text", 4, "ngIf"],
                        [1, "loading-text"],
                        ["class", "loading-progress-container", 4, "ngIf"],
                        [1, "loading-progress-container"],
                        [1, "loading-bar"],
                        [1, "bar", 3, "ngStyle"],
                        ["id", "percent"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Vb(4, "div", 4), i.Vb(5, "img", 5), i.Yb(), i.Rc(6, up, 2, 1, "div", 6), i.Vb(7, "div", 7), i.Rc(8, gp, 5, 3, "div", 8), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(6), i.tc("ngIf", e.message && e.message.length && e.hideProgress), i.Gb(2), i.tc("ngIf", !e.hideProgress))
                    },
                    directives: [hp.n, hp.o],
                    encapsulation: 2
                }), t
            })();
            lp(document).ready((function() {
                var t = lp(".loading-text"),
                    e=["Chargement de... On est où déjà ?!","Préparation de la machine à crédits...","Dans quelques secondes, tu entreras au paradis !","C'est l'histoire du p'tit dej, vous la connaissez ? Non ? Pas de bol.","C'est l'histoire d'une blague vaseuse alors mets tes bottes.","A moi de jou... Euh non c'est plutôt à toi de jouer là !","Y'a du soleil et des pixels lalalala."];
                setInterval((function() {
                    var s = Math.floor(Math.random() * e.length + 1);
                    t.html(e[s])
                }), 2400), t.html(e[Math.floor(Math.random() * e.length + 1)]);
                var s = lp(".loading-room_bg");
                s.attr("src", "./assets/images/loading/room-picture/" + Math.floor(16 * Math.random()) + ".png"), setInterval((function() {
                    var t = Math.floor(16 * Math.random());
                    s.attr("src", "./assets/images/loading/room-picture/" + t + ".png")
                }), 2400)
            }));
            var pp = s("R0Ic");
            let bp = (() => {
                    class t extends Qh {
                        constructor(e, s, i = !1, n = !1) {
                            super(t.ROOM_ZOOM, e), this._level = s, this._forceFlip = i, this._asDelta = n
                        }
                        get level() {
                            return this._level
                        }
                        get forceFlip() {
                            return this._forceFlip
                        }
                        get asDelta() {
                            return this._asDelta
                        }
                    }
                    return t.ROOM_ZOOM = "REE_ROOM_ZOOM", t
                })(),
                Ep = (() => {
                    class t {
                        static makeRoomPreviewerId(e) {
                            return (65535 & e) + t.PREVIEW_ROOM_ID_BASE
                        }
                        static isRoomPreviewerId(e) {
                            return e >= t.PREVIEW_ROOM_ID_BASE
                        }
                    }
                    return t.PREVIEW_ROOM_ID_BASE = 2147418112, t
                })();
            var fp = s("Vvah");
            class Sp extends o {
                constructor(t) {
                    super(t)
                }
            }
            let Ip = (() => {
                    class t extends Sp {
                        constructor(t, e) {
                            super(t), this._roomId = 0, this._roomId = e
                        }
                        get roomId() {
                            return this._roomId
                        }
                    }
                    return t.RWREUE_GAME_MODE = "RWREUE_GAME_MODE", t.RWREUE_NORMAL_MODE = "RWREUE_NORMAL_MODE", t
                })(),
                Rp = (() => {
                    class t extends Sp {
                        constructor(t, e, s, i) {
                            super(t), this._id = e, this._category = s, this._roomId = i
                        }
                        get id() {
                            return this._id
                        }
                        get category() {
                            return this._category
                        }
                        get roomId() {
                            return this._roomId
                        }
                    }
                    return t.OBJECT_SELECTED = "RWROUE_OBJECT_SELECTED", t.OBJECT_DESELECTED = "RWROUE_OBJECT_DESELECTED", t.USER_REMOVED = "RWROUE_USER_REMOVED", t.FURNI_REMOVED = "RWROUE_FURNI_REMOVED", t.FURNI_ADDED = "RWROUE_FURNI_ADDED", t.USER_ADDED = "RWROUE_USER_ADDED", t.OBJECT_ROLL_OVER = "RWROUE_OBJECT_ROLL_OVER", t.OBJECT_ROLL_OUT = "RWROUE_OBJECT_ROLL_OUT", t
                })(),
                vp = (() => {
                    class t extends Sp {
                        constructor(t, e = null, s = null, i = 0) {
                            super(t), this._roomViewRectangle = e, this._positionDelta = s, this._scale = i
                        }
                        get roomViewRectangle() {
                            return this._roomViewRectangle ? this._roomViewRectangle.clone() : null
                        }
                        get positionDelta() {
                            return this._positionDelta ? this._positionDelta.clone() : null
                        }
                        get scale() {
                            return this._scale
                        }
                    }
                    return t.SIZE_CHANGED = "RWRVUE_ROOM_VIEW_SIZE_CHANGED", t.SCALE_CHANGED = "RWRVUE_ROOM_VIEW_SCALE_CHANGED", t.POSITION_CHANGED = "RWRVUE_ROOM_VIEW_POSITION_CHANGED", t
                })(),
                Tp = (() => {
                    class t extends Sp {
                        constructor(e, s, i, n, r) {
                            super(t.RWAIE_AVATAR_INFO), this._userId = e, this._userName = s, this._Str_3021 = i, this._Str_2775 = n, this._Str_3947 = r
                        }
                        get userId() {
                            return this._userId
                        }
                        get userName() {
                            return this._userName
                        }
                        get _Str_2908() {
                            return this._Str_3021
                        }
                        get _Str_2707() {
                            return this._Str_2775
                        }
                        get _Str_4330() {
                            return this._Str_3947
                        }
                    }
                    return t.RWAIE_AVATAR_INFO = "RWAIE_AVATAR_INFO", t
                })(),
                Op = (() => {
                    class t extends Sp {
                        constructor() {
                            super(t.RWUDUE_USER_DATA_UPDATED)
                        }
                    }
                    return t.RWUDUE_USER_DATA_UPDATED = "rwudue_user_data_updated", t
                })();
            class yp {
                constructor(t) {
                    this._type = t
                }
                get type() {
                    return this._type
                }
            }
            let Ap = (() => {
                    class t extends yp {
                        constructor(e) {
                            super(t.RWCM_MESSAGE_AVATAR_EXPRESSION), this._animation = e
                        }
                        get animation() {
                            return this._animation
                        }
                    }
                    return t.RWCM_MESSAGE_AVATAR_EXPRESSION = "RWCM_MESSAGE_AVATAR_EXPRESSION", t
                })(),
                Cp = (() => {
                    class t extends yp {
                        constructor(e) {
                            super(t.RWCPM_MESSAGE_CHANGE_POSTURE), this._posture = e
                        }
                        get posture() {
                            return this._posture
                        }
                    }
                    return t.RWCPM_MESSAGE_CHANGE_POSTURE = "RWCPM_MESSAGE_CHANGE_POSTURE", t._Str_1553 = 0, t._Str_2016 = 1, t
                })(),
                Mp = (() => {
                    class t extends yp {
                        constructor(e) {
                            super(t.RWCM_MESSAGE_DANCE), this._style = 0, this._style = e
                        }
                        get style() {
                            return this._style
                        }
                    }
                    return t.RWCM_MESSAGE_DANCE = "RWCM_MESSAGE_DANCE", t._Str_13814 = 0, t._Str_17699 = [2, 3, 4], t
                })(),
                Up = (() => {
                    class t extends yp {
                        constructor(t, e, s) {
                            super(t), this._id = e, this._category = s
                        }
                        get id() {
                            return this._id
                        }
                        get category() {
                            return this._category
                        }
                    }
                    return t.GET_OBJECT_INFO = "RWROM_GET_OBJECT_INFO", t.GET_OBJECT_NAME = "RWROM_GET_OBJECT_NAME", t.SELECT_OBJECT = "RWROM_SELECT_OBJECT", t.GET_OWN_CHARACTER_INFO = "RWROM_GET_OWN_CHARACTER_INFO", t.GET_AVATAR_LIST = "RWROM_GET_AVATAR_LIST", t
                })(),
                Dp = (() => {
                    class t extends yp {
                        constructor(t, e = 0) {
                            super(t), this._userId = e
                        }
                        get userId() {
                            return this._userId
                        }
                    }
                    return t.RWUAM_WHISPER_USER = "RWUAM_WHISPER_USER", t.RWUAM_IGNORE_USER = "RWUAM_IGNORE_USER", t.RWUAM_IGNORE_USER_BUBBLE = "RWUAM_IGNORE_USER_BUBBLE", t.RWUAM_UNIGNORE_USER = "RWUAM_UNIGNORE_USER", t.RWUAM_KICK_USER = "RWUAM_KICK_USER", t.RWUAM_BAN_USER_HOUR = "RWUAM_BAN_USER_HOUR", t.RWUAM_BAN_USER_DAY = "RWUAM_BAN_USER_DAY", t.RWUAM_BAN_USER_PERM = "RWUAM_BAN_USER_PERM", t.MUTE_USER_2MIN = "RWUAM_MUTE_USER_2MIN", t.MUTE_USER_5MIN = "RWUAM_MUTE_USER_5MIN", t.MUTE_USER_10MIN = "RWUAM_MUTE_USER_10MIN", t.RWUAM_SEND_FRIEND_REQUEST = "RWUAM_SEND_FRIEND_REQUEST", t.RWUAM_RESPECT_USER = "RWUAM_RESPECT_USER", t.RWUAM_GIVE_RIGHTS = "RWUAM_GIVE_RIGHTS", t.RWUAM_TAKE_RIGHTS = "RWUAM_TAKE_RIGHTS", t.RWUAM_START_TRADING = "RWUAM_START_TRADING", t.RWUAM_OPEN_HOME_PAGE = "RWUAM_OPEN_HOME_PAGE", t.RWUAM_REPORT = "RWUAM_REPORT", t.RWUAM_PICKUP_PET = "RWUAM_PICKUP_PET", t.RWUAM_MOUNT_PET = "RWUAM_MOUNT_PET", t.RWUAM_TOGGLE_PET_RIDING_PERMISSION = "RWUAM_TOGGLE_PET_RIDING_PERMISSION", t.RWUAM_TOGGLE_PET_BREEDING_PERMISSION = "RWUAM_TOGGLE_PET_BREEDING_PERMISSION", t.RWUAM_DISMOUNT_PET = "RWUAM_DISMOUNT_PET", t.RWUAM_SADDLE_OFF = "RWUAM_SADDLE_OFF", t.RWUAM_TRAIN_PET = "RWUAM_TRAIN_PET", t.RWUAM_RESPECT_PET = " RWUAM_RESPECT_PET", t.RWUAM_TREAT_PET = "RWUAM_TREAT_PET", t.RWUAM_REQUEST_PET_UPDATE = "RWUAM_REQUEST_PET_UPDATE", t.RWUAM_START_NAME_CHANGE = "RWUAM_START_NAME_CHANGE", t.RWUAM_PASS_CARRY_ITEM = "RWUAM_PASS_CARRY_ITEM", t.RWUAM_DROP_CARRY_ITEM = "RWUAM_DROP_CARRY_ITEM", t.RWUAM_GIVE_CARRY_ITEM_TO_PET = "RWUAM_GIVE_CARRY_ITEM_TO_PET", t.RWUAM_GIVE_WATER_TO_PET = "RWUAM_GIVE_WATER_TO_PET", t.RWUAM_GIVE_LIGHT_TO_PET = "RWUAM_GIVE_LIGHT_TO_PET", t.RWUAM_REQUEST_BREED_PET = "RWUAM_REQUEST_BREED_PET", t.RWUAM_HARVEST_PET = "RWUAM_HARVEST_PET", t.RWUAM_REVIVE_PET = "RWUAM_REVIVE_PET", t.RWUAM_COMPOST_PLANT = "RWUAM_COMPOST_PLANT", t.RWUAM_GET_BOT_INFO = "RWUAM_GET_BOT_INFO", t.RWUAM_REPORT_CFH_OTHER = "RWUAM_REPORT_CFH_OTHER", t.RWUAM_AMBASSADOR_ALERT_USER = "RWUAM_AMBASSADOR_ALERT_USER", t.RWUAM_AMBASSADOR_KICK_USER = "RWUAM_AMBASSADOR_KICK_USER", t.AMBASSADOR_MUTE_USER_2MIN = "RWUAM_AMBASSADOR_MUTE_2MIN", t.AMBASSADOR_MUTE_USER_10MIN = "RWUAM_AMBASSADOR_MUTE_10MIN", t.AMBASSADOR_MUTE_USER_60MIN = "RWUAM_AMBASSADOR_MUTE_60MIN", t.AMBASSADOR_MUTE_USER_18HOUR = "RWUAM_AMBASSADOR_MUTE_18HOUR", t
                })();
            class Np {
                constructor() {
                    this._container = null, this._container = null, this._widget = null, this._disposed = !1, this.onUserNameUpdateEvent = this.onUserNameUpdateEvent.bind(this), this.onNitroToolbarEvent = this.onNitroToolbarEvent.bind(this)
                }
                dispose() {
                    this.disposed || (this.container = null, this._widget = null, this._disposed = !0)
                }
                update() {}
                processWidgetMessage(t) {
                    if (!t) return null;
                    switch (t.type) {
                        case Up.GET_OWN_CHARACTER_INFO:
                            this.getOwnCharacterInfo();
                            break;
                        case Mp.RWCM_MESSAGE_DANCE:
                            {
                                const e = t;this._container && this._container.roomSession && this._container.roomSession.sendDanceMessage(e.style);
                                break
                            }
                        case Ap.RWCM_MESSAGE_AVATAR_EXPRESSION:
                            {
                                const e = t;this._container && this._container.roomSession && this._container.roomSession.sendExpressionMessage(e.animation._Str_6677);
                                break
                            }
                        case Cp.RWCPM_MESSAGE_CHANGE_POSTURE:
                            {
                                const e = t;this._container && this._container.roomSession && this._container.roomSession.sendPostureMessage(e.posture);
                                break
                            }
                    }
                    return null
                }
                processEvent(t) {
                    if (t) switch (t.type) {
                        case zm.USER_DATA_UPDATED:
                            return void this._container.events.dispatchEvent(new Op);
                        case Hm.RSDE_DANCE:
                            {
                                const e = t;
                                if (this._widget && this._container && this._container.roomSession && this._container.roomSession.userDataManager) {
                                    const t = this._container.roomSession.userDataManager.getUserData(this._container.sessionDataManager.userId);
                                    t && t.roomIndex === e.roomIndex && (this.widget.isDancing = 0 !== e.danceId)
                                }
                                return
                            }
                    }
                }
                getOwnCharacterInfo() {
                    const t = this._container.sessionDataManager.userId,
                        e = this._container.sessionDataManager.userName,
                        s = this._container.roomSession.userDataManager.getUserData(t);
                    s && this._container.events.dispatchEvent(new Tp(t, e, s.type, s.roomIndex, !1))
                }
                getObjectFurnitureData(t) {
                    if (!t) return null;
                    const e = t.model.getValue(j.FURNITURE_TYPE_ID);
                    return this._container.sessionDataManager.getFloorItemData(e)
                }
                getPetUserData(t) {
                    const e = this._container.roomSession.roomId,
                        s = this._container.roomEngine.getTotalObjectsForManager(e, V.UNIT);
                    let i = 0;
                    for (; i < s;) {
                        const s = this._container.roomEngine.getRoomObjectByIndex(e, i, V.UNIT),
                            n = this._container.roomSession.userDataManager.getUserDataByIndex(s.id);
                        if (n && n.type === ua.PET && n.webID === t) return n;
                        i++
                    }
                    return null
                }
                onUserNameUpdateEvent(t) {
                    this.widget.close()
                }
                onNitroToolbarEvent(t) {
                    switch (t.type) {
                        case Il.SELECT_OWN_AVATAR:
                            return void this.getOwnCharacterInfo()
                    }
                }
                get type() {
                    return Fg.AVATAR_INFO
                }
                get messageTypes() {
                    return [Up.GET_OWN_CHARACTER_INFO, Mp.RWCM_MESSAGE_DANCE, Ap.RWCM_MESSAGE_AVATAR_EXPRESSION, Cp.RWCPM_MESSAGE_CHANGE_POSTURE]
                }
                get eventTypes() {
                    return [zm.USER_DATA_UPDATED, Hm.RSDE_DANCE]
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    this._container && this._container.sessionDataManager && this._container.sessionDataManager.events && (this._container.sessionDataManager.events.removeEventListener(np.UNUE_NAME_UPDATED, this.onUserNameUpdateEvent), this._container.roomEngine.events.removeEventListener(Il.SELECT_OWN_AVATAR, this.onNitroToolbarEvent)), this._container = t, t && this._container.sessionDataManager && this._container.sessionDataManager.events && (this._container.sessionDataManager.events.addEventListener(np.UNUE_NAME_UPDATED, this.onUserNameUpdateEvent), this._container.roomEngine.events.addEventListener(Il.SELECT_OWN_AVATAR, this.onNitroToolbarEvent))
                }
                get widget() {
                    return this._widget
                }
                set widget(t) {
                    this._widget = t
                }
                get roomEngine() {
                    return this._container && this._container.roomEngine || null
                }
                get roomSession() {
                    return this._container && this._container.roomSession || null
                }
                get disposed() {
                    return this._disposed
                }
            }
            let wp = (() => {
                    class t {}
                    return t._Str_3159 = 0, t._Str_2964 = 1, t._Str_2575 = 2, t
                })(),
                Lp = (() => {
                    class t {
                        constructor(t) {
                            this._ordinal = t
                        }
                        get _Str_6677() {
                            return this._ordinal
                        }
                        _Str_1451(t) {
                            return t && t._ordinal == this._ordinal
                        }
                    }
                    return t.NONE = new t(0), t._Str_6268 = new t(1), t._Str_5579 = new t(2), t._Str_7336 = new t(3), t._Str_10353 = new t(4), t._Str_6989 = new t(5), t._Str_16682 = new t(6), t._Str_6325 = new t(7), t
                })(),
                xp = (() => {
                    class t extends yp {
                        constructor(t, e, s, i, n) {
                            super(t), this._text = e, this._chatType = s, this._recipientName = i, this._styleId = n
                        }
                        get text() {
                            return this._text
                        }
                        get chatType() {
                            return this._chatType
                        }
                        get recipientName() {
                            return this._recipientName
                        }
                        get styleId() {
                            return this._styleId
                        }
                    }
                    return t.MESSAGE_CHAT = "RWCM_MESSAGE_CHAT", t.CHAT_DEFAULT = 0, t.CHAT_WHISPER = 1, t.CHAT_SHOUT = 2, t
                })(),
                Pp = (() => {
                    class t extends yp {
                        constructor(t, e, s, i) {
                            super(t), this._objectId = e, this._userName = s, this._roomId = i
                        }
                        get objectId() {
                            return this._objectId
                        }
                        get userName() {
                            return this._userName
                        }
                        get roomId() {
                            return this._roomId
                        }
                    }
                    return t.MESSAGE_SELECT_AVATAR = "RWCSAM_MESSAGE_SELECT_AVATAR", t
                })(),
                Fp = (() => {
                    class t extends yp {
                        constructor(e) {
                            super(t.TYPING_STATUS), this._isTyping = e
                        }
                        get isTyping() {
                            return this._isTyping
                        }
                    }
                    return t.TYPING_STATUS = "RWCTM_TYPING_STATUS", t
                })(),
                Gp = (() => {
                    class t extends yp {
                        constructor(t) {
                            super(t)
                        }
                    }
                    return t.RWRWM_USER_CHOOSER = "RWRWM_USER_CHOOSER", t.RWRWM_FURNI_CHOOSER = "RWRWM_FURNI_CHOOSER", t.RWRWM_ME_MENU = "RWRWM_ME_MENU", t.RWRWM_EFFECTS = "RWRWM_EFFECTS", t
                })();
            class Yp {
                constructor() {
                    this._container = null, this._widget = null, this._disposed = !1
                }
                dispose() {
                    this._disposed || (this._container = null, this._widget = null, this._disposed = !0)
                }
                update() {}
                processWidgetMessage(t) {
                    if (!t || this.disposed) return null;
                    let e = null;
                    switch (t.type) {
                        case Fp.TYPING_STATUS:
                            this._container.roomSession.sendChatTypingMessage(t.isTyping);
                            break;
                        case xp.MESSAGE_CHAT:
                            {
                                const e = t;
                                if ("" === e.text) return null;
                                let s = e.text;
                                const i = e.text.split(" ");
                                if (i.length > 0) {
                                    const t = i[0];
                                    let n = "";
                                    if (i.length > 1 && (n = i[1]), ":" === t.charAt(0) && "x" === n) {
                                        const t = this._container.roomEngine.selectedAvatarId;
                                        if (t > -1) {
                                            const i = this._container.roomSession.userDataManager.getUserDataByIndex(t);
                                            i && (n = i.name, s = e.text.replace(" x", " " + i.name))
                                        }
                                    }
                                    switch (t.toLowerCase()) {
                                        case ":d":
                                        case ";d":
                                            this._container.sessionDataManager.clubLevel === wp._Str_2575 && this._container.roomSession.sendExpressionMessage(Lp._Str_7336._Str_6677);
                                            break;
                                        case "o/":
                                        case "_o/":
                                            return this._container.roomSession.sendExpressionMessage(Lp._Str_6268._Str_6677), null;
                                        case ":kiss":
                                            if (this._container.sessionDataManager.clubLevel == wp._Str_2575) return this._container.roomSession.sendExpressionMessage(Lp._Str_5579._Str_6677), null;
                                            break;
                                        case ":jump":
                                            if (this._container.sessionDataManager.clubLevel == wp._Str_2575) return this._container.roomSession.sendExpressionMessage(Lp._Str_16682._Str_6677), null;
                                            break;
                                        case ":idle":
                                            return this._container.roomSession.sendExpressionMessage(Lp._Str_6989._Str_6677), null;
                                        case "_b":
                                            return this._container.roomSession.sendExpressionMessage(Lp._Str_6325._Str_6677), null;
                                        case ":sign":
                                            return this._container.roomSession.sendSignMessage(parseInt(n)), null;
                                        case ":iddqd":
                                            return this._container.roomEngine.events.dispatchEvent(new bp(this._container.roomEngine.activeRoomId, -1, !0)), null;
                                        case ":zoom":
                                            return this._container.roomEngine.events.dispatchEvent(new bp(this._container.roomEngine.activeRoomId, parseInt(n), !1)), null;
                                        case ":screenshot":
                                            return this._container.roomEngine.createRoomScreenshot(this._container.roomSession.roomId, this._container.getFirstCanvasId()), null;
                                        case ":pickall":
                                            return this._container.notificationService.alertWithConfirm("${room.confirm.pick_all}", "${generic.alert.title}", () => {
                                                this._container.sessionDataManager.sendSpecialCommandMessage(":pickall")
                                            }), null;
                                        case ":furni":
                                            return this._container.processWidgetMessage(new Gp(Gp.RWRWM_FURNI_CHOOSER)), null;
                                        case ":chooser":
                                            return this._container.processWidgetMessage(new Gp(Gp.RWRWM_USER_CHOOSER)), null;
                                        case ":client":
                                        case ":nitro":
                                        case ":billsonnn":
                                            return this._container.notificationService.alertWithScrollableMessages(['<div class="d-flex flex-column justify-content-center align-items-center"><div style="width: 350px; height: 120px; margin: 10px; background: transparent url(\'https://assets-1.nitrots.co/nitro-dark.svg\') no-repeat center; filter: drop-shadow(2px 1px 0 white) drop-shadow(-2px 1px 0 white) drop-shadow(0 -2px 0 white);"></div><b>Version: ' + cp.RELEASE_VERSION + '</b><br />This client is powered by Nitro HTML5<br /><br /><div class="d-flex"><a class="btn btn-primary" href="https://discord.gg/66UR68FPgy" target="_blank">Discord</a><a class="btn btn-primary" href="https://git.krews.org/nitro" target="_blank">Git</a></div><br /></div>'], "Nitro HTML5"), null;
                                        case ":settings":
                                            return (this._container.roomSession.isRoomOwner || this._container.sessionDataManager.isModerator) && cp.instance.communication.connection.send(new k_(this._container.roomSession.roomId)), null
                                    }
                                }
                                const n = e.styleId;
                                if (this._container && this._container.roomSession) switch (e.chatType) {
                                    case xp.CHAT_DEFAULT:
                                        this._container.roomSession.sendChatMessage(s, n);
                                        break;
                                    case xp.CHAT_SHOUT:
                                        this._container.roomSession.sendShoutMessage(s, n);
                                        break;
                                    case xp.CHAT_WHISPER:
                                        this._container.roomSession.sendWhisperMessage(e.recipientName, s, n)
                                }
                                break
                            }
                        case Pp.MESSAGE_SELECT_AVATAR:
                            e = t
                    }
                    return null
                }
                processEvent(t) {}
                get type() {
                    return Fg.CHAT_INPUT_WIDGET
                }
                get messageTypes() {
                    return [Fp.TYPING_STATUS, xp.MESSAGE_CHAT, Pp.MESSAGE_SELECT_AVATAR]
                }
                get eventTypes() {
                    return []
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    this._container = t
                }
                get widget() {
                    return this._widget
                }
                set widget(t) {
                    this._widget = t
                }
                get disposed() {
                    return this._disposed
                }
            }
            class kp {
                static sum(t, e) {
                    return new u.j(t.x + e.x, t.y + e.y)
                }
                static _Str_15193(t, e) {
                    return new u.j(t.x - e.x, t.y - e.y)
                }
                static _Str_6038(t, e) {
                    return new u.j(t.x * e, t.y * e)
                }
            }
            let Vp = (() => {
                    class t {
                        constructor() {
                            this._id = ++t.ITEM_COUNTER, this._senderId = -1, this._senderName = "", this._senderColor = 0, this._senderImageUrl = null, this._content = "", this._chatType = 0, this._chatStyle = 0, this._date = new Date
                        }
                        get id() {
                            return this._id
                        }
                        get senderId() {
                            return this._senderId
                        }
                        set senderId(t) {
                            this._senderId = t
                        }
                        get senderName() {
                            return this._senderName
                        }
                        set senderName(t) {
                            this._senderName = t
                        }
                        get senderColorString() {
                            return this._senderColor && "#" + this._senderColor.toString(16).padStart(6, "0") || null
                        }
                        set senderColor(t) {
                            this._senderColor = t
                        }
                        get senderImageUrl() {
                            return this._senderImageUrl
                        }
                        set senderImageUrl(t) {
                            this._senderImageUrl = t
                        }
                        get content() {
                            return this._content
                        }
                        set content(t) {
                            this._content = t
                        }
                        get chatType() {
                            return this._chatType
                        }
                        set chatType(t) {
                            this._chatType = t
                        }
                        get chatStyle() {
                            return this._chatStyle
                        }
                        set chatStyle(t) {
                            this._chatStyle = t
                        }
                        get date() {
                            return this._date
                        }
                    }
                    return t.ITEM_COUNTER = 0, t
                })(),
                Zp = (() => {
                    class t extends Sp {
                        constructor(t, e, s, i, n, r, o, a, c, _, h, l, u = 0, d = 0, g = null) {
                            super(t), this._userId = e, this._text = s, this._chatType = u, this._userName = i, this._userCategory = n, this._userType = r, this._petType = o, this._links = g, this._userX = a, this._userY = c, this._userImage = _, this._userColor = h, this._roomId = l, this._styleId = d
                        }
                        get userId() {
                            return this._userId
                        }
                        get text() {
                            return this._text
                        }
                        get chatType() {
                            return this._chatType
                        }
                        get userName() {
                            return this._userName
                        }
                        get userCategory() {
                            return this._userCategory
                        }
                        get userType() {
                            return this._userType
                        }
                        get petType() {
                            return this._petType
                        }
                        get links() {
                            return this._links
                        }
                        get userX() {
                            return this._userX
                        }
                        get userY() {
                            return this._userY
                        }
                        get userImage() {
                            return this._userImage
                        }
                        get userColor() {
                            return this._userColor
                        }
                        get roomId() {
                            return this._roomId
                        }
                        get styleId() {
                            return this._styleId
                        }
                    }
                    return t.RWCUE_EVENT_CHAT = "RWCUE_EVENT_CHAT", t.CHAT_TYPE_SPEAK = 0, t.CHAT_TYPE_WHISPER = 1, t.CHAT_TYPE_SHOUT = 2, t.CHAT_TYPE_RESPECT = 3, t.CHAT_TYPE_PETRESPECT = 4, t.CHAT_TYPE_NOTIFY = 5, t.CHAT_TYPE_PETTREAT = 6, t.CHAT_TYPE_PETREVIVE = 7, t.CHAT_TYPE_PET_REBREED_FERTILIZE = 8, t.CHAT_TYPE_PET_SPEED_FERTILIZE = 9, t.CHAT_TYPE_BOT_SPEAK = 10, t.CHAT_TYPE_BOT_SHOUT = 11, t.CHAT_TYPE_BOT_WHISPER = 12, t
                })();
            class jp {
                constructor(t) {
                    this._chatHistoryService = t, this._container = null, this._widget = null, this._connection = null, this._avatarColorCache = new Map, this._avatarImageCache = new Map, this._petImageCache = new Map, this._primaryCanvasScale = 0, this._primaryCanvasOriginPos = null, this._tempScreenPosVector = new K, this._disposed = !1
                }
                dispose() {
                    this._disposed || (this._container = null, this._widget = null, this._disposed = !0)
                }
                update() {
                    this._Str_20006()
                }
                _Str_20006() {
                    if (!(this._container && this._container.roomSession && this._container.roomEngine && this._container.events)) return;
                    const t = this._container.getFirstCanvasId(),
                        e = this._container.roomSession.roomId,
                        s = this._container.roomEngine.getRoomInstanceRenderingCanvas(e, t);
                    if (!s) return;
                    const i = s.geometry;
                    if (!i) return;
                    let n = 1;
                    this._primaryCanvasScale > 0 && (n = i.scale / this._primaryCanvasScale), this._primaryCanvasOriginPos || (this._tempScreenPosVector.x = 0, this._tempScreenPosVector.y = 0, this._tempScreenPosVector.z = 0, this._primaryCanvasOriginPos = i.getScreenPoint(this._tempScreenPosVector), this._primaryCanvasScale = i.scale - 10);
                    let r = "",
                        o = null;
                    this._tempScreenPosVector.x = 0, this._tempScreenPosVector.y = 0, this._tempScreenPosVector.z = 0;
                    const a = i.getScreenPoint(this._tempScreenPosVector);
                    if (a) {
                        const s = this._container.roomEngine.getRoomInstanceRenderingCanvasOffset(e, t);
                        if (s && a.set(a.x + s.x, a.y + s.y), a.x != this._primaryCanvasOriginPos.x || a.y != this._primaryCanvasOriginPos.y) {
                            const t = kp._Str_15193(a, kp._Str_6038(this._primaryCanvasOriginPos, n));
                            0 == t.x && 0 == t.y || (r = vp.POSITION_CHANGED, o = new vp(r, null, t), this._container.events.dispatchEvent(o)), this._primaryCanvasOriginPos = a
                        }
                    }
                    i.scale !== this._primaryCanvasScale && (r = vp.SCALE_CHANGED, o = new vp(r, null, null, i.scale), this._container.events.dispatchEvent(o), this._primaryCanvasScale = i.scale)
                }
                processWidgetMessage(t) {
                    return null
                }
                processEvent(t) {
                    if (t && !this._disposed) switch (t.type) {
                        case Lm.CHAT_EVENT:
                            {
                                const e = t,
                                    s = this._container.roomEngine.getRoomObject(e.session.roomId, e.objectId, V.UNIT);
                                if (s) {
                                    const t = this._container.roomEngine.getRoomInstanceGeometry(e.session.roomId, this._container.getFirstCanvasId());
                                    if (t) {
                                        this._Str_20006();
                                        let i = 0,
                                            n = 0;
                                        const r = s.getLocation(),
                                            o = t.getScreenPoint(r);
                                        if (o) {
                                            i = o.x, n = o.y;
                                            const t = this._container.roomEngine.getRoomInstanceRenderingCanvasOffset(e.session.roomId, this._container.getFirstCanvasId());
                                            t && (i += t.x, n += t.y)
                                        }
                                        const a = this._container.roomSession.userDataManager.getUserDataByIndex(e.objectId);
                                        let c = "",
                                            _ = 0,
                                            h = null;
                                        const l = e.chatType;
                                        let u = e.style,
                                            d = 0,
                                            g = -1;
                                        if (a) {
                                            d = a.type;
                                            const t = a.figure;
                                            switch (d) {
                                                case ua.PET:
                                                    h = this.getPetImage(t, 2, !0, 64, s.model.getValue(j.FIGURE_POSTURE)), g = new fl(t).typeId;
                                                    break;
                                                case ua.USER:
                                                    h = this.getUserImage(t);
                                                    break;
                                                case ua.RENTABLE_BOT:
                                                case ua.BOT:
                                                    u = wm.BOT
                                            }
                                            _ = this._avatarColorCache.get(t), c = a.name
                                        }
                                        let m = e.message;
                                        switch (l) {
                                            case Lm._Str_5821:
                                                m = cp.instance.localization.getValueWithParameter("widgets.chatbubble.respect", "username", c)
                                        }
                                        const p = new Vp;
                                        p.senderId = e.objectId, p.senderName = a.name + ":", p.senderColor = _, h && h.src && (p.senderImageUrl = h.src), p.content = m, p.chatType = l, p.chatStyle = u, this._chatHistoryService.addItem(e.session.roomId, p), this._container && this._container.events && this._container.events.dispatchEvent(new Zp(Zp.RWCUE_EVENT_CHAT, a.roomIndex, m, c, V.UNIT, d, g, i, n, h, _, e.session.roomId, l, u, []))
                                    }
                                }
                                return
                            }
                    }
                }
                getUserImage(t) {
                    let e = this._avatarImageCache.get(t);
                    return e || (e = this.setFigureImage(t)), e
                }
                setFigureImage(t) {
                    const e = this._container.avatarRenderManager.createAvatarImage(t, dt.LARGE, null, this);
                    if (!e) return;
                    const s = e.getCroppedImage(It.HEAD),
                        i = e.getPartColor(ut.CHEST);
                    return this._avatarColorCache.set(t, i && i._Str_915 || 16777215), e.dispose(), this._avatarImageCache.set(t, s), s
                }
                getPetImage(t, e, s, i = 64, n = null) {
                    let r = this._petImageCache.get(t + n);
                    if (r) return r;
                    const o = new fl(t),
                        a = this._container.roomEngine.getRoomObjectPetImage(o.typeId, o.paletteId, o.color, new K(45 * e), i, null, !1, 0, o.customParts, n);
                    return a && (r = cp.instance.renderer.extract.image(a.data), this._petImageCache.set(t + n, r)), r
                }
                resetFigure(t) {
                    this.setFigureImage(t)
                }
                get type() {
                    return Fg.CHAT_WIDGET
                }
                get messageTypes() {
                    return []
                }
                get eventTypes() {
                    return [Lm.CHAT_EVENT]
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    this._container = t
                }
                get widget() {
                    return this._widget
                }
                set widget(t) {
                    this._widget = t
                }
                get connection() {
                    return this._connection
                }
                set connection(t) {
                    this._connection = t
                }
                get disposed() {
                    return this._disposed
                }
            }
            let Bp = (() => {
                    class t extends yp {
                        constructor(e, s) {
                            super(t.RWLUIM_LET_USER_IN), this._userName = e, this._canEnter = s
                        }
                        get userName() {
                            return this._userName
                        }
                        get _Str_23117() {
                            return this._canEnter
                        }
                    }
                    return t.RWLUIM_LET_USER_IN = "RWLUIM_LET_USER_IN", t
                })(),
                Hp = (() => {
                    class t extends Sp {
                        constructor(t, e) {
                            super(t), this._userName = "", this._userName = e
                        }
                        get userName() {
                            return this._userName
                        }
                    }
                    return t.RWDE_RINGING = "RWDE_RINGING", t.REJECTED = "RWDE_REJECTED", t.RWDE_ACCEPTED = "RWDE_ACCEPTED", t
                })();
            class Wp {
                constructor() {
                    this._isDisposed = !1, this._container = null
                }
                dispose() {
                    this._isDisposed = !0, this._container = null
                }
                processWidgetMessage(t) {
                    return t && this._container && t && t.type == Bp.RWLUIM_LET_USER_IN ? (this._container.roomSession.sendDoorbellApprovalMessage(t.userName, t._Str_23117), null) : null
                }
                processEvent(t) {
                    if (!t) return;
                    const e = t;
                    if (e) switch (t.type) {
                        case jm.RSDE_REJECTED:
                            return void this._container.events.dispatchEvent(new Hp(Hp.REJECTED, e.userName));
                        case jm.DOORBELL:
                            return void this._container.events.dispatchEvent(new Hp(Hp.RWDE_RINGING, e.userName));
                        case jm.RSDE_ACCEPTED:
                            return void this._container.events.dispatchEvent(new Hp(Hp.RWDE_ACCEPTED, e.userName))
                    }
                }
                update() {}
                get disposed() {
                    return this._isDisposed
                }
                get type() {
                    return Fg.DOORBELL
                }
                set container(t) {
                    this._container = t
                }
                get messageTypes() {
                    return [Bp.RWLUIM_LET_USER_IN]
                }
                get eventTypes() {
                    return [jm.DOORBELL, jm.RSDE_REJECTED, jm.RSDE_ACCEPTED]
                }
            }

            function zp(t) {
                let e = 1;
                return "-" === t[0] && (e = -1, t = t.substr(1)),
                    function(s, i) {
                        return (s[t] < i[t] ? -1 : s[t] > i[t] ? 1 : 0) * e
                    }
            }
            class Kp {
                constructor(t, e, s) {
                    this._id = t, this._category = e, this._name = s
                }
                get id() {
                    return this._id
                }
                get category() {
                    return this._category
                }
                get name() {
                    return this._name
                }
            }
            let Xp = (() => {
                class t extends Sp {
                    constructor(t, e, s = !1) {
                        super(t), this._items = e.slice(), this._Str_10043 = s
                    }
                    get items() {
                        return this._items
                    }
                    get _Str_2799() {
                        return this._Str_10043
                    }
                }
                return t.RWCCE_USER_CHOOSER_CONTENT = "RWCCE_USER_CHOOSER_CONTENT", t.RWCCE_FURNI_CHOOSER_CONTENT = "RWCCE_FURNI_CHOOSER_CONTENT", t
            })();
            class qp {
                constructor() {
                    this._isDisposed = !1, this._container = null
                }
                dispose() {
                    this._isDisposed = !0, this._container = null
                }
                processWidgetMessage(t) {
                    if (!t) return null;
                    switch (t.type) {
                        case Gp.RWRWM_FURNI_CHOOSER:
                            this.processFurniChooser();
                            break;
                        case Up.SELECT_OBJECT:
                            this.selectFurni(t)
                    }
                    return null
                }
                selectFurni(t) {
                    null != t && (t.category != V.WALL && t.category != V.FLOOR || this._container.roomEngine.selectRoomObject(this._container.roomSession.roomId, t.id, t.category))
                }
                processFurniChooser() {
                    if (null == this._container || null == this._container.roomSession || null == this._container.roomEngine || null == this._container.roomSession.userDataManager) return;
                    const t = this._container.roomSession.roomId,
                        e = [];
                    this.processFloorFurni(t, e), this.processWallFurni(t, e), e.sort(zp("name")), this._container.events.dispatchEvent(new Xp(Xp.RWCCE_FURNI_CHOOSER_CONTENT, e, !1))
                }
                processWallFurni(t, e) {
                    const s = this._container.roomEngine.getRoomObjectCount(t, V.WALL);
                    for (let i = 0; i < s; i++) {
                        const s = this._container.roomEngine.getRoomObjectByIndex(t, i, V.WALL);
                        if (null == s) continue;
                        const n = s.type;
                        let r = null;
                        if (n.startsWith("poster")) {
                            const t = Number.parseInt(n.replace("poster", ""));
                            r = cp.instance.localization.getValue("poster_" + t + "_name")
                        } else {
                            const t = Number.parseInt(s.model.getValue(j.FURNITURE_TYPE_ID)),
                                e = this._container.sessionDataManager.getWallItemData(t);
                            r = null != e && e.name.length > 0 ? e.name : n
                        }
                        e.push(new Kp(s.id, V.WALL, r))
                    }
                }
                processFloorFurni(t, e) {
                    const s = this._container.roomEngine.getRoomObjectCount(t, V.FLOOR);
                    for (let i = 0; i < s; i++) {
                        const s = this._container.roomEngine.getRoomObjectByIndex(t, i, V.FLOOR);
                        if (null == s) continue;
                        const n = Number.parseInt(s.model.getValue(j.FURNITURE_TYPE_ID)),
                            r = this._container.sessionDataManager.getFloorItemData(n);
                        e.push(new Kp(s.id, V.FLOOR, null != r ? r.name : s.type))
                    }
                }
                processEvent(t) {}
                update() {}
                get disposed() {
                    return this._isDisposed
                }
                get type() {
                    return Fg.FURNI_CHOOSER
                }
                set container(t) {
                    this._container = t
                }
                get messageTypes() {
                    return [Gp.RWRWM_FURNI_CHOOSER, Up.SELECT_OBJECT]
                }
                get eventTypes() {
                    return []
                }
            }
            class Jp {
                constructor() {
                    this._isDisposed = !1, this._container = null, this._widget = null
                }
                dispose() {
                    this._isDisposed = !0, this._container = null, this._widget = null
                }
                processWidgetMessage(t) {
                    return null
                }
                processEvent(t) {
                    switch (t.type) {
                        case lg.REQUEST_BACKGROUND_COLOR:
                            {
                                if (!this.canOpenBackgroundToner()) return;
                                const e = this._container.roomEngine.getRoomObject(t.roomId, t.objectId, t.category),
                                    s = e.model,
                                    i = Number.parseInt(s.getValue(j.FURNITURE_ROOM_BACKGROUND_COLOR_HUE)),
                                    n = Number.parseInt(s.getValue(j.FURNITURE_ROOM_BACKGROUND_COLOR_SATURATION)),
                                    r = Number.parseInt(s.getValue(j.FURNITURE_ROOM_BACKGROUND_COLOR_LIGHTNESS));this._widget.open(e.id, i, n, r)
                            }
                    }
                }
                canOpenBackgroundToner() {
                    return this._container.roomSession.isRoomOwner || this._container.roomSession.controllerLevel >= _r.GUEST || this._container.sessionDataManager.isGodMode
                }
                set widget(t) {
                    this._widget = t
                }
                get widget() {
                    return this._widget
                }
                update() {}
                get disposed() {
                    return this._isDisposed
                }
                get type() {
                    return Fg.ROOM_BACKGROUND_COLOR
                }
                set container(t) {
                    this._container = t
                }
                get container() {
                    return this._container
                }
                get messageTypes() {
                    return []
                }
                get eventTypes() {
                    return [lg.REQUEST_BACKGROUND_COLOR]
                }
            }
            let Qp = (() => {
                class t extends yp {
                    constructor(t, e, s = -1) {
                        super(t), this._roomObjectId = 0, this._petId = -1, this._roomObjectId = e, this._petId = s
                    }
                    get _Str_2713() {
                        return this._roomObjectId
                    }
                    get _Str_2508() {
                        return this._petId
                    }
                }
                return t.RWUPM_PET_PRODUCT = "RWUPM_PET_PRODUCT", t.MONSTERPLANT_SEED = "RWUPM_MONSTERPLANT_SEED", t
            })();
            class $p {
                constructor() {
                    this._container = null, this._isDisposed = !1, this.handleMonsterSeedPlant = this.handleMonsterSeedPlant.bind(this), this.handlePurchasableClothing = this.handlePurchasableClothing.bind(this), this.handleMysterybox = this.handleMysterybox.bind(this), this.handleEffectBox = this.handleEffectBox.bind(this), this.handleMysteryTrophy = this.handleMysteryTrophy.bind(this)
                }
                dispose() {
                    this._container = null, this._isDisposed = !0
                }
                processWidgetMessage(t) {
                    return null
                }
                processEvent(t) {}
                update() {}
                get disposed() {
                    return this._isDisposed
                }
                get type() {
                    return Fg.FURNI_STICKIE_WIDGET
                }
                set container(t) {
                    this._container && this._container.sessionDataManager && this._container.sessionDataManager.events && (this._container.roomEngine.events.removeEventListener(lg.REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG, this.handleMonsterSeedPlant), this._container.roomEngine.events.removeEventListener(lg.REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG, this.handlePurchasableClothing), this._container.roomEngine.events.removeEventListener(lg.REQUEST_MYSTERYBOX_OPEN_DIALOG, this.handleMysterybox), this._container.roomEngine.events.removeEventListener(lg.REQUEST_EFFECTBOX_OPEN_DIALOG, this.handleEffectBox), this._container.roomEngine.events.removeEventListener(lg.REQUEST_MYSTERYTROPHY_OPEN_DIALOG, this.handleMysteryTrophy)), this._container = t, t && this._container.sessionDataManager && this._container.sessionDataManager.events && (this._container.roomEngine.events.addEventListener(lg.REQUEST_MONSTERPLANT_SEED_PLANT_CONFIRMATION_DIALOG, this.handleMonsterSeedPlant), this._container.roomEngine.events.addEventListener(lg.REQUEST_PURCHASABLE_CLOTHING_CONFIRMATION_DIALOG, this.handlePurchasableClothing), this._container.roomEngine.events.addEventListener(lg.REQUEST_MYSTERYBOX_OPEN_DIALOG, this.handleMysterybox), this._container.roomEngine.events.addEventListener(lg.REQUEST_EFFECTBOX_OPEN_DIALOG, this.handleEffectBox), this._container.roomEngine.events.addEventListener(lg.REQUEST_MYSTERYTROPHY_OPEN_DIALOG, this.handleMysteryTrophy))
                }
                get container() {
                    return this._container
                }
                getRoomObject(t) {
                    return this._container ? this._container.roomEngine.getRoomObject(this._container.roomSession.roomId, t, V.FLOOR) : null
                }
                getFurniData(t) {
                    if (!t) return null;
                    const e = Number.parseInt(t.model.getValue(j.FURNITURE_TYPE_ID));
                    return this._container.sessionDataManager.getFloorItemData(e)
                }
                handlePurchasableClothing(t) {
                    if (!this._widget) return;
                    const e = this.getRoomObject(t.objectId);
                    e && this._container.isOwnerOfFurniture(e) && this._widget._Str_24748(e)
                }
                handleMonsterSeedPlant(t) {}
                handleMysterybox(t) {}
                handleEffectBox(t) {}
                handleMysteryTrophy(t) {}
                get widget() {
                    return this._widget
                }
                set widget(t) {
                    this._widget = t
                }
                get messageTypes() {
                    return [Qp.MONSTERPLANT_SEED]
                }
                get eventTypes() {
                    return [lg.OPEN_FURNI_CONTEXT_MENU, lg.CLOSE_FURNI_CONTEXT_MENU]
                }
            }
            let tb = (() => {
                    class t extends Sp {
                        constructor(t, e, s, i) {
                            super(t), this._value = i, this._objectId = s, this._furniType = e
                        }
                        get value() {
                            return this._value
                        }
                        get objectId() {
                            return this._objectId
                        }
                        get furniType() {
                            return this._furniType
                        }
                    }
                    return t.RWCFUE_CREDIT_FURNI_UPDATE = "RWCFUE_CREDIT_FURNI_UPDATE", t
                })(),
                eb = (() => {
                    class t extends yp {
                        constructor(t, e) {
                            super(t), this._objectId = e
                        }
                        get objectId() {
                            return this._objectId
                        }
                    }
                    return t.RWFCRM_REDEEM = "RWFCRM_REDEEM", t
                })(),
                sb = (() => {
                    class t extends yp {
                        constructor(t, e, s, i) {
                            super(t), this._objectId = e, this._category = s, this._roomId = i
                        }
                        get objectId() {
                            return this._objectId
                        }
                        get category() {
                            return this._category
                        }
                        get roomId() {
                            return this._roomId
                        }
                    }
                    return t.REQUEST_CREDITFURNI = "RWFWM_MESSAGE_REQUEST_CREDITFURNI", t.REQUEST_STICKIE = "RWFWM_MESSAGE_REQUEST_STICKIE", t.REQUEST_PRESENT = "RWFWM_MESSAGE_REQUEST_PRESENT", t.REQUEST_TROPHY = "RWFWM_MESSAGE_REQUEST_TROPHY", t.REQUEST_TEASER = "RWFWM_MESSAGE_REQUEST_TEASER", t.REQUEST_ECOTRONBOX = "RWFWM_MESSAGE_REQUEST_ECOTRONBOX", t.REQUEST_DIMMER = "RWFWM_MESSAGE_REQUEST_DIMMER", t.REQUEST_PLACEHOLDER = "RWFWM_MESSAGE_REQUEST_PLACEHOLDER", t.REQUEST_CLOTHING_CHANGE = "RWFWM_MESSAGE_REQUEST_CLOTHING_CHANGE", t.REQUEST_PLAYLIST_EDITOR = "RWFWM_MESSAGE_REQUEST_PLAYLIST_EDITOR", t.REQUEST_ACHIEVEMENT_RESOLUTION_ENGRAVING = "RWFWM_WIDGET_MESSAGE_REQUEST_ACHIEVEMENT_RESOLUTION_ENGRAVING", t.REQUEST_ACHIEVEMENT_RESOLUTION_FAILED = "RWFWM_WIDGET_MESSAGE_REQUEST_ACHIEVEMENT_RESOLUTION_FAILED", t.REQUEST_BADGE_DISPLAY_ENGRAVING = "RWFWM_WIDGET_MESSAGE_REQUEST_BADGE_DISPLAY_ENGRAVING", t
                })();
            class ib {
                constructor() {
                    this._container = null
                }
                dispose() {
                    this._container = null
                }
                processWidgetMessage(t) {
                    if (!t || !this.container) return null;
                    switch (t.type) {
                        case sb.REQUEST_CREDITFURNI:
                            {
                                const e = t,
                                    s = this._container.roomEngine.getRoomObject(e.roomId, e.objectId, e.category);
                                if (s && this._container.isOwnerOfFurniture(s)) {
                                    const t = s.model.getValue(j.FURNITURE_CREDIT_VALUE);
                                    this._container.events.dispatchEvent(new tb(tb.RWCFUE_CREDIT_FURNI_UPDATE, s.model.getValue(j.FURNITURE_TYPE_ID) + "_" + e.type + "_" + e.objectId, e.objectId, t))
                                }
                                break
                            }
                        case eb.RWFCRM_REDEEM:
                            {
                                const e = t;this.container.roomSession && this.container.roomSession.connection.send(new ah(e.objectId));
                                break
                            }
                    }
                    return null
                }
                processEvent(t) {}
                update() {}
                get disposed() {
                    return !!this._container
                }
                get type() {
                    return Fg.FURNI_CREDIT_WIDGET
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    this._container = t
                }
                get messageTypes() {
                    return [sb.REQUEST_CREDITFURNI, eb.RWFCRM_REDEEM]
                }
                get eventTypes() {
                    return []
                }
            }
            class nb {
                constructor() {
                    this._container = null, this._widget = null, this._lastFurniId = -1, this._messages = []
                }
                dispose() {
                    this.container = null, this._widget = null
                }
                processWidgetMessage(t) {
                    return null
                }
                processEvent(t) {
                    if (!t) return;
                    let e = null;
                    switch (t.type) {
                        case lg.OPEN_WIDGET:
                            if (e = t, e && this._container.roomEngine && this._widget) {
                                this._lastFurniId = e.objectId;
                                const t = this._container.roomEngine.getRoomObject(e.roomId, e.objectId, e.category);
                                t && this.canManipulateRoomObject(t) && this._widget.open(this._lastFurniId, t.getLocation().z)
                            }
                            return;
                        case lg.CLOSE_WIDGET:
                            return e = t, void(e && this._container.roomEngine && this._widget && this._lastFurniId === e.objectId && this._widget.hide())
                    }
                }
                update() {}
                get disposed() {
                    return !!this._container
                }
                get type() {
                    return Fg.CUSTOM_STACK_HEIGHT
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    if (t !== this._container && this._container) {
                        for (const t of this._messages) this._container.connection.removeMessageEvent(t);
                        this._messages = []
                    }
                    if (this._container = t, this._container) {
                        this._messages = [new ao(this.onFurnitureStackHeightEvent.bind(this))];
                        for (const e of this._messages) t.connection.addMessageEvent(e)
                    }
                }
                get messageTypes() {
                    return []
                }
                get eventTypes() {
                    return []
                }
                get widget() {
                    return this._widget
                }
                set widget(t) {
                    this._widget = t
                }
                onFurnitureStackHeightEvent(t) {
                    if (!t) return;
                    const e = t.getParser();
                    e && this._widget && this.canManipulateRoomObject() && this._widget.update(e.furniId, e.height)
                }
                canManipulateRoomObject(t = null) {
                    const e = this._container.roomSession.isRoomOwner,
                        s = this._container.roomSession.controllerLevel >= _r.GUEST,
                        i = this._container.sessionDataManager.isModerator,
                        n = t && this._container.isOwnerOfFurniture(t);
                    return e || i || s || n
                }
            }
            let rb = (() => {
                class t extends Sp {
                    constructor(e, s, i, n, r) {
                        super(t.RWDSUE_DIMMER_STATE), this._state = e, this._presetId = s, this._effectId = i, this._color = n, this._brightness = r
                    }
                    get state() {
                        return this._state
                    }
                    get _Str_14686() {
                        return this._presetId
                    }
                    get _Str_6815() {
                        return this._effectId
                    }
                    get color() {
                        return this._color
                    }
                    get _Str_5123() {
                        return this._brightness
                    }
                }
                return t.RWDSUE_DIMMER_STATE = "RWDSUE_DIMMER_STATE", t
            })();
            class ob {
                constructor(t, e, s, i) {
                    this._id = 0, this._type = 0, this._color = 0, this._intensity = 0, this._id = t, this._type = e, this._color = s, this._intensity = i
                }
                get id() {
                    return this._id
                }
                get type() {
                    return this._type
                }
                get color() {
                    return this._color
                }
                get _Str_4272() {
                    return this._intensity
                }
            }
            let ab = (() => {
                    class t extends Sp {
                        constructor(t) {
                            super(t), this._selectedPresetId = 0, this._presets = []
                        }
                        get _Str_10888() {
                            return this._presets.length
                        }
                        get presets() {
                            return this._presets
                        }
                        get selectedPresetId() {
                            return this._selectedPresetId
                        }
                        set selectedPresetId(t) {
                            this._selectedPresetId = t
                        }
                        setPresetValues(t, e, s, i) {
                            const n = new ob(t, e, s, i);
                            this._presets[t - 1] = n
                        }
                        getPresetNumber(t) {
                            return t < 0 || t >= this._presets.length ? null : this._presets[t]
                        }
                    }
                    return t.RWDUE_PRESETS = "RWDUE_PRESETS", t.RWDUE_HIDE = "RWDUE_HIDE", t
                })(),
                cb = (() => {
                    class t extends yp {
                        constructor() {
                            super(t.RWCDSM_CHANGE_STATE)
                        }
                    }
                    return t.RWCDSM_CHANGE_STATE = "RWCDSM_CHANGE_STATE", t
                })(),
                _b = (() => {
                    class t extends yp {
                        constructor(e, s, i) {
                            super(t.RWDPM_PREVIEW_DIMMER_PRESET), this._color = e, this._brightness = s, this._bgOnly = i
                        }
                        get color() {
                            return this._color
                        }
                        get _Str_5123() {
                            return this._brightness
                        }
                        get _Str_11464() {
                            return this._bgOnly
                        }
                    }
                    return t.RWDPM_PREVIEW_DIMMER_PRESET = "RWDPM_PREVIEW_DIMMER_PRESET", t
                })(),
                hb = (() => {
                    class t extends yp {
                        constructor(e, s, i, n, r) {
                            super(t.RWSDPM_SAVE_PRESET), this._presetNumber = e, this._effectTypeId = s, this._color = i, this._brightness = n, this._apply = r
                        }
                        get _Str_25037() {
                            return this._presetNumber
                        }
                        get _Str_24446() {
                            return this._effectTypeId
                        }
                        get color() {
                            return this._color
                        }
                        get _Str_5123() {
                            return this._brightness
                        }
                        get apply() {
                            return this._apply
                        }
                    }
                    return t.RWSDPM_SAVE_PRESET = "RWSDPM_SAVE_PRESET", t
                })();
            class lb {
                constructor() {
                    this._isDisposed = !1, this._container = null
                }
                dispose() {
                    this._isDisposed = !0, this._container = null
                }
                processWidgetMessage(t) {
                    switch (t.type) {
                        case sb.REQUEST_DIMMER:
                            this.canOpenWidget() && this._container.roomSession.requestMoodlightSettings();
                            break;
                        case hb.RWSDPM_SAVE_PRESET:
                            this.canOpenWidget() && this._container.roomSession.updateMoodlightData(t._Str_25037, t._Str_24446, t.color, t._Str_5123, t.apply);
                            break;
                        case cb.RWCDSM_CHANGE_STATE:
                            this.canOpenWidget() && this._container.roomSession.toggleMoodlightState();
                            break;
                        case _b.RWDPM_PREVIEW_DIMMER_PRESET:
                            if (!t || !this._container.roomEngine) return null;
                            this._container.roomEngine._Str_17804(this._container.roomSession.roomId, t.color, t._Str_5123, t._Str_11464)
                    }
                    return null
                }
                processEvent(t) {
                    switch (t.type) {
                        case km.RSDPE_PRESETS:
                            {
                                const e = t,
                                    s = new ab(ab.RWDUE_PRESETS);s.selectedPresetId = e.selectedPresetId;
                                let i = 0;
                                for (; i < e._Str_10888;) {
                                    const t = e._Str_14989(i);
                                    t && s.setPresetValues(t.id, t.type, t.color, t._Str_4272), i++
                                }
                                return void this._container.events.dispatchEvent(s)
                            }
                        case cg.ROOM_COLOR:
                            return void this._container.events.dispatchEvent(new rb(t.state, t._Str_14686, t._Str_6815, t.color, t._Str_5123));
                        case lg.REMOVE_DIMMER:
                            return void this._container.events.dispatchEvent(new ab(ab.RWDUE_HIDE))
                    }
                }
                update() {}
                canOpenWidget() {
                    return this._container.roomSession.isRoomOwner || this._container.roomSession.controllerLevel >= _r.GUEST || this._container.sessionDataManager.isModerator
                }
                get disposed() {
                    return this._isDisposed
                }
                get type() {
                    return Fg.ROOM_DIMMER
                }
                set container(t) {
                    this._container = t
                }
                get messageTypes() {
                    return [sb.REQUEST_DIMMER, hb.RWSDPM_SAVE_PRESET, cb.RWCDSM_CHANGE_STATE, _b.RWDPM_PREVIEW_DIMMER_PRESET]
                }
                get eventTypes() {
                    return [km.RSDPE_PRESETS, cg.ROOM_COLOR, lg.REMOVE_DIMMER]
                }
            }
            let ub = (() => {
                    class t {
                        constructor() {
                            this._container = null
                        }
                        dispose() {
                            this._container = null
                        }
                        processWidgetMessage(t) {
                            return null
                        }
                        processEvent(e) {
                            if (!e) return;
                            let s = null;
                            switch (e.type) {
                                case lg.REQUEST_INTERNAL_LINK:
                                    if (s = e, s && this._container.roomEngine) {
                                        const e = this._container.roomEngine.getRoomObject(s.roomId, s.objectId, s.category);
                                        if (e && e.model) {
                                            let s = e.model.getValue(j.FURNITURE_DATA)[t.INTERNALLINK];
                                            if (s && "" !== s && 0 !== s.length || (s = e.model.getValue(j.FURNITURE_INTERNAL_LINK)), !s || 0 === s.length) return;
                                            cp.instance.createLinkEvent(s)
                                        }
                                    }
                                    return
                            }
                        }
                        update() {}
                        get disposed() {
                            return !!this._container
                        }
                        get type() {
                            return Fg.INTERNAL_LINK
                        }
                        get container() {
                            return this._container
                        }
                        set container(t) {
                            this._container = t
                        }
                        get messageTypes() {
                            return []
                        }
                        get eventTypes() {
                            return [lg.REQUEST_INTERNAL_LINK]
                        }
                    }
                    return t.INTERNALLINK = "internalLink", t
                })(),
                db = (() => {
                    class t {
                        constructor() {
                            this._container = null, this._messages = [], this._link = null, this._roomIdToEnter = 0, this._confirmDialog = null
                        }
                        dispose() {
                            this.container = null, this._link = null, this._roomIdToEnter = 0, this.closeConfirmDialog()
                        }
                        processWidgetMessage(t) {
                            return null
                        }
                        processEvent(e) {
                            if (!e) return;
                            let s = null;
                            switch (e.type) {
                                case lg.REQUEST_ROOM_LINK:
                                    if (s = e, s && this._container.roomEngine) {
                                        const e = this._container.roomEngine.getRoomObject(s.roomId, s.objectId, s.category);
                                        if (e && e.model) {
                                            let s = e.model.getValue(j.FURNITURE_DATA)[t.INTERNALLINK];
                                            if (s && "" !== s && 0 !== s.length || (s = e.model.getValue(j.FURNITURE_INTERNAL_LINK)), !s || 0 === s.length) return;
                                            this.closeConfirmDialog(), this._link = s, this._roomIdToEnter = parseInt(s, 10), this._container && this._container.connection && this._container.connection.send(new Y_(this._roomIdToEnter, !1, !1))
                                        }
                                    }
                                    return
                            }
                        }
                        onRoomInfoEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = e.data;
                            if (!s) return;
                            if (s.roomId !== this._roomIdToEnter) return;
                            this._roomIdToEnter = 0;
                            const i = s.roomName,
                                n = s.ownerName;
                            let r = cp.instance.getLocalization("room.link.confirmation.message");
                            r && r.indexOf("%%room_name%%") > -1 && (r = r.replace("%%room_name%%", i)), r && r.indexOf("%%owner_name%%") > -1 && (r = r.replace("%%owner_name%%", n)), this.closeConfirmDialog(), this._container && this._container.notificationService && (this._confirmDialog = this._container.notificationService.alertWithConfirm(r, null, () => {
                                cp.instance.createLinkEvent("navigator/goto/" + this._link)
                            }))
                        }
                        closeConfirmDialog() {
                            this._confirmDialog && (this._confirmDialog.close(), this._confirmDialog = null)
                        }
                        update() {}
                        get disposed() {
                            return !!this._container
                        }
                        get type() {
                            return Fg.ROOM_LINK
                        }
                        get container() {
                            return this._container
                        }
                        set container(t) {
                            if (t !== this._container && this._container) {
                                for (const t of this._messages) this._container.connection.removeMessageEvent(t);
                                this._messages = []
                            }
                            if (this._container = t, this._container) {
                                this._messages = [new Ar(this.onRoomInfoEvent.bind(this))];
                                for (const e of this._messages) t.connection.addMessageEvent(e)
                            }
                        }
                        get messageTypes() {
                            return []
                        }
                        get eventTypes() {
                            return [lg.REQUEST_ROOM_LINK]
                        }
                    }
                    return t.INTERNALLINK = "internalLink", t
                })(),
                gb = (() => {
                    class t extends Sp {
                        constructor(t, e, s, i, n, r) {
                            super(t), this._Str_2319 = -1, this._Str_2319 = e, this._Str_3796 = s, this._text = i, this._Str_3062 = n, this._controller = r
                        }
                        get _Str_1577() {
                            return this._Str_2319
                        }
                        get _Str_1723() {
                            return this._Str_3796
                        }
                        get text() {
                            return this._text
                        }
                        get _Str_10471() {
                            return this._Str_3062
                        }
                        get controller() {
                            return this._controller
                        }
                    }
                    return t.RWSDUE_STICKIE_DATA = "RWSDUE_STICKIE_DATA", t
                })(),
                mb = (() => {
                    class t extends yp {
                        constructor(t, e, s = "", i = "") {
                            super(t), this._objectId = e, this._text = s, this._colorHex = i
                        }
                        get objectId() {
                            return this._objectId
                        }
                        get text() {
                            return this._text
                        }
                        get colorHex() {
                            return this._colorHex
                        }
                    }
                    return t.SEND_UPDATE = "RWSUM_STICKIE_SEND_UPDATE", t.SEND_DELETE = "RWSUM_STICKIE_SEND_DELETE", t
                })();
            class pb {
                constructor() {
                    this._container = null, this._isDisposed = !1
                }
                dispose() {
                    this._container = null, this._isDisposed = !0
                }
                processWidgetMessage(t) {
                    if (!t) return null;
                    switch (t.type) {
                        case sb.REQUEST_STICKIE:
                            {
                                const e = t,
                                    s = this._container.roomEngine.getRoomObject(e.roomId, e.objectId, e.category);
                                if (s) {
                                    const t = s.model.getValue(j.FURNITURE_ITEMDATA);
                                    if (t.length < 6) return null;
                                    let i = null,
                                        n = null;
                                    t.indexOf(" ") > 0 ? (i = t.slice(0, t.indexOf(" ")), n = t.slice(t.indexOf(" ") + 1, t.length)) : i = t, this._container.events.dispatchEvent(new gb(gb.RWSDUE_STICKIE_DATA, e.objectId, s.type, n, i, this._container.roomSession.isRoomOwner || this._container.sessionDataManager.isModerator))
                                }
                                break
                            }
                        case mb.SEND_UPDATE:
                            this._container.roomEngine.modifyRoomObjectData(t.objectId, V.WALL, t.colorHex, t.text);
                            break;
                        case mb.SEND_DELETE:
                            this._container.roomEngine.deleteRoomObject(t.objectId, V.WALL)
                    }
                    return null
                }
                processEvent(t) {}
                update() {}
                get disposed() {
                    return this._isDisposed
                }
                get type() {
                    return Fg.FURNI_STICKIE_WIDGET
                }
                set container(t) {
                    this._container = t
                }
                get messageTypes() {
                    return [sb.REQUEST_STICKIE, mb.SEND_DELETE, mb.SEND_UPDATE]
                }
                get eventTypes() {
                    return []
                }
            }
            let bb = (() => {
                class t extends Sp {
                    constructor(t, e, s, i, n, r) {
                        super(t), this._name = e, this._date = s, this._message = i, this._color = n, this._viewType = r
                    }
                    get name() {
                        return this._name
                    }
                    get date() {
                        return this._date
                    }
                    get message() {
                        return this._message
                    }
                    get color() {
                        return this._color
                    }
                    get viewType() {
                        return this._viewType
                    }
                }
                return t.TROPHY_DATA = "RWTDUE_TROPHY_DATA", t
            })();
            class Eb {
                constructor() {
                    this._container = null
                }
                dispose() {
                    this._container = null
                }
                processWidgetMessage(t) {
                    if (!t || !this.container) return null;
                    switch (t.type) {
                        case sb.REQUEST_TROPHY:
                            {
                                const e = this._container.roomEngine.getRoomObject(t.roomId, t.objectId, t.category);
                                if (e) {
                                    let t = e.model.getValue(j.FURNITURE_DATA),
                                        s = e.model.getValue(j.FURNITURE_EXTRAS);
                                    s || (s = "0");
                                    const i = e.model.getValue(j.FURNITURE_COLOR),
                                        n = t.substring(0, t.indexOf("\t"));
                                    t = t.substring(n.length + 1, t.length);
                                    const r = t.substring(0, t.indexOf("\t")),
                                        o = t.substr(r.length + 1, t.length);
                                    this._container.events.dispatchEvent(new bb(bb.TROPHY_DATA, n, r, o, parseInt(i), parseInt(s)))
                                }
                                break
                            }
                    }
                    return null
                }
                processEvent(t) {}
                update() {}
                get disposed() {
                    return !!this._container
                }
                get type() {
                    return Fg.FURNI_TROPHY_WIDGET
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    this._container = t
                }
                get messageTypes() {
                    return [sb.REQUEST_TROPHY]
                }
                get eventTypes() {
                    return []
                }
            }
            let fb = (() => {
                    class t extends Sp {
                        constructor(e, s, i, n, r) {
                            super(t.RWONE_TYPE), this._userId = e, this._category = s, this._userName = i, this._userType = n, this._roomIndex = r
                        }
                        get userId() {
                            return this._userId
                        }
                        get category() {
                            return this._category
                        }
                        get userName() {
                            return this._userName
                        }
                        get userType() {
                            return this._userType
                        }
                        get roomIndex() {
                            return this._roomIndex
                        }
                    }
                    return t.RWONE_TYPE = "RWONE_TYPE", t
                })(),
                Sb = (() => {
                    class t extends Sp {
                        constructor(e, s) {
                            super(t.RWWCIDE_CHAT_INPUT_CONTENT), this._Str_21134 = "", this._userName = "", this._Str_21134 = e, this._userName = s
                        }
                        get _Str_23621() {
                            return this._Str_21134
                        }
                        get userName() {
                            return this._userName
                        }
                    }
                    return t.RWWCIDE_CHAT_INPUT_CONTENT = "RWWCIDE_CHAT_INPUT_CONTENT", t.WHISPER = "whisper", t.SHOUT = "shout", t
                })(),
                Ib = (() => {
                    class t extends Sp {
                        constructor(t) {
                            super(t), this._id = 0, this._category = 0, this._name = "", this._description = "", this._image = null, this._isWallItem = !1, this._isStickie = !1, this._isRoomOwner = !1, this._roomControllerLevel = 0, this._isAnyRoomController = !1, this._expiration = -1, this._purchaseCatalogPageId = -1, this._purchaseOfferId = -1, this._extraParam = "", this._isOwner = !1, this._stuffData = null, this._groupId = 0, this._ownerId = 0, this._ownerName = "", this._usagePolicy = 0, this._rentCatalogPageId = -1, this._rentOfferId = -1, this._purchaseCouldBeUsedForBuyout = !1, this._rentCouldBeUsedForBuyout = !1, this._availableForBuildersClub = !1
                        }
                        set id(t) {
                            this._id = t
                        }
                        get id() {
                            return this._id
                        }
                        set category(t) {
                            this._category = t
                        }
                        get category() {
                            return this._category
                        }
                        set name(t) {
                            this._name = t
                        }
                        get name() {
                            return this._name
                        }
                        set description(t) {
                            this._description = t
                        }
                        get description() {
                            return this._description
                        }
                        set image(t) {
                            this._image = t
                        }
                        get image() {
                            return this._image
                        }
                        set isWallItem(t) {
                            this._isWallItem = t
                        }
                        get isWallItem() {
                            return this._isWallItem
                        }
                        set isStickie(t) {
                            this._isStickie = t
                        }
                        get isStickie() {
                            return this._isStickie
                        }
                        set isRoomOwner(t) {
                            this._isRoomOwner = t
                        }
                        get isRoomOwner() {
                            return this._isRoomOwner
                        }
                        set roomControllerLevel(t) {
                            this._roomControllerLevel = t
                        }
                        get roomControllerLevel() {
                            return this._roomControllerLevel
                        }
                        set isAnyRoomOwner(t) {
                            this._isAnyRoomController = t
                        }
                        get isAnyRoomOwner() {
                            return this._isAnyRoomController
                        }
                        set expiration(t) {
                            this._expiration = t
                        }
                        get expiration() {
                            return this._expiration
                        }
                        set purchaseOfferId(t) {
                            this._purchaseOfferId = t
                        }
                        get purchaseOfferId() {
                            return this._purchaseOfferId
                        }
                        set extraParam(t) {
                            this._extraParam = t
                        }
                        get extraParam() {
                            return this._extraParam
                        }
                        set isOwner(t) {
                            this._isOwner = t
                        }
                        get isOwner() {
                            return this._isOwner
                        }
                        set stuffData(t) {
                            this._stuffData = t
                        }
                        get stuffData() {
                            return this._stuffData
                        }
                        set groupId(t) {
                            this._groupId = t
                        }
                        get groupId() {
                            return this._groupId
                        }
                        set ownerId(t) {
                            this._ownerId = t
                        }
                        get ownerId() {
                            return this._ownerId
                        }
                        set ownerName(t) {
                            this._ownerName = t
                        }
                        get ownerName() {
                            return this._ownerName
                        }
                        set usagePolicy(t) {
                            this._usagePolicy = t
                        }
                        get usagePolicy() {
                            return this._usagePolicy
                        }
                        set rentOfferId(t) {
                            this._rentOfferId = t
                        }
                        get rentOfferId() {
                            return this._rentOfferId
                        }
                        get purchaseCouldBeUsedForBuyout() {
                            return this._purchaseCouldBeUsedForBuyout
                        }
                        set purchaseCouldBeUsedForBuyout(t) {
                            this._purchaseCouldBeUsedForBuyout = t
                        }
                        get rentCouldBeUsedForBuyout() {
                            return this._rentCouldBeUsedForBuyout
                        }
                        set rentCouldBeUsedForBuyout(t) {
                            this._rentCouldBeUsedForBuyout = t
                        }
                        get availableForBuildersClub() {
                            return this._availableForBuildersClub
                        }
                        set availableForBuildersClub(t) {
                            this._availableForBuildersClub = t
                        }
                    }
                    return t.FURNI = "RWFIUE_FURNI", t
                })(),
                Rb = (() => {
                    class t extends Sp {
                        constructor() {
                            super(t.RENTABLE_BOT), this._name = "", this._motto = "", this._Str_4900 = 0, this._figure = "", this._caryId = 0, this._Str_5131 = 0, this._Str_4026 = !1, this._Str_4028 = !1, this._roomControllerLevel = 0, this._badges = []
                        }
                        set name(t) {
                            this._name = t
                        }
                        get name() {
                            return this._name
                        }
                        set motto(t) {
                            this._motto = t
                        }
                        get motto() {
                            return this._motto
                        }
                        set id(t) {
                            this._Str_4900 = t
                        }
                        get id() {
                            return this._Str_4900
                        }
                        set figure(t) {
                            this._figure = t
                        }
                        get figure() {
                            return this._figure
                        }
                        set badges(t) {
                            this._badges = t
                        }
                        get badges() {
                            return this._badges
                        }
                        get ownerId() {
                            return this._ownerId
                        }
                        set ownerId(t) {
                            this._ownerId = t
                        }
                        get ownerName() {
                            return this._ownerName
                        }
                        set ownerName(t) {
                            this._ownerName = t
                        }
                        set _Str_3246(t) {
                            this._Str_4026 = t
                        }
                        get _Str_3246() {
                            return this._Str_4026
                        }
                        set roomControllerLevel(t) {
                            this._roomControllerLevel = t
                        }
                        get roomControllerLevel() {
                            return this._roomControllerLevel
                        }
                        set _Str_3529(t) {
                            this._Str_4028 = t
                        }
                        get _Str_3529() {
                            return this._Str_4028
                        }
                        set carryId(t) {
                            this._caryId = t
                        }
                        get carryId() {
                            return this._caryId
                        }
                        set roomIndex(t) {
                            this._Str_5131 = t
                        }
                        get roomIndex() {
                            return this._Str_5131
                        }
                        get botSkills() {
                            return this._Str_3986
                        }
                        set botSkills(t) {
                            this._Str_3986 = t
                        }
                    }
                    return t.RENTABLE_BOT = "RWRBIUE_RENTABLE_BOT", t._Str_7492 = "RENTABLE_BOT", t
                })(),
                vb = (() => {
                    class t extends Sp {
                        constructor(t) {
                            super(t), this._name = "", this._motto = "", this._Str_4900 = 0, this._xp = 0, this._figure = "", this._groupId = 0, this._groupName = "", this._Str_11289 = "", this._Str_5228 = 0, this._Str_5131 = 0, this._Str_8522 = !1, this._realName = "", this._Str_3947 = !1, this._Str_4026 = !1, this._Str_4028 = !1, this._roomControllerLevel = 0, this._canBeAskedForAFriend = !1, this._Str_9070 = !1, this._Str_8457 = !1, this._Str_8831 = !1, this._Str_3437 = 0, this._Str_6028 = !1, this._Str_6139 = !1, this._Str_8973 = !1, this._Str_8910 = 0, this._Str_8858 = 0, this._isFriend = !1, this._Str_4890 = !1, this._badges = []
                        }
                        set name(t) {
                            this._name = t
                        }
                        get name() {
                            return this._name
                        }
                        set motto(t) {
                            this._motto = t
                        }
                        get motto() {
                            return this._motto
                        }
                        set activityPoints(t) {
                            this._activityPoints = t
                        }
                        get activityPoints() {
                            return this._activityPoints
                        }
                        set webID(t) {
                            this._Str_4900 = t
                        }
                        get webID() {
                            return this._Str_4900
                        }
                        set xp(t) {
                            this._xp = t
                        }
                        get xp() {
                            return this._xp
                        }
                        set userType(t) {
                            this._Str_3021 = t
                        }
                        get userType() {
                            return this._Str_3021
                        }
                        set figure(t) {
                            this._figure = t
                        }
                        get figure() {
                            return this._figure
                        }
                        set badges(t) {
                            this._badges = t
                        }
                        get badges() {
                            return this._badges
                        }
                        set groupId(t) {
                            this._groupId = t
                        }
                        get groupId() {
                            return this._groupId
                        }
                        set groupName(t) {
                            this._groupName = t
                        }
                        get groupName() {
                            return this._groupName
                        }
                        set groupBadgeId(t) {
                            this._Str_11289 = t
                        }
                        get groupBadgeId() {
                            return this._Str_11289
                        }
                        set canBeAskedForAFriend(t) {
                            this._canBeAskedForAFriend = t
                        }
                        get canBeAskedForAFriend() {
                            return this._canBeAskedForAFriend
                        }
                        set respectLeft(t) {
                            this._Str_3437 = t
                        }
                        get respectLeft() {
                            return this._Str_3437
                        }
                        set isIgnored(t) {
                            this._Str_6028 = t
                        }
                        get isIgnored() {
                            return this._Str_6028
                        }
                        set isRoomOwner(t) {
                            this._Str_4026 = t
                        }
                        get isRoomOwner() {
                            return this._Str_4026
                        }
                        set isGuildRoom(t) {
                            this._Str_6139 = t
                        }
                        get isGuildRoom() {
                            return this._Str_6139
                        }
                        set roomControllerLevel(t) {
                            this._roomControllerLevel = t
                        }
                        get roomControllerLevel() {
                            return this._roomControllerLevel
                        }
                        set isModerator(t) {
                            this._Str_4028 = t
                        }
                        get isModerator() {
                            return this._Str_4028
                        }
                        set canTrade(t) {
                            this._Str_8973 = t
                        }
                        get canTrade() {
                            return this._Str_8973
                        }
                        set _Str_6622(t) {
                            this._Str_8910 = t
                        }
                        get _Str_6622() {
                            return this._Str_8910
                        }
                        set _Str_5990(t) {
                            this._Str_9070 = t
                        }
                        get _Str_5990() {
                            return this._Str_9070
                        }
                        set _Str_6701(t) {
                            this._Str_8457 = t
                        }
                        get _Str_6701() {
                            return this._Str_8457
                        }
                        get _Str_6394() {
                            return this._Str_8831
                        }
                        set _Str_6394(t) {
                            this._Str_8831 = t
                        }
                        set flatControl(t) {
                            this._Str_8858 = t
                        }
                        get flatControl() {
                            return this._Str_8858
                        }
                        set carryId(t) {
                            this._Str_5228 = t
                        }
                        get carryId() {
                            return this._Str_5228
                        }
                        set roomIndex(t) {
                            this._Str_5131 = t
                        }
                        get roomIndex() {
                            return this._Str_5131
                        }
                        set isSpectator(t) {
                            this._Str_8522 = t
                        }
                        get isSpectator() {
                            return this._Str_8522
                        }
                        set realName(t) {
                            this._realName = t
                        }
                        get realName() {
                            return this._realName
                        }
                        set _Str_4330(t) {
                            this._Str_3947 = t
                        }
                        get _Str_4330() {
                            return this._Str_3947
                        }
                        get isFriend() {
                            return this._isFriend
                        }
                        set isFriend(t) {
                            this._isFriend = t
                        }
                        get isAmbassador() {
                            return this._Str_4890
                        }
                        set isAmbassador(t) {
                            this._Str_4890 = t
                        }
                    }
                    return t.OWN_USER = "RWUIUE_OWN_USER", t.BOT = "RWUIUE_BOT", t.PEER = "RWUIUE_PEER", t._Str_18400 = 0, t._Str_14161 = 2, t._Str_13798 = 3, t._Str_7492 = "BOT", t
                })(),
                Tb = (() => {
                    class t extends yp {
                        constructor(e) {
                            super(t.RWVM_CHANGE_MOTTO_MESSAGE), this._motto = e
                        }
                        get motto() {
                            return this._motto
                        }
                    }
                    return t.RWVM_CHANGE_MOTTO_MESSAGE = "RWVM_CHANGE_MOTTO_MESSAGE", t
                })(),
                Ob = (() => {
                    class t extends yp {
                        constructor(t, e, s, i = -1, n = null) {
                            super(t), this._furniId = e, this._furniCategory = s, this._offerId = i, this._objectData = n
                        }
                        get furniId() {
                            return this._furniId
                        }
                        get furniCategory() {
                            return this._furniCategory
                        }
                        get objectData() {
                            return this._objectData
                        }
                        get _Str_2451() {
                            return this._offerId
                        }
                    }
                    return t.RWFUAM_ROTATE = "RWFUAM_ROTATE", t.RWFAM_MOVE = "RWFAM_MOVE", t.RWFAM_PICKUP = "RWFAM_PICKUP", t.RWFAM_EJECT = "RWFAM_EJECT", t.RWFAM_USE = "RWFAM_USE", t.RWFAM_OPEN_WELCOME_GIFT = "RWFAM_OPEN_WELCOME_GIFT", t.RWFAM_SAVE_STUFF_DATA = "RWFAM_SAVE_STUFF_DATA", t
                })(),
                yb = (() => {
                    class t {
                        constructor() {
                            this._container = null, this._widget = null, this._disposed = !1
                        }
                        dispose() {
                            this.disposed || (this.container = null, this._disposed = !0)
                        }
                        update() {}
                        processWidgetMessage(t) {
                            if (!t || !this._container) return null;
                            let e = 0,
                                s = null;
                            if (t instanceof Dp && (e = t.userId, s = [Dp.RWUAM_REQUEST_PET_UPDATE, Dp.RWUAM_RESPECT_PET, Dp.RWUAM_PICKUP_PET, Dp.RWUAM_MOUNT_PET, Dp.RWUAM_TOGGLE_PET_RIDING_PERMISSION, Dp.RWUAM_TOGGLE_PET_BREEDING_PERMISSION, Dp.RWUAM_DISMOUNT_PET, Dp.RWUAM_SADDLE_OFF, Dp.RWUAM_GIVE_CARRY_ITEM_TO_PET, Dp.RWUAM_GIVE_WATER_TO_PET, Dp.RWUAM_GIVE_LIGHT_TO_PET, Dp.RWUAM_TREAT_PET].indexOf(t.type) >= 0 ? this._container.roomSession.userDataManager.getPetData(e) : this._container.roomSession.userDataManager.getUserData(e), !s)) return null;
                            let i = 0,
                                n = 0;
                            switch (t instanceof Ob && (i = t.furniId, n = t.furniCategory), t.type) {
                                case Up.GET_OBJECT_INFO:
                                    return this.processObjectInfoMessage(t);
                                case Up.GET_OBJECT_NAME:
                                    return this.processObjectNameMessage(t);
                                case Dp.RWUAM_SEND_FRIEND_REQUEST:
                                    this._container.friendService.sendFriendRequest(e, s.name);
                                    break;
                                case Dp.RWUAM_RESPECT_USER:
                                    this._container.sessionDataManager.giveRespect(e);
                                    break;
                                case Dp.RWUAM_RESPECT_PET:
                                    this._container.sessionDataManager.givePetRespect(e);
                                    break;
                                case Dp.RWUAM_WHISPER_USER:
                                    this._container.events.dispatchEvent(new Sb(Sb.WHISPER, s.name));
                                    break;
                                case Dp.RWUAM_IGNORE_USER:
                                case Dp.RWUAM_UNIGNORE_USER:
                                    break;
                                case Dp.RWUAM_KICK_USER:
                                    this._container.roomSession.sendKickMessage(t.userId);
                                    break;
                                case Dp.RWUAM_BAN_USER_DAY:
                                case Dp.RWUAM_BAN_USER_HOUR:
                                case Dp.RWUAM_BAN_USER_PERM:
                                    this._container.roomSession.sendBanMessage(t.userId, t.type);
                                    break;
                                case Dp.MUTE_USER_2MIN:
                                    this._container.roomSession.sendMuteMessage(t.userId, 2);
                                    break;
                                case Dp.MUTE_USER_5MIN:
                                    this._container.roomSession.sendMuteMessage(t.userId, 5);
                                    break;
                                case Dp.MUTE_USER_10MIN:
                                    this._container.roomSession.sendMuteMessage(t.userId, 10);
                                    break;
                                case Dp.RWUAM_GIVE_RIGHTS:
                                    this._container.roomSession.sendGiveRightsMessage(t.userId);
                                    break;
                                case Dp.RWUAM_TAKE_RIGHTS:
                                    this._container.roomSession.sendTakeRightsMessage(t.userId);
                                    break;
                                case Dp.RWUAM_START_TRADING:
                                    s && this._widget.inventoryTrading.startTrade(s.roomIndex, s.name);
                                    break;
                                case Dp.RWUAM_PASS_CARRY_ITEM:
                                    this._container.connection.send(new yh(e));
                                    break;
                                case Dp.RWUAM_GIVE_CARRY_ITEM_TO_PET:
                                case Dp.RWUAM_GIVE_WATER_TO_PET:
                                case Dp.RWUAM_GIVE_LIGHT_TO_PET:
                                case Dp.RWUAM_TREAT_PET:
                                    break;
                                case Dp.RWUAM_DROP_CARRY_ITEM:
                                    this._container.connection.send(new Oh);
                                    break;
                                case Ob.RWFUAM_ROTATE:
                                    this._container.roomEngine.processRoomObjectOperation(i, n, yg.OBJECT_ROTATE_POSITIVE);
                                    break;
                                case Ob.RWFAM_MOVE:
                                    this._container.roomEngine.processRoomObjectOperation(i, n, yg.OBJECT_MOVE);
                                    break;
                                case Ob.RWFAM_PICKUP:
                                    this._container.roomEngine.processRoomObjectOperation(i, n, yg.OBJECT_PICKUP);
                                    break;
                                case Ob.RWFAM_EJECT:
                                    this._container.roomEngine.processRoomObjectOperation(i, n, yg.OBJECT_EJECT);
                                    break;
                                case Ob.RWFAM_USE:
                                    this._container.roomEngine.useRoomObject(i, n);
                                    break;
                                case Tb.RWVM_CHANGE_MOTTO_MESSAGE:
                                    return void this._container.roomSession.sendMottoMessage(t.motto);
                                case Ob.RWFAM_SAVE_STUFF_DATA:
                                    {
                                        const e = t.objectData;
                                        if (e) {
                                            const t = new Map,
                                                s = e.split("\t");
                                            if (s)
                                                for (const e of s) {
                                                    const s = e.split("=", 2);
                                                    s && 2 === s.length && t.set(s[0], s[1])
                                                }
                                            this._container.roomEngine.processRoomObjectWallOperation(i, n, yg.OBJECT_SAVE_STUFF_DATA, t), this._Str_23922(t), t.clear()
                                        }
                                        break
                                    }
                                case Dp.RWUAM_REQUEST_PET_UPDATE:
                                case Dp.RWUAM_REPORT:
                                case Dp.RWUAM_REPORT_CFH_OTHER:
                                    break;
                                case Dp.RWUAM_AMBASSADOR_ALERT_USER:
                                    this._container.roomSession.sendAmbassadorAlertMessage(t.userId);
                                    break;
                                case Dp.RWUAM_AMBASSADOR_KICK_USER:
                                    this._container.roomSession.sendKickMessage(t.userId);
                                    break;
                                case Dp.AMBASSADOR_MUTE_USER_2MIN:
                                    this._container.roomSession.sendMuteMessage(t.userId, 2);
                                    break;
                                case Dp.AMBASSADOR_MUTE_USER_10MIN:
                                    this._container.roomSession.sendMuteMessage(t.userId, 10);
                                    break;
                                case Dp.AMBASSADOR_MUTE_USER_60MIN:
                                    this._container.roomSession.sendMuteMessage(t.userId, 60);
                                    break;
                                case Dp.AMBASSADOR_MUTE_USER_18HOUR:
                                    this._container.roomSession.sendMuteMessage(t.userId, 1080)
                            }
                            return null
                        }
                        processEvent(t) {
                            if (event) switch (t.type) {
                                case Wm.RSUBE_BADGES:
                                    return void this.widget.updateUserBadges(t.userId, t.badges)
                            }
                        }
                        processObjectInfoMessage(t) {
                            const e = this._container.roomSession.roomId;
                            switch (t.category) {
                                case V.FLOOR:
                                case V.WALL:
                                    this._Str_23142(t, e);
                                    break;
                                case V.UNIT:
                                    {
                                        if (!(this._container.roomSession && this._container.sessionDataManager && this._container.events && this._container.roomEngine)) return null;
                                        const s = this._container.roomSession.userDataManager.getUserDataByIndex(t.id);
                                        if (!s) return null;
                                        switch (s.type) {
                                            case ua.PET:
                                                break;
                                            case ua.USER:
                                                this._Str_22722(e, t.id, t.category, s);
                                                break;
                                            case ua.BOT:
                                                this._Str_22312(e, t.id, t.category, s);
                                                break;
                                            case ua.RENTABLE_BOT:
                                                this._Str_23115(e, t.id, t.category, s)
                                        }
                                        break
                                    }
                            }
                            return null
                        }
                        processObjectNameMessage(t) {
                            const e = this._container.roomSession.roomId;
                            let s = 0,
                                i = null,
                                n = 0,
                                r = 0;
                            switch (t.category) {
                                case V.FLOOR:
                                case V.WALL:
                                    {
                                        if (!this._container.events || !this._container.roomEngine) return null;
                                        const n = this._container.roomEngine.getRoomObject(e, t.id, t.category),
                                            o = n.type;
                                        if (0 === o.indexOf("poster")) s = -1,
                                        i = "${poster_" + parseInt(o.replace("poster", "")) + "_name}",
                                        r = n.id;
                                        else {
                                            let e = null;
                                            const o = n.model.getValue(j.FURNITURE_TYPE_ID);
                                            if (t.category === V.FLOOR ? e = this._container.sessionDataManager.getFloorItemData(o) : t.category === V.WALL && (e = this._container.sessionDataManager.getWallItemData(o)), !e) return null;
                                            s = e.id, i = e.name, r = n.id
                                        }
                                        break
                                    }
                                case V.UNIT:
                                    {
                                        if (!this._container.roomSession || !this._container.roomSession.userDataManager) return null;
                                        const e = this._container.roomSession.userDataManager.getUserDataByIndex(t.id);
                                        if (!e) return null;s = e.webID,
                                        i = e.name,
                                        n = e.type,
                                        r = e.roomIndex;
                                        break
                                    }
                            }
                            return i && this._container.events.dispatchEvent(new fb(s, t.category, i, n, r)), null
                        }
                        _Str_23142(t, e) {
                            if (!this._container || !this._container.events || !this._container.roomEngine) return;
                            if (t.id < 0) return;
                            const s = new Ib(Ib.FURNI);
                            s.id = t.id, s.category = t.category;
                            const i = this._container.roomEngine.getRoomObject(e, t.id, t.category);
                            if (!i) return;
                            const n = i.model;
                            n.getValue(nm.INFOSTAND_EXTRA_PARAM) && (s.extraParam = n.getValue(nm.INFOSTAND_EXTRA_PARAM));
                            const r = n.getValue(j.FURNITURE_DATA_FORMAT),
                                o = Oi.getData(r);
                            o.initializeFromRoomObjectModel(n), s.stuffData = o;
                            const a = i.type;
                            if (0 === a.indexOf("poster")) {
                                const t = parseInt(a.replace("poster", ""));
                                s.name = "${poster_" + t + "_name}", s.description = "${poster_" + t + "_desc}"
                            } else {
                                const e = n.getValue(j.FURNITURE_TYPE_ID);
                                let r = null;
                                t.category === V.FLOOR ? r = this._container.sessionDataManager.getFloorItemData(e) : t.category == V.WALL && (r = this._container.sessionDataManager.getWallItemData(e)), r && (s.name = r.name, s.description = r.description, s.purchaseOfferId = r.offerId, this._container.wiredService && t.category === V.FLOOR && this._container.wiredService.selectFurniture(i.id, r.name))
                            }
                            a.indexOf("post_it") > -1 && (s.isStickie = !0);
                            const c = n.getValue(j.FURNITURE_EXPIRY_TIME),
                                _ = n.getValue(j.FURNITURE_EXPIRTY_TIMESTAMP);
                            s.expiration = c < 0 ? c : Math.max(0, c - (cp.instance.time - _) / 1e3);
                            let h = this._container.roomEngine.getRoomObjectImage(e, t.id, t.category, new K(180), 64, null);
                            if ((!h.data || h.data.width > 140 || h.data.height > 200) && (h = this._container.roomEngine.getRoomObjectImage(e, t.id, t.category, new K(180), 1, null)), h && h.data) {
                                const t = cp.instance.renderer.extract.image(h.data);
                                t && (s.image = t)
                            }
                            s.isWallItem = t.category === V.WALL, s.isRoomOwner = this._container.roomSession.isRoomOwner, s.roomControllerLevel = this._container.roomSession.controllerLevel, s.isAnyRoomOwner = this._container.sessionDataManager.isModerator, s.ownerId = n.getValue(j.FURNITURE_OWNER_ID), s.ownerName = n.getValue(j.FURNITURE_OWNER_NAME), s.usagePolicy = n.getValue(j.FURNITURE_USAGE_POLICY);
                            const l = n.getValue(j.FURNITURE_GUILD_CUSTOMIZED_GUILD_ID);
                            0 !== l && (s.groupId = l), this._container.isOwnerOfFurniture(i) && (s.isOwner = !0), this._container.events.dispatchEvent(s)
                        }
                        _Str_22722(e, s, i, n) {
                            let r = vb.OWN_USER;
                            n.webID !== this._container.sessionDataManager.userId && (r = vb.PEER);
                            const o = new vb(r);
                            o.isSpectator = this._container.roomSession.isSpectator, o.name = n.name, o.motto = n.custom, t.ACTIVITY_POINTS_DISPLAY_ENABLED && (o.activityPoints = n.activityPoints), o.webID = n.webID, o.roomIndex = s, o.userType = ua.USER;
                            const a = this._container.roomEngine.getRoomObject(e, s, i);
                            if (a && (o.carryId = a.model.getValue(j.FIGURE_CARRY_OBJECT)), r == vb.OWN_USER && (o.realName = this._container.sessionDataManager.realName, o._Str_4330 = this._container.sessionDataManager.canChangeName), o.isRoomOwner = this._container.roomSession.isRoomOwner, o.isGuildRoom = this._container.roomSession.isGuildRoom, o.roomControllerLevel = this._container.roomSession.controllerLevel, o.isModerator = this._container.sessionDataManager.isModerator, o.isAmbassador = this._container.sessionDataManager.isAmbassador, r === vb.PEER) {
                                o.canBeAskedForAFriend = this._container.friendService.canBeAskedForAFriend(n.webID);
                                const t = this._container.friendService.getFriend(n.webID);
                                if (t && (o.realName = t.realName, o.isFriend = !0), a) {
                                    const t = a.model.getValue(j.FIGURE_FLAT_CONTROL);
                                    null !== t && (o.flatControl = t), o._Str_6394 = this._Str_23100(o), o._Str_5990 = this._Str_22729(o), o._Str_6701 = this._Str_23573(o)
                                }
                                o.isIgnored = this._container.sessionDataManager.isUserIgnored(n.name), o.respectLeft = this._container.sessionDataManager.respectsLeft;
                                const e = this._container.sessionDataManager.isSystemShutdown,
                                    s = this._container.roomSession.tradeMode;
                                if (e) o.canTrade = !1;
                                else switch (s) {
                                    case qm._Str_14475:
                                        {
                                            const t = o.flatControl !== _r.NONE && o.flatControl !== _r.GUILD_MEMBER;o.canTrade = o.roomControllerLevel !== _r.NONE && o.roomControllerLevel !== _r.GUILD_MEMBER || t;
                                            break
                                        }
                                    case qm._Str_9173:
                                        o.canTrade = !0;
                                        break;
                                    default:
                                        o.canTrade = !1
                                }
                                o._Str_6622 = vb._Str_18400, e && (o._Str_6622 = vb._Str_14161), s !== qm._Str_9173 && (o._Str_6622 = vb._Str_13798)
                            }
                            o.groupId = parseInt(n.guildId), o.groupName = n.groupName, o.badges = this._container.roomSession.userDataManager.getUserBadges(n.webID), o.figure = n.figure, this._container.events.dispatchEvent(o)
                        }
                        _Str_22312(t, e, s, i) {
                            const n = new vb(vb.BOT);
                            n.name = i.name, n.motto = i.custom, n.webID = i.webID, n.roomIndex = e, n.userType = i.type;
                            const r = this._container.roomEngine.getRoomObject(t, e, s);
                            r && (n.carryId = r.model.getValue(j.FIGURE_CARRY_OBJECT)), n.isRoomOwner = this._container.roomSession.isRoomOwner, n.isGuildRoom = this._container.roomSession.isGuildRoom, n.roomControllerLevel = this._container.roomSession.controllerLevel, n.isModerator = this._container.sessionDataManager.isModerator, n._Str_5990 = this._container.roomSession.isRoomOwner, n.badges = [vb._Str_7492], n.figure = i.figure, this._container.events.dispatchEvent(n)
                        }
                        _Str_23115(t, e, s, i) {
                            const n = new Rb;
                            n.name = i.name, n.motto = i.custom, n.id = i.webID, n.roomIndex = e, n.ownerId = i.ownerId, n.ownerName = i.ownerName, n.botSkills = i.botSkills;
                            const r = this._container.roomEngine.getRoomObject(t, e, s);
                            r && (n.carryId = r.model.getValue(j.FIGURE_CARRY_OBJECT)), n._Str_3246 = this._container.roomSession.isRoomOwner, n.roomControllerLevel = this._container.roomSession.controllerLevel, n._Str_3529 = this._container.sessionDataManager.isModerator, n.badges = [vb._Str_7492], n.figure = i.figure, this._container.events.dispatchEvent(n)
                        }
                        _Str_9213(t) {
                            return t.isGuildRoom ? t.roomControllerLevel >= _r.GUILD_ADMIN : t.roomControllerLevel >= _r.GUEST
                        }
                        _Str_23100(t) {
                            const e = (function(t, e) {
                                switch (e.allowMute) {
                                    case Or._Str_5047:
                                        return this._Str_9213(t);
                                    default:
                                        return t.roomControllerLevel >= _r.ROOM_OWNER
                                }
                            }).bind(this);
                            return this._Str_18027(t, e)
                        }
                        _Str_22729(t) {
                            const e = (function(t, e) {
                                switch (e.allowKick) {
                                    case Or._Str_11537:
                                        return !0;
                                    case Or._Str_5047:
                                        return this._Str_9213(t);
                                    default:
                                        return t.roomControllerLevel >= _r.ROOM_OWNER
                                }
                            }).bind(this);
                            return this._Str_18027(t, e)
                        }
                        _Str_23573(t) {
                            const e = (function(t, e) {
                                switch (e.allowBan) {
                                    case Or._Str_5047:
                                        return this._Str_9213(t);
                                    default:
                                        return t.roomControllerLevel >= _r.ROOM_OWNER
                                }
                            }).bind(this);
                            return this._Str_18027(t, e)
                        }
                        _Str_18027(t, e) {
                            if (!this._container.roomSession._Str_7411) return !1;
                            const s = this._container.roomSession.moderationSettings;
                            let i = !1;
                            return s && (i = e(t, s)), i && t.flatControl < _r.ROOM_OWNER
                        }
                        _Str_23922(t) {
                            this._widget && this._container.sessionDataManager.hasSecurity(5) && this._container.connection.send(new K_(this._widget.furniData.id, t))
                        }
                        get type() {
                            return Fg.INFOSTAND
                        }
                        get messageTypes() {
                            return [Up.GET_OBJECT_INFO, Up.GET_OBJECT_NAME, Dp.RWUAM_SEND_FRIEND_REQUEST, Dp.RWUAM_RESPECT_USER, Dp.RWUAM_WHISPER_USER, Dp.RWUAM_IGNORE_USER, Dp.RWUAM_UNIGNORE_USER, Dp.RWUAM_KICK_USER, Dp.RWUAM_BAN_USER_DAY, Dp.RWUAM_BAN_USER_HOUR, Dp.RWUAM_BAN_USER_PERM, Dp.MUTE_USER_2MIN, Dp.MUTE_USER_5MIN, Dp.MUTE_USER_10MIN, Dp.RWUAM_GIVE_RIGHTS, Dp.RWUAM_TAKE_RIGHTS, Dp.RWUAM_START_TRADING, Dp.RWUAM_OPEN_HOME_PAGE, Dp.RWUAM_PASS_CARRY_ITEM, Dp.RWUAM_GIVE_CARRY_ITEM_TO_PET, Dp.RWUAM_DROP_CARRY_ITEM, Ob.RWFAM_MOVE, Ob.RWFUAM_ROTATE, Ob.RWFAM_EJECT, Ob.RWFAM_PICKUP, Ob.RWFAM_USE, Ob.RWFAM_SAVE_STUFF_DATA, Dp.RWUAM_REPORT, Dp.RWUAM_PICKUP_PET, Dp.RWUAM_MOUNT_PET, Dp.RWUAM_TOGGLE_PET_RIDING_PERMISSION, Dp.RWUAM_TOGGLE_PET_BREEDING_PERMISSION, Dp.RWUAM_DISMOUNT_PET, Dp.RWUAM_SADDLE_OFF, Dp.RWUAM_TRAIN_PET, Dp.RWUAM_RESPECT_PET, Dp.RWUAM_REQUEST_PET_UPDATE, Tb.RWVM_CHANGE_MOTTO_MESSAGE, Dp.RWUAM_GIVE_LIGHT_TO_PET, Dp.RWUAM_GIVE_WATER_TO_PET, Dp.RWUAM_TREAT_PET, Dp.RWUAM_REPORT_CFH_OTHER, Dp.RWUAM_AMBASSADOR_ALERT_USER, Dp.RWUAM_AMBASSADOR_KICK_USER, Dp.AMBASSADOR_MUTE_USER_2MIN, Dp.AMBASSADOR_MUTE_USER_10MIN, Dp.AMBASSADOR_MUTE_USER_60MIN, Dp.AMBASSADOR_MUTE_USER_18HOUR]
                        }
                        get eventTypes() {
                            return [Wm.RSUBE_BADGES]
                        }
                        get container() {
                            return this._container
                        }
                        set container(t) {
                            this._container = t
                        }
                        get widget() {
                            return this._widget
                        }
                        set widget(t) {
                            this._widget = t
                        }
                        get disposed() {
                            return this._disposed
                        }
                    }
                    return t.ACTIVITY_POINTS_DISPLAY_ENABLED = !0, t
                })(),
                Ab = (() => {
                    class t extends Sp {
                        constructor(e, s, i) {
                            super(t.RWULUE_USER_LOCATION_UPDATE), this._userId = e, this._rectangle = s, this._Str_20775 = i
                        }
                        get userId() {
                            return this._userId
                        }
                        get rectangle() {
                            return this._rectangle
                        }
                        get _Str_9337() {
                            return this._Str_20775
                        }
                    }
                    return t.RWULUE_USER_LOCATION_UPDATE = "RWULUE_USER_LOCATION_UPDATE", t
                })(),
                Cb = (() => {
                    class t extends yp {
                        constructor(t, e, s) {
                            super(t), this._objectId = e, this._objectType = s
                        }
                        get _Str_1577() {
                            return this._objectId
                        }
                        get _Str_1723() {
                            return this._objectType
                        }
                    }
                    return t.RWGOI_MESSAGE_GET_OBJECT_LOCATION = "RWGOI_MESSAGE_GET_OBJECT_LOCATION", t.RWGOI_MESSAGE_GET_GAME_OBJECT_LOCATION = "RWGOI_MESSAGE_GET_GAME_OBJECT_LOCATION", t
                })();
            class Mb {
                constructor() {
                    this._disposed = !1, this._container = null
                }
                dispose() {
                    this._disposed = !0, this._container = null
                }
                get disposed() {
                    return this._disposed
                }
                get type() {
                    return null
                }
                set container(t) {
                    this._container = t
                }
                get messageTypes() {
                    return [Cb.RWGOI_MESSAGE_GET_OBJECT_LOCATION, Cb.RWGOI_MESSAGE_GET_GAME_OBJECT_LOCATION]
                }
                processWidgetMessage(t) {
                    if (!(t && this._container && t instanceof Cb)) return null;
                    const e = this._container.roomSession;
                    switch (t.type) {
                        case Cb.RWGOI_MESSAGE_GET_OBJECT_LOCATION:
                            {
                                if (!e || !e.userDataManager) return null;
                                const s = e.userDataManager.getDataByType(t._Str_1577, t._Str_1723);
                                let i = null,
                                    n = null;
                                if (s) {
                                    i = this._container.roomEngine.getRoomObjectBoundingRectangle(e.roomId, s.roomIndex, V.UNIT, this._container.getFirstCanvasId()), n = this._container.roomEngine.getRoomObjectScreenLocation(e.roomId, s.roomIndex, V.UNIT, this._container.getFirstCanvasId());
                                    const t = this._container.getRoomViewRect();
                                    i && n && t && (i.x += t.x, i.y += t.y, n.x += t.x, n.y += t.y)
                                }
                                return new Ab(t._Str_1577, i, n)
                            }
                    }
                    return null
                }
                get eventTypes() {
                    return []
                }
                processEvent(t) {}
                update() {}
            }
            class Ub {
                constructor() {
                    this._isDisposed = !1, this._container = null
                }
                dispose() {
                    this._isDisposed = !0, this._container = null
                }
                processWidgetMessage(t) {
                    if (!t) return null;
                    switch (t.type) {
                        case Gp.RWRWM_USER_CHOOSER:
                            this.processUserChooser();
                            break;
                        case Up.SELECT_OBJECT:
                            this.selectUnit(t)
                    }
                    return null
                }
                selectUnit(t) {
                    null != t && t.category == V.UNIT && this._container.roomEngine.selectRoomObject(this._container.roomSession.roomId, t.id, t.category)
                }
                processUserChooser() {
                    if (null == this._container || null == this._container.roomSession || null == this._container.roomEngine || null == this._container.roomSession.userDataManager) return;
                    const t = this._container.roomSession.roomId,
                        e = V.UNIT,
                        s = [],
                        i = this._container.roomEngine.getRoomObjectCount(t, e);
                    for (let n = 0; n < i; n++) {
                        const i = this._container.roomEngine.getRoomObjectByIndex(t, n, e);
                        if (null == i) continue;
                        const r = this._container.roomSession.userDataManager.getUserDataByIndex(i.id);
                        null != r && s.push(new Kp(r.roomIndex, e, r.name))
                    }
                    s.sort(zp("name")), this._container.events.dispatchEvent(new Xp(Xp.RWCCE_USER_CHOOSER_CONTENT, s))
                }
                processEvent(t) {}
                update() {}
                get disposed() {
                    return this._isDisposed
                }
                get type() {
                    return Fg.USER_CHOOSER
                }
                set container(t) {
                    this._container = t
                }
                get messageTypes() {
                    return [Gp.RWRWM_USER_CHOOSER, Up.SELECT_OBJECT]
                }
                get eventTypes() {
                    return []
                }
            }
            class Db {
                constructor() {
                    this._container = null, this._disposed = !1, this._roomId = 0, this._roomId = Math.floor(11 * Math.random()), this.onLoveLockFurniFinishedEvent = this.onLoveLockFurniFinishedEvent.bind(this), this.onLoveLockFurniFriendConfirmedEvent = this.onLoveLockFurniFriendConfirmedEvent.bind(this), this.onLoveLockFurniStartEvent = this.onLoveLockFurniStartEvent.bind(this)
                }
                dispose() {
                    for (const t of this._messages) this._container.connection.removeMessageEvent(t);
                    this._messages = [], this._container = null, this._disposed = !0
                }
                processEvent(t) {}
                processWidgetMessage(t) {
                    return null
                }
                _Str_17138(t, e) {
                    null == this._container || this._disposed || this._container.connection.send(new dh(t, e))
                }
                update() {}
                get disposed() {
                    return this._disposed
                }
                get type() {
                    return ""
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    if (this._container = t, this._container) {
                        this._messages = [new Eo(this.onLoveLockFurniStartEvent), new po(this.onLoveLockFurniFriendConfirmedEvent), new go(this.onLoveLockFurniFinishedEvent)];
                        for (const e of this._messages) t.connection.addMessageEvent(e)
                    }
                }
                onLoveLockFurniStartEvent(t) {
                    if (!this._widget || !t || !t.getParser()) return;
                    const e = t.getParser();
                    this._widget.open(e.furniId, e.start)
                }
                onLoveLockFurniFinishedEvent(t) {
                    this._widget && t && t.getParser() && t.getParser()
                }
                onLoveLockFurniFriendConfirmedEvent(t) {}
                sendStart(t, e) {
                    this._container.connection.send(new dh(t, e))
                }
                get messageTypes() {
                    return []
                }
                get eventTypes() {
                    return []
                }
                get widget() {
                    return this._widget
                }
                set widget(t) {
                    this._widget = t
                }
            }
            class Nb {
                constructor() {
                    this._isDisposed = !1, this._container = null, this._widget = null
                }
                get disposed() {
                    return this._isDisposed
                }
                get type() {
                    return Fg.FRIEND_FURNI_ENGRAVING
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    this._container = t
                }
                set widget(t) {
                    this._widget = t
                }
                dispose() {
                    this._container = null, this._widget = null, this._isDisposed = !0
                }
                processEvent(t) {
                    if (this.disposed || null == t) return;
                    let e = null;
                    switch (t.type) {
                        case lg.REQUEST_FRIEND_FURNITURE_ENGRAVING:
                            if (e = t, e && this._container.roomEngine && this._widget) {
                                const t = this._container.roomEngine.getRoomObject(e.roomId, e.objectId, e.category);
                                if (t) {
                                    const e = t.model;
                                    if (e) {
                                        const s = new vi;
                                        s.initializeFromRoomObjectModel(e), this._widget.open(t.id, e.getValue(j.FURNITURE_FRIENDFURNI_ENGRAVING), s)
                                    }
                                }
                            }
                            return
                    }
                }
                processWidgetMessage(t) {
                    return null
                }
                get eventTypes() {
                    return [lg.REQUEST_FRIEND_FURNITURE_ENGRAVING]
                }
                get messageTypes() {
                    return []
                }
                update() {}
            }
            let wb = (() => {
                class t extends yp {
                    constructor() {
                        super(t.RWZTM_ZOOM_TOGGLE)
                    }
                }
                return t.RWZTM_ZOOM_TOGGLE = "RWZTM_ZOOM_TOGGLE", t
            })();
            class Lb {
                constructor() {
                    this._zoomed = !1, this._communicationManager = cp.instance.communication, this._container = null, this._widget = null, this._messages = [], this._disposed = !1, this.onRoomInfoEvent = this.onRoomInfoEvent.bind(this)
                }
                set widget(t) {
                    this._widget = t
                }
                get widget() {
                    return this._widget
                }
                dispose() {
                    if (!this._disposed) {
                        this._communicationManager = null, this._widget = null;
                        for (const t of this._messages) this._container.connection.removeMessageEvent(t);
                        this._container = null, this._messages = [], this._disposed = !0
                    }
                }
                update() {}
                processWidgetMessage(t) {
                    return t instanceof wb && (this._container.roomEngine.events.dispatchEvent(new bp(this._container.roomEngine.activeRoomId, this._zoomed ? 1 : 0, !1)), this._zoomed = !this._zoomed), null
                }
                processEvent(t) {}
                onRoomInfoEvent(t) {
                    if (!t) return;
                    const e = t.getParser();
                    if (!e) return;
                    const s = e.data;
                    s && (this._widget.loadRoomData(s), this._widget._Str_22970(s), this._widget._Str_23696(s.roomId))
                }
                rateRoom() {
                    this._container && this._container.connection.send(new L_(1))
                }
                get type() {
                    return Fg.ROOM_TOOLS
                }
                get messageTypes() {
                    return []
                }
                get eventTypes() {
                    return []
                }
                get container() {
                    return this._container
                }
                set container(t) {
                    if (this._container = t, this._container) {
                        this._messages = [new Ar(this.onRoomInfoEvent)];
                        for (const e of this._messages) t.connection.addMessageEvent(e)
                    }
                }
                get disposed() {
                    return this._disposed
                }
            }
            let xb = (() => {
                    class t {
                        constructor(t) {
                            this._ngZone = t, this._alertCenter = null, this._notificationCenter = null, this.registerMessages()
                        }
                        ngOnDestroy() {
                            this.unregisterMessages()
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                this._messages && this.unregisterMessages(), this._messages = [new Wn(this.onHabboBroadcastMessageEvent.bind(this)), new an(this.onModeratorMessageEvent.bind(this)), new Kn(this.onMOTDNotificationEvent.bind(this)), new qn(this.onNotificationDialogMessageEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            })
                        }
                        onHabboBroadcastMessageEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this.alert(e.message))
                        }
                        onNotificationDialogMessageEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this.displayNotification(e.type, e.parameters))
                        }
                        onModeratorMessageEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this.alertWithLink(e.message, e.link))
                        }
                        onMOTDNotificationEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this.alertWithScrollableMessages(e.messages))
                        }
                        alert(t, e = null) {
                            return this._alertCenter ? this._alertCenter.alert(t, e) : null
                        }
                        alertWithLink(t, e, s = null) {
                            return this._alertCenter ? this._alertCenter.alertWithLink(t, e, s) : null
                        }
                        alertWithConfirm(t, e = null, s = null) {
                            return this._alertCenter ? this._alertCenter.alertWithConfirm(t, e, s) : null
                        }
                        alertWithChoices(t, e, s = null) {
                            return this._alertCenter ? this._alertCenter.alertWithChoices(t, e, s) : null
                        }
                        alertWithScrollableMessages(t, e = null) {
                            return this._alertCenter ? this._alertCenter.alertWithScrollableMessages(t, e) : null
                        }
                        displayNotification(t, e) {
                            return this._notificationCenter ? this._notificationCenter.displayNotification(t, e) : null
                        }
                        closeAlert(t) {
                            t && this._alertCenter && this._alertCenter.closeAlert(t)
                        }
                        closeNotification(t) {
                            t && this._notificationCenter && this._notificationCenter.closeNotification(t)
                        }
                        closeAll() {
                            this._alertCenter && (this._alertCenter.closeAllAlerts(), this._notificationCenter.closeAllNotifications())
                        }
                        get alertCenter() {
                            return this._alertCenter
                        }
                        set alertCenter(t) {
                            this._alertCenter = t
                        }
                        get notificationCenter() {
                            return this._notificationCenter
                        }
                        set notificationCenter(t) {
                            this._notificationCenter = t
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })(),
                Pb = (() => {
                    class t {
                        constructor(t, e) {
                            this._settingsService = t, this._ngZone = e, this._messages = [], this._component = null, this._roomSession = null, this.onRoomSessionEvent = this.onRoomSessionEvent.bind(this), this.registerMessages()
                        }
                        ngOnDestroy() {
                            this.unregisterMessages()
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                cp.instance.roomSessionManager.events.addEventListener(Tl.CREATED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Tl.STARTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Tl.ENDED, this.onRoomSessionEvent), this._messages = [new Fa(this.onWiredFurniActionEvent.bind(this)), new ka(this.onWiredFurniConditionEvent.bind(this)), new ja(this.onWiredFurniTriggerEvent.bind(this)), new Ha(this.onWiredOpenEvent.bind(this)), new za(this.onWiredRewardResultMessageEvent.bind(this)), new Xa(this.onWiredSaveSuccessEvent.bind(this)), new Ja(this.onWiredValidationErrorEvent.bind(this)), new ns(this.onDesktopViewEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                cp.instance.roomSessionManager.events.removeEventListener(Tl.CREATED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Tl.STARTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Tl.ENDED, this.onRoomSessionEvent);
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            })
                        }
                        onRoomSessionEvent(t) {
                            if (t) switch (t.type) {
                                case Tl.CREATED:
                                case Tl.STARTED:
                                    return void(this._roomSession = t.session);
                                case Tl.ENDED:
                                    return this._roomSession = null, void this._ngZone.run(() => this._component && this._component.close())
                            }
                        }
                        onWiredFurniActionEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this._component.setupTrigger(e.definition))
                        }
                        onWiredFurniConditionEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this._component.setupTrigger(e.definition))
                        }
                        onWiredFurniTriggerEvent(t) {
                            if (!t || !this._component) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this._component.setupTrigger(e.definition))
                        }
                        onWiredOpenEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onWiredRewardResultMessageEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onWiredSaveSuccessEvent(t) {
                            t && t.getParser() && this._ngZone.run(() => this._component && this._component.close())
                        }
                        onWiredValidationErrorEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onDesktopViewEvent(t) {
                            t && this._ngZone.run(() => this._component && this._component.close())
                        }
                        selectFurniture(t, e) {
                            const s = cp.instance.roomEngine,
                                i = s.getSelectedRoomObjectData(this.roomId);
                            i && i.id === -t ? s.setPlacedRoomObjectData(this.roomId, null) : this._component && this._component.toggleFurniSelected(t, e)
                        }
                        get component() {
                            return this._component
                        }
                        set component(t) {
                            this._component = t
                        }
                        get roomId() {
                            return this._roomSession ? this._roomSession.roomId : 0
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(_p), i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })();
            class Fb extends M {
                constructor(t) {
                    super(t, Wh)
                }
                getParser() {
                    return this.parser
                }
            }
            let Gb = (() => {
                class t {
                    constructor(t, e, s = 0, i = null, n = 0) {
                        this._type = n, this._senderId = t, this._message = e, this._secondsSinceSent = s, this._extraData = i, this._date = new Date
                    }
                    get type() {
                        return this._type
                    }
                    get senderId() {
                        return this._senderId
                    }
                    get message() {
                        return this._message
                    }
                    get secondsSinceSent() {
                        return this._secondsSinceSent
                    }
                    get extraData() {
                        return this._extraData
                    }
                    get date() {
                        return this._date
                    }
                }
                return t.CHAT = 0, t.ROOM_INVITE = 1, t.STATUS_NOTIFICATION = 2, t
            })();
            class Yb {
                constructor() {
                    this._id = -1, this._name = null, this._gender = 0, this._online = !1, this._followingAllowed = !1, this._figure = null, this._categoryId = 0, this._motto = null, this._realName = null, this._lastAccess = null, this._persistedMessageUser = !1, this._vipMember = !1, this._pocketHabboUser = !1, this._relationshipStatus = -1, this._unread = 0
                }
                populate(t) {
                    return !!t && (this._id = t.id, this._name = t.name, this._gender = t.gender, this._online = t.online, this._followingAllowed = t.followingAllowed, this._figure = t.figure, this._categoryId = t.categoryId, this._motto = t.motto, this._realName = t.realName, this._lastAccess = t.lastAccess, this._persistedMessageUser = t.persistedMessageUser, this._vipMember = t.vipMember, this._pocketHabboUser = t.pocketHabboUser, this._relationshipStatus = t.relationshipStatus, !0)
                }
                get id() {
                    return this._id
                }
                set id(t) {
                    this._id = t
                }
                get name() {
                    return this._name
                }
                set name(t) {
                    this._name = t
                }
                get gender() {
                    return this._gender
                }
                set gender(t) {
                    this._gender = t
                }
                get online() {
                    return this._online
                }
                set online(t) {
                    this._online = t
                }
                get followingAllowed() {
                    return this._followingAllowed
                }
                set followingAllowed(t) {
                    this._followingAllowed = t
                }
                get figure() {
                    return this._figure
                }
                set figure(t) {
                    this._figure = t
                }
                get categoryId() {
                    return this._categoryId
                }
                set categoryId(t) {
                    this._categoryId = t
                }
                get motto() {
                    return this._motto
                }
                set motto(t) {
                    this._motto = t
                }
                get lastAccess() {
                    return this._lastAccess
                }
                set lastAccess(t) {
                    this._lastAccess = t
                }
                get realName() {
                    return this._realName
                }
                set realName(t) {
                    this._realName = t
                }
                get persistedMessageUser() {
                    return this._persistedMessageUser
                }
                set persistedMessageUser(t) {
                    this._persistedMessageUser = t
                }
                get vipMember() {
                    return this._vipMember
                }
                set vipMember(t) {
                    this._vipMember = t
                }
                get pocketHabboUser() {
                    return this._pocketHabboUser
                }
                set pocketHabboUser(t) {
                    this._pocketHabboUser = t
                }
                get relationshipStatus() {
                    return this._relationshipStatus
                }
                set relationshipStatus(t) {
                    this._relationshipStatus = t
                }
                get unread() {
                    return this._unread
                }
                set unread(t) {
                    this._unread = t
                }
            }
            class kb {
                populate(t) {
                    return !!t && (this._requestId = t.requestId, this._requesterName = t.requesterName, this._figureString = t.figureString, this._requesterUserId = t.requesterUserId, !0)
                }
                get requestId() {
                    return this._requestId
                }
                get requesterName() {
                    return this._requesterName
                }
                get requesterUserId() {
                    return this._requesterUserId
                }
                get figureString() {
                    return this._figureString
                }
            }
            let Vb = (() => {
                    class t {
                        constructor(t) {
                            this._participant = t, this._chats = [], this._lastUpdated = new Date, this._unread = !1, this._emitter = new i.q
                        }
                        insertChat(e, s, i = 0, n = null, r = 0) {
                            const o = new Gb(e, s, i, n, r);
                            return this._chats.push(o), this._lastUpdated = new Date, this._unread = !0, this._emitter.emit(t.MESSAGE_RECEIVED), o
                        }
                        setRead() {
                            this._unread = !1
                        }
                        get participant() {
                            return this._participant
                        }
                        get chats() {
                            return this._chats
                        }
                        get lastUpdated() {
                            return this._lastUpdated
                        }
                        get unread() {
                            return this._unread
                        }
                        get emitter() {
                            return this._emitter
                        }
                    }
                    return t.MESSAGE_RECEIVED = "MT_MESSAGE_RECEIVED", t
                })(),
                Zb = (() => {
                    class t {
                        constructor() {
                            this._messengerSound = null, this._messengerSound = new Audio("assets/sounds/new_message.mp3")
                        }
                        playMessengerSound() {
                            const t = this._messengerSound;
                            t && t.play()
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })(),
                jb = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._notificationService = t, this._soundService = e, this._ngZone = s, this._friendListReady = !1, this._component = null, this._friends = new Map, this._requests = new Map, this._threads = new Map, this._userFriendLimit = 0, this._normalFriendLimit = 0, this._extendedFriendLimit = 0, this.registerMessages()
                        }
                        ngOnDestroy() {
                            this.unregisterMessages()
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                this._messages && this.unregisterMessages(), this._messages = [new as(this.onAcceptFriendResultEvent.bind(this)), new _s(this.onFindFriendsProcessResultEvent.bind(this)), new ls(this.onFollowFriendFailedEvent.bind(this)), new gs(this.onFriendListFragmentEvent.bind(this)), new bs(this.onFriendListUpdateEvent.bind(this)), new fs(this.onFriendNotificationEvent.bind(this)), new Rs(this.onFriendRequestsEvent.bind(this)), new Os(this.onHabboSearchResultEvent.bind(this)), new As(this.onInstantMessageErrorEvent.bind(this)), new Ms(this.onMessageErrorEvent.bind(this)), new Ds(this.onMessengerInitEvent.bind(this)), new ws(this.onMiniMailNewMessageEvent.bind(this)), new Fb(this.onMiniMailUnreadCountEvent.bind(this)), new xs(this.onNewConsoleMessageEvent.bind(this)), new Fs(this.onNewFriendRequestEvent.bind(this)), new Ys(this.onRoomInviteErrorEvent.bind(this)), new Vs(this.onRoomInviteEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                if (this._messages && this._messages.length)
                                    for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = null
                            })
                        }
                        onAcceptFriendResultEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onFindFriendsProcessResultEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onFollowFriendFailedEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onFriendListFragmentEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                for (const t of e.fragment) this.updateFriend(t);
                                e.fragmentNumber + 1 === e.totalFragments && (this._friendListReady = !0)
                            })
                        }
                        onFriendListUpdateEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                for (const t of e.addedFriends) this.updateFriend(t);
                                for (const t of e.updatedFriends) this.updateFriend(t);
                                for (const t of e.removedFriendIds) this.removeFriend(t)
                            })
                        }
                        onFriendNotificationEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onFriendRequestsEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                for (const t of e.requests) this.updateFriendRequest(t)
                            })
                        }
                        onHabboSearchResultEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onInstantMessageErrorEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onMessageErrorEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            let s = "";
                            switch (e.errorCode) {
                                case 1:
                                    s = "${friendlist.error.friendlistownlimit}";
                                    break;
                                case 2:
                                    s = "${friendlist.error.friendlistlimitofrequester}";
                                    break;
                                case 3:
                                    s = "${friendlist.error.friend_requests_disabled}";
                                    break;
                                case 4:
                                    s = "${friendlist.error.requestnotfound}";
                                    break;
                                default:
                                    s = `Received messenger error: msg: ${e.clientMessageId}, errorCode: ${e.errorCode}`
                            }
                            this._ngZone.run(() => this._notificationService.alert(s, "${friendlist.alert.title}"))
                        }
                        onMessengerInitEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && (this._ngZone.run(() => {
                                this._userFriendLimit = e.userFriendLimit, this._normalFriendLimit = e.normalFriendLimit, this._extendedFriendLimit = e.extendedFriendLimit
                            }), this.requestFriendRequests())
                        }
                        onMiniMailNewMessageEvent(t) {
                            t && t.getParser()
                        }
                        onMiniMailUnreadCountEvent(t) {
                            t && t.getParser()
                        }
                        onNewConsoleMessageEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = this.getMessageThread(e.senderId);
                            s && (this._ngZone.run(() => {
                                s.insertChat(e.senderId, e.messageText, e.secondsSinceSent, e.extraData), this._component && this._component.currentThread === s && s.setRead()
                            }), this._soundService.playMessengerSound())
                        }
                        onNewFriendRequestEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this.updateFriendRequest(e.request))
                        }
                        onRoomInviteErrorEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && console.log(e)
                        }
                        onRoomInviteEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = this.getMessageThread(e.senderId);
                            s && this._ngZone.run(() => {
                                s.insertChat(e.senderId, e.messageText, 0, null, Gb.ROOM_INVITE), this._component && this._component.currentThread === s && s.setRead()
                            })
                        }
                        getFriend(t) {
                            return this._friends.get(t) || null
                        }
                        updateFriend(t) {
                            if (!t) return;
                            let e = this._friends.get(t.id);
                            e || (e = new Yb, this._friends.set(t.id, e)), e.populate(t)
                        }
                        removeFriend(t) {
                            this._friends.delete(t), cp.instance.communication.connection.send(new zc(t))
                        }
                        updateFriendRequest(t) {
                            if (!t) return;
                            let e = this._requests.get(t.requestId);
                            e || (e = new kb, this._requests.set(t.requestId, e)), e.populate(t)
                        }
                        acceptFriendRequest(t) {
                            this._requests.delete(t.requestId), cp.instance.communication.connection.send(new Yc(t.requestId))
                        }
                        removeFriendRequest(t) {
                            this._requests.delete(t.requestId), cp.instance.communication.connection.send(new kc(!1, t.requestId))
                        }
                        removeAllFriendRequests() {
                            this._requests.clear(), cp.instance.communication.connection.send(new kc(!0))
                        }
                        getMessageThread(t) {
                            let e = this._threads.get(t);
                            if (!e) {
                                const s = this.getFriend(t);
                                if (!s) return;
                                e = new Vb(s), this._threads.set(t, e)
                            }
                            return e
                        }
                        requestFriendRequests() {
                            cp.instance.communication.connection.send(new Bc)
                        }
                        canBeAskedForAFriend(t) {
                            return !this._friends.get(t)
                        }
                        sendFriendRequest(t, e) {
                            this._friends.get(t) || cp.instance.communication.connection.send(new Kc(e))
                        }
                        get component() {
                            return this._component
                        }
                        set component(t) {
                            this._component = t
                        }
                        get friends() {
                            return this._friends
                        }
                        get requests() {
                            return this._requests
                        }
                        get threads() {
                            return this._threads
                        }
                        get unreadCount() {
                            let t = 0;
                            for (const e of this._threads.values()) e && e.unread && t++;
                            return t
                        }
                        get notificationCount() {
                            return this.requests.size + this.unreadCount
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(xb), i.gc(Zb), i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })(),
                Bb = (() => {
                    class t {
                        constructor(e) {
                            this._id = ++t.SET_COUNTER, this._roomId = e, this._items = []
                        }
                        addItem(t) {
                            t && this._items.push(t)
                        }
                        get id() {
                            return this._id
                        }
                        get roomId() {
                            return this._roomId
                        }
                        get items() {
                            return this._items
                        }
                    }
                    return t.SET_COUNTER = 0, t
                })(),
                Hb = (() => {
                    class t {
                        constructor(t) {
                            this._ngZone = t, this._lastRoomId = -1, this._historySets = new x, this._queuedItems = new x, this.registerMessages()
                        }
                        ngOnDestroy() {
                            this.unregisterMessages()
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                this.unregisterMessages(), this._messages = [new Ar(this.onRoomInfoEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                if (this._messages && this._messages.length) {
                                    for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                    this._messages = []
                                }
                            })
                        }
                        onRoomInfoEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = e.data;
                            this._lastRoomId !== s.roomId && this._ngZone.run(() => {
                                this._lastRoomId = s.roomId;
                                const t = new Vp;
                                t.content = e.data.roomName + "", this.addItem(this._lastRoomId, t), this.processQueue(this._lastRoomId)
                            })
                        }
                        addItem(t, e) {
                            e && this._ngZone.run(() => {
                                const s = this.getHistorySet(t);
                                if (s) s.addItem(e);
                                else {
                                    const s = this.getHistoryQueue(t);
                                    s && s.push(e)
                                }
                            })
                        }
                        getHistorySet(t) {
                            let e = this._historySets.getValue(t);
                            return e || (e = new Bb(t), this._historySets.add(t, e)), e
                        }
                        getHistoryQueue(t) {
                            let e = this._queuedItems.getValue(t);
                            return e || (e = [], this._queuedItems.add(t, e)), e
                        }
                        processQueue(t) {
                            const e = this._queuedItems.getValue(t);
                            if (e) {
                                for (const s of e) s && this.addItem(t, s);
                                this._queuedItems.remove(t)
                            }
                        }
                        get historySets() {
                            return this._historySets
                        }
                    }
                    return t.MESSAGE_RECEIVED = "CHS_MESSAGE_RECEIVED", t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })();
            const Wb = ["roomCanvas"],
                zb = ["widgetContainer"];

            function Kb(t, e) {}
            let Xb = (() => {
                class t {
                    constructor(t, e, s, i, n, r) {
                        this._notificationService = t, this._wiredService = e, this._friendService = s, this._chatHistoryService = i, this._componentFactoryResolver = n, this._ngZone = r, this._events = new m, this._handlers = [], this._widgets = new Map, this._widgetHandlerMessageMap = new Map, this._widgetHandlerEventMap = new Map, this._roomColorAdjustor = null, this._roomBackground = null, this._roomBackgroundColor = 0, this._roomColorizerColor = 0, this._resizeTimer = null, this._didMouseMove = !1, this._lastClick = 0, this._clickCount = 0, this._lastMouseMove = 0, this._isMouseMove = !1
                    }
                    ngOnDestroy() {
                        this.endRoom(), this._events.dispose()
                    }
                    prepareRoom(t) {
                        if (!t) return;
                        const e = this.getFirstCanvasId(),
                            s = cp.instance.roomEngine.getRoomInstanceDisplay(t.roomId, e, cp.instance.width, cp.instance.height, ol.SCALE_ZOOMED_IN);
                        if (!s) return;
                        const i = cp.instance.roomEngine.getRoomInstanceGeometry(t.roomId, e);
                        if (i) {
                            let e = ((cp.instance.roomEngine.getRoomInstanceVariable(t.roomId, ig.ROOM_MIN_X) || 0) + (cp.instance.roomEngine.getRoomInstanceVariable(t.roomId, ig.ROOM_MAX_X) || 0)) / 2,
                                s = ((cp.instance.roomEngine.getRoomInstanceVariable(t.roomId, ig.ROOM_MIN_Y) || 0) + (cp.instance.roomEngine.getRoomInstanceVariable(t.roomId, ig.ROOM_MAX_Y) || 0)) / 2;
                            const n = 20;
                            e += n - 1, s += n - 1;
                            const r = Math.sqrt(n * n + n * n) * Math.tan(30 / 180 * Math.PI);
                            i.location = new K(e, s, r)
                        }
                        const n = cp.instance.stage;
                        n && (n.addChild(s), this._roomSession = t, this.insertCanvas(), cp.instance.ticker.add(this.update, this))
                    }
                    endRoom() {
                        if (this._roomSession) {
                            cp.instance.ticker.remove(this.update, this), this._resizeTimer && (clearTimeout(this._resizeTimer), this._resizeTimer = null);
                            for (const t of this._widgets.values()) t && (t.instance && t.instance.dispose(), this._ngZone.run(() => t.destroy()));
                            for (const t of this._handlers) t && t.dispose();
                            this._roomColorAdjustor = null, this._roomBackground = null, this._roomBackgroundColor = 0, this._roomColorizerColor = 0, t.COLOR_ADJUSTMENT.red = 1, t.COLOR_ADJUSTMENT.green = 1, t.COLOR_ADJUSTMENT.blue = 1, this._handlers = [], this._widgets.clear(), this._widgetHandlerMessageMap.clear(), this._widgetHandlerEventMap.clear(), this._events.removeAllListeners(), this._roomSession = null, this.removeCanvas(), h.call("logDebug", "Navigator: exiting room")
                        }
                    }
                    insertCanvas() {
                        const t = cp.instance.renderer.view;
                        t && (t.onclick = this.onMouseEvent.bind(this), t.onmousemove = this.onMouseEvent.bind(this), t.onmousedown = this.onMouseEvent.bind(this), t.onmouseup = this.onMouseEvent.bind(this), window.onresize = this.onWindowResizeEvent.bind(this), this.roomCanvasReference.nativeElement.appendChild(t))
                    }
                    removeCanvas() {
                        const t = cp.instance.renderer.view;
                        t && (t.onclick = null, t.onmousemove = null, t.onmousedown = null, t.onmouseup = null, window.onresize = null, window.onmousewheel = null, t.parentElement && t.parentElement.removeChild(t))
                    }
                    onMouseEvent(t) {
                        if (!t || !this._roomSession) return;
                        const e = t.clientX,
                            s = t.clientY;
                        let i = t.type;
                        switch (i === sl.MOUSE_CLICK && (this._lastClick && (this._clickCount = 1, this._lastClick >= Date.now() - 300 && this._clickCount++), this._lastClick = Date.now(), 2 === this._clickCount && (this._didMouseMove || (i = sl.DOUBLE_CLICK), this._clickCount = 0, this._lastClick = null)), i) {
                            case sl.MOUSE_CLICK:
                            case sl.DOUBLE_CLICK:
                                break;
                            case sl.MOUSE_MOVE:
                                this._didMouseMove = !0;
                                break;
                            case sl.MOUSE_DOWN:
                                this._didMouseMove = !1;
                                break;
                            case sl.MOUSE_UP:
                                break;
                            default:
                                return
                        }
                        cp.instance.roomEngine.setActiveRoomId(this._roomSession.roomId), cp.instance.roomEngine.dispatchMouseEvent(this.getFirstCanvasId(), e, s, i, t.altKey, t.ctrlKey || t.metaKey, t.shiftKey, !1)
                    }
                    onWindowResizeEvent(t) {
                        t && this._roomSession && (this._resizeTimer && clearTimeout(this._resizeTimer), this._resizeTimer = setTimeout(() => {
                            cp.instance.roomEngine.initializeRoomInstanceRenderingCanvas(this._roomSession.roomId, this.getFirstCanvasId(), cp.instance.width, cp.instance.height), this._events.dispatchEvent(new vp(vp.SIZE_CHANGED, this.getRoomViewRect())), this.setRoomBackground()
                        }, 1))
                    }
                    onWindowMouseWheelEvent(t) {
                        t && this._roomSession && t.target === cp.instance.renderer.view && cp.instance.roomEngine.events.dispatchEvent(new bp(this._roomSession.roomId, 1 + .1 * (-1 / 40 * (t.wheelDeltaY || t.deltaY) < 0 ? 1 : -1), !1, !0))
                    }
                    update() {
                        for (const t of this._widgets.values()) t.instance.widgetHandler && t.instance.widgetHandler.update()
                    }
                    createWidget(t, e) {
                        if (this._widgets.get(t)) return;
                        let s = null,
                            i = !1;
                        switch (t) {
                            case Fg.CHAT_WIDGET:
                                {
                                    i = !0;
                                    const t = new jp(this._chatHistoryService);t.connection = cp.instance.communication.connection,
                                    s = t;
                                    break
                                }
                            case Fg.CHAT_INPUT_WIDGET:
                                i = !0, s = new Yp;
                                break;
                            case Fg.AVATAR_INFO:
                                s = new Np;
                                break;
                            case Fg.INFOSTAND:
                                s = new yb;
                                break;
                            case Fg.LOCATION_WIDGET:
                                s = new Mb;
                                break;
                            case Fg.INTERNAL_LINK:
                                s = new ub;
                                break;
                            case Fg.ROOM_LINK:
                                s = new db;
                                break;
                            case Fg.ROOM_DIMMER:
                                s = new lb;
                                break;
                            case Fg.CUSTOM_STACK_HEIGHT:
                                s = new nb;
                                break;
                            case Fg.FURNI_CHOOSER:
                                s = new qp;
                                break;
                            case Fg.USER_CHOOSER:
                                s = new Ub;
                                break;
                            case Fg.FURNI_STICKIE_WIDGET:
                                s = new pb;
                                break;
                            case Fg.DOORBELL:
                                s = new Wp;
                                break;
                            case Fg.FURNI_TROPHY_WIDGET:
                                s = new Eb;
                                break;
                            case Fg.FURNI_CREDIT_WIDGET:
                                s = new ib;
                                break;
                            case Fg.FURNITURE_CONTEXT_MENU:
                                s = new $p;
                                break;
                            case Fg.ROOM_BACKGROUND_COLOR:
                                s = new Jp;
                                break;
                            case Fg.FRIEND_FURNI_CONFIRM:
                                s = new Db;
                                break;
                            case Fg.FRIEND_FURNI_ENGRAVING:
                                s = new Nb;
                                break;
                            case Fg.ROOM_TOOLS:
                                s = new Lb
                        }
                        if (s) {
                            const i = s.messageTypes;
                            if (i && i.length)
                                for (const t of i) {
                                    if (!t) continue;
                                    let e = this._widgetHandlerMessageMap.get(t);
                                    e || (e = [], this._widgetHandlerMessageMap.set(t, e)), e.push(s)
                                }
                            const n = s.eventTypes;
                            if (n.push(lg.OPEN_WIDGET, lg.CLOSE_WIDGET), n && n.length)
                                for (const t of n) {
                                    if (!t) continue;
                                    let e = this._widgetHandlerEventMap.get(t);
                                    e || (e = [], this._widgetHandlerEventMap.set(t, e)), e.push(s)
                                }
                            if (this._handlers.push(s), e) {
                                let i = null,
                                    n = null;
                                if (this._ngZone.run(() => {
                                        const t = this._componentFactoryResolver.resolveComponentFactory(e);
                                        i = this.widgetContainer.createComponent(t), n = i.instance
                                    }), !n) return;
                                n.widgetHandler = s, n.messageListener = this, n.registerUpdateEvents(this._events), this._widgets.set(t, i)
                            }
                            s.container = this
                        }
                        i && this._events.dispatchEvent(new vp(vp.SIZE_CHANGED, this.getRoomViewRect()))
                    }
                    processEvent(t) {
                        if (!t || !this._widgetHandlerEventMap) return;
                        const e = this._widgetHandlerEventMap.get(t.type);
                        if (!e) return;
                        let s = !1;
                        for (const i of e) i && (s = !0, t.type !== lg.OPEN_WIDGET && t.type !== lg.CLOSE_WIDGET || t instanceof lg && (s = i.type === t.widget), s && i.processEvent(t))
                    }
                    processWidgetMessage(t) {
                        if (!t || !t.type) return null;
                        const e = this._widgetHandlerMessageMap.get(t.type);
                        if (!e || !e.length) return null;
                        for (const s of e) {
                            if (!s) continue;
                            const e = s.processWidgetMessage(t);
                            if (e) return e
                        }
                        return null
                    }
                    onRoomEngineEvent(t) {
                        if (t) switch (t.type) {
                            case Qh.NORMAL_MODE:
                                return void this._events.dispatchEvent(new Ip(Ip.RWREUE_NORMAL_MODE, t.roomId));
                            case Qh.GAME_MODE:
                                return void this._events.dispatchEvent(new Ip(Ip.RWREUE_GAME_MODE, t.roomId))
                        }
                    }
                    onRoomEngineObjectEvent(t) {
                        if (!t) return;
                        const e = t.objectId,
                            s = t.category;
                        let i = null;
                        switch (t.type) {
                            case Al.SELECTED:
                                this.isFurnitureSelectionDisabled(t) || (i = new Rp(Rp.OBJECT_SELECTED, e, s, t.roomId));
                                break;
                            case Al.DESELECTED:
                                i = new Rp(Rp.OBJECT_DESELECTED, e, s, t.roomId);
                                break;
                            case Al.ADDED:
                                {
                                    let n = null;
                                    switch (s) {
                                        case V.FLOOR:
                                        case V.WALL:
                                            n = Rp.FURNI_ADDED;
                                            break;
                                        case V.UNIT:
                                            n = Rp.USER_ADDED
                                    }
                                    n && (i = new Rp(n, e, s, t.roomId));
                                    break
                                }
                            case Al.REMOVED:
                                {
                                    let n = null;
                                    switch (s) {
                                        case V.FLOOR:
                                        case V.WALL:
                                            n = Rp.FURNI_REMOVED;
                                            break;
                                        case V.UNIT:
                                            n = Rp.USER_REMOVED
                                    }
                                    n && (i = new Rp(n, e, s, t.roomId));
                                    break
                                }
                            case Al.MOUSE_ENTER:
                                i = new Rp(Rp.OBJECT_ROLL_OVER, e, s, t.roomId);
                                break;
                            case Al.MOUSE_LEAVE:
                                i = new Rp(Rp.OBJECT_ROLL_OUT, e, s, t.roomId);
                                break;
                            case Al.REQUEST_MOVE:
                                this.checkFurniManipulationRights(t.roomId, e, s) && cp.instance.roomEngine.processRoomObjectOperation(e, s, yg.OBJECT_MOVE);
                                break;
                            case Al.REQUEST_ROTATE:
                                this.checkFurniManipulationRights(t.roomId, e, s) && cp.instance.roomEngine.processRoomObjectOperation(e, s, yg.OBJECT_ROTATE_POSITIVE);
                                break;
                            case lg.REQUEST_STICKIE:
                                this.processWidgetMessage(new sb(sb.REQUEST_STICKIE, e, s, t.roomId));
                                break;
                            case lg.REQUEST_TROPHY:
                                this.processWidgetMessage(new sb(sb.REQUEST_TROPHY, e, s, t.roomId));
                                break;
                            case lg.REQUEST_CREDITFURNI:
                                this.processWidgetMessage(new sb(sb.REQUEST_CREDITFURNI, e, s, t.roomId));
                                break;
                            case lg.REQUEST_DIMMER:
                                this.processWidgetMessage(new sb(sb.REQUEST_DIMMER, e, s, t.roomId));
                                break;
                            case lg.OPEN_WIDGET:
                            case lg.CLOSE_WIDGET:
                            case lg.OPEN_FURNI_CONTEXT_MENU:
                            case lg.CLOSE_FURNI_CONTEXT_MENU:
                            case lg.REMOVE_DIMMER:
                            case lg.REQUEST_MANNEQUIN:
                            case lg.REQUEST_BACKGROUND_COLOR:
                            case lg.REQUEST_FRIEND_FURNITURE_ENGRAVING:
                            case lg.REQUEST_HIGH_SCORE_DISPLAY:
                            case lg.REQUEST_HIDE_HIGH_SCORE_DISPLAY:
                            case lg.REQUEST_INTERNAL_LINK:
                            case lg.REQUEST_ROOM_LINK:
                                this.processEvent(t)
                        }
                        if (i) {
                            let t = !0;
                            i instanceof Rp && (t = !Ep.isRoomPreviewerId(i.roomId)), t && this._events.dispatchEvent(i)
                        }
                    }
                    isFurnitureSelectionDisabled(t) {
                        let e = !1;
                        const s = cp.instance.roomEngine.getRoomObject(t.roomId, t.objectId, t.category);
                        return s && 1 === s.model.getValue(j.FURNITURE_SELECTION_DISABLED) && (e = !0, cp.instance.sessionDataManager.isModerator && (e = !1)), e
                    }
                    checkFurniManipulationRights(t, e, s) {
                        return this._roomSession.controllerLevel >= _r.GUEST || cp.instance.sessionDataManager.isModerator || this.isOwnerOfFurniture(cp.instance.roomEngine.getRoomObject(t, e, s))
                    }
                    isOwnerOfFurniture(t) {
                        return !(!t || !t.model) && cp.instance.sessionDataManager.userId === t.model.getValue(j.FURNITURE_OWNER_ID)
                    }
                    _Str_2485(t) {
                        if (!t || !this._widgetHandlerEventMap) return;
                        const e = this._widgetHandlerEventMap.get(t.type);
                        if (e && e.length) {
                            let s = !0;
                            for (const i of e)(t.type === lg.OPEN_WIDGET || lg.CLOSE_WIDGET) && t instanceof lg && (s = i.type === t.widget), s && i.processEvent(t)
                        }
                    }
                    getRoomBackground() {
                        if (this._roomBackground) return this._roomBackground;
                        const t = this.roomEngine.getRoomInstanceRenderingCanvas(this.roomSession.roomId, this.getFirstCanvasId());
                        if (!t) return null;
                        const e = t.master,
                            s = new u.n(u.p.WHITE);
                        return e.addChildAt(s, 0), this._roomBackground = s, this._roomBackground
                    }
                    getRoomColorizer() {
                        if (this._roomColorAdjustor) return this._roomColorAdjustor;
                        const e = this.roomEngine.getRoomInstanceRenderingCanvas(this.roomSession.roomId, this.getFirstCanvasId());
                        if (!e) return null;
                        const s = e.master;
                        return s ? (this._roomColorAdjustor = t.COLOR_ADJUSTMENT, s.filters = [this._roomColorAdjustor], this._roomColorAdjustor) : null
                    }
                    setRoomBackgroundColor(t, e, s) {
                        this._roomBackgroundColor = Em._Str_13949(((255 & t) << 16) + ((255 & e) << 8) + (255 & s));
                        const i = this.getRoomBackground();
                        i && (t || e || s ? (i.visible = !0, this.setRoomBackground()) : i.visible = !1)
                    }
                    setRoomColorizerColor(t, e) {
                        this._roomColorizerColor = Em._Str_13949((16776960 & Em._Str_22130(t)) + e), this.setRoomColorizer()
                    }
                    setRoomBackground() {
                        const t = this.getRoomBackground();
                        t && (t.tint = this._roomBackgroundColor, t.width = cp.instance.width, t.height = cp.instance.height)
                    }
                    setRoomColorizer() {
                        const t = this.getRoomColorizer();
                        if (!t) return;
                        const e = this._roomColorizerColor >> 8 & 255,
                            s = 255 & this._roomColorizerColor;
                        t.red = (this._roomColorizerColor >> 16 & 255) / 255, t.green = e / 255, t.blue = s / 255
                    }
                    getFirstCanvasId() {
                        return 1
                    }
                    getRoomViewRect() {
                        const t = this.roomCanvasReference.nativeElement.getBoundingClientRect();
                        return new u.k(t.x || 0, t.y || 0, t.width || 0, t.height || 0)
                    }
                    get events() {
                        return this._events
                    }
                    get connection() {
                        return cp.instance.communication.connection
                    }
                    get roomEngine() {
                        return cp.instance.roomEngine
                    }
                    get avatarRenderManager() {
                        return cp.instance.avatar
                    }
                    get roomSessionManager() {
                        return cp.instance.roomSessionManager
                    }
                    get sessionDataManager() {
                        return cp.instance.sessionDataManager
                    }
                    get roomSession() {
                        return this._roomSession
                    }
                    get notificationService() {
                        return this._notificationService
                    }
                    get wiredService() {
                        return this._wiredService
                    }
                    get friendService() {
                        return this._friendService
                    }
                }
                return t.COLOR_ADJUSTMENT = new fp.a, t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(xb), i.Ub(Pb), i.Ub(jb), i.Ub(Hb), i.Ub(i.l), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && (i.Zc(Wb, !0), i.Zc(zb, !0, i.W)), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.roomCanvasReference = t.first), i.Cc(t = i.kc()) && (e.widgetContainer = t.first)
                        }
                    },
                    decls: 5,
                    vars: 0,
                    consts: [
                        [1, "nitro-room-component"],
                        [1, "room-view"],
                        ["roomCanvas", ""],
                        ["widgetContainer", ""]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Vb(1, "div", 1, 2), i.Rc(3, Kb, 0, 0, "ng-template", null, 3, i.Sc), i.Yb())
                    },
                    encapsulation: 2
                }), t
            })();
            class qb {
                constructor() {
                    this._widgetHandler = null, this._messageListener = null, this._events = null, this._disposed = !1
                }
                initialize(t = 0) {}
                dispose() {
                    this.disposed || (this._messageListener = null, this._events && !this._events.disposed && this.unregisterUpdateEvents(this._events), this._widgetHandler && (this._widgetHandler.dispose(), this._widgetHandler = null), this._events = null, this._disposed = !0)
                }
                registerUpdateEvents(t) {
                    this._events = t
                }
                unregisterUpdateEvents(t) {
                    this._events = null
                }
                get disposed() {
                    return this._disposed
                }
                get widgetHandler() {
                    return this._widgetHandler
                }
                set widgetHandler(t) {
                    this._widgetHandler = t, this._widgetHandler.widget || (this._widgetHandler.widget = this)
                }
                get messageListener() {
                    return this._messageListener
                }
                set messageListener(t) {
                    this._messageListener = t
                }
            }
            class Jb {
                constructor(t) {
                    this._data = [], this._maxSize = t, this._index = 0
                }
                reset() {
                    this._data = [], this._index = 0
                }
                _Str_22775(t) {
                    this._data.length < this._maxSize ? this._data.push(t) : this._data[this._index] = t, this._index = (this._index + 1) % this._maxSize
                }
                _Str_25797() {
                    let t = Number.MIN_VALUE,
                        e = 0;
                    for (; e < this._maxSize;) this._data[e] > t && (t = this._data[e]), e++;
                    return t
                }
                _Str_26219() {
                    let t = Number.MAX_VALUE,
                        e = 0;
                    for (; e < this._maxSize;) this._data[e] < t && (t = this._data[e]), e++;
                    return t
                }
            }
            let Qb = (() => {
                class t {
                    constructor() {
                        this.parent = null, this.componentRef = null, this.activeView = null, this.stack = new Jb(t.LOCATION_STACK_SIZE), this.opacity = 0, this.currentDeltaY = -1e6, this.willFade = !1, this.firstFadeStarted = !1, this.fadeAfterDelay = !0, this.fadeLength = 500, this.fadeTime = 0, this.fadeStartDelay = 3e3, this.fadingOut = !1, this.fadeStartTimer = null
                    }
                    completeSetup() {
                        this.firstFadeStarted = !1, this.fadeLength = 75, this.fadingOut = !1, this.opacity = 1, this.onTimerComplete = this.onTimerComplete.bind(this), this.fadeAfterDelay && this.willFade && (this.fadeStartTimer && (clearTimeout(this.fadeStartTimer), this.fadeStartTimer = null), this.fadeStartTimer = setTimeout(this.onTimerComplete, this.fadeStartDelay))
                    }
                    ngOnDestroy() {
                        this.fadeStartTimer && (clearTimeout(this.fadeStartTimer), this.fadeStartTimer = null)
                    }
                    update(e, s, i) {
                        if (!e) return;
                        if (this.fadingOut ? (this.fadeTime = this.fadeTime + i, this.opacity = (1 - this.fadeTime / this.fadeLength) * this.maximumOpacity) : this.opacity = this.maximumOpacity, this.opacity <= 0) return void this.parent.removeView(this.componentRef, !1);
                        const n = this.getOffset(e);
                        this.stack._Str_22775(s.y - e.top);
                        let r = this.stack._Str_25797();
                        r < this.currentDeltaY - t.BUBBLE_DROP_SPEED && (r = this.currentDeltaY - t.BUBBLE_DROP_SPEED);
                        const o = s.y - r;
                        this.currentDeltaY = r;
                        let a = Math.round(s.x - this.activeViewElement.offsetWidth / 2),
                            c = Math.round(o + n);
                        c <= 0 && (c = t.SPACE_AROUND_EDGES), c >= cp.instance.height - this.activeViewElement.offsetHeight && (c = cp.instance.height - this.activeViewElement.offsetHeight - t.SPACE_AROUND_EDGES), a >= cp.instance.width - this.activeViewElement.offsetWidth && (a = cp.instance.width - this.activeViewElement.offsetWidth - t.SPACE_AROUND_EDGES), a < 0 && (a = 0 + t.BUBBLE_DROP_SPEED), this.activeViewElement.style.left = a + "px", this.activeViewElement.style.top = c + "px", this.activeViewElement.style.opacity = this.opacity.toString()
                    }
                    hide(t) {
                        this.activeView && (!this.firstFadeStarted && t ? (this.firstFadeStarted = !0, this.fadeStartTimer && (clearTimeout(this.fadeStartTimer), this.fadeStartTimer = null), this.fadeStartTimer = setTimeout(this.onTimerComplete, this.fadeStartDelay)) : this.parent.removeView(this.componentRef, !1))
                    }
                    onTimerComplete() {
                        this.fadingOut = !0, this.hide(!0)
                    }
                    getOffset(t) {
                        let e = -this.activeViewElement.offsetHeight;
                        return e -= 4, e
                    }
                    get maximumOpacity() {
                        return 1
                    }
                    get activeViewElement() {
                        return this.activeView && this.activeView.nativeElement || null
                    }
                }
                return t.LOCATION_STACK_SIZE = 25, t.BUBBLE_DROP_SPEED = 3, t.SPACE_AROUND_EDGES = 5, t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275dir = i.Pb({
                    type: t
                }), t
            })();
            class $b extends Qb {
                constructor() {
                    super(...arguments), this.userId = -1, this.userName = "", this.userType = -1, this.roomIndex = -1
                }
                static extendedSetup(t, e, s, i, n) {
                    t.userId = e, t.userName = s, t.userType = i, t.roomIndex = n, t.completeSetup()
                }
                getOffset(t) {
                    let e = -this.activeViewElement.offsetHeight;
                    return this.userType === ua.USER || this.userType === ua.BOT || this.userType === ua.RENTABLE_BOT ? e += t.height > 50 ? 25 : 0 : e -= 4, e
                }
            }
            let tE = (() => {
                class t {
                    transform(t, e = null, s = null) {
                        return e && Array.isArray(e) && s && Array.isArray(s) && e.length === s.length ? cp.instance.getLocalizationWithParameters(t, e, s) : e && s ? cp.instance.getLocalizationWithParameter(t, e, s) : cp.instance.getLocalization(t)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275pipe = i.Tb({
                    name: "translate",
                    type: t,
                    pure: !0
                }), t
            })();
            const eE = ["activeView"];

            function sE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "li", 15), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc(2).$implicit;
                        return i.mc(3).processAction(e.name)
                    })), i.Tc(1), i.nc(2, "translate"), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2).$implicit,
                        e = i.mc(3);
                    i.Gb(1), i.Uc(i.qc(2, 1, t.localization, "count", e.avatarData._Str_3577))
                }
            }

            function iE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "li", 15), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc(2).$implicit;
                        return i.mc(3).processAction(e.name)
                    })), i.Tc(1), i.nc(2, "translate"), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2).$implicit;
                    i.Gb(1), i.Uc(i.oc(2, 1, t.localization))
                }
            }

            function nE(t, e) {
                if (1 & t && (i.Xb(0, 12), i.Rc(1, sE, 3, 5, "li", 13), i.Rc(2, iE, 3, 3, "li", 14), i.Wb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.tc("ngSwitch", t.name), i.Gb(1), i.tc("ngSwitchCase", "respect")
                }
            }

            function rE(t, e) {
                if (1 & t && (i.Xb(0), i.Rc(1, nE, 3, 2, "ng-container", 11), i.Wb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.tc("ngIf", t.visible)
                }
            }

            function oE(t, e) {
                if (1 & t && (i.Zb(0, "ul", 10), i.Rc(1, rE, 2, 1, "ng-container", 5), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.tc("ngForOf", t.items)
                }
            }

            function aE(t, e) {
                if (1 & t && (i.Xb(0), i.Rc(1, oE, 2, 1, "ul", 9), i.Wb()), 2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.Gb(1), i.tc("ngIf", s.mode === t.mode)
                }
            }
            let cE = (() => {
                class t extends $b {
                    constructor(t) {
                        super(), this._applicationRef = t, this.avatarData = null, this.mode = 0, this.menu = []
                    }
                    static setup(t, e, s, i, n, r) {
                        t.avatarData = r, $b.extendedSetup(t, e, s, i, n), t.setupButtons()
                    }
                    setupButtons() {
                        let e = !1;
                        const s = this.widget.handler,
                            i = s.container.roomEngine.getRoomObject(s.roomSession.roomId, s.container.roomSession.ownRoomIndex, V.UNIT);
                        if (i) {
                            const t = i.model.getValue(j.FIGURE_CARRY_OBJECT);
                            t > 0 && t < 999999 && (e = !0)
                        }
                        this.menu = [{
                            mode: t.MODE_NORMAL,
                            items: [{
                                name: "friend",
                                localization: "infostand.button.friend",
                                visible: this.avatarData.canBeAskedForAFriend
                            }, {
                                name: "trade",
                                localization: "infostand.button.trade",
                                visible: !0
                            }, {
                                name: "whisper",
                                localization: "infostand.button.whisper",
                                visible: !0
                            }, {
                                name: "respect",
                                localization: "infostand.button.respect",
                                visible: this.avatarData._Str_3577 > 0
                            }, {
                                name: "ignore",
                                localization: "infostand.button.ignore",
                                visible: !this.avatarData._Str_3655
                            }, {
                                name: "unignore",
                                localization: "infostand.button.unignore",
                                visible: this.avatarData._Str_3655
                            }, {
                                name: "report",
                                localization: "infostand.button.report",
                                visible: !0
                            }, {
                                name: "moderate",
                                localization: "infostand.link.moderate",
                                visible: this.moderateMenuHasContent()
                            }, {
                                name: "ambassador",
                                localization: "infostand.link.ambassador",
                                visible: this.ambassadorMenuHasContent()
                            }, {
                                name: "pass_handitem",
                                localization: "avatar.widget.pass_hand_item",
                                visible: e
                            }]
                        }, {
                            mode: t.MODE_MODERATE,
                            items: [{
                                name: "kick",
                                localization: "infostand.button.kick",
                                visible: !0
                            }, {
                                name: "mute",
                                localization: "infostand.button.mute",
                                visible: !0
                            }, {
                                name: "ban",
                                localization: "infostand.button.ban",
                                visible: !0
                            }, {
                                name: "give_rights",
                                localization: "infostand.button.giverights",
                                visible: this.isShowGiveRights()
                            }, {
                                name: "remove_rights",
                                localization: "infostand.button.removerights",
                                visible: this.isShowRemoveRights()
                            }, {
                                name: "back",
                                localization: "generic.back",
                                visible: !0
                            }]
                        }, {
                            mode: t.MODE_MODERATE_BAN,
                            items: [{
                                name: "ban_hour",
                                localization: "infostand.button.ban_hour",
                                visible: !0
                            }, {
                                name: "ban_day",
                                localization: "infostand.button.ban_day",
                                visible: !0
                            }, {
                                name: "ban_perm",
                                localization: "infostand.button.ban_perm",
                                visible: !0
                            }, {
                                name: "back_moderate",
                                localization: "generic.back",
                                visible: !0
                            }]
                        }, {
                            mode: t.MODE_MODERATE_MUTE,
                            items: [{
                                name: "mute_2min",
                                localization: "infostand.button.mute_2min",
                                visible: !0
                            }, {
                                name: "mute_5min",
                                localization: "infostand.button.mute_5min",
                                visible: !0
                            }, {
                                name: "mute_10min",
                                localization: "infostand.button.mute_10min",
                                visible: !0
                            }, {
                                name: "back_moderate",
                                localization: "generic.back",
                                visible: !0
                            }]
                        }, {
                            mode: t.MODE_AMBASSADOR,
                            items: [{
                                name: "ambassador_alert",
                                localization: "infostand.button.alert",
                                visible: !0
                            }, {
                                name: "ambassador_kick",
                                localization: "infostand.button.kick",
                                visible: !0
                            }, {
                                name: "ambassador_mute",
                                localization: "infostand.button.mute",
                                visible: !0
                            }, {
                                name: "back",
                                localization: "generic.back",
                                visible: !0
                            }]
                        }, {
                            mode: t.MODE_AMBASSADOR_MUTE,
                            items: [{
                                name: "ambassador_mute_2min",
                                localization: "infostand.button.mute_2min",
                                visible: !0
                            }, {
                                name: "ambassador_mute_10min",
                                localization: "infostand.button.mute_10min",
                                visible: !0
                            }, {
                                name: "ambassador_mute_60min",
                                localization: "infostand.button.mute_60min",
                                visible: !0
                            }, {
                                name: "ambassador_mute_18hr",
                                localization: "infostand.button.mute_18hr",
                                visible: !0
                            }, {
                                name: "back_ambassador",
                                localization: "generic.back",
                                visible: !0
                            }]
                        }]
                    }
                    processAction(e) {
                        let s = null,
                            i = null,
                            n = !0;
                        if (e) {
                            switch (e) {
                                case "moderate":
                                    n = !1, this.setMode(t.MODE_MODERATE);
                                    break;
                                case "ban":
                                    n = !1, this.setMode(t.MODE_MODERATE_BAN);
                                    break;
                                case "mute":
                                    n = !1, this.setMode(t.MODE_MODERATE_MUTE);
                                    break;
                                case "ambassador":
                                    n = !1, this.setMode(t.MODE_AMBASSADOR);
                                    break;
                                case "ambassador_mute":
                                    n = !1, this.setMode(t.MODE_AMBASSADOR_MUTE);
                                    break;
                                case "back_moderate":
                                    n = !1, this.setMode(t.MODE_MODERATE);
                                    break;
                                case "back_ambassador":
                                    n = !1, this.setMode(t.MODE_AMBASSADOR);
                                    break;
                                case "back":
                                    n = !1, this.setMode(t.MODE_NORMAL);
                                    break;
                                case "whisper":
                                    s = Dp.RWUAM_WHISPER_USER;
                                    break;
                                case "friend":
                                    this.avatarData.canBeAskedForAFriend = !1, s = Dp.RWUAM_SEND_FRIEND_REQUEST;
                                    break;
                                case "respect":
                                    this.avatarData._Str_3577--, s = Dp.RWUAM_RESPECT_USER, this.avatarData._Str_3577 > 0 && (n = !1);
                                    break;
                                case "ignore":
                                    this.avatarData._Str_3655 = !0, s = Dp.RWUAM_IGNORE_USER;
                                    break;
                                case "unignore":
                                    this.avatarData._Str_3655 = !1, s = Dp.RWUAM_UNIGNORE_USER;
                                    break;
                                case "kick":
                                    s = Dp.RWUAM_KICK_USER;
                                    break;
                                case "ban_hour":
                                    s = Dp.RWUAM_BAN_USER_HOUR;
                                    break;
                                case "ban_day":
                                    s = Dp.RWUAM_BAN_USER_DAY;
                                    break;
                                case "perm_ban":
                                    s = Dp.RWUAM_BAN_USER_PERM;
                                    break;
                                case "mute_2min":
                                    s = Dp.MUTE_USER_2MIN;
                                    break;
                                case "mute_5min":
                                    s = Dp.MUTE_USER_5MIN;
                                    break;
                                case "mute_10min":
                                    s = Dp.MUTE_USER_10MIN;
                                    break;
                                case "give_rights":
                                    this.avatarData.roomControllerLevel = _r.GUEST, s = Dp.RWUAM_GIVE_RIGHTS;
                                    break;
                                case "remove_rights":
                                    this.avatarData.roomControllerLevel = _r.NONE, s = Dp.RWUAM_TAKE_RIGHTS;
                                    break;
                                case "trade":
                                    s = Dp.RWUAM_START_TRADING;
                                    break;
                                case "report":
                                    s = Dp.RWUAM_REPORT_CFH_OTHER;
                                    break;
                                case "pass_handitem":
                                    s = Dp.RWUAM_PASS_CARRY_ITEM;
                                    break;
                                case "ambassador_alert":
                                    s = Dp.RWUAM_AMBASSADOR_ALERT_USER;
                                    break;
                                case "ambassador_kick":
                                    s = Dp.RWUAM_AMBASSADOR_KICK_USER;
                                    break;
                                case "ambassador_mute_2min":
                                    s = Dp.AMBASSADOR_MUTE_USER_2MIN;
                                    break;
                                case "ambassador_mute_10min":
                                    s = Dp.AMBASSADOR_MUTE_USER_10MIN;
                                    break;
                                case "ambassador_mute_60min":
                                    s = Dp.AMBASSADOR_MUTE_USER_60MIN;
                                    break;
                                case "ambassador_mute_18hour":
                                    s = Dp.AMBASSADOR_MUTE_USER_18HOUR
                            }
                            s && (i = new Dp(s, this.userId)), i && this.parent.messageListener.processWidgetMessage(i)
                        }
                        n && this.parent.removeView(this.componentRef, !1)
                    }
                    setMode(t) {
                        t !== this.mode && (this.mode = t)
                    }
                    ambassadorMenuHasContent() {
                        return this.avatarData._Str_4050
                    }
                    moderateMenuHasContent() {
                        return this.avatarData._Str_5990 || this.avatarData._Str_6701 || this.avatarData._Str_6394 || this.isShowGiveRights() || this.isShowRemoveRights()
                    }
                    isShowGiveRights() {
                        return this.avatarData._Str_3246 && this.avatarData._Str_5599 < _r.GUEST && !this.avatarData._Str_3672
                    }
                    isShowRemoveRights() {
                        return this.avatarData._Str_3246 && this.avatarData._Str_5599 === _r.GUEST && !this.avatarData._Str_3672
                    }
                    get widget() {
                        return this.parent
                    }
                }
                return t.MODE_NORMAL = 0, t.MODE_MODERATE = 1, t.MODE_MODERATE_BAN = 2, t.MODE_MODERATE_MUTE = 3, t.MODE_AMBASSADOR = 4, t.MODE_AMBASSADOR_MUTE = 5, t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.g))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-avatarinfo-avatar-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(eE, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.activeView = t.first)
                        }
                    },
                    features: [i.Db],
                    decls: 10,
                    vars: 2,
                    consts: [
                        [1, "nitro-room-avatarinfo-avatar-component", "context-menu"],
                        ["activeView", ""],
                        [1, "card", "align-items-center"],
                        [1, "d-flex", "card-header", "align-items-center", "w-100"],
                        [1, "card-body"],
                        [4, "ngFor", "ngForOf"],
                        [1, "userinfobottom"],
                        [1, "i", "icon", "okico"],
                        [1, "card-pointer"],
                        ["class", "list-group list-group-flush", 4, "ngIf"],
                        [1, "list-group", "list-group-flush"],
                        [3, "ngSwitch", 4, "ngIf"],
                        [3, "ngSwitch"],
                        ["class", "list-group-item", 3, "click", 4, "ngSwitchCase"],
                        ["class", "list-group-item", 3, "click", 4, "ngSwitchDefault"],
                        [1, "list-group-item", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0, 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Tc(4), i.Yb(), i.Zb(5, "div", 4), i.Rc(6, aE, 2, 1, "ng-container", 5), i.Yb(), i.Zb(7, "div", 6), i.Vb(8, "i", 7), i.Yb(), i.Vb(9, "div", 8), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.Uc(e.userName), i.Gb(2), i.tc("ngForOf", e.menu))
                    },
                    directives: [hp.m, hp.n, hp.p, hp.q, hp.r],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            class _E {
                constructor() {
                    this._isIgnored = !1, this._canTrade = !1, this._canTradeReason = 0, this._canBeKicked = !1, this._canBeBanned = !1, this._canBeMuted = !1, this._canBeAskedAsFriend = !1, this._amIOwner = !1, this._amIAnyRoomController = !1, this._respectLeft = 0, this._isOwnUser = !1, this._allowNameChange = !1, this._isGuildRoom = !1, this._carryItemType = 0, this._myRoomControllerLevel = 0, this._targetRoomControllerLevel = 0, this._isFriend = !1, this._isAmbassador = !1
                }
                get _Str_3655() {
                    return this._isIgnored
                }
                set _Str_3655(t) {
                    this._isIgnored = t
                }
                get _Str_5751() {
                    return this._canTrade
                }
                set _Str_5751(t) {
                    this._canTrade = t
                }
                get _Str_6622() {
                    return this._canTradeReason
                }
                set _Str_6622(t) {
                    this._canTradeReason = t
                }
                get _Str_5990() {
                    return this._canBeKicked
                }
                set _Str_5990(t) {
                    this._canBeKicked = t
                }
                get _Str_6701() {
                    return this._canBeBanned
                }
                set _Str_6701(t) {
                    this._canBeBanned = t
                }
                get _Str_6394() {
                    return this._canBeMuted
                }
                set _Str_6394(t) {
                    this._canBeMuted = t
                }
                get canBeAskedForAFriend() {
                    return this._canBeAskedAsFriend
                }
                set canBeAskedForAFriend(t) {
                    this._canBeAskedAsFriend = t
                }
                get _Str_3246() {
                    return this._amIOwner
                }
                set _Str_3246(t) {
                    this._amIOwner = t
                }
                get _Str_3529() {
                    return this._amIAnyRoomController
                }
                set _Str_3529(t) {
                    this._amIAnyRoomController = t
                }
                get _Str_3577() {
                    return this._respectLeft
                }
                set _Str_3577(t) {
                    this._respectLeft = t
                }
                get _Str_11453() {
                    return this._isOwnUser
                }
                set _Str_11453(t) {
                    this._isOwnUser = t
                }
                get allowNameChange() {
                    return this._allowNameChange
                }
                set allowNameChange(t) {
                    this._allowNameChange = t
                }
                get _Str_3672() {
                    return this._isGuildRoom
                }
                set _Str_3672(t) {
                    this._isGuildRoom = t
                }
                get _Str_8826() {
                    return this._carryItemType
                }
                set _Str_8826(t) {
                    this._carryItemType = t
                }
                get roomControllerLevel() {
                    return this._myRoomControllerLevel
                }
                set roomControllerLevel(t) {
                    this._myRoomControllerLevel = t
                }
                get _Str_5599() {
                    return this._targetRoomControllerLevel
                }
                set _Str_5599(t) {
                    this._targetRoomControllerLevel = t
                }
                get isFriend() {
                    return this._isFriend
                }
                get _Str_4050() {
                    return this._isAmbassador
                }
                populate(t) {
                    this._amIAnyRoomController = t.isModerator, this._myRoomControllerLevel = t.roomControllerLevel, this._amIOwner = t.isRoomOwner, this._canBeAskedAsFriend = t.canBeAskedForAFriend, this._canBeKicked = t._Str_5990, this._canBeBanned = t._Str_6701, this._canBeMuted = t._Str_6394, this._canTrade = t.canTrade, this._canTradeReason = t._Str_6622, this._isIgnored = t.isIgnored, this._respectLeft = t.respectLeft, this._isOwnUser = t.type === vb.OWN_USER, this._allowNameChange = t._Str_4330, this._isGuildRoom = t.isGuildRoom, this._targetRoomControllerLevel = t.flatControl, this._carryItemType = t.carryId, this._isFriend = t.isFriend, this._isAmbassador = t.isAmbassador
                }
            }
            const hE = ["activeView"];
            let lE = (() => {
                class t extends $b {
                    static setup(t, e, s, i, n, r = !1) {
                        t.willFade = r, $b.extendedSetup(t, e, s, i, n)
                    }
                }
                return t.\u0275fac = function(e) {
                    return uE(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-avatarinfo-name-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(hE, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.activeView = t.first)
                        }
                    },
                    features: [i.Db],
                    decls: 5,
                    vars: 1,
                    consts: [
                        [1, "roomactive-ub-card"],
                        ["activeView", ""],
                        [1, "raub-usernametxt"],
                        [1, "roomactive-ub-card-pointer"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0, 1), i.Zb(2, "div", 2), i.Tc(3), i.Yb(), i.Vb(4, "div", 3), i.Yb()), 2 & t && (i.Gb(3), i.Uc(e.userName))
                    },
                    encapsulation: 2
                }), t
            })();
            const uE = i.bc(lE);
            let dE = (() => {
                class t {
                    constructor(t) {
                        this._sanitizer = t
                    }
                    transform(t) {
                        return this._sanitizer.bypassSecurityTrustHtml(t)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(n.b))
                }, t.\u0275pipe = i.Tb({
                    name: "keepHtml",
                    type: t,
                    pure: !1
                }), t
            })();
            const gE = ["activeView"];

            function mE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "li", 12), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc().$implicit;
                        return i.mc(3).processAction(e.name)
                    })), i.nc(1, "keepHtml"), i.nc(2, "translate"), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc().$implicit;
                    i.tc("innerHTML", "11" === t.name || "12" === t.name || "13" === t.name || "14" === t.name || "15" === t.name ? i.oc(1, 1, t.localization) : i.oc(2, 3, t.localization), i.Hc)
                }
            }

            function pE(t, e) {
                if (1 & t && (i.Xb(0), i.Rc(1, mE, 3, 5, "li", 11), i.Wb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.tc("ngIf", t.visible)
                }
            }
            const bE = function(t) {
                return {
                    "columns-3": t
                }
            };

            function EE(t, e) {
                if (1 & t && (i.Zb(0, "ul", 10), i.Rc(1, pE, 2, 1, "ng-container", 5), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.tc("ngClass", i.xc(2, bE, 4 === t.mode)), i.Gb(1), i.tc("ngForOf", t.items)
                }
            }

            function fE(t, e) {
                if (1 & t && (i.Xb(0), i.Rc(1, EE, 2, 4, "ul", 9), i.Wb()), 2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.Gb(1), i.tc("ngIf", s.mode === t.mode)
                }
            }
            let SE = (() => {
                class t extends $b {
                    constructor() {
                        super(...arguments), this.avatarData = null, this.mode = 0, this.menu = []
                    }
                    ngOnInit() {
                        lp((function() {
                            console.log("sd")
                        }))
                    }
                    static setup(e, s, i, n, r, o) {
                        e.avatarData = o, e.widget.isDancing && e.widget.hasClub && (e.mode = t.MODE_CLUB_DANCES), $b.extendedSetup(e, s, i, n, r), e.setupButtons()
                    }
                    setupButtons() {
                        const e = this.widget._Str_25831;
                        this.menu = [{
                            mode: t.MODE_NORMAL,
                            items: [{
                                name: "decorate",
                                localization: "widget.avatar.decorate",
                                visible: this.widget.hasClub && this.avatarData.roomControllerLevel >= _r.GUEST || this.avatarData._Str_3246
                            }, {
                                name: "change_looks",
                                localization: "<u>Se changer</u>",
                                visible: !0
                            }, {
                                name: "dance_menu",
                                localization: 'Danser <img class="amkico" src="./assets/images/amk.png">',
                                visible: this.widget.hasClub && !e
                            }, {
                                name: "dance",
                                localization: "widget.memenu.dance",
                                visible: !this.widget.isDancing && !this.widget.hasClub && !e
                            }, {
                                name: "dance_stop",
                                localization: "widget.memenu.dance.stop",
                                visible: this.widget.isDancing && !this.widget.hasClub && !e
                            }, {
                                name: "expressions",
                                localization: 'Actions <img class="amkico" src="./assets/images/amk.png">',
                                visible: !0
                            }, {
                                name: "signs",
                                localization: 'Panneaux <img class="amkico" src="./assets/images/amk.png">',
                                visible: !0
                            }, {
                                name: "drop_hand_item",
                                localization: "avatar.widget.drop_hand_item",
                                visible: this.avatarData._Str_8826 > 0 && this.avatarData._Str_8826 < 999999
                            }]
                        }, {
                            mode: t.MODE_CLUB_DANCES,
                            items: [{
                                name: "dance_stop",
                                localization: "widget.memenu.dance.stop",
                                visible: this.widget.isDancing
                            }, {
                                name: "dance_1",
                                localization: "widget.memenu.dance1",
                                visible: !0
                            }, {
                                name: "dance_2",
                                localization: "widget.memenu.dance2",
                                visible: !0
                            }, {
                                name: "dance_3",
                                localization: "widget.memenu.dance3",
                                visible: !0
                            }, {
                                name: "dance_4",
                                localization: "widget.memenu.dance4",
                                visible: !0
                            }, {
                                name: "back",
                                localization: "generic.back",
                                visible: !0
                            }]
                        }, {
                            mode: t.MODE_EXPRESSIONS,
                            items: [{
                                name: "sit",
                                localization: "widget.memenu.sit",
                                visible: this.widget.getOwnPosture === St.POSTURE_STAND
                            }, {
                                name: "stand",
                                localization: "widget.memenu.stand",
                                visible: this.widget.getCanStandUp
                            }, {
                                name: "wave",
                                localization: "widget.memenu.wave",
                                visible: !this.widget._Str_12708
                            }, {
                                name: "laugh",
                                localization: "widget.memenu.laugh",
                                visible: !this.widget._Str_12708 && this.widget.hasVip
                            }, {
                                name: "blow",
                                localization: "widget.memenu.blow",
                                visible: !this.widget._Str_12708 && this.widget.hasVip
                            }, {
                                name: "idle",
                                localization: "widget.memenu.idle",
                                visible: !0
                            }, {
                                name: "back",
                                localization: "generic.back",
                                visible: !0
                            }]
                        }, {
                            mode: t.MODE_SIGNS,
                            items: [{
                                name: "sign_1",
                                localization: "1",
                                visible: !0
                            }, {
                                name: "sign_4",
                                localization: "4",
                                visible: !0
                            }, {
                                name: "sign_7",
                                localization: "7",
                                visible: !0
                            }, {
                                name: "sign_10",
                                localization: "10",
                                visible: !0
                            }, {
                                name: "sign_0",
                                localization: "0",
                                visible: !0
                            }, {
                                name: "sign_14",
                                localization: '<i class="i icon topico"></i>',
                                visible: !0
                            }, {
                                name: "sign_2",
                                localization: "2",
                                visible: !0
                            }, {
                                name: "sign_5",
                                localization: "5",
                                visible: !0
                            }, {
                                name: "sign_8",
                                localization: "8",
                                visible: !0
                            }, {
                                name: "sign_11",
                                localization: '<i class="i icon kalpico"></i>',
                                visible: !0
                            }, {
                                name: "sign_13",
                                localization: '<i class="i icon unlemico"></i>',
                                visible: !0
                            }, {
                                name: "sign_17",
                                localization: '<i class="i icon sarikartico"></i>',
                                visible: !0
                            }, {
                                name: "sign_3",
                                localization: "3",
                                visible: !0
                            }, {
                                name: "sign_6",
                                localization: "6",
                                visible: !0
                            }, {
                                name: "sign_9",
                                localization: "9",
                                visible: !0
                            }, {
                                name: "sign_12",
                                localization: '<i class="i icon kurukafaico"></i>',
                                visible: !0
                            }, {
                                name: "sign_15",
                                localization: '<p class="gulucuk">:)</p>',
                                visible: !0
                            }, {
                                name: "sign_16",
                                localization: '<i class="i icon kirmizikartico"></i>',
                                visible: !0
                            }]
                        }]
                    }
                    processAction(e) {
                        let s = null,
                            i = !0;
                        if (e) {
                            if (e.startsWith("sign_")) {
                                const t = parseInt(e.split("_")[1]);
                                this.widget.useSign(t)
                            } else switch (e) {
                                case "decorate":
                                    break;
                                case "change_looks":
                                    this.widget.openAvatarEditor();
                                    break;
                                case "expressions":
                                    i = !1, this.setMode(t.MODE_EXPRESSIONS);
                                    break;
                                case "sit":
                                    s = new Cp(Cp._Str_2016);
                                    break;
                                case "stand":
                                    s = new Cp(Cp._Str_1553);
                                    break;
                                case "wave":
                                    s = new Ap(Lp._Str_6268);
                                    break;
                                case "blow":
                                    s = new Ap(Lp._Str_5579);
                                    break;
                                case "laugh":
                                    s = new Ap(Lp._Str_7336);
                                    break;
                                case "idle":
                                    s = new Ap(Lp._Str_6989);
                                    break;
                                case "dance_menu":
                                    i = !1, this.setMode(t.MODE_CLUB_DANCES);
                                    break;
                                case "dance":
                                    s = new Mp(1);
                                    break;
                                case "dance_stop":
                                    s = new Mp(0);
                                    break;
                                case "dance_1":
                                case "dance_2":
                                case "dance_3":
                                case "dance_4":
                                    s = new Mp(parseInt(e.charAt(e.length - 1)));
                                    break;
                                case "signs":
                                    i = !1, this.setMode(t.MODE_SIGNS);
                                    break;
                                case "back":
                                case "more":
                                    i = !1, this.setMode(t.MODE_NORMAL);
                                    break;
                                case "drop_hand_item":
                                    s = new Dp(Dp.RWUAM_DROP_CARRY_ITEM, this.userId)
                            }
                            s && this.parent.messageListener.processWidgetMessage(s)
                        }
                        i && this.parent.removeView(this.componentRef, !1)
                    }
                    setMode(t) {
                        t !== this.mode && (this.mode = t)
                    }
                    get widget() {
                        return this.parent
                    }
                }
                return t.MODE_NORMAL = 0, t.MODE_CLUB_DANCES = 1, t.MODE_NAME_CHANGE = 2, t.MODE_EXPRESSIONS = 3, t.MODE_SIGNS = 4, t.MODE_CHANGE_LOOKS = 5, t.\u0275fac = function(e) {
                    return IE(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-avatarinfo-ownavatar-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(gE, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.activeView = t.first)
                        }
                    },
                    features: [i.Db],
                    decls: 10,
                    vars: 2,
                    consts: [
                        [1, "nitro-room-avatarinfo-ownavatar-component", "context-menu"],
                        ["activeView", ""],
                        [1, "card", "align-items-center", 2, "min-width", "110px"],
                        [1, "d-flex", "card-header", "align-items-center", "w-100"],
                        [1, "card-body"],
                        [4, "ngFor", "ngForOf"],
                        [1, "userinfobottom"],
                        [1, "i", "icon", "okico"],
                        [1, "card-pointer"],
                        ["class", "list-group list-group-flush", 3, "ngClass", 4, "ngIf"],
                        [1, "list-group", "list-group-flush", 3, "ngClass"],
                        ["class", "list-group-item", 3, "innerHTML", "click", 4, "ngIf"],
                        [1, "list-group-item", 3, "innerHTML", "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0, 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Tc(4), i.Yb(), i.Zb(5, "div", 4), i.Rc(6, fE, 2, 1, "ng-container", 5), i.Yb(), i.Yb(), i.Zb(7, "div", 6), i.Vb(8, "i", 7), i.Yb(), i.Vb(9, "div", 8), i.Yb()), 2 & t && (i.Gb(4), i.Uc(e.userName), i.Gb(2), i.tc("ngForOf", e.menu))
                    },
                    directives: [hp.m, hp.n, hp.l],
                    pipes: [dE, tE],
                    encapsulation: 2
                }), t
            })();
            const IE = i.bc(SE);
            class RE {
                constructor() {
                    this.age = 0, this.rarityLevel = 0, this._Str_5114 = !1, this.energy = 0, this.maximumEnergy = 0, this.experience = 0, this.levelExperienceGoal = 0, this.id = 0, this._Str_5175 = !1, this.level = 0, this.maximumLevel = 0, this.name = "", this.happyness = 0, this.maximumHappyness = 0, this.ownerId = 0, this.ownerName = "", this._Str_14767 = 0, this.respect = 0, this._Str_2985 = 0, this._Str_4355 = 0, this.saddle = !1, this.rider = !1, this.breedable = !1, this.fullyGrown = !1, this.dead = !1, this.publiclyRideable = 0, this.maximumTimeToLive = 0, this.remainingTimeToLive = 0, this.remainingGrowTime = 0, this.publiclyBreedable = !1, this._Str_3307 = []
                }
                populate(t) {
                    this.age = t.age, this.rarityLevel = t.rarityLevel, this._Str_5114 = t._Str_5114, this.energy = t.energy, this.maximumEnergy = t.maximumEnergy, this.experience = t.experience, this.levelExperienceGoal = t.levelExperienceGoal, this.id = t.id, this._Str_5175 = t._Str_5175, this.level = t.level, this.maximumLevel = t.maximumLevel, this.name = t.name, this.happyness = t.happyness, this.maximumHappyness = t.maximumHappyness, this.ownerId = t.ownerId, this.ownerName = t.ownerName, this._Str_14767 = t._Str_14767, this.respect = t.respect, this._Str_2985 = t._Str_2985, this._Str_4355 = t._Str_4355, this.saddle = t.saddle, this.rider = t.rider, this.breedable = t.breedable, this.dead = t.dead, this.fullyGrown = t.fullyGrown, this._Str_3307 = t._Str_3307, this.publiclyRideable = t.publiclyRideable, this.maximumTimeToLive = t.maximumTimeToLive, this.remainingTimeToLive = t.remainingTimeToLive, this.remainingGrowTime = t.remainingGrowTime, this.publiclyBreedable = t.publiclyBreedable
                }
            }
            let vE = (() => {
                class t {
                    constructor(t, e, s) {
                        this._notificationService = t, this._settingsService = e, this._ngZone = s, this._component = null, this._messages = [], this.registerMessages()
                    }
                    ngOnDestroy() {
                        this.unregisterMessages()
                    }
                    registerMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            this._messages = [];
                            for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                        })
                    }
                    unregisterMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                            this._messages = []
                        })
                    }
                    loadOwnAvatarInEditor() {
                        if (!this._component) return;
                        const t = cp.instance.sessionDataManager;
                        this._component.loadAvatarInEditor(t.figure, t.gender, t.clubLevel)
                    }
                    get component() {
                        return this._component
                    }
                    set component(t) {
                        this._component = t
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.gc(xb), i.gc(_p), i.gc(i.E))
                }, t.\u0275prov = i.Qb({
                    token: t,
                    factory: t.\u0275fac
                }), t
            })();
            const TE = ["contextsContainer"];

            function OE(t, e) {}
            let yE = (() => {
                    class t extends qb {
                        constructor(t, e, s, i) {
                            super(), this._avatarEditorService = t, this._settingsService = e, this._componentFactoryResolver = s, this._ngZone = i, this.view = null, this.cachedNameView = null, this.cachedOwnAvatarMenuView = null, this.cachedAvatarMenuView = null, this.cachedNameBubbles = new Map, this.lastRollOverId = -1, this.userInfoData = new _E, this.petInfoData = new RE, this.isDancing = !1, this._isInitialized = !1, this._isRoomEnteredOwnAvatarHighlight = !1, this._isGameMode = !1, this._Str_2557 = this._Str_2557.bind(this)
                        }
                        ngOnDestroy() {
                            cp.instance.ticker.remove(this.update, this)
                        }
                        registerUpdateEvents(t) {
                            t && (t.addEventListener(Tp.RWAIE_AVATAR_INFO, this._Str_2557), t.addEventListener(fb.RWONE_TYPE, this._Str_2557), t.addEventListener(vb.OWN_USER, this._Str_2557), t.addEventListener(vb.PEER, this._Str_2557), t.addEventListener(Op.RWUDUE_USER_DATA_UPDATED, this._Str_2557), t.addEventListener(Rp.USER_REMOVED, this._Str_2557), t.addEventListener(Ib.FURNI, this._Str_2557), t.addEventListener(Rp.OBJECT_SELECTED, this._Str_2557), t.addEventListener(Rp.OBJECT_DESELECTED, this._Str_2557), t.addEventListener(Rp.OBJECT_ROLL_OVER, this._Str_2557), t.addEventListener(Rp.OBJECT_ROLL_OUT, this._Str_2557), t.addEventListener(Ip.RWREUE_NORMAL_MODE, this._Str_2557), t.addEventListener(Ip.RWREUE_GAME_MODE, this._Str_2557), super.registerUpdateEvents(t))
                        }
                        unregisterUpdateEvents(t) {
                            t && (t.removeEventListener(Tp.RWAIE_AVATAR_INFO, this._Str_2557), t.removeEventListener(fb.RWONE_TYPE, this._Str_2557), t.removeEventListener(vb.OWN_USER, this._Str_2557), t.removeEventListener(vb.PEER, this._Str_2557), t.removeEventListener(Op.RWUDUE_USER_DATA_UPDATED, this._Str_2557), t.removeEventListener(Rp.USER_REMOVED, this._Str_2557), t.removeEventListener(Ib.FURNI, this._Str_2557), t.removeEventListener(Rp.OBJECT_SELECTED, this._Str_2557), t.removeEventListener(Rp.OBJECT_DESELECTED, this._Str_2557), t.removeEventListener(Rp.OBJECT_ROLL_OVER, this._Str_2557), t.removeEventListener(Rp.OBJECT_ROLL_OUT, this._Str_2557), t.removeEventListener(Ip.RWREUE_NORMAL_MODE, this._Str_2557), t.removeEventListener(Ip.RWREUE_GAME_MODE, this._Str_2557), super.unregisterUpdateEvents(t))
                        }
                        _Str_2557(t) {
                            const e = this.view && this.view.instance || null;
                            switch (t.type) {
                                case Tp.RWAIE_AVATAR_INFO:
                                    {
                                        const e = t;this._isRoomEnteredOwnAvatarHighlight = !this._isInitialized && this.handler.container.roomSession && e._Str_2707 === this.handler.container.roomSession.ownRoomIndex,
                                        this._Str_12674(e.userId, e.userName, e._Str_2908, e._Str_2707, e._Str_4330, null),
                                        this._isInitialized = !0;
                                        break
                                    }
                                case fb.RWONE_TYPE:
                                    {
                                        const e = t;e.category === V.UNIT && this._Str_12674(e.userId, e.userName, e.userType, e.roomIndex, !1, null);
                                        break
                                    }
                                case vb.OWN_USER:
                                case vb.PEER:
                                    {
                                        const e = t;this.userInfoData.populate(e),
                                        this._Str_12674(e.webID, e.name, e.userType, e.roomIndex, !1, e.isSpectator ? null : this.userInfoData);
                                        break
                                    }
                                case Op.RWUDUE_USER_DATA_UPDATED:
                                    this._isInitialized || this._Str_25716();
                                    break;
                                case Rp.USER_REMOVED:
                                    {
                                        const s = t;e && e.roomIndex === s.id && this.removeView(this.view, !1);
                                        for (const t of this.cachedNameBubbles.values())
                                            if (t.instance.roomIndex == s.id) {
                                                this.removeView(t, !1);
                                                break
                                            }
                                        break
                                    }
                                case Ib.FURNI:
                                case Rp.OBJECT_DESELECTED:
                                    this.view && this.removeView(this.view, !1);
                                    break;
                                case Rp.OBJECT_ROLL_OVER:
                                    {
                                        if (this._isRoomEnteredOwnAvatarHighlight) return;
                                        const s = t;e && (e instanceof cE || e instanceof SE) || (this.lastRollOverId = s.id, this.messageListener.processWidgetMessage(new Up(Up.GET_OBJECT_NAME, s.id, s.category)));
                                        break
                                    }
                                case Rp.OBJECT_ROLL_OUT:
                                    {
                                        if (this._isRoomEnteredOwnAvatarHighlight) return;
                                        const s = t;e && (e instanceof cE || e instanceof SE) || s.id === this.lastRollOverId && (this.removeView(this.view, !1), this.lastRollOverId = -1);
                                        break
                                    }
                                case Ip.RWREUE_NORMAL_MODE:
                                    this._isGameMode = !1;
                                    break;
                                case Ip.RWREUE_GAME_MODE:
                                    this._isGameMode = !0
                            }
                            this.toggleUpdateReceiver()
                        }
                        _Str_12674(t, e, s, i, n, r) {
                            const o = !!r;
                            let a = this.view && this.view.instance;
                            if (o && a && (a instanceof cE || a instanceof SE || (this.removeView(this.view, !1), a = null)), a && a.userId === t && a.userName === e && a.userType === s && a.roomIndex === i) a && (a instanceof cE || a instanceof SE) && a.userId === t && this.removeView(this.view, !1);
                            else if (this.view && this.removeView(this.view, !1), !this._isGameMode)
                                if (o)
                                    if (r._Str_11453) {
                                        if (this.isDecorting) return;
                                        if (rl.isRunning()) return;
                                        this.cachedOwnAvatarMenuView || (this.cachedOwnAvatarMenuView = this.createView(SE)), this.view = this.cachedOwnAvatarMenuView, this._ngZone.run(() => SE.setup(this.view.instance, t, e, s, i, r))
                                    } else {
                                        this.cachedAvatarMenuView || (this.cachedAvatarMenuView = this.createView(cE)), this.view = this.cachedAvatarMenuView, this._ngZone.run(() => cE.setup(this.view.instance, t, e, s, i, r));
                                        for (const e of this.cachedNameBubbles.values())
                                            if (e.instance.userId === t) {
                                                this.removeView(e, !1);
                                                break
                                            }
                                    }
                            else this.handler.roomEngine.isDecorating || (this.cachedNameView || (this.cachedNameView = this.createView(lE)), this.view = this.cachedNameView, this._ngZone.run(() => {
                                this.handler.container.sessionDataManager.userId === t ? lE.setup(this.view.instance, t, e, s, i) : lE.setup(this.view.instance, t, e, s, i, !0)
                            }))
                        }
                        createView(t) {
                            if (!t) return null;
                            let e = null,
                                s = null;
                            return this._ngZone.run(() => {
                                const i = this._componentFactoryResolver.resolveComponentFactory(t);
                                e = this.contextsContainer.createComponent(i), s = e.instance
                            }), s && e ? (s.parent = this, s.componentRef = e, e) : null
                        }
                        close() {
                            this.removeView(this.view, !1)
                        }
                        removeView(t, e) {
                            if (this._isRoomEnteredOwnAvatarHighlight = !1, !t) return;
                            const s = this.contextsContainer.indexOf(t.hostView); - 1 !== s && (this.cachedNameView = null, this.cachedOwnAvatarMenuView = null, this.cachedAvatarMenuView = null, t === this.view && (this.view = null), t instanceof lE && (this.cachedNameBubbles.delete(t.instance.userName), this.toggleUpdateReceiver()), this._ngZone.run(() => this.contextsContainer.remove(s)))
                        }
                        toggleUpdateReceiver() {
                            this.view || this.cachedNameBubbles.size > 0 ? cp.instance.ticker.add(this.update, this) : cp.instance.ticker.remove(this.update, this)
                        }
                        update(t) {
                            if (this.view) {
                                const e = this.view.instance,
                                    s = this.messageListener.processWidgetMessage(new Cb(Cb.RWGOI_MESSAGE_GET_OBJECT_LOCATION, e.userId, e.userType));
                                s && e.update(s.rectangle, s._Str_9337, t)
                            }
                            for (const e of this.cachedNameBubbles.values()) {
                                if (!e) continue;
                                const s = e.instance,
                                    i = this.messageListener.processWidgetMessage(new Cb(Cb.RWGOI_MESSAGE_GET_OBJECT_LOCATION, s.userId, s.userType));
                                i && s.update(i.rectangle, i._Str_9337, t)
                            }
                        }
                        getOwnRoomObject() {
                            const t = this.handler.container.sessionDataManager.userId,
                                e = this.handler.roomEngine.activeRoomId,
                                s = V.UNIT,
                                i = this.handler.roomEngine.getTotalObjectsForManager(e, s);
                            let n = 0;
                            for (; n < i;) {
                                const i = this.handler.roomEngine.getRoomObjectByIndex(e, n, s);
                                if (i) {
                                    const e = this.handler.roomSession.userDataManager.getUserDataByIndex(i.id);
                                    if (e && e.webID === t) return i
                                }
                                n++
                            }
                            return null
                        }
                        _Str_25716() {
                            this.messageListener.processWidgetMessage(new Up(Up.GET_OWN_CHARACTER_INFO, 0, 0))
                        }
                        openAvatarEditor() {
                            this._avatarEditorService.loadOwnAvatarInEditor(), this._settingsService.showAvatarEditor()
                        }
                        useSign(t) {
                            this.widgetHandler.container.roomSession.sendSignMessage(t)
                        }
                        get getOwnPosture() {
                            const t = this.getOwnRoomObject();
                            if (t) {
                                const e = t.model;
                                if (e) return e.getValue(j.FIGURE_POSTURE)
                            }
                            return St.POSTURE_STAND
                        }
                        get getCanStandUp() {
                            const t = this.getOwnRoomObject();
                            if (t) {
                                const e = t.model;
                                if (e) return e.getValue(j.FIGURE_CAN_STAND_UP)
                            }
                            return !1
                        }
                        get _Str_12708() {
                            const e = this.getOwnRoomObject();
                            if (e) {
                                const s = e.model;
                                if (s) {
                                    const e = s.getValue(j.FIGURE_EFFECT);
                                    return e === t._Str_18968 || e === t._Str_16970 || e === t._Str_18857
                                }
                            }
                            return !1
                        }
                        get _Str_25831() {
                            const e = this.getOwnRoomObject();
                            if (e) {
                                const s = e.model;
                                if (s) return s.getValue(j.FIGURE_EFFECT) === t._Str_17951
                            }
                            return !1
                        }
                        get handler() {
                            return this.widgetHandler
                        }
                        get isDecorting() {
                            return this.handler.roomSession.isDecorating
                        }
                        get hasClub() {
                            return this.handler.container.sessionDataManager.clubLevel >= wp._Str_2964
                        }
                        get hasVip() {
                            return this.handler.container.sessionDataManager.clubLevel >= wp._Str_2575
                        }
                    }
                    return t._Str_17951 = 77, t._Str_18968 = 29, t._Str_16970 = 30, t._Str_18857 = 185, t._Str_18641 = 5e3, t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(vE), i.Ub(_p), i.Ub(i.l), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-room-avatarinfo-component"]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && i.Zc(TE, !0, i.W), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.contextsContainer = t.first)
                            }
                        },
                        features: [i.Db],
                        decls: 3,
                        vars: 0,
                        consts: [
                            [1, "nitro-room-avatarinfo-component"],
                            ["contextsContainer", ""]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Rc(1, OE, 0, 0, "ng-template", null, 1, i.Sc), i.Yb())
                        },
                        encapsulation: 2
                    }), t
                })(),
                AE = (() => {
                    class t extends Sp {
                        constructor(e) {
                            super(t.RWFCE_FLOOD_CONTROL), this._seconds = 0, this._seconds = e
                        }
                        get seconds() {
                            return this._seconds
                        }
                    }
                    return t.RWFCE_FLOOD_CONTROL = "RWFCE_FLOOD_CONTROL", t
                })(),
                CE = (() => {
                    class t {
                        constructor(t, e) {
                            this.elementRef = t, this.ngZone = e, this.target = null, this.bringToFront = this.bringToFront.bind(this)
                        }
                        ngAfterViewInit() {
                            const t = this.elementRef.nativeElement;
                            t && (this.target = t, this.addTarget(), this.registerEvents(), this.bringToFront())
                        }
                        ngOnDestroy() {
                            this.unregisterEvents(), this.removeTarget(), this.bringToFront()
                        }
                        addTarget() {
                            this.target && (t.TOP_TARGETS.indexOf(this.target) >= 0 || t.TOP_TARGETS.push(this.target))
                        }
                        removeTarget() {
                            if (!this.target) return;
                            const e = t.TOP_TARGETS.indexOf(this.target); - 1 !== e && t.TOP_TARGETS.splice(e, 1)
                        }
                        registerEvents() {
                            this.ngZone.runOutsideAngular(() => {
                                this.target && this.target.addEventListener("mousedown", this.bringToFront)
                            })
                        }
                        unregisterEvents() {
                            this.ngZone.runOutsideAngular(() => {
                                this.target && this.target.removeEventListener("mousedown", this.bringToFront)
                            })
                        }
                        bringToFront(e = null) {
                            this.moveTarget();
                            let s = t.Z_INDEX_START;
                            for (const i of t.TOP_TARGETS) i && (s += t.Z_INDEX_INCREASE, i.style.zIndex = s.toString())
                        }
                        moveTarget() {
                            const e = t.TOP_TARGETS.indexOf(this.target);
                            if (-1 === e) return;
                            const s = t.TOP_TARGETS.splice(e, 1);
                            t.TOP_TARGETS.push(...s)
                        }
                        isTopTarget() {
                            if (!this.target) return !1;
                            const e = t.TOP_TARGETS.indexOf(this.target);
                            return !(-1 === e || e < t.TOP_TARGETS.length - 1)
                        }
                    }
                    return t.TOP_TARGETS = [], t.Z_INDEX_START = 400, t.Z_INDEX_INCREASE = 1, t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(i.o), i.Ub(i.E))
                    }, t.\u0275dir = i.Pb({
                        type: t,
                        selectors: [
                            ["", "bringToTop", ""]
                        ],
                        inputs: {
                            bringToTop: "bringToTop"
                        }
                    }), t
                })();
            const ME = function(t) {
                return [t]
            };

            function UE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 6), i.Zb(1, "div", 7), i.Zb(2, "div", 8), i.Zb(3, "div", 9), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectStyle(s)
                    })), i.Tc(4, "\xa0"), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.Gb(1), i.tc("ngClass", i.xc(4, ME, s.lastSelectedId === t ? "bg-white" : "bg-")), i.Gb(2), i.Jb("chat-bubble bubble-", t, " w-100")
                }
            }
            const DE = function(t) {
                return {
                    active: t
                }
            };
            let NE = (() => {
                class t {
                    constructor(t, e) {
                        this.changeDetector = t, this.ngZone = e, this.styleSelected = new i.q, this.showStyles = !1, this.lastSelectedId = 0, this.styleIds = []
                    }
                    ngOnInit() {
                        const t = cp.instance.getConfiguration("chat.styles");
                        for (const e of t) e && (e.minRank > 0 ? cp.instance.sessionDataManager.hasSecurity(e.minRank) && this.styleIds.push(e.styleId) : e.isSystemStyle && cp.instance.sessionDataManager.hasSecurity(_r.MODERATOR) ? this.styleIds.push(e.styleId) : cp.instance.getConfiguration("chat.styles.disabled").indexOf(e.styleId) >= 0 || (e.isHcOnly && cp.instance.sessionDataManager.clubLevel >= wp._Str_2964 || e.isAmbassadorOnly && cp.instance.sessionDataManager.isAmbassador ? this.styleIds.push(e.styleId) : e.isHcOnly || e.isAmbassadorOnly || this.styleIds.push(e.styleId)))
                    }
                    ngOnDestroy() {
                        this.hideSelector()
                    }
                    showSelector() {
                        this.showStyles = !0
                    }
                    hideSelector() {
                        this.showStyles = !1
                    }
                    toggleSelector() {
                        this.showStyles ? this.hideSelector() : this.showSelector()
                    }
                    selectStyle(t) {
                        this.lastSelectedId = t, this.styleSelected.emit(t), this.hideSelector()
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.i), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-chatinput-styleselector-component"]
                    ],
                    outputs: {
                        styleSelected: "styleSelected"
                    },
                    decls: 6,
                    vars: 4,
                    consts: [
                        [1, "nitro-room-chatinput-styleselector-component"],
                        ["src", "./assets/images/bottombar/bubble-select.png", 1, "bubble-select-box", 3, "click"],
                        [1, "nitro-chatstyle-selector", 3, "bringToTop", "ngClass"],
                        [1, "grid-container", "w-100"],
                        [1, "grid-items", "grid-3"],
                        ["class", "d-flex flex-column item-detail justify-content-center align-items-center", 4, "ngFor", "ngForOf"],
                        [1, "d-flex", "flex-column", "item-detail", "justify-content-center", "align-items-center"],
                        [1, "d-flex", "detail-info", "rounded", "justify-content-center", "align-items-center", 3, "ngClass"],
                        [1, "bubble-container"],
                        [3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "img", 1), i.jc("click", (function() {
                            return e.toggleSelector()
                        })), i.Yb(), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Zb(4, "div", 4), i.Rc(5, UE, 5, 6, "div", 5), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngClass", i.xc(2, DE, e.showStyles)), i.Gb(3), i.tc("ngForOf", e.styleIds))
                    },
                    directives: [CE, hp.l, hp.m],
                    encapsulation: 2
                }), t
            })();
            const wE = ["chatInputView"];
            let LE = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this.ngZone = t, this.selectedUsername = "", this.floodBlocked = !1, this.lastContent = "", this.isTyping = !1, this.typingStartedSent = !1, this.typingTimer = null, this.idleTimer = null, this.currentStyle = -1, this.needsStyleUpdate = !1, this._chatModeIdWhisper = null, this._chatModeIdShout = null, this._chatModeIdSpeak = null, this._maxChatLength = 0, this.onKeyDownEvent = this.onKeyDownEvent.bind(this), this.onInputMouseDownEvent = this.onInputMouseDownEvent.bind(this), this.onInputChangeEvent = this.onInputChangeEvent.bind(this), this.onRoomWidgetRoomObjectUpdateEvent = this.onRoomWidgetRoomObjectUpdateEvent.bind(this), this.onRoomWidgetUpdateInfostandUserEvent = this.onRoomWidgetUpdateInfostandUserEvent.bind(this), this.onRoomWidgetChatInputContentUpdateEvent = this.onRoomWidgetChatInputContentUpdateEvent.bind(this), this.onRoomWidgetFloodControlEvent = this.onRoomWidgetFloodControlEvent.bind(this), this.onIdleTimerComplete = this.onIdleTimerComplete.bind(this), this.onTypingTimerComplete = this.onTypingTimerComplete.bind(this)
                    }
                    ngOnInit() {
                        this._chatModeIdWhisper = cp.instance.getLocalization("widgets.chatinput.mode.whisper"), this._chatModeIdShout = cp.instance.getLocalization("widgets.chatinput.mode.shout"), this._chatModeIdSpeak = cp.instance.getLocalization("widgets.chatinput.mode.speak"), this._maxChatLength = cp.instance.getConfiguration("chat.input.maxlength", 100)
                    }
                    ngAfterViewInit() {
                        this.ngZone.runOutsideAngular(() => {
                            document.body.addEventListener("keydown", this.onKeyDownEvent), this.inputView && (this.inputView.addEventListener("mousedown", this.onInputMouseDownEvent), this.inputView.addEventListener("input", this.onInputChangeEvent))
                        })
                    }
                    ngOnDestroy() {
                        this.ngZone.runOutsideAngular(() => {
                            document.body.removeEventListener("keydown", this.onKeyDownEvent), this.inputView && (this.inputView.removeEventListener("mousedown", this.onInputMouseDownEvent), this.inputView.removeEventListener("input", this.onInputChangeEvent))
                        })
                    }
                    registerUpdateEvents(t) {
                        t && (t.addEventListener(Rp.OBJECT_DESELECTED, this.onRoomWidgetRoomObjectUpdateEvent), t.addEventListener(vb.PEER, this.onRoomWidgetUpdateInfostandUserEvent), t.addEventListener(Sb.RWWCIDE_CHAT_INPUT_CONTENT, this.onRoomWidgetChatInputContentUpdateEvent), t.addEventListener(AE.RWFCE_FLOOD_CONTROL, this.onRoomWidgetFloodControlEvent), super.registerUpdateEvents(t))
                    }
                    unregisterUpdateEvents(t) {
                        t && (t.removeEventListener(Rp.OBJECT_DESELECTED, this.onRoomWidgetRoomObjectUpdateEvent), t.removeEventListener(vb.PEER, this.onRoomWidgetUpdateInfostandUserEvent), t.removeEventListener(Sb.RWWCIDE_CHAT_INPUT_CONTENT, this.onRoomWidgetChatInputContentUpdateEvent), t.removeEventListener(AE.RWFCE_FLOOD_CONTROL, this.onRoomWidgetFloodControlEvent))
                    }
                    onRoomWidgetRoomObjectUpdateEvent(t) {
                        this.selectedUsername = ""
                    }
                    onRoomWidgetUpdateInfostandUserEvent(t) {
                        t && (this.selectedUsername = t.name)
                    }
                    onRoomWidgetChatInputContentUpdateEvent(t) {
                        if (t) switch (t._Str_23621) {
                            case Sb.WHISPER:
                                {
                                    const e = cp.instance.getLocalization("widgets.chatinput.mode.whisper");
                                    return void(this.inputView.value = e + " " + t.userName + " ")
                                }
                            case Sb.SHOUT:
                                return
                        }
                    }
                    onRoomWidgetFloodControlEvent(t) {}
                    sendChat(t, e, s = "", i = 0) {
                        !this.floodBlocked && this.messageListener && (this.chatInputView.nativeElement.parentElement.dataset.value = this.chatInputView.nativeElement.value = "", this.messageListener.processWidgetMessage(new xp(xp.MESSAGE_CHAT, t, e, s, i)))
                    }
                    onChange(t) {}
                    onKeyDownEvent(t) {
                        if (!t) return;
                        if (this.anotherInputHasFocus()) return;
                        document.activeElement !== (this.chatInputView && this.chatInputView.nativeElement) && this.setInputFocus();
                        const e = t.shiftKey;
                        switch (t.keyCode) {
                            case 32:
                                return void this.checkSpecialKeywordForInput();
                            case 13:
                                return void this.sendChatFromInputField(e);
                            case 8:
                                if (this.inputView) {
                                    const t = this.inputView.value.split(" ");
                                    t[0] === this._chatModeIdWhisper && 3 === t.length && "" === t[2] && (this.inputView.value = "", this.lastContent = "")
                                }
                                return;
                            default:
                                return
                        }
                    }
                    onInputMouseDownEvent(t) {
                        this.setInputFocus()
                    }
                    onInputChangeEvent(t) {
                        const e = t.target;
                        if (!e) return;
                        const s = e.value;
                        s.length ? (this.lastContent = s, this.isTyping || (this.isTyping = !0, this.startTypingTimer()), this.startIdleTimer()) : (this.isTyping = !1, this.startTypingTimer())
                    }
                    onStyleSelected(t) {
                        t !== this.currentStyle && (this.currentStyle = t, this.needsStyleUpdate = !0)
                    }
                    sendChatFromInputField(t = !1) {
                        if (!this.inputView || "" === this.inputView.value) return;
                        let e = t ? xp.CHAT_SHOUT : xp.CHAT_DEFAULT,
                            s = this.inputView.value;
                        const i = s.split(" ");
                        let n = "",
                            r = "";
                        switch (i[0]) {
                            case this._chatModeIdWhisper:
                                e = xp.CHAT_WHISPER, n = i[1], r = this._chatModeIdWhisper + " " + n + " ", i.shift(), i.shift();
                                break;
                            case this._chatModeIdShout:
                                e = xp.CHAT_SHOUT, i.shift();
                                break;
                            case this._chatModeIdSpeak:
                                e = xp.CHAT_DEFAULT, i.shift()
                        }
                        s = i.join(" "), this.typingTimer && this.resetTypingTimer(), this.idleTimer && this.resetIdleTimer(), s.length <= this._maxChatLength && this.sendChat(s, e, n, this.currentStyle), this.isTyping = !1, this.typingStartedSent && this.sendTypingMessage(), this.typingStartedSent = !1, this.inputView.value = r, this.lastContent = r
                    }
                    sendTypingMessage() {
                        !this.floodBlocked && this.messageListener && this.messageListener.processWidgetMessage(new Fp(this.isTyping))
                    }
                    anotherInputHasFocus() {
                        const t = document.activeElement;
                        return !(!t || this.chatInputView && this.chatInputView.nativeElement && this.chatInputView.nativeElement === t || !(t instanceof HTMLInputElement || t instanceof HTMLTextAreaElement))
                    }
                    setInputFocus() {
                        const t = this.chatInputView && this.chatInputView.nativeElement;
                        t && (t.focus(), t.setSelectionRange(2 * t.value.length, 2 * t.value.length))
                    }
                    checkSpecialKeywordForInput() {
                        const t = this.chatInputView && this.chatInputView.nativeElement || null;
                        t && "" !== t.value && t.value === this._chatModeIdWhisper && 0 !== this.selectedUsername.length && (t.value = `${t.value} ${this.selectedUsername}`)
                    }
                    startIdleTimer() {
                        this.resetIdleTimer(), this.idleTimer = setTimeout(this.onIdleTimerComplete, 1e4)
                    }
                    resetIdleTimer() {
                        this.idleTimer && (clearTimeout(this.idleTimer), this.idleTimer = null)
                    }
                    onIdleTimerComplete() {
                        this.isTyping && (this.typingStartedSent = !1), this.isTyping = !1, this.sendTypingMessage()
                    }
                    startTypingTimer() {
                        this.resetTypingTimer(), this.typingTimer = setTimeout(this.onTypingTimerComplete, 1e3)
                    }
                    resetTypingTimer() {
                        this.typingTimer && (clearTimeout(this.typingTimer), this.typingTimer = null)
                    }
                    onTypingTimerComplete() {
                        this.isTyping && (this.typingStartedSent = !0), this.sendTypingMessage()
                    }
                    get inputMaxLength() {
                        return this._maxChatLength
                    }
                    get inputView() {
                        return this.chatInputView && this.chatInputView.nativeElement || null
                    }
                    get handler() {
                        return this.widgetHandler
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-chatinput-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(wE, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.chatInputView = t.first)
                        }
                    },
                    features: [i.Db],
                    decls: 6,
                    vars: 4,
                    consts: [
                        ["id", "bottom_chat-input-box"],
                        [1, "bottom-bar-chat"],
                        ["type", "text", 1, "chat-box", 3, "placeholder", "maxLength", "input"],
                        ["chatInputView", ""],
                        [3, "styleSelected"]
                    ],
                    template: function(t, e) {
                        if (1 & t) {
                            const t = i.ac();
                            i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "input", 2, 3), i.jc("input", (function() {
                                i.Gc(t);
                                const e = i.Dc(3);
                                return e.parentElement.dataset.value = e.value
                            })), i.nc(4, "translate"), i.Yb(), i.Yb(), i.Zb(5, "nitro-room-chatinput-styleselector-component", 4), i.jc("styleSelected", (function(t) {
                                return e.onStyleSelected(t)
                            })), i.Yb(), i.Yb()
                        }
                        2 & t && (i.Gb(2), i.uc("placeholder", i.oc(4, 2, "widgets.chatinput.default")), i.tc("maxLength", e.inputMaxLength))
                    },
                    directives: [NE],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            var xE = s("XNiG"),
                PE = s("xgIS"),
                FE = s("eIep"),
                GE = s("lJxs"),
                YE = s("1G5W");
            let kE = (() => {
                class t {
                    constructor(t, e, s) {
                        this._viewContainerRef = t, this._elementRef = e, this._ngZone = s, this.dragHandle = ".drag-handler", this.center = !0, this.noMemory = !1, this._name = null, this._target = null, this._handle = null, this._delta = {
                            x: 0,
                            y: 0
                        }, this._offset = {
                            x: 0,
                            y: 0
                        }, this._destroy = new xE.a
                    }
                    ngAfterViewInit() {
                        this._name = this._viewContainerRef._hostTNode.classesWithoutHost;
                        const e = this._elementRef.nativeElement;
                        if (!e) return;
                        this._handle = this.dragHandle ? e.querySelector(this.dragHandle) : e, this._target = this.dragTarget ? e.querySelector(this.dragTarget) : e, this._handle && (this._handle.classList.add("header-draggable"), this._handle.parentElement.classList.add("header-draggable")), this.center && (e.style.top = `calc(50vh - ${e.offsetHeight/2}px)`, e.style.left = `calc(50vw - ${e.offsetWidth/2}px)`);
                        const s = t.POS_MEMORY.get(this._name);
                        s && (this._offset.x = s.offset.x, this._offset.y = s.offset.y, this._delta.x = s.delta.x, this._delta.y = s.delta.y, this.translate()), this.setupEvents()
                    }
                    ngOnDestroy() {
                        this._handle && (this._handle.classList.remove("header-draggable"), this._handle.parentElement.classList.remove("header-draggable")), this._destroy.next()
                    }
                    setupEvents() {
                        this._ngZone.runOutsideAngular(() => {
                            const e = Object(PE.a)(this._handle, "mousedown"),
                                s = Object(PE.a)(document, "mousemove"),
                                i = Object(PE.a)(document, "mouseup");
                            e.pipe(Object(FE.a)(t => {
                                const e = t.clientX,
                                    n = t.clientY;
                                return s.pipe(Object(GE.a)(t => {
                                    t.preventDefault(), this._delta = {
                                        x: t.clientX - e,
                                        y: t.clientY - n
                                    }
                                }), Object(YE.a)(i))
                            }), Object(YE.a)(this._destroy)).subscribe(() => {
                                0 === this._delta.x && 0 === this._delta.y || this.translate()
                            }), i.pipe(Object(YE.a)(this._destroy)), i.subscribe(() => {
                                this._offset.x += this._delta.x, this._offset.y += this._delta.y, this._delta = {
                                    x: 0,
                                    y: 0
                                }, this.noMemory || t.POS_MEMORY.set(this._name, {
                                    offset: {
                                        x: this._offset.x,
                                        y: this._offset.y
                                    },
                                    delta: {
                                        x: this._delta.x,
                                        y: this._delta.y
                                    }
                                })
                            })
                        })
                    }
                    translate() {
                        this._target.style.transform = `translate(${this._offset.x+this._delta.x}px, ${this._offset.y+this._delta.y}px)`
                    }
                }
                return t.POS_MEMORY = new Map, t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.W), i.Ub(i.o), i.Ub(i.E))
                }, t.\u0275dir = i.Pb({
                    type: t,
                    selectors: [
                        ["", "draggable", ""]
                    ],
                    inputs: {
                        dragHandle: "dragHandle",
                        dragTarget: "dragTarget",
                        center: "center",
                        noMemory: "noMemory"
                    }
                }), t
            })();
            var VE = s("3Pt+");
            let ZE = (() => {
                class t {
                    transform(t, e) {
                        return t ? e ? t.filter(t => t.name.toLocaleLowerCase().includes(e.toLocaleLowerCase())) : t : []
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275pipe = i.Tb({
                    name: "roomObjectItemSearch",
                    type: t,
                    pure: !0
                }), t
            })();

            function jE(t, e) {
                if (1 & t && (i.Zb(0, "p", 12), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.Uc(t.id)
                }
            }

            function BE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 9), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit,
                            n = e.index;
                        return i.mc(2).selectItem(s, n)
                    })), i.Zb(1, "p", 10), i.Tc(2), i.Yb(), i.Rc(3, jE, 2, 1, "p", 11), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = e.index,
                        n = i.mc(2);
                    i.tc("ngClass", n.selectedItemIndex == s ? "flbactive" : ""), i.Gb(2), i.Uc(t.name), i.Gb(1), i.tc("ngIf", "widget.chooser.furni.title" === n.title)
                }
            }

            function HE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "input", 6), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().searchValue = e
                    })), i.nc(8, "translate"), i.Yb(), i.Zb(9, "div", 7), i.Rc(10, BE, 4, 3, "div", 8), i.nc(11, "roomObjectItemSearch"), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 4, t.title)), i.Gb(4), i.uc("placeholder", i.oc(8, 6, "generic.search")), i.tc("ngModel", t.searchValue), i.Gb(3), i.tc("ngForOf", i.pc(11, 8, t.items, t.searchValue))
                }
            }
            let WE = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this._ngZone = t, this._visible = !1, this._items = [], this._title = null, this._timeout = null, this._selectedItemIndex = -1
                    }
                    ngOnDestroy() {
                        this.clearTimeout()
                    }
                    hide() {
                        this._visible = !1
                    }
                    selectItem(t, e) {
                        t && this.items && this.items.length && (this._selectedItemIndex = e, this._ngZone.runOutsideAngular(() => this.messageListener.processWidgetMessage(new Up(Up.SELECT_OBJECT, t.id, t.category))))
                    }
                    clearTimeout() {
                        this._timeout && (clearTimeout(this._timeout), this._timeout = null)
                    }
                    get visible() {
                        return this._visible
                    }
                    set visible(t) {
                        this._visible = t
                    }
                    get title() {
                        return this._title
                    }
                    set title(t) {
                        this._title = t
                    }
                    get items() {
                        return this._items
                    }
                    set items(t) {
                        this._items = t
                    }
                    get selectedItemIndex() {
                        return this._selectedItemIndex
                    }
                    get searchValue() {
                        return this._searchValue
                    }
                    set searchValue(t) {
                        this._selectedItemIndex = -1, this._searchValue = t
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-chooser-base-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "furnisearch-corelo", 3, "bringToTop", "draggable", 4, "ngIf"],
                        [1, "furnisearch-corelo", 3, "bringToTop", "draggable"],
                        [1, "drag-handler", "fshead"],
                        [1, "fs-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "furni-searchbox"],
                        ["type", "text", 1, "furnisearch", 3, "ngModel", "placeholder", "ngModelChange"],
                        [1, "fslist"],
                        ["class", "furni-list-box ", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [1, "furni-list-box", 3, "ngClass", "click"],
                        [1, "fs-name"],
                        ["class", "fs-nameid", 4, "ngIf"],
                        [1, "fs-nameid"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, HE, 12, 11, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, VE.b, VE.j, VE.l, hp.m, hp.l],
                    pipes: [tE, ZE],
                    encapsulation: 2
                }), t
            })();

            function zE(t, e) {
                if (1 & t && (i.Zb(0, "p", 12), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.Uc(t.id)
                }
            }

            function KE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 9), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit,
                            n = e.index;
                        return i.mc(2).selectItem(s, n)
                    })), i.Zb(1, "p", 10), i.Tc(2), i.Yb(), i.Rc(3, zE, 2, 1, "p", 11), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = e.index,
                        n = i.mc(2);
                    i.tc("ngClass", n.selectedItemIndex == s ? "flbactive" : ""), i.Gb(2), i.Uc(t.name), i.Gb(1), i.tc("ngIf", "widget.chooser.furni.title" === n.title)
                }
            }

            function XE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "input", 6), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().searchValue = e
                    })), i.nc(8, "translate"), i.Yb(), i.Zb(9, "div", 7), i.Rc(10, KE, 4, 3, "div", 8), i.nc(11, "roomObjectItemSearch"), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 4, t.title)), i.Gb(4), i.uc("placeholder", i.oc(8, 6, "generic.search")), i.tc("ngModel", t.searchValue), i.Gb(3), i.tc("ngForOf", i.pc(11, 8, t.items, t.searchValue))
                }
            }
            let qE = (() => {
                class t extends WE {
                    constructor(t) {
                        super(t), this._ngZone = t, this._title = "widget.chooser.furni.title", this.onRoomWidgetChooserContentEvent = this.onRoomWidgetChooserContentEvent.bind(this), this.onRoomWidgetRoomObjectUpdateEvent = this.onRoomWidgetRoomObjectUpdateEvent.bind(this)
                    }
                    registerUpdateEvents(t) {
                        t && (t.addEventListener(Xp.RWCCE_FURNI_CHOOSER_CONTENT, this.onRoomWidgetChooserContentEvent), t.addEventListener(Rp.FURNI_ADDED, this.onRoomWidgetRoomObjectUpdateEvent), t.addEventListener(Rp.FURNI_REMOVED, this.onRoomWidgetRoomObjectUpdateEvent), super.registerUpdateEvents(t))
                    }
                    unregisterUpdateEvents(t) {
                        t && (t.removeEventListener(Xp.RWCCE_FURNI_CHOOSER_CONTENT, this.onRoomWidgetChooserContentEvent), t.removeEventListener(Rp.FURNI_ADDED, this.onRoomWidgetRoomObjectUpdateEvent), t.removeEventListener(Rp.FURNI_REMOVED, this.onRoomWidgetRoomObjectUpdateEvent), super.unregisterUpdateEvents(t))
                    }
                    onRoomWidgetChooserContentEvent(t) {
                        t && this._ngZone.run(() => {
                            this._items = t.items, this.visible = !0
                        })
                    }
                    onRoomWidgetRoomObjectUpdateEvent(t) {
                        t && this.visible && (this.clearTimeout(), this._timeout = setTimeout(() => {
                            this.messageListener.processWidgetMessage(new Gp(Gp.RWRWM_FURNI_CHOOSER))
                        }, 100))
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-chooser-furni"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "furnisearch-corelo", 3, "bringToTop", "draggable", 4, "ngIf"],
                        [1, "furnisearch-corelo", 3, "bringToTop", "draggable"],
                        [1, "drag-handler", "fshead"],
                        [1, "fs-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "furni-searchbox"],
                        ["type", "text", 1, "furnisearch", 3, "ngModel", "placeholder", "ngModelChange"],
                        [1, "fslist"],
                        ["class", "furni-list-box ", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [1, "furni-list-box", 3, "ngClass", "click"],
                        [1, "fs-name"],
                        ["class", "fs-nameid", 4, "ngIf"],
                        [1, "fs-nameid"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, XE, 12, 11, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, VE.b, VE.j, VE.l, hp.m, hp.l],
                    pipes: [tE, ZE],
                    encapsulation: 2
                }), t
            })();

            function JE(t, e) {
                if (1 & t && (i.Zb(0, "p", 12), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.Uc(t.id)
                }
            }

            function QE(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 9), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit,
                            n = e.index;
                        return i.mc(2).selectItem(s, n)
                    })), i.Zb(1, "p", 10), i.Tc(2), i.Yb(), i.Rc(3, JE, 2, 1, "p", 11), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = e.index,
                        n = i.mc(2);
                    i.tc("ngClass", n.selectedItemIndex == s ? "flbactive" : ""), i.Gb(2), i.Uc(t.name), i.Gb(1), i.tc("ngIf", "widget.chooser.furni.title" === n.title)
                }
            }

            function $E(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "input", 6), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().searchValue = e
                    })), i.nc(8, "translate"), i.Yb(), i.Zb(9, "div", 7), i.Rc(10, QE, 4, 3, "div", 8), i.nc(11, "roomObjectItemSearch"), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 4, t.title)), i.Gb(4), i.uc("placeholder", i.oc(8, 6, "generic.search")), i.tc("ngModel", t.searchValue), i.Gb(3), i.tc("ngForOf", i.pc(11, 8, t.items, t.searchValue))
                }
            }
            let tf = (() => {
                class t extends WE {
                    constructor(t) {
                        super(t), this._ngZone = t, this.title = "widget.chooser.user.title", this.onRoomWidgetChooserContentEvent = this.onRoomWidgetChooserContentEvent.bind(this), this.onRoomWidgetRoomObjectUpdateEvent = this.onRoomWidgetRoomObjectUpdateEvent.bind(this)
                    }
                    registerUpdateEvents(t) {
                        null != t && (t.addEventListener(Xp.RWCCE_USER_CHOOSER_CONTENT, this.onRoomWidgetChooserContentEvent), t.addEventListener(Rp.USER_REMOVED, this.onRoomWidgetRoomObjectUpdateEvent.bind(this)), t.addEventListener(Rp.USER_ADDED, this.onRoomWidgetRoomObjectUpdateEvent.bind(this)), super.registerUpdateEvents(t))
                    }
                    unregisterUpdateEvents(t) {
                        null != t && (t.removeEventListener(Xp.RWCCE_USER_CHOOSER_CONTENT, this.onRoomWidgetChooserContentEvent), t.removeEventListener(Rp.USER_REMOVED, this.onRoomWidgetRoomObjectUpdateEvent.bind(this)), t.removeEventListener(Rp.USER_ADDED, this.onRoomWidgetRoomObjectUpdateEvent.bind(this)), super.unregisterUpdateEvents(t))
                    }
                    onRoomWidgetChooserContentEvent(t) {
                        t && this._ngZone.run(() => {
                            this._items = t.items, this.visible = !0
                        })
                    }
                    onRoomWidgetRoomObjectUpdateEvent(t) {
                        this.visible && (this.clearTimeout(), this._timeout = setTimeout(() => {
                            this.messageListener.processWidgetMessage(new Gp(Gp.RWRWM_USER_CHOOSER))
                        }, 100))
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-chooser-user"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "furnisearch-corelo", 3, "bringToTop", "draggable", 4, "ngIf"],
                        [1, "furnisearch-corelo", 3, "bringToTop", "draggable"],
                        [1, "drag-handler", "fshead"],
                        [1, "fs-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "furni-searchbox"],
                        ["type", "text", 1, "furnisearch", 3, "ngModel", "placeholder", "ngModelChange"],
                        [1, "fslist"],
                        ["class", "furni-list-box ", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [1, "furni-list-box", 3, "ngClass", "click"],
                        [1, "fs-name"],
                        ["class", "fs-nameid", 4, "ngIf"],
                        [1, "fs-nameid"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, $E, 12, 11, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, VE.b, VE.j, VE.l, hp.m, hp.l],
                    pipes: [tE, ZE],
                    encapsulation: 2
                }), t
            })();
            var ef = s("mgaL");

            function sf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3, "Background Toner"), i.Yb(), i.Zb(4, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(5, "div", 5), i.Zb(6, "div", 6), i.Zb(7, "p", 7), i.Tc(8, "Choose the color for you room background"), i.Yb(), i.Vb(9, "div", 8), i.Yb(), i.Zb(10, "div", 9), i.Zb(11, "p", 10), i.Tc(12), i.nc(13, "translate"), i.Yb(), i.Zb(14, "div", 11), i.Zb(15, "ngx-slider", 12), i.jc("valueChange", (function() {
                        return i.Gc(t), i.mc().onSliderChange()
                    }))("valueChange", (function(e) {
                        return i.Gc(t), i.mc().hue = e
                    })), i.Yb(), i.Yb(), i.Zb(16, "p", 10), i.Tc(17), i.nc(18, "translate"), i.Yb(), i.Zb(19, "div", 11), i.Zb(20, "ngx-slider", 12), i.jc("valueChange", (function() {
                        return i.Gc(t), i.mc().onSliderChange()
                    }))("valueChange", (function(e) {
                        return i.Gc(t), i.mc().saturation = e
                    })), i.Yb(), i.Yb(), i.Zb(21, "p", 10), i.Tc(22), i.nc(23, "translate"), i.Yb(), i.Zb(24, "div", 11), i.Zb(25, "ngx-slider", 12), i.jc("valueChange", (function() {
                        return i.Gc(t), i.mc().onSliderChange()
                    }))("valueChange", (function(e) {
                        return i.Gc(t), i.mc().lightness = e
                    })), i.Yb(), i.Yb(), i.Zb(26, "div", 13), i.Zb(27, "div", 14), i.jc("click", (function() {
                        return i.Gc(t), i.mc().handleButton("apply")
                    })), i.Tc(28), i.nc(29, "translate"), i.Yb(), i.Zb(30, "div", 14), i.jc("click", (function() {
                        return i.Gc(t), i.mc().handleButton("on_off")
                    })), i.Tc(31), i.nc(32, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(12), i.Uc(i.oc(13, 11, "widget.backgroundcolor.hue")), i.Gb(3), i.tc("options", t.delaySliderOptions)("value", t.hue), i.Gb(2), i.Uc(i.oc(18, 13, "widget.backgroundcolor.saturation")), i.Gb(3), i.tc("options", t.delaySliderOptions)("value", t.saturation), i.Gb(2), i.Uc(i.oc(23, 15, "widget.backgroundcolor.lightness")), i.Gb(3), i.tc("options", t.delaySliderOptions)("value", t.lightness), i.Gb(3), i.Uc(i.oc(29, 17, "widget.backgroundcolor.button.apply")), i.Gb(3), i.Uc(i.oc(32, 19, "widget.backgroundcolor.button.on"))
                }
            }
            let nf = (() => {
                    class t extends qb {
                        constructor(t) {
                            super(), this._ngZone = t, this._furniId = -1, this._visible = !1, this.saturation = 0, this.hue = 0, this.lightness = 0, this.hsl = {
                                h: 0,
                                s: 0,
                                l: 0
                            }
                        }
                        open(t, e, s, i) {
                            this._ngZone.run(() => {
                                this._furniId = t, this._visible = !0, this.hue = Math.max(e, 0), this.saturation = Math.max(s, 0), this.lightness = Math.max(i, 0), console.log(this.hue, this.hue / 255 * 360, this.saturation, this.lightness), this.hsl = {
                                    h: this.hue / 255 * 360,
                                    s: this.saturation / 255,
                                    l: this.lightness / 255
                                }, console.log(this.hsl)
                            })
                        }
                        hide() {
                            this._visible = !1, this._furniId = -1
                        }
                        handleChangeComplete(t) {
                            if (!t) return;
                            const e = Em._Str_22130(parseInt(t.color.hex.replace("#", ""), 16));
                            this.hue = e >> 16 & 255, this.saturation = e >> 8 & 255, this.lightness = 255 & e
                        }
                        handleButton(t) {
                            switch (t) {
                                case "apply":
                                    this.handler.container.connection.send(new gh(this._furniId, this.hue, this.saturation, this.lightness));
                                    break;
                                case "on_off":
                                    this.handler.container.connection.send(new ch(this._furniId))
                            }
                        }
                        get handler() {
                            return this.widgetHandler
                        }
                        get visible() {
                            return this._visible
                        }
                        get delaySliderOptions() {
                            return {
                                floor: 0,
                                ceil: 255,
                                step: 1,
                                hidePointerLabels: !0,
                                hideLimitLabels: !0
                            }
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-room-furniture-backgroundcolor-component"]
                        ],
                        features: [i.Db],
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["class", "backgroundtoner", 3, "bringToTop", "draggable", 4, "ngIf"],
                            [1, "backgroundtoner", 3, "bringToTop", "draggable"],
                            [1, "bthead", "drag-handler"],
                            [1, "bthood"],
                            [1, "old-kapat", 3, "click"],
                            [1, "bt-bodybox"],
                            [1, "btdescbox"],
                            [1, "btdesc-txt"],
                            [1, "bg-color-info", 2, "background", "#309451"],
                            [1, "bt-control"],
                            [1, "bt-selecttxt"],
                            [1, "bgedit-slider"],
                            [3, "options", "value", "valueChange"],
                            [1, "d-flex", "flex-row", "justify-content-between", "btbuttonbox"],
                            [1, "bt-buton", 3, "click"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, sf, 33, 21, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        directives: [hp.n, CE, kE, ef.b],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                rf = (() => {
                    class t {}
                    return t.DEFAULT = 1, t.WALL_PAPER = 2, t.FLOOR = 3, t.LANDSCAPE = 4, t.POST_IT = 5, t.POSTER = 6, t.SOUND_SET = 7, t.TRAX_SONG = 8, t.PRESENT = 9, t.ECOTRON_BOX = 10, t.TROPHY = 11, t.CREDIT_FURNI = 12, t.PET_SHAMPOO = 13, t.PET_CUSTOM_PART = 14, t.PET_CUSTOM_PART_SHAMPOO = 15, t.PET_SADDLE = 16, t.GUILD_FURNI = 17, t.GAME_FURNI = 18, t.MONSTERPLANT_SEED = 19, t.MONSTERPLANT_REVIVAL = 20, t.MONSTERPLANT_REBREED = 21, t.MONSTERPLANT_FERTILIZE = 22, t.FIGURE_PURCHASABLE_SET = 23, t
                })();
            const of = ["nitro-avatar-image", ""];

            function af(t, e) {
                if (1 & t && i.Vb(0, "img", 1), 2 & t) {
                    const t = i.mc();
                    i.Jb("avatar-image scale-", t.scale, ""), i.tc("src", t.avatarUrl, i.Ic)
                }
            }
            let cf = (() => {
                class t {
                    constructor(t) {
                        this._ngZone = t, this.figure = "", this.gender = "M", this.headOnly = !1, this.direction = 0, this.scale = 1, this._avatarImageCache = new x, this.avatarUrl = null, this.disposed = !1, this.needsUpdate = !0
                    }
                    ngOnInit() {
                        this.needsUpdate && this.buildAvatar()
                    }
                    ngOnDestroy() {
                        this.dispose()
                    }
                    ngOnChanges(t) {
                        const e = t.figure;
                        e && e.previousValue !== e.currentValue && (this.needsUpdate = !0);
                        const s = t.gender;
                        s && s.previousValue !== s.currentValue && (this.needsUpdate = !0);
                        const i = t.headOnly;
                        i && i.previousValue !== i.currentValue && (this.needsUpdate = !0);
                        const n = t.direction;
                        n && n.previousValue !== n.currentValue && (this.needsUpdate = !0), this.needsUpdate && this.buildAvatar()
                    }
                    dispose() {}
                    resetFigure(t) {
                        this._avatarImageCache.remove(this.getAvatarBuildString()), this.buildAvatar()
                    }
                    buildAvatar() {
                        this._ngZone.runOutsideAngular(() => {
                            this.needsUpdate = !1;
                            const t = this.getUserImageUrl();
                            t && this._ngZone.run(() => this.avatarUrl = t)
                        })
                    }
                    getUserImageUrl() {
                        const t = this.getAvatarBuildString();
                        let e = this._avatarImageCache.getValue(t);
                        if (!e) {
                            const s = cp.instance.avatar.createAvatarImage(this.figure, dt.LARGE, this.gender, this, null);
                            if (s) {
                                let t = It.FULL;
                                this.headOnly && (t = It.HEAD), s.setDirection(t, this.direction);
                                const i = s.getCroppedImage(t);
                                i && (e = i.src), s.dispose()
                            }
                            e && this.putInCache(t, e)
                        }
                        return e
                    }
                    putInCache(e, s) {
                        this._avatarImageCache.length === t.MAX_CACHE_SIZE && this._avatarImageCache.remove(this._avatarImageCache.getKey(0)), this._avatarImageCache.add(e, s)
                    }
                    getAvatarBuildString() {
                        return `${this.figure}:${this.gender}:${this.direction}:${this.headOnly}`
                    }
                }
                return t.MAX_CACHE_SIZE = 10, t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-avatar-image", ""]
                    ],
                    inputs: {
                        figure: "figure",
                        gender: "gender",
                        headOnly: "headOnly",
                        direction: "direction",
                        scale: "scale"
                    },
                    features: [i.Eb],
                    attrs: of ,
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "class", "src", 4, "ngIf"],
                        [3, "src"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, af, 1, 4, "img", 0), 2 & t && i.tc("ngIf", e.avatarUrl)
                    },
                    directives: [hp.n],
                    encapsulation: 2
                }), t
            })();

            function _f(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.Vb(8, "div", 7), i.Yb(), i.Zb(9, "div", 8), i.Zb(10, "p", 9), i.Zb(11, "u", 10), i.Tc(12, "Merhaba yeni bir k\u0131yafet a\xe7mak \xfczeresin!"), i.Yb(), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "p", 11), i.Tc(16), i.nc(17, "translate"), i.Yb(), i.Zb(18, "div", 12), i.Zb(19, "div", 13), i.jc("click", (function() {
                        return i.Gc(t), i.mc().handleButton("use")
                    })), i.Zb(20, "p", 14), i.Tc(21), i.nc(22, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 6, "useproduct.widget.title.bind_clothing")), i.Gb(5), i.tc("figure", t.newFigureString)("direction", 2), i.Gb(5), i.Uc(i.oc(14, 8, "useproduct.widget.text.bind_clothing")), i.Gb(3), i.Uc(i.oc(17, 10, "useproduct.widget.info.bind_clothing")), i.Gb(5), i.Uc(i.oc(22, 12, "useproduct.widget.bind_clothing"))
                }
            }
            let hf = (() => {
                    class t {
                        constructor() {
                            this.contextWidget = null, this.objectId = null, this.visible = !1, this._furniData = null, this._requestObjectId = -1, this.caption = null
                        }
                        hide() {
                            this.contextWidget && this.contextWidget.closeClothing()
                        }
                        open(t) {
                            if (!this.contextWidget) return;
                            const e = this.contextWidget.handler.container.roomEngine.getRoomObject(this.contextWidget.handler.container.roomSession.roomId, t, V.FLOOR);
                            if (!e) return;
                            this._furniData = this.contextWidget.handler.getFurniData(e), this._requestObjectId = e.id;
                            let s = -1;
                            const i = [],
                                n = this.contextWidget.handler.container.sessionDataManager.gender;
                            switch (this._furniData.specialType) {
                                case rf.FIGURE_PURCHASABLE_SET:
                                    {
                                        s = 0;
                                        const t = this._furniData.customParams.split(",");
                                        for (let e = 0; e < t.length; e++) {
                                            const s = Number.parseInt(t[e]);
                                            this.contextWidget.handler.container.avatarRenderManager.isValidFigureSetForGender(s, n) && i.push(s)
                                        }
                                    }
                            }
                            this.newFigureString = this.contextWidget.handler.container.avatarRenderManager.getFigureStringWithFigureIds(this.contextWidget.handler.container.sessionDataManager.figure, n, i), this.contextWidget.inventoryService.hasBoundFigureSetFurniture(this.newFigureString) ? this.contextWidget.handler.container.connection.send(new Gh(n, this.newFigureString)) : this.showWindow(s)
                        }
                        handleButton(t) {
                            switch (t) {
                                case "cancel":
                                    this.hide();
                                    break;
                                case "use":
                                    {
                                        const t = this.contextWidget.handler.container.sessionDataManager.gender;this.contextWidget.handler.container.connection.send(new Pc(this._requestObjectId)),
                                        this.contextWidget.handler.container.connection.send(new Gh(t, this.newFigureString)),
                                        this.hide()
                                    }
                            }
                        }
                        showWindow(t) {
                            this.caption = cp.instance.localization.getValueWithParameter("useproduct.widget.text.bind_clothing", "productName", this._furniData.name), this.visible = !0
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["ng-component"]
                        ],
                        inputs: {
                            contextWidget: "contextWidget",
                            objectId: "objectId"
                        },
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["class", "useclothing", 3, "bringToTop", "draggable", 4, "ngIf"],
                            [1, "useclothing", 3, "bringToTop", "draggable"],
                            [1, "drag-handler", "uchead"],
                            [1, "cha-baslik"],
                            [1, "old-kapat", 3, "click"],
                            [1, "ucbox"],
                            [1, "avatar-view-ucbox"],
                            ["nitro-avatar-image", "", 2, "margin-top", "-8px", "margin-left", "-5px", 3, "figure", "direction"],
                            [1, "uc-rightbox"],
                            [1, "uc-desc"],
                            [1, "uc-uyari"],
                            [1, "uc-desc_not"],
                            [1, "uc-buy"],
                            [1, "ucbuy-button", 3, "click"],
                            [1, "mb-tamam-text"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, _f, 23, 14, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        directives: [hp.n, CE, kE, cf],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                lf = (() => {
                    class t {}
                    return t.FURNI = 1, t.RENTABLE = 2, t.PET = 3, t.BADGE = 4, t.BOT = 5, t.GAMES = 6, t._Str_12463 = [t.FURNI, t.RENTABLE, t.PET, t.BADGE, t.BOT], t
                })();
            class uf {
                constructor(t, e) {
                    this._communication = t, this._inventoryService = e, this._unseenItems = [], this._messages = [], this.registerMessages()
                }
                dispose() {
                    this.unregisterMessages(), this._communication = null, this._unseenItems = null
                }
                registerMessages() {
                    this.unregisterMessages(), this._messages = [new tr(this.onUnseenItemsEvent.bind(this))];
                    for (const t of this._messages) this._communication.registerMessageEvent(t)
                }
                unregisterMessages() {
                    for (const t of this._messages) this._communication.removeMessageEvent(t);
                    this._messages = []
                }
                _Str_8813(t) {
                    return !!this._Str_5621(t) && (delete this._unseenItems[t], this._Str_20981(t), !0)
                }
                _Str_18075(t, e) {
                    if (!this._Str_5621(t)) return !1;
                    const s = this._unseenItems[t];
                    for (const i of e) s.splice(s.indexOf(i), 1);
                    return this._Str_23994(t, e), !0
                }
                _Str_17159(t) {
                    return !this._Str_5621(t) && (delete this._unseenItems[t], this._Str_20981(t), !0)
                }
                _Str_3613(t, e) {
                    return !!this._unseenItems[t] && this._unseenItems[t].indexOf(e) >= 0
                }
                _Str_16745(t, e) {
                    if (!this._unseenItems[t]) return !1;
                    const s = this._unseenItems[t],
                        i = s.indexOf(e);
                    return -1 !== i && (s.splice(i, 1), !0)
                }
                _Str_11239(t) {
                    return this._unseenItems ? this._unseenItems[t] : []
                }
                _Str_5621(t) {
                    return this._unseenItems[t] ? this._unseenItems[t].length : 0
                }
                onUnseenItemsEvent(t) {
                    if (!t) return;
                    const e = t.getParser();
                    if (e) {
                        for (const t of e.categories) {
                            const s = e.getItemsByCategory(t);
                            this._Str_18112(t, s)
                        }
                        this._inventoryService.updateUnseenCount()
                    }
                }
                _Str_18112(t, e) {
                    if (!e) return;
                    let s = this._unseenItems[t];
                    s || (s = [], this._unseenItems[t] = s);
                    for (const i of e) - 1 === s.indexOf(i) && s.push(i)
                }
                _Str_20981(t) {}
                _Str_23994(t, e) {}
            }
            let df = (() => {
                class t {
                    constructor(t, e) {
                        this._settingsService = t, this._ngZone = e, this._messages = [], this._events = null, this._botsController = null, this._furniController = null, this._controller = null, this._petsController = null, this._tradeController = null, this._roomSession = null, this._unseenCount = 0, this._botsVisible = !1, this._furnitureVisible = !1, this._petsVisible = !1, this._tradingVisible = !1, this._figureSetIds = [], this._boundFurnitureNames = [], this._events = new i.q, this._unseenTracker = new uf(cp.instance.communication, this), this._unseenCounts = new Map, this.onRoomSessionEvent = this.onRoomSessionEvent.bind(this), this.registerMessages()
                    }
                    ngOnDestroy() {
                        this.unregisterMessages(), this._unseenTracker && (this._unseenTracker.dispose(), this._unseenTracker = null)
                    }
                    registerMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            cp.instance.roomSessionManager.events.addEventListener(Tl.STARTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Tl.ENDED, this.onRoomSessionEvent), this._messages = [new ui(this.onFigureSetIdsMessageEvent.bind(this))];
                            for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                        })
                    }
                    unregisterMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            cp.instance.roomSessionManager.events.removeEventListener(Tl.STARTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Tl.ENDED, this.onRoomSessionEvent);
                            for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                            this._messages = []
                        })
                    }
                    onRoomSessionEvent(t) {
                        if (t) switch (t.type) {
                            case Tl.STARTED:
                                return void(this._roomSession = t.session);
                            case Tl.ENDED:
                                return this._roomSession = null, void this._ngZone.run(() => this.hideWindow())
                        }
                    }
                    onFigureSetIdsMessageEvent(t) {
                        if (!t) return;
                        const e = t.getParser();
                        e && this._ngZone.run(() => {
                            this._figureSetIds = e.figureSetIds, this._boundFurnitureNames = e.boundsFurnitureNames
                        })
                    }
                    updateUnseenCount() {
                        function t() {
                            let t = 0;
                            const e = this._unseenTracker._Str_5621(lf.FURNI);
                            t += e, this._unseenCounts.set(lf.FURNI, e), this._unseenCount = t
                        }
                        i.E.isInAngularZone() ? t.apply(this) : this._ngZone.run(() => t.apply(this))
                    }
                    updateItemLocking() {
                        this.controller && this.controller.updateItemLocking()
                    }
                    showWindow() {
                        this._settingsService.showInventory()
                    }
                    hideWindow() {
                        this.furniController && (this.furniController.mouseDown = !1), this._settingsService.hideInventory()
                    }
                    hasFigureSetId(t) {
                        return this._figureSetIds.indexOf(t) > -1
                    }
                    hasBoundFigureSetFurniture(t) {
                        return this._boundFurnitureNames.indexOf(t) > -1
                    }
                    get events() {
                        return this._events
                    }
                    get botsController() {
                        return this._botsController
                    }
                    set botsController(t) {
                        this._botsController = t
                    }
                    get furniController() {
                        return this._furniController
                    }
                    set furniController(t) {
                        this._furniController = t
                    }
                    get controller() {
                        return this._controller
                    }
                    set controller(t) {
                        this._controller = t
                    }
                    get petsController() {
                        return this._petsController
                    }
                    set petsController(t) {
                        this._petsController = t
                    }
                    get tradeController() {
                        return this._tradeController
                    }
                    set tradeController(t) {
                        this._tradeController = t
                    }
                    get unseenTracker() {
                        return this._unseenTracker
                    }
                    get roomSession() {
                        return this._roomSession
                    }
                    get unseenCount() {
                        return this._unseenCount
                    }
                    get botsVisible() {
                        return this._botsVisible
                    }
                    set botsVisible(t) {
                        this._botsVisible = t
                    }
                    get furnitureVisible() {
                        return this._furnitureVisible
                    }
                    set furnitureVisible(t) {
                        this._furnitureVisible = t
                    }
                    get petsVisible() {
                        return this._petsVisible
                    }
                    set petsVisible(t) {
                        this._petsVisible = t
                    }
                    get tradingVisible() {
                        return this._tradingVisible
                    }
                    set tradingVisible(t) {
                        this._tradingVisible = t
                    }
                    get figureSetIds() {
                        return this._figureSetIds
                    }
                    get boundFurnitureNames() {
                        return this._boundFurnitureNames
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.gc(_p), i.gc(i.E))
                }, t.\u0275prov = i.Qb({
                    token: t,
                    factory: t.\u0275fac
                }), t
            })();
            const gf = ["purchaseClothing"];
            let mf = (() => {
                class t extends qb {
                    constructor(t, e, s) {
                        super(), this._ngZone = t, this._resolver = e, this.inventoryService = s, this._visible = !1, this._selectedObject = null
                    }
                    registerUpdateEvents(t) {
                        t && super.registerUpdateEvents(t)
                    }
                    unregisterUpdateEvents(t) {
                        t && super.unregisterUpdateEvents(t)
                    }
                    _Str_24748(t) {
                        this._selectedObject = t, this._ngZone.run(() => {
                            this.purchaseClothingContainer.clear();
                            const e = this._resolver.resolveComponentFactory(hf);
                            this._purchaseClothingContainerRef = this.purchaseClothingContainer.createComponent(e), this._purchaseClothingContainerRef.instance.contextWidget = this, this._purchaseClothingContainerRef.instance.open(t.id)
                        })
                    }
                    closeClothing() {
                        this._ngZone.run(() => this.purchaseClothingContainer.clear())
                    }
                    hide() {
                        this._visible = !1
                    }
                    get handler() {
                        return this.widgetHandler
                    }
                    get visible() {
                        return this._visible
                    }
                    set visible(t) {
                        this._visible = t
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E), i.Ub(i.l), i.Ub(df))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-furniture-context-menu-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(gf, !0, i.W), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.purchaseClothingContainer = t.first)
                        }
                    },
                    features: [i.Db],
                    decls: 2,
                    vars: 0,
                    consts: [
                        ["purchaseClothing", ""]
                    ],
                    template: function(t, e) {
                        1 & t && i.Vb(0, "template", null, 0)
                    },
                    encapsulation: 2
                }), t
            })();

            function pf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.Zb(8, "p", 7), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Zb(11, "div", 8), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Zb(12, "u"), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Zb(15, "div", 9), i.Zb(16, "div", 10), i.jc("click", (function() {
                        return i.Gc(t), i.mc().sendRedeem()
                    })), i.Zb(17, "p", 11), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 4, "catalog.redeem.dialog.title")), i.Gb(6), i.Uc(i.qc(10, 6, "widgets.furniture.credit.redeem.value", "value", t.value)), i.Gb(4), i.Uc(i.oc(14, 10, "generic.cancel")), i.Gb(5), i.Uc(i.oc(19, 12, "catalog.redeem.dialog.button.exchange"))
                }
            }
            let bf = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this._ngZone = t, this._objectId = -1, this._value = "0", this._visible = !1, this.onRoomWidgetCreditFurniUpdateEvent = this.onRoomWidgetCreditFurniUpdateEvent.bind(this)
                    }
                    registerUpdateEvents(t) {
                        t && (t.addEventListener(tb.RWCFUE_CREDIT_FURNI_UPDATE, this.onRoomWidgetCreditFurniUpdateEvent), super.registerUpdateEvents(t))
                    }
                    unregisterUpdateEvents(t) {
                        t && (t.removeEventListener(tb.RWCFUE_CREDIT_FURNI_UPDATE, this.onRoomWidgetCreditFurniUpdateEvent), super.unregisterUpdateEvents(t))
                    }
                    onRoomWidgetCreditFurniUpdateEvent(t) {
                        t && (this._objectId = t.objectId, this._ngZone.run(() => {
                            this._value = t.value.toString(), this._visible = !0
                        }))
                    }
                    sendRedeem() {
                        -1 !== this._objectId && (this.messageListener.processWidgetMessage(new eb(eb.RWFCRM_REDEEM, this._objectId)), this.hide())
                    }
                    hide() {
                        this._visible = !1
                    }
                    get handler() {
                        return this.widgetHandler
                    }
                    get visible() {
                        return this._visible
                    }
                    set visible(t) {
                        this._visible = t
                    }
                    get value() {
                        return this._value
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-furniture-credit-compontent"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["id", "kredi-bozdur", 3, "bringToTop", "draggable", 4, "ngIf"],
                        ["id", "kredi-bozdur", 3, "bringToTop", "draggable"],
                        ["id", "coreloha-drag", 1, "drag-handler"],
                        [1, "cha-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "chabox"],
                        [1, "kb-txtbox"],
                        [1, "cha-text"],
                        [1, "mobi-buy-iptal-et", 3, "click"],
                        [1, "mobi-buy-onayla"],
                        [1, "mb-islem-onayla-box", 3, "click"],
                        [1, "mb-tamam-text"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, pf, 20, 14, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();

            function Ef(t, e) {
                1 & t && i.Vb(0, "div", 20)
            }

            function ff(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Rc(1, Ef, 1, 0, "div", 2), i.Zb(2, "div", 3), i.Zb(3, "p", 4), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Zb(6, "div", 5), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(7, "div", 6), i.Zb(8, "p", 7), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Zb(11, "div", 8), i.Zb(12, "div", 9), i.Zb(13, "div", 10), i.Zb(14, "ngx-slider", 11), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().heightRange = e
                    }))("mouseup", (function() {
                        return i.Gc(t), i.mc().onHeightChange()
                    })), i.Yb(), i.Yb(), i.Yb(), i.Zb(15, "input", 12), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().heightInput = e
                    }))("keydown.enter", (function() {
                        return i.Gc(t), i.mc().onHeightChange()
                    })), i.Yb(), i.Yb(), i.Zb(16, "div", 13), i.Zb(17, "div", 14), i.jc("click", (function() {
                        return i.Gc(t), i.mc().placeAboveStack()
                    })), i.Vb(18, "div", 15), i.Zb(19, "div", 16), i.Zb(20, "p", 17), i.Tc(21), i.nc(22, "translate"), i.Yb(), i.Yb(), i.Vb(23, "div", 18), i.Yb(), i.Zb(24, "div", 19), i.jc("click", (function() {
                        return i.Gc(t), i.mc().placeAtFloor()
                    })), i.Vb(25, "div", 15), i.Zb(26, "div", 16), i.Zb(27, "p", 17), i.Tc(28), i.nc(29, "translate"), i.Yb(), i.Yb(), i.Vb(30, "div", 18), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngIf", t.isLoading), i.Gb(3), i.Uc(i.oc(5, 10, "widget.custom.stack.height.title")), i.Gb(5), i.Uc(i.oc(10, 12, "widget.custom.stack.height.text")), i.Gb(5), i.tc("options", t.sliderOptions)("ngModel", t.heightRange), i.Gb(1), i.tc("ngModel", t.heightInput)("min", t.minHeight)("max", t.maxHeight), i.Gb(6), i.Uc(i.oc(22, 14, "furniture.above.stack")), i.Gb(7), i.Uc(i.oc(29, 16, "furniture.floor.level"))
                }
            }
            let Sf = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this._ngZone = t, this._visible = !1, this._furniId = -1, this._height = 0, this._heightRange = "0", this._heightInput = "0"
                    }
                    open(t, e) {
                        this._ngZone.run(() => {
                            this._furniId = t, this._height = e, this._visible = !0, this.setHeight(e, !0)
                        })
                    }
                    update(t, e) {
                        this._ngZone.run(() => this._furniId === t && this.setHeight(e, !0))
                    }
                    hide() {
                        this._visible = !1, this._furniId = -1, this._height = 0
                    }
                    onHeightChange() {
                        const t = this._heightInput;
                        let e = 0;
                        e = null === t || "" === t ? this._height : parseFloat(t), this.setHeight(e)
                    }
                    setHeight(e, s = !1) {
                        e = Math.abs(e), s || e > t.MAX_HEIGHT && (e = t.MAX_HEIGHT), this._height = parseFloat(e.toFixed(2)), this._heightRange = this._height.toString(), this._heightInput = this._height.toString(), s || this.sendUpdate(100 * this._height)
                    }
                    placeAboveStack() {
                        this.sendUpdate(-100)
                    }
                    placeAtFloor() {
                        this.sendUpdate(0)
                    }
                    sendUpdate(t) {
                        this.widgetHandler.container.connection.send(new lh(this._furniId, ~~t))
                    }
                    get handler() {
                        return this.widgetHandler
                    }
                    get visible() {
                        return this._visible
                    }
                    set visible(t) {
                        this._visible = t
                    }
                    get furniId() {
                        return this._furniId
                    }
                    get height() {
                        return this._height
                    }
                    get heightInput() {
                        return this._heightInput
                    }
                    set heightInput(t) {
                        null === t || "" === t || isNaN(t) || (this._heightInput = t)
                    }
                    get heightRange() {
                        return this._heightRange
                    }
                    set heightRange(t) {
                        this._heightRange = t, this.heightInput = this.heightRange
                    }
                    get minHeight() {
                        return 0
                    }
                    get maxHeight() {
                        return t.MAX_HEIGHT
                    }
                    get sliderOptions() {
                        return {
                            floor: 0,
                            ceil: t.MAX_RANGE_HEIGHT,
                            step: t.STEP_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0,
                            vertical: !1
                        }
                    }
                }
                return t.MAX_HEIGHT = 40, t.MAX_RANGE_HEIGHT = 10, t.STEP_VALUE = .01, t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-furniture-customstackheight-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["dragHandle", ".stackhead", "class", "oldstackbox", 3, "bringToTop", "draggable", 4, "ngIf"],
                        ["dragHandle", ".stackhead", 1, "oldstackbox", 3, "bringToTop", "draggable"],
                        ["class", "card-loading-overlay", 4, "ngIf"],
                        [1, "stackhead"],
                        [1, "stack-title"],
                        [1, "stack-close", 3, "click"],
                        [1, "stack-body"],
                        [1, "stack-desc"],
                        [1, "stack-deger-box"],
                        [1, "stack-slider"],
                        [1, "stack-custom-slider"],
                        ["name", "heightRange", 3, "options", "ngModel", "ngModelChange", "mouseup"],
                        ["name", "heightInput", "type", "number", 1, "stack-deger", 3, "ngModel", "min", "max", "ngModelChange", "keydown.enter"],
                        [1, "stack-butbox"],
                        [1, "stack-button", 3, "click"],
                        [1, "b-left"],
                        [1, "b-middle"],
                        [1, "stackbutton-txt"],
                        [1, "b-right"],
                        [1, "stack-button", 2, "float", "right", 3, "click"],
                        [1, "card-loading-overlay"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, ff, 31, 18, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, ef.b, VE.j, VE.l, VE.n, VE.b],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();

            function If(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 23), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.index;
                        return i.mc(3).selectPreset(s + 1)
                    })), i.Zb(1, "p", 24), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.index;
                    i.Gb(2), i.Uc(i.oc(3, 1, "widget.dimmer.tab." + (t + 1)))
                }
            }
            const Rf = function(t) {
                    return {
                        "rds_color-select-active": t
                    }
                },
                vf = function(t) {
                    return {
                        "background-color": t
                    }
                };

            function Tf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 25), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(3).selectColor(s)
                    })), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = e.index,
                        n = i.mc(3);
                    i.tc("ngClass", i.xc(2, Rf, n.getSelectedPreset().color == t))("ngStyle", i.xc(4, vf, n.htmlColors[s]))
                }
            }

            function Of(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "div", 7), i.Zb(2, "div", 8), i.Rc(3, If, 4, 3, "div", 9), i.Yb(), i.Zb(4, "div", 10), i.Zb(5, "div", 11), i.Rc(6, Tf, 1, 6, "div", 12), i.Yb(), i.Zb(7, "div", 13), i.Zb(8, "ngx-slider", 14), i.jc("valueChange", (function() {
                        return i.Gc(t), i.mc(2).onSliderChange()
                    }))("valueChange", (function(e) {
                        return i.Gc(t), i.mc(2).getSelectedPreset().intensity = e
                    })), i.Yb(), i.Yb(), i.Zb(9, "label", 15), i.Zb(10, "p", 16), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Zb(13, "input", 17), i.jc("change", (function(e) {
                        return i.Gc(t), i.mc(2).changeCheckbox(e)
                    })), i.Yb(), i.Vb(14, "span", 18), i.Yb(), i.Zb(15, "p", 19), i.Tc(16, "Oda ayarlar\u0131n\u0131 kaydetmek i\xe7in 'Kaydet'e bas\u0131n. "), i.Yb(), i.Yb(), i.Zb(17, "div", 20), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).handleButton("on_off")
                    })), i.Zb(18, "p", 21), i.Tc(19), i.nc(20, "translate"), i.Yb(), i.Yb(), i.Zb(21, "div", 22), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).handleButton("apply")
                    })), i.Zb(22, "p", 21), i.Tc(23), i.nc(24, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.Gb(3), i.tc("ngForOf", t.presets), i.Gb(3), i.tc("ngForOf", t.availableColors), i.Gb(2), i.tc("options", t.delaySliderOptions)("value", t.getSelectedPreset().intensity), i.Gb(3), i.Uc(i.oc(12, 8, "widget.dimmer.type.checkbox")), i.Gb(2), i.tc("ngModel", t.getSelectedPreset().backgroundOnly), i.Gb(6), i.Uc(i.oc(20, 10, t.isOn ? "widget.dimmer.button.off" : "widget.dimmer.button.on")), i.Gb(4), i.Uc(i.oc(24, 12, "widget.dimmer.button.apply"))
                }
            }

            function yf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "div", 26), i.Zb(2, "div", 27), i.Vb(3, "div", 28), i.Zb(4, "p", 29), i.Tc(5), i.nc(6, "translate"), i.Yb(), i.Yb(), i.Zb(7, "div", 30), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).handleButton("on_off")
                    })), i.Zb(8, "p", 21), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.Gb(5), i.Uc(i.oc(6, 2, "widget.dimmer.info.off")), i.Gb(4), i.Uc(i.oc(10, 4, t.isOn ? "widget.dimmer.button.off" : "widget.dimmer.button.on"))
                }
            }

            function Af(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Rc(7, Of, 25, 14, "ng-container", 6), i.Rc(8, yf, 11, 6, "ng-container", 6), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 3, "widget.dimmer.title")), i.Gb(4), i.tc("ngIf", t.isOn), i.Gb(1), i.tc("ngIf", !t.isOn)
                }
            }
            let Cf = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this._ngZone = t, this._visible = !1, this._dimmerState = 0, this._effectId = 0, this._color = 16777215, this._brightness = 255, this.presets = [], this.selectedPresetId = 0, this.isOn = !1, this.availableColors = [7665141, 21495, 15161822, 15353138, 15923281, 8581961, 0], this.htmlColors = ["#74F5F5", "#0053F7", "#E759DE", "#EA4532", "#F2F851", "#82F349", "#000000"], this.onDimmerPresetsEvent = this.onDimmerPresetsEvent.bind(this), this.onDimmerStateEvent = this.onDimmerStateEvent.bind(this)
                    }
                    ngOnInit() {
                        lp((function() {
                            lp(".rdsmenu:nth-child(1)").addClass("rdsactive")
                        })), lp(".rdsmenu").click((function() {
                            console.log("rds mneu click"), lp(".rdsmenu").removeClass("rdsactive"), lp(this).addClass("rdsactive")
                        }))
                    }
                    registerUpdateEvents(t) {
                        t && (t.addEventListener(ab.RWDUE_PRESETS, this.onDimmerPresetsEvent), t.addEventListener(rb.RWDSUE_DIMMER_STATE, this.onDimmerStateEvent), super.registerUpdateEvents(t))
                    }
                    unregisterUpdateEvents(t) {
                        t && (t.removeEventListener(ab.RWDUE_PRESETS, this.onDimmerPresetsEvent), t.removeEventListener(rb.RWDSUE_DIMMER_STATE, this.onDimmerStateEvent), super.unregisterUpdateEvents(t))
                    }
                    getSelectedPreset() {
                        return this.presets[this.selectedPresetId - 1]
                    }
                    selectPreset(t) {
                        this.selectedPresetId = t
                    }
                    selectColor(t) {
                        this.getSelectedPreset().color = t, this.previewSettings()
                    }
                    onDimmerPresetsEvent(t) {
                        this.presets = t.presets.map(t => ({
                            color: t.color,
                            id: t.id,
                            intensity: t._Str_4272,
                            backgroundOnly: 2 == t.type
                        })), this.selectedPresetId = t.selectedPresetId, this._ngZone.run(() => {
                            this._visible = !0
                        })
                    }
                    onDimmerStateEvent(t) {
                        this._ngZone.run(() => {
                            this.isOn = 1 == t.state, this._effectId = t._Str_6815, this._color = t.color, this._brightness = t._Str_5123
                        }), this.messageListener.processWidgetMessage(new _b(this._color, this._brightness, 2 === this._effectId))
                    }
                    get handler() {
                        return this.widgetHandler
                    }
                    hide() {
                        this._visible = !1
                    }
                    get visible() {
                        return this._visible && this.selectedPresetId > 0 && this.presets.length > 0
                    }
                    set visible(t) {
                        this._visible = t
                    }
                    onSliderChange() {
                        console.log("slider changed"), this.previewSettings()
                    }
                    changeCheckbox(t) {
                        this.getSelectedPreset().backgroundOnly = t.target.checked, this.previewSettings()
                    }
                    previewSettings() {
                        if (!this.messageListener) return;
                        const t = this.getSelectedPreset();
                        this.messageListener.processWidgetMessage(new _b(t.color, t.intensity, t.backgroundOnly))
                    }
                    handleButton(t) {
                        switch (t) {
                            case "on_off":
                                this.toggleState();
                                break;
                            case "apply":
                                this.apply()
                        }
                    }
                    toggleState() {
                        this.messageListener && this.messageListener.processWidgetMessage(new cb)
                    }
                    apply() {
                        if (!this.isOn || !this.messageListener || null == this.presets || 0 == this.presets.length) return;
                        const t = this.getSelectedPreset();
                        t && this.messageListener.processWidgetMessage(new hb(t.id, t.backgroundOnly ? 2 : 1, t.color, t.intensity, !0))
                    }
                    get delaySliderOptions() {
                        return {
                            floor: 75,
                            ceil: 255,
                            step: 1,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-furniture-dimmer-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["id", "room-dimmer-settings", 3, "bringToTop", "draggable", 4, "ngIf"],
                        ["id", "room-dimmer-settings", 3, "bringToTop", "draggable"],
                        ["id", "rdshead", 1, "drag-handler"],
                        [1, "rds-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "roomdimmer-body"],
                        [4, "ngIf"],
                        [1, "rds-body"],
                        [1, "rds-headmenu"],
                        ["class", "rdsmenu", 3, "click", 4, "ngFor", "ngForOf"],
                        [1, "rds-box"],
                        [1, "rds-colorbox"],
                        ["class", "rds_color-select", 3, "ngClass", "ngStyle", "click", 4, "ngFor", "ngForOf"],
                        [1, "dimmer-slider"],
                        [3, "options", "value", "valueChange"],
                        [1, "rds-select-container"],
                        [1, "rsd-ctxt"],
                        ["type", "checkbox", 3, "ngModel", "change"],
                        [1, "checkmarkrsd"],
                        [1, "rds-infotxt"],
                        [1, "rds-button", 2, "margin", "6px 0px", 3, "click"],
                        [1, "rdsbutton-txt"],
                        [1, "rds-button", 2, "right", "0", 3, "click"],
                        [1, "rdsmenu", 3, "click"],
                        [1, "rds-txt"],
                        [1, "rds_color-select", 3, "ngClass", "ngStyle", "click"],
                        [1, "rds-body2"],
                        [1, "rsd-kapali"],
                        [1, "rsdbg"],
                        [1, "rsd-actxt"],
                        [1, "rds-button", 2, "right", "0", "margin", "12px 0px", "position", "relative", "float", "right", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, Af, 9, 5, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, hp.m, ef.b, VE.a, VE.j, VE.l, hp.l, hp.o],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();

            function Mf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "h6", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "button", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Vb(6, "i", 5), i.Yb(), i.Yb(), i.Zb(7, "div", 6), i.Zb(8, "div", 7), i.Zb(9, "p"), i.Tc(10), i.nc(11, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Zb(12, "div", 8), i.Zb(13, "button", 9), i.jc("click", (function() {
                        return i.Gc(t), i.mc().handleButton("cancel")
                    })), i.Tc(14), i.nc(15, "translate"), i.Yb(), i.Zb(16, "button", 10), i.jc("click", (function() {
                        return i.Gc(t), i.mc().handleButton("confirm")
                    })), i.Tc(17), i.nc(18, "translate"), i.Yb(), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(3), i.Uc(i.oc(4, 4, "friend.furniture.confirm.lock.caption")), i.Gb(7), i.Uc(i.oc(11, 6, "friend.furniture.confirm.lock.subtitle")), i.Gb(4), i.Uc(i.oc(15, 8, "friend.furniture.confirm.lock.button.cancel")), i.Gb(3), i.Uc(i.oc(18, 10, "friend.furniture.confirm.lock.button.confirm")))
            }
            let Uf = (() => {
                    class t extends qb {
                        constructor(t) {
                            super(), this._ngZone = t, this._visible = !1, this._furniId = -1
                        }
                        open(t, e) {
                            this._visible && -1 != this._furniId && this.sendStart(this._furniId, !1), this._ngZone.run(() => {
                                this._furniId = t, this._visible = !0
                            })
                        }
                        handleButton(t) {
                            switch (t) {
                                case "confirm":
                                    this.sendStart(this._furniId, !0), this.hide();
                                    break;
                                case "cancel":
                                    this.sendStart(this._furniId, !1), this.hide()
                            }
                        }
                        sendStart(t, e) {
                            cp.instance.communication.connection.send(new dh(t, e))
                        }
                        hide() {
                            this._visible = !1, this._furniId = -1
                        }
                        get visible() {
                            return this._visible
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["ng-component"]
                        ],
                        features: [i.Db],
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["class", "nitro-furniture-purchasable-clothing card", 3, "bringToTop", "draggable", 4, "ngIf"],
                            [1, "nitro-furniture-purchasable-clothing", "card", 3, "bringToTop", "draggable"],
                            [1, "drag-handler", "d-flex", "justify-content-between", "align-items-center", "px-3", "pt-3"],
                            [1, "m-0"],
                            ["type", "button", 1, "close", 3, "click"],
                            [1, "fas", "fa-times"],
                            [1, "row", "p-6"],
                            [1, "col-4", "d-flex", "align-items-center", "justify-content-center"],
                            [1, "d-flex", "justify-content-between", "align-items-center", "p-3"],
                            ["type", "button", 1, "btn", "btn-secondary", 3, "click"],
                            ["type", "button", 1, "btn", "btn-success", 3, "click"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, Mf, 19, 12, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        directives: [hp.n, CE, kE],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                Df = (() => {
                    class t {}
                    return t._Str_13451 = 0, t._Str_17498 = 1, t._Str_18746 = 2, t._Str_15230 = 3, t._Str_15778 = 4, t
                })();
            const Nf = function(t) {
                return {
                    backgroundImage: t
                }
            };

            function wf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "div", 3), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Zb(3, "div", 4), i.Zb(4, "div", 5), i.Vb(5, "div", 6), i.Yb(), i.Zb(6, "div", 5), i.Vb(7, "div", 6), i.Yb(), i.Yb(), i.Zb(8, "p", 7), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Zb(11, "p", 8), i.Tc(12), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.xc(11, Nf, "url(" + t.image + ")")), i.Gb(5), i.tc("figure", t.firstFigure)("direction", 2), i.Gb(2), i.tc("figure", t.secondFigure)("direction", 4), i.Gb(2), i.Uc(i.oc(10, 9, "lovelock.engraving.caption")), i.Gb(3), i.Xc("", t.firstName, " | ", t.secondName, " | ", t.engravedDate, "")
                }
            }
            let Lf = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this._ngZone = t, this.engravingView = null, this.visible = !1, this.firstFigure = null, this.firstName = null, this.secondFigure = null, this.secondName = null, this.engravedDate = null
                    }
                    open(t, e, s) {
                        switch (e) {
                            case Df._Str_13451:
                                this.engravingView = "engraving";
                                break;
                            case Df._Str_17498:
                            case Df._Str_18746:
                                break;
                            case Df._Str_15230:
                                this.engravingView = "wildwest";
                                break;
                            case Df._Str_15778:
                                this.engravingView = "hween14"
                        }
                        this.engravingView && this._ngZone.run(() => {
                            this.firstName = s.getValue(1), this.secondName = s.getValue(2), this.firstFigure = s.getValue(3), this.secondFigure = s.getValue(4), this.engravedDate = s.getValue(5), this.visible = !0
                        })
                    }
                    hide() {
                        this.visible = !1
                    }
                    get image() {
                        return cp.instance.getConfiguration("furni.extras.url").toString().replace("%image%", "loveLock_" + this.engravingView)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "nitro-furniture-friends-engraving", 3, "bringToTop", "draggable", "ngStyle", 4, "ngIf"],
                        [1, "nitro-furniture-friends-engraving", 3, "bringToTop", "draggable", "ngStyle"],
                        [1, "drag-handler", "d-flex", "flex-column", "small", "h-100"],
                        [1, "friend-close", "position-absolute", 3, "click"],
                        [1, "row", "justify-content-center"],
                        [1, "col-2", "d-flex", "justify-content-center"],
                        ["nitro-avatar-image", "", 3, "figure", "direction"],
                        [1, "w-100", "text-center"],
                        [1, "w-100", "text-center", "mt-auto"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, wf, 13, 13, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, hp.o, cf],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const xf = function(t) {
                return {
                    "background-color": t
                }
            };

            function Pf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 9), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(3).processAction(s)
                    })), i.Yb()
                }
                2 & t && i.tc("ngStyle", i.xc(1, xf, "#" + e.$implicit))
            }

            function Ff(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 6), i.Zb(1, "div", 7), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).processAction("delete")
                    })), i.Yb(), i.Rc(2, Pf, 1, 3, "div", 8), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.Gb(2), i.tc("ngForOf", t.AVAILABLE_COLORS)
                }
            }
            const Gf = function(t, e) {
                return {
                    "background-color": t,
                    color: e
                }
            };

            function Yf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Rc(2, Ff, 3, 1, "div", 3), i.Zb(3, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(4, "textarea", 5), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().text = e
                    })), i.Tc(5), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.yc(5, Gf, "#" + t.colorHex, t.colorHex)), i.Gb(2), i.tc("ngIf", t.isController), i.Gb(2), i.tc("disabled", !t.isController)("ngModel", t.text), i.Gb(1), i.Uc(t.text)
                }
            }
            let kf = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this._ngZone = t, this.AVAILABLE_COLORS = ["9CCEFF", "FF9CFF", "9CFF9C", "FFFF33"], this._objectId = -1, this._colorHex = null, this._text = null, this._isController = !1, this._visible = !1, this.onRoomWidgetStickieDataUpdateEvent = this.onRoomWidgetStickieDataUpdateEvent.bind(this)
                    }
                    dispose() {
                        this.updateStickie(), super.dispose()
                    }
                    registerUpdateEvents(t) {
                        t && (t.addEventListener(gb.RWSDUE_STICKIE_DATA, this.onRoomWidgetStickieDataUpdateEvent), super.registerUpdateEvents(t))
                    }
                    unregisterUpdateEvents(t) {
                        t && (t.removeEventListener(gb.RWSDUE_STICKIE_DATA, this.onRoomWidgetStickieDataUpdateEvent), super.unregisterUpdateEvents(t))
                    }
                    onRoomWidgetStickieDataUpdateEvent(t) {
                        t && this._ngZone.run(() => {
                            this._objectId = t._Str_1577, this._colorHex = t._Str_10471, this._text = t.text, this._isController = t.controller, this._visible = !0
                        })
                    }
                    processAction(t) {
                        if (t && "" !== t) {
                            if (this.AVAILABLE_COLORS.indexOf(t) >= 0) return this._colorHex = t, void this.updateStickie();
                            switch (t) {
                                case "delete":
                                    return void this.deleteStickie()
                            }
                        }
                    }
                    hide() {
                        this.updateStickie(), this._objectId = -1, this._colorHex = null, this._text = null, this._isController = !1, this._visible = !1
                    }
                    updateStickie() {
                        -1 !== this._objectId && this.messageListener.processWidgetMessage(new mb(mb.SEND_UPDATE, this._objectId, this._text, this._colorHex))
                    }
                    deleteStickie() {
                        -1 !== this._objectId && (this.messageListener.processWidgetMessage(new mb(mb.SEND_DELETE, this._objectId)), this.hide())
                    }
                    get visible() {
                        return this._visible
                    }
                    set visible(t) {
                        this._visible = t
                    }
                    get handler() {
                        return this.widgetHandler
                    }
                    get objectId() {
                        return this._objectId
                    }
                    get colorHex() {
                        return this._colorHex
                    }
                    get text() {
                        return this._text
                    }
                    set text(t) {
                        this._text = t
                    }
                    get isController() {
                        return this._isController
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-furniture-sticky"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "habbo-not-kagit", 3, "bringToTop", "draggable", "ngStyle", 4, "ngIf"],
                        [1, "habbo-not-kagit", 3, "bringToTop", "draggable", "ngStyle"],
                        [1, "corelo-not-head", "drag-handler"],
                        ["class", "ownernot", 4, "ngIf"],
                        [1, "not-kapat", 3, "click"],
                        ["name", "sticky-text", "rows", "11", "maxlength", "500", 1, "not-yazi", 3, "disabled", "ngModel", "ngModelChange"],
                        [1, "ownernot"],
                        [1, "notu-sil", 3, "click"],
                        ["class", "notrenk", 3, "ngStyle", "click", 4, "ngFor", "ngForOf"],
                        [1, "notrenk", 3, "ngStyle", "click"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, Yf, 6, 8, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, hp.o, VE.b, VE.g, VE.j, VE.l, hp.m],
                    encapsulation: 2
                }), t
            })();

            function Vf(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Tc(7), i.Yb(), i.Zb(8, "div", 6), i.Zb(9, "div"), i.Tc(10), i.Yb(), i.Zb(11, "div"), i.Tc(12), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Jb("habbo-plate plate_", t.color, ""), i.Gb(3), i.Uc(i.oc(4, 7, "widget.furni.trophy.title")), i.Gb(4), i.Uc(t.message), i.Gb(3), i.Uc(t.date), i.Gb(2), i.Uc(t.ownerName)
                }
            }
            let Zf = (() => {
                    class t extends qb {
                        constructor(t) {
                            super(), this._ngZone = t, this._visible = !1, this._color = null, this._ownerName = null, this._date = null, this._message = null, this._viewType = null, this.onRoomWidgetTrophyUpdateEvent = this.onRoomWidgetTrophyUpdateEvent.bind(this)
                        }
                        registerUpdateEvents(t) {
                            t && (t.addEventListener(bb.TROPHY_DATA, this.onRoomWidgetTrophyUpdateEvent), super.registerUpdateEvents(t))
                        }
                        unregisterUpdateEvents(t) {
                            t && (t.removeEventListener(bb.TROPHY_DATA, this.onRoomWidgetTrophyUpdateEvent), super.unregisterUpdateEvents(t))
                        }
                        onRoomWidgetTrophyUpdateEvent(t) {
                            t && this._ngZone.run(() => {
                                this._visible = !0, this._color = t.color - 1, this._ownerName = t.name, this._date = t.date, this._message = t.message, this._viewType = t.viewType, (this._color < 0 || this._color > 2) && (this._color = 0)
                            })
                        }
                        hide() {
                            this._visible = !1
                        }
                        get handler() {
                            return this.widgetHandler
                        }
                        get visible() {
                            return this._visible
                        }
                        set visible(t) {
                            this._visible = t
                        }
                        get color() {
                            return this._color
                        }
                        get ownerName() {
                            return this._ownerName
                        }
                        get date() {
                            return this._date
                        }
                        get message() {
                            return this._message
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-room-furniture-trophy-compontent"]
                        ],
                        features: [i.Db],
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["noMemory", "true", 3, "bringToTop", "draggable", "class", 4, "ngIf"],
                            ["noMemory", "true", 3, "bringToTop", "draggable"],
                            [1, "plate_header", "drag-handler"],
                            [1, "plate_title"],
                            [1, "plate_close", 3, "click"],
                            [1, "plate-mesaj"],
                            [1, "plate-footer"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, Vf, 13, 9, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        directives: [hp.n, CE, kE],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                jf = (() => {
                    class t extends Sp {
                        constructor(e, s, i, n, r, o, a, c, _, h) {
                            super(t.PET_INFO), this._Str_6689 = e, this._Str_20932 = s, this._name = i, this._id = n, this._image = r, this._Str_10121 = o, this._ownerId = a, this._ownerName = c, this._Str_2775 = _, this._unknownRarityLevel = h
                        }
                        get name() {
                            return this._name
                        }
                        get image() {
                            return this._image
                        }
                        get id() {
                            return this._id
                        }
                        get _Str_4355() {
                            return this._Str_6689
                        }
                        get _Str_14767() {
                            return this._Str_20932
                        }
                        get _Str_5175() {
                            return this._Str_10121
                        }
                        get ownerId() {
                            return this._ownerId
                        }
                        get ownerName() {
                            return this._ownerName
                        }
                        get _Str_2707() {
                            return this._Str_2775
                        }
                        get unknownRarityLevel() {
                            return this._unknownRarityLevel
                        }
                        get level() {
                            return this._level
                        }
                        set level(t) {
                            this._level = t
                        }
                        get maximumLevel() {
                            return this._maximumLevel
                        }
                        set maximumLevel(t) {
                            this._maximumLevel = t
                        }
                        get experience() {
                            return this._experience
                        }
                        set experience(t) {
                            this._experience = t
                        }
                        get levelExperienceGoal() {
                            return this._levelExperienceGoal
                        }
                        set levelExperienceGoal(t) {
                            this._levelExperienceGoal = t
                        }
                        get energy() {
                            return this._energy
                        }
                        set energy(t) {
                            this._energy = t
                        }
                        get maximumEnergy() {
                            return this._maximumEnergy
                        }
                        set maximumEnergy(t) {
                            this._maximumEnergy = t
                        }
                        get happyness() {
                            return this._happyness
                        }
                        set happyness(t) {
                            this._happyness = t
                        }
                        get maximumHappyness() {
                            return this._maximumHappyness
                        }
                        set maximumHappyness(t) {
                            this._maximumHappyness = t
                        }
                        get _Str_2985() {
                            return this._Str_3973
                        }
                        set _Str_2985(t) {
                            this._Str_3973 = t
                        }
                        get _Str_5114() {
                            return this._Str_11149
                        }
                        set _Str_5114(t) {
                            this._Str_11149 = t
                        }
                        get respect() {
                            return this._respect
                        }
                        set respect(t) {
                            this._respect = t
                        }
                        get age() {
                            return this._age
                        }
                        set age(t) {
                            this._age = t
                        }
                        get saddle() {
                            return this._saddle
                        }
                        set saddle(t) {
                            this._saddle = t
                        }
                        get rider() {
                            return this._rider
                        }
                        set rider(t) {
                            this._rider = t
                        }
                        get breedable() {
                            return this._breedable
                        }
                        set breedable(t) {
                            this._breedable = t
                        }
                        get _Str_3307() {
                            return this._Str_4460
                        }
                        set _Str_3307(t) {
                            this._Str_4460 = t
                        }
                        get publiclyRideable() {
                            return this._publiclyRideable
                        }
                        set publiclyRideable(t) {
                            this._publiclyRideable = t
                        }
                        get fullyGrown() {
                            return this._fullyGrown
                        }
                        set fullyGrown(t) {
                            this._fullyGrown = t
                        }
                        get dead() {
                            return this._dead
                        }
                        set dead(t) {
                            this._dead = t
                        }
                        get rarityLevel() {
                            return this._rarityLevel
                        }
                        set rarityLevel(t) {
                            this._rarityLevel = t
                        }
                        get maximumTimeToLive() {
                            return this._maximumTimeToLive
                        }
                        set maximumTimeToLive(t) {
                            this._maximumTimeToLive = t
                        }
                        get remainingTimeToLive() {
                            return this._remainingTimeToLive
                        }
                        set remainingTimeToLive(t) {
                            this._remainingTimeToLive = t
                        }
                        get remainingGrowTime() {
                            return this._remainingGrowTime
                        }
                        set remainingGrowTime(t) {
                            this._remainingGrowTime = t
                        }
                        get publiclyBreedable() {
                            return this._publiclyBreedable
                        }
                        set publiclyBreedable(t) {
                            this._publiclyBreedable = t
                        }
                    }
                    return t.PET_INFO = "RWPIUE_PET_INFO", t
                })();
            class Bf {
                constructor() {
                    this._id = 0, this._category = 0, this._name = "", this._description = "", this._imageUrl = "", this._purchaseOfferId = -1, this._extraParam = "", this._stuffData = null, this._ownerId = 0, this._ownerName = "", this._rentOfferId = -1, this._availableForBuildersClub = !1
                }
                get id() {
                    return this._id
                }
                set id(t) {
                    this._id = t
                }
                get category() {
                    return this._category
                }
                set category(t) {
                    this._category = t
                }
                get name() {
                    return this._name
                }
                set name(t) {
                    this._name = t
                }
                get description() {
                    return this._description
                }
                set description(t) {
                    this._description = t
                }
                get imageUrl() {
                    return this._imageUrl
                }
                set imageUrl(t) {
                    this._imageUrl = t
                }
                get purchaseOfferId() {
                    return this._purchaseOfferId
                }
                set purchaseOfferId(t) {
                    this._purchaseOfferId = t
                }
                get extraParam() {
                    return this._extraParam
                }
                set extraParam(t) {
                    this._extraParam = t
                }
                get stuffData() {
                    return this._stuffData
                }
                set stuffData(t) {
                    this._stuffData = t
                }
                set groupId(t) {
                    this._groupId = t
                }
                get groupId() {
                    return this._groupId
                }
                get ownerId() {
                    return this._ownerId
                }
                set ownerId(t) {
                    this._ownerId = t
                }
                get ownerName() {
                    return this._ownerName
                }
                set ownerName(t) {
                    this._ownerName = t
                }
                get rentOfferId() {
                    return this._rentOfferId
                }
                set rentOfferId(t) {
                    this._rentOfferId = t
                }
                get availableForBuildersClub() {
                    return this._availableForBuildersClub
                }
                set availableForBuildersClub(t) {
                    this._availableForBuildersClub = t
                }
                populate(t) {
                    this.id = t.id, this.category = t.category, this.name = t.name, this.description = t.description, this.imageUrl = t.image.src, this.purchaseOfferId = t.purchaseOfferId, this.extraParam = t.extraParam, this.stuffData = t.stuffData, this.groupId = t.groupId, this.ownerName = t.ownerName, this.ownerId = t.ownerId, this.rentOfferId = t.rentOfferId, this.availableForBuildersClub = t.availableForBuildersClub
                }
            }
            class Hf {
                constructor() {
                    this._name = "", this._petId = -1
                }
                get name() {
                    return this._name
                }
                get id() {
                    return this._petId
                }
                get type() {
                    return this._type
                }
                get race() {
                    return this._race
                }
                get image() {
                    return this._image
                }
                get _Str_5175() {
                    return this._isOwnPet
                }
                get _Str_2481() {
                    return this._ownerId
                }
                get ownerName() {
                    return this._ownerName
                }
                get _Str_5114() {
                    return this._canRemovePet
                }
                get age() {
                    return this._age
                }
                get unknownRarityLevel() {
                    return this._breedId
                }
                get _Str_3307() {
                    return this._skillTresholds
                }
                get publiclyRideable() {
                    return this._accessRights
                }
                get level() {
                    return this._level
                }
                get _Str_4276() {
                    return this._levelMax
                }
                get experience() {
                    return this._experience
                }
                get _Str_4095() {
                    return this._experienceMax
                }
                get energy() {
                    return this._energy
                }
                get _Str_3966() {
                    return this._energyMax
                }
                get happyness() {
                    return this._nutrition
                }
                get _Str_4448() {
                    return this._nutritionMax
                }
                get _Str_6943() {
                    return this._petRespect
                }
                get _Str_2707() {
                    return this._roomIndex
                }
                get rarityLevel() {
                    return this._rarityLevel
                }
                get maximumTimeToLive() {
                    return this._maxWellBeingSeconds
                }
                get remainingTimeToLive() {
                    return this._remainingWellBeingSeconds
                }
                get remainingGrowTime() {
                    return this._remainingGrowingSeconds
                }
                get publiclyBreedable() {
                    return this._hasBreedingPermission
                }
                populate(t) {
                    this._name = t.name, this._petId = t.id, this._type = t._Str_4355, this._race = t._Str_14767, this._image = t.image, this._isOwnPet = t._Str_5175, this._ownerId = t.ownerId, this._ownerName = t.ownerName, this._canRemovePet = t._Str_5114, this._level = t.level, this._levelMax = t.maximumLevel, this._experience = t.experience, this._experienceMax = t.levelExperienceGoal, this._energy = t.energy, this._energyMax = t.maximumEnergy, this._nutrition = t.happyness, this._nutritionMax = t.maximumHappyness, this._petRespect = t.respect, this._roomIndex = t._Str_2707, this._age = t.age, this._breedId = t.unknownRarityLevel, this._skillTresholds = t._Str_3307, this._accessRights = t.publiclyRideable, this._maxWellBeingSeconds = t.maximumTimeToLive, this._remainingWellBeingSeconds = t.remainingTimeToLive, this._remainingGrowingSeconds = t.remainingGrowTime, this._rarityLevel = t.rarityLevel, this._hasBreedingPermission = t.publiclyBreedable
                }
            }
            class Wf {
                constructor() {
                    this._id = 0, this._name = "", this._figure = "", this._motto = "", this._badges = [], this._carryItem = 0, this._roomIndex = -1, this._ownerId = -1, this._ownerName = "", this._amIOwner = !1, this._amIAnyRoomController = !1, this._botSkills = []
                }
                get id() {
                    return this._id
                }
                set id(t) {
                    this._id = t
                }
                get name() {
                    return this._name
                }
                set name(t) {
                    this._name = t
                }
                get figure() {
                    return this._figure
                }
                set figure(t) {
                    this._figure = t
                }
                get motto() {
                    return this._motto
                }
                set motto(t) {
                    this._motto = t
                }
                get badges() {
                    return this._badges.slice()
                }
                set badges(t) {
                    this._badges = t
                }
                get carryItem() {
                    return this._carryItem
                }
                set carryItem(t) {
                    this._carryItem = t
                }
                get roomIndex() {
                    return this._roomIndex
                }
                set roomIndex(t) {
                    this._roomIndex = t
                }
                get ownerId() {
                    return this._ownerId
                }
                set ownerId(t) {
                    this._ownerId = t
                }
                get ownerName() {
                    return this._ownerName
                }
                set ownerName(t) {
                    this._ownerName = t
                }
                get amIOwner() {
                    return this._amIOwner
                }
                set amIOwner(t) {
                    this._amIOwner = t
                }
                get amIAnyRoomController() {
                    return this._amIAnyRoomController
                }
                set amIAnyRoomController(t) {
                    this._amIAnyRoomController = t
                }
                get botSkills() {
                    return this._botSkills.slice()
                }
                set botSkills(t) {
                    this._botSkills = t
                }
                populate(t) {
                    this.id = t.id, this.name = t.name, this.figure = t.figure, this.motto = t.motto, this.badges = t.badges, this.carryItem = t.carryId, this.roomIndex = t.roomIndex, this.ownerId = t.ownerId, this.ownerName = t.ownerName, this.amIOwner = t._Str_3246, this.amIAnyRoomController = t._Str_3529, this.botSkills = t.botSkills
                }
            }
            class zf {
                constructor() {
                    this._id = 0, this._name = "", this._figure = "", this._motto = "", this._badges = [], this._groupId = 0, this._groupName = "", this._groupBadgeId = "", this._activityPoints = 0, this._respectLeft = 0, this._petRespectLeft = 0, this._carryItem = 0, this._roomIndex = -1, this._type = ""
                }
                get id() {
                    return this._id
                }
                set id(t) {
                    this._id = t
                }
                get name() {
                    return this._name
                }
                set name(t) {
                    this._name = t
                }
                get figure() {
                    return this._figure
                }
                set figure(t) {
                    this._figure = t
                }
                get motto() {
                    return this._motto
                }
                set motto(t) {
                    this._motto = t
                }
                get badges() {
                    return this._badges.slice()
                }
                set badges(t) {
                    this._badges = t
                }
                get groupId() {
                    return this._groupId
                }
                set groupId(t) {
                    this._groupId = t
                }
                get groupName() {
                    return this._groupName
                }
                set groupName(t) {
                    this._groupName = t
                }
                get groupBadgeId() {
                    return this._groupBadgeId
                }
                set groupBadgeId(t) {
                    this._groupBadgeId = t
                }
                get activityPoints() {
                    return this._activityPoints
                }
                set activityPoints(t) {
                    this._activityPoints = t
                }
                get respectLeft() {
                    return this._respectLeft
                }
                set respectLeft(t) {
                    this._respectLeft = t
                }
                get petRespectLeft() {
                    return this._petRespectLeft
                }
                set petRespectLeft(t) {
                    this._petRespectLeft = t
                }
                get carryItem() {
                    return this._carryItem
                }
                set carryItem(t) {
                    this._carryItem = t
                }
                get roomIndex() {
                    return this._roomIndex
                }
                set roomIndex(t) {
                    this._roomIndex = t
                }
                get type() {
                    return this._type
                }
                set type(t) {
                    this._type = t
                }
                getIsBot() {
                    return this.type === vb.BOT
                }
                populate(t) {
                    this.id = t.webID, this.name = t.name, this.figure = t.figure, this.motto = t.motto, this.badges = t.badges, this.groupId = t.groupId, this.groupName = t.groupName, this.groupBadgeId = t.groupBadgeId, this.activityPoints = t.activityPoints, this.respectLeft = t.respectLeft, this.petRespectLeft = 0, this.carryItem = t.carryId, this.roomIndex = t.roomIndex, this.type = t.type
                }
            }
            let Kf = (() => {
                class t {}
                return t.USER = 1, t.BOT = 2, t.RENTABLE_BOT = 3, t.PET = 4, t.FURNI = 5, t
            })();
            class Xf {
                constructor() {
                    this.widget = null
                }
                hide() {
                    this.widget.close()
                }
                update(t) {}
                get type() {
                    return -1
                }
            }
            let qf = (() => {
                class t {
                    constructor() {
                        this.badge = "", this.isGroup = !1, this.hover = !0
                    }
                    get badgeUrl() {
                        return this.isGroup ? cp.instance.getConfiguration("badge.asset.group.url").replace("%badgedata%", this.badge) : cp.instance.getConfiguration("badge.asset.url").replace("%badgename%", this.badge)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-badge"]
                    ],
                    inputs: {
                        badge: "badge",
                        isGroup: "isGroup",
                        hover: "hover"
                    },
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "src"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Vb(0, "img", 0), 2 & t && i.tc("src", e.badgeUrl, i.Ic)
                    },
                    encapsulation: 2
                }), t
            })();

            function Jf(t, e) {
                if (1 & t && i.Vb(0, "nitro-badge", 17), 2 & t) {
                    const t = i.mc().$implicit;
                    i.tc("badge", t)
                }
            }

            function Qf(t, e) {
                if (1 & t && (i.Zb(0, "div", 15), i.Rc(1, Jf, 1, 1, "nitro-badge", 16), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.tc("ngIf", "" !== t)
                }
            }

            function $f(t, e) {
                if (1 & t && (i.Zb(0, "div", 18), i.Zb(1, "span", 19), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.userData.motto)
                }
            }

            function tS(t, e) {
                1 & t && (i.Zb(0, "p", 20), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "infostand.text.handitem")))
            }
            let eS = (() => {
                class t extends Xf {
                    constructor() {
                        super(...arguments), this.userData = null
                    }
                    update(t) {
                        t && t.carryId > 0 && cp.instance.localization.registerParameter("infostand.text.handitem", "item", cp.instance.getLocalization("handitem" + t.carryId))
                    }
                    get type() {
                        return Kf.BOT
                    }
                }
                return t.\u0275fac = function(e) {
                    return sS(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 16,
                    vars: 6,
                    consts: [
                        [1, "infostand", "d-flex", "flex-column", "btn", "btn-primary", "rounded", "p-0", "nohover"],
                        [1, "d-flex", "align-items-center", "justify-content-between", "pt-3", "px-3", "w-100"],
                        ["type", "button", 1, "close", 3, "click"],
                        [1, "fas", "fa-times"],
                        [1, "d-flex", "flex-column", "p-3", "w-100"],
                        [1, "d-flex", "flex-nowrap"],
                        [1, "body-image", "bot"],
                        ["nitro-avatar-image", "", 3, "figure", "direction"],
                        [1, "flex-grow-1"],
                        [1, "badge-container"],
                        ["class", "badge-item", 4, "ngFor", "ngForOf"],
                        [1, "d-flex", "mt-2"],
                        ["class", "motto-container", 4, "ngIf"],
                        [1, "d-flex", "flex-column", "mt-2"],
                        ["class", "badge badge-secondary mb-0", 4, "ngIf"],
                        [1, "badge-item"],
                        [3, "badge", 4, "ngIf"],
                        [3, "badge"],
                        [1, "motto-container"],
                        [1, "motto"],
                        [1, "badge", "badge-secondary", "mb-0"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Tc(2), i.Zb(3, "button", 2), i.jc("click", (function() {
                            return e.hide()
                        })), i.Vb(4, "i", 3), i.Yb(), i.Yb(), i.Zb(5, "div", 4), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.Vb(8, "div", 7), i.Yb(), i.Zb(9, "div", 8), i.Zb(10, "div", 9), i.Rc(11, Qf, 2, 1, "div", 10), i.Yb(), i.Yb(), i.Yb(), i.Zb(12, "div", 11), i.Rc(13, $f, 3, 1, "div", 12), i.Yb(), i.Zb(14, "div", 13), i.Rc(15, tS, 3, 3, "p", 14), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Vc(" ", e.userData.name, " "), i.Gb(6), i.tc("figure", e.userData.figure)("direction", 4), i.Gb(3), i.tc("ngForOf", e.userData.badges), i.Gb(2), i.tc("ngIf", "" !== e.userData.motto), i.Gb(2), i.tc("ngIf", e.userData.carryItem > 0))
                    },
                    directives: [cf, hp.m, hp.n, qf],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const sS = i.bc(eS);
            let iS = (() => {
                class t {}
                return t._Str_21805 = 0, t._Str_18194 = 1, t._Str_18353 = 2, t
            })();

            function nS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "p", 17), i.Tc(2), i.Yb(), i.Zb(3, "textarea", 18), i.jc("ngModelChange", (function(s) {
                        i.Gc(t);
                        const n = e.index;
                        return i.mc(2).furniSettingsValues[n] = s
                    })), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = e.index,
                        s = i.mc(2);
                    i.Gb(2), i.Uc(s.furniSettingsKeys[t]), i.Gb(1), i.tc("ngModel", s.furniSettingsValues[t])
                }
            }

            function rS(t, e) {
                if (1 & t && (i.Zb(0, "div", 15), i.Rc(1, nS, 4, 2, "ng-container", 16), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngForOf", t.furniSettingsKeys)
                }
            }

            function oS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 19), i.jc("click", (function() {
                        return i.Gc(t), i.mc().processButtonAction("move")
                    })), i.Zb(1, "p", 20), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "infostand.button.move")))
            }

            function aS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 19), i.jc("click", (function() {
                        return i.Gc(t), i.mc().processButtonAction("rotate")
                    })), i.Zb(1, "p", 20), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "infostand.button.rotate")))
            }

            function cS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 19), i.jc("click", (function() {
                        return i.Gc(t), i.mc().processButtonAction("pickup")
                    })), i.Zb(1, "p", 20), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(i.oc(3, 1, 1 === t.pickupMode ? "infostand.button.eject" : "infostand.button.pickup"))
                }
            }

            function _S(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 19), i.jc("click", (function() {
                        return i.Gc(t), i.mc().processButtonAction("use")
                    })), i.Zb(1, "p", 20), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "infostand.button.use")))
            }

            function hS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 19), i.jc("click", (function() {
                        return i.Gc(t), i.mc().processButtonAction("save_branding_configuration")
                    })), i.Zb(1, "p", 20), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "save")))
            }
            let lS = (() => {
                class t extends Xf {
                    constructor() {
                        super(...arguments), this.furniData = null, this.pickupMode = 0, this.canMove = !1, this.canRotate = !1, this.canUse = !1, this.updateCount = 0, this.furniSettingsKeys = [], this.furniSettingsValues = []
                    }
                    update(t) {
                        this.furniSettingsKeys = [], this.furniSettingsValues = [];
                        let e = !1,
                            s = !1,
                            i = !1,
                            n = !1;
                        const r = t.roomControllerLevel >= _r.GUEST;
                        if ((r || t.isOwner || t.isRoomOwner || t.isAnyRoomOwner) && (e = !0, s = !t.isWallItem, t.roomControllerLevel >= _r.MODERATOR && (n = !0)), (t.usagePolicy === iS._Str_18353 || t.usagePolicy === iS._Str_18194 && r || t.extraParam === nm.JUKEBOX && r || t.extraParam == nm.USABLE_PRODUCT && r) && (i = !0), n && t.extraParam) {
                            const e = t.extraParam.substr(nm.BRANDING_OPTIONS.length);
                            if (e) {
                                const t = e.split("\t");
                                for (const e of t) {
                                    const t = e.split("=");
                                    t && 2 === t.length && (this.furniSettingsKeys.push(t[0]), this.furniSettingsValues.push(t[1]))
                                }
                            }
                        }
                        this.canMove = e, this.canRotate = s, this.canUse = i, this.togglePickupButton(t), this.updateCount++
                    }
                    togglePickupButton(e) {
                        e && (this.pickupMode = t.PICKUP_MODE_NONE, e.isOwner || e.isAnyRoomOwner ? this.pickupMode = t.PICKUP_MODE_FULL : (e.isRoomOwner || e.roomControllerLevel >= _r.GUILD_ADMIN) && (this.pickupMode = t.PICKUP_MODE_EJECT), e.isStickie && (this.pickupMode = t.PICKUP_MODE_NONE))
                    }
                    processButtonAction(e) {
                        if (!e || "" === e) return;
                        let s = null,
                            i = null;
                        switch (e) {
                            case "move":
                                s = Ob.RWFAM_MOVE;
                                break;
                            case "rotate":
                                s = Ob.RWFUAM_ROTATE;
                                break;
                            case "pickup":
                                s = this.pickupMode === t.PICKUP_MODE_FULL ? Ob.RWFAM_PICKUP : Ob.RWFAM_EJECT;
                                break;
                            case "use":
                                s = Ob.RWFAM_USE;
                                break;
                            case "save_branding_configuration":
                                s = Ob.RWFAM_SAVE_STUFF_DATA, i = this.getSettingsAsString()
                        }
                        s && this.widget.messageListener.processWidgetMessage(new Ob(s, this.furniData.id, this.furniData.category, this.furniData.purchaseOfferId, i))
                    }
                    getSettingsAsString() {
                        if (!this.furniSettingsKeys.length || !this.furniSettingsValues.length) return "";
                        let t = "",
                            e = 0;
                        for (; e < this.furniSettingsKeys.length;) t = t + (this.furniSettingsKeys[e] + "=") + this.furniSettingsValues[e] + "\t", e++;
                        return t
                    }
                    get type() {
                        return Kf.FURNI
                    }
                }
                return t.PICKUP_MODE_NONE = 0, t.PICKUP_MODE_EJECT = 1, t.PICKUP_MODE_FULL = 2, t.\u0275fac = function(e) {
                    return uS(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 25,
                    vars: 14,
                    consts: [
                        [1, "corelo-infofurni"],
                        [1, "d-flex", "flex-column", "align-items-end"],
                        [1, "furni-infobox"],
                        [1, "f-ib-head"],
                        [1, "furniname"],
                        [1, "furni_info-close", 3, "click"],
                        [1, "motto-hr"],
                        [1, "furniview-box"],
                        [1, "fvb", 3, "src"],
                        ["class", "mt-3", 4, "ngIf"],
                        [1, "furnidesc"],
                        [1, "fi-uinfo"],
                        [1, "fi-uname"],
                        [1, "button-container", "btn-group"],
                        ["class", "infofurni-button", 3, "click", 4, "ngIf"],
                        [1, "mt-3"],
                        [4, "ngFor", "ngForOf"],
                        [1, "habbobginput-txt"],
                        [1, "habbobginput", 3, "ngModel", "ngModelChange"],
                        [1, "infofurni-button", 3, "click"],
                        [1, "fbutton-txt"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Zb(4, "div", 4), i.Tc(5), i.Yb(), i.Zb(6, "div", 5), i.jc("click", (function() {
                            return e.hide()
                        })), i.Yb(), i.Yb(), i.Vb(7, "div", 6), i.Zb(8, "div", 7), i.Vb(9, "img", 8), i.Yb(), i.Vb(10, "div", 6), i.Rc(11, rS, 2, 1, "div", 9), i.Zb(12, "div", 10), i.Tc(13), i.Yb(), i.Vb(14, "div", 6), i.Vb(15, "div", 11), i.Zb(16, "div", 12), i.Tc(17), i.nc(18, "translate"), i.Yb(), i.Yb(), i.Zb(19, "div", 13), i.Rc(20, oS, 4, 3, "div", 14), i.Rc(21, aS, 4, 3, "div", 14), i.Rc(22, cS, 4, 3, "div", 14), i.Rc(23, _S, 4, 3, "div", 14), i.Rc(24, hS, 4, 3, "div", 14), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(5), i.Uc(e.furniData.name), i.Gb(4), i.tc("src", e.furniData.imageUrl, i.Ic), i.Gb(2), i.tc("ngIf", e.furniSettingsKeys.length && e.furniSettingsValues.length && e.furniSettingsKeys.length === e.furniSettingsValues.length), i.Gb(2), i.Uc(e.furniData.description), i.Gb(4), i.Uc(i.qc(18, 10, "furni.owner", "name", e.furniData.ownerName)), i.Gb(3), i.tc("ngIf", e.canMove), i.Gb(1), i.tc("ngIf", e.canRotate), i.Gb(1), i.tc("ngIf", 0 !== e.pickupMode), i.Gb(1), i.tc("ngIf", e.canUse), i.Gb(1), i.tc("ngIf", e.furniSettingsKeys.length && e.furniSettingsValues.length && e.furniSettingsKeys.length === e.furniSettingsValues.length))
                    },
                    directives: [hp.n, hp.m, VE.b, VE.j, VE.l],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const uS = i.bc(lS);
            let dS = (() => {
                class t extends Xf {
                    get type() {
                        return Kf.PET
                    }
                }
                return t.\u0275fac = function(e) {
                    return gS(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-infostand-pet-component"]
                    ],
                    features: [i.Db],
                    decls: 2,
                    vars: 0,
                    consts: [
                        [1, "nitro-room-infostand-pet-component"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Tc(1, " pet "), i.Yb())
                    },
                    encapsulation: 2
                }), t
            })();
            const gS = i.bc(dS);

            function mS(t, e) {
                if (1 & t && i.Vb(0, "nitro-badge", 18), 2 & t) {
                    const t = i.mc().$implicit;
                    i.tc("badge", t)
                }
            }

            function pS(t, e) {
                if (1 & t && (i.Zb(0, "div", 16), i.Rc(1, mS, 1, 1, "nitro-badge", 17), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.tc("ngIf", "" !== t)
                }
            }

            function bS(t, e) {
                if (1 & t && (i.Zb(0, "div", 19), i.Zb(1, "span", 20), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.botData.motto)
                }
            }

            function ES(t, e) {
                1 & t && (i.Zb(0, "p", 21), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "infostand.text.botowner")))
            }

            function fS(t, e) {
                1 & t && (i.Zb(0, "p", 22), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "infostand.text.handitem")))
            }
            let SS = (() => {
                class t extends Xf {
                    constructor() {
                        super(...arguments), this.botData = null
                    }
                    update(t) {
                        t && (cp.instance.localization.registerParameter("infostand.text.botowner", "name", cp.instance.getLocalization(this.botData.ownerName)), t.carryId > 0 && cp.instance.localization.registerParameter("infostand.text.handitem", "item", cp.instance.getLocalization("handitem" + t.carryId)))
                    }
                    get type() {
                        return Kf.RENTABLE_BOT
                    }
                }
                return t.\u0275fac = function(e) {
                    return IS(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 17,
                    vars: 7,
                    consts: [
                        [1, "infostand", "d-flex", "flex-column", "btn", "btn-primary", "rounded", "p-0", "nohover"],
                        [1, "d-flex", "align-items-center", "justify-content-between", "pt-3", "px-3", "w-100"],
                        ["type", "button", 1, "close", 3, "click"],
                        [1, "fas", "fa-times"],
                        [1, "d-flex", "flex-column", "p-3", "w-100"],
                        [1, "d-flex", "flex-nowrap"],
                        [1, "body-image", "bot"],
                        ["nitro-avatar-image", "", 3, "figure", "direction"],
                        [1, "flex-grow-1"],
                        [1, "badge-container"],
                        ["class", "badge-item", 4, "ngFor", "ngForOf"],
                        [1, "d-flex", "mt-2"],
                        ["class", "motto-container", 4, "ngIf"],
                        [1, "d-flex", "flex-column", "mt-2"],
                        ["class", "badge badge-secondary mb-0", 4, "ngIf"],
                        ["class", "badge badge-secondary mt-0 mb-0", 4, "ngIf"],
                        [1, "badge-item"],
                        [3, "badge", 4, "ngIf"],
                        [3, "badge"],
                        [1, "motto-container"],
                        [1, "motto"],
                        [1, "badge", "badge-secondary", "mb-0"],
                        [1, "badge", "badge-secondary", "mt-0", "mb-0"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Tc(2), i.Zb(3, "button", 2), i.jc("click", (function() {
                            return e.hide()
                        })), i.Vb(4, "i", 3), i.Yb(), i.Yb(), i.Zb(5, "div", 4), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.Vb(8, "div", 7), i.Yb(), i.Zb(9, "div", 8), i.Zb(10, "div", 9), i.Rc(11, pS, 2, 1, "div", 10), i.Yb(), i.Yb(), i.Yb(), i.Zb(12, "div", 11), i.Rc(13, bS, 3, 1, "div", 12), i.Yb(), i.Zb(14, "div", 13), i.Rc(15, ES, 3, 3, "p", 14), i.Rc(16, fS, 3, 3, "p", 15), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Vc(" ", e.botData.name, " "), i.Gb(6), i.tc("figure", e.botData.figure)("direction", 4), i.Gb(3), i.tc("ngForOf", e.botData.badges), i.Gb(2), i.tc("ngIf", "" !== e.botData.motto), i.Gb(2), i.tc("ngIf", e.botData.ownerId > 0), i.Gb(1), i.tc("ngIf", e.botData.carryItem > 0))
                    },
                    directives: [cf, hp.m, hp.n, qf],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const IS = i.bc(SS);

            function RS(t, e) {
                if (1 & t && i.Vb(0, "nitro-badge", 26), 2 & t) {
                    const t = i.mc().$implicit;
                    i.tc("badge", t)
                }
            }

            function vS(t, e) {
                if (1 & t && (i.Zb(0, "div", 24), i.Rc(1, RS, 1, 1, "nitro-badge", 25), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.tc("ngIf", "" !== t)
                }
            }

            function TS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div"), i.Vb(1, "i", 27), i.Zb(2, "textarea", 28), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().userData.motto = e
                    }))("keyup", (function(e) {
                        return i.Gc(t), i.mc().resizeTextArea(e)
                    }))("keydown.enter", (function(e) {
                        return i.Gc(t), i.mc().saveMotto(e)
                    })), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.uc("placeholder", i.oc(3, 2, "infostand.motto.change")), i.tc("ngModel", t.userData.motto)
                }
            }

            function OS(t, e) {
                if (1 & t && (i.Zb(0, "div", 29), i.Zb(1, "span", 30), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.userData.motto)
                }
            }

            function yS(t, e) {
                1 & t && (i.Zb(0, "p", 31), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "infostand.text.handitem")))
            }
            let AS = (() => {
                class t extends Xf {
                    constructor() {
                        super(...arguments), this.userData = null
                    }
                    update(t) {
                        t && t.carryId > 0 && cp.instance.localization.registerParameter("infostand.text.handitem", "item", cp.instance.getLocalization("handitem" + t.carryId))
                    }
                    resizeTextArea(t) {
                        if (!t) return;
                        const e = t.target;
                        e && (e.style.height = "0px", e.style.height = e.scrollHeight + "px")
                    }
                    saveMotto(t) {
                        this.userData.motto.length > 38 || (t.target.blur(), this.widget.messageListener.processWidgetMessage(new Tb(this.userData.motto)))
                    }
                    visitProfile() {
                        cp.instance.createLinkEvent("profile/goto/" + this.userData.id)
                    }
                    get isOwnProfile() {
                        return this.userData.type === vb.OWN_USER
                    }
                    get type() {
                        return Kf.USER
                    }
                }
                return t.\u0275fac = function(e) {
                    return CS(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 41,
                    vars: 20,
                    consts: [
                        ["id", "oldhabbo_motto"],
                        [1, "motto-header"],
                        [1, "motto-home_icon"],
                        [1, "motto-username", 3, "click"],
                        [1, "motto-close_button", 3, "click"],
                        [1, "motto-hr"],
                        [1, "motto-avatar-view"],
                        ["nitro-avatar-image", "", 2, "left", "-12px", "top", "-10px", "position", "relative", 3, "figure", "direction"],
                        [1, "motto-badges-section"],
                        ["class", "motto-badge-box", 4, "ngFor", "ngForOf"],
                        [4, "ngIf"],
                        ["class", "mottotxtbox", "style", "position: relative;float: left;", 4, "ngIf"],
                        [1, "motto-success-score"],
                        [1, "succes-score_name"],
                        ["class", "user-score", 4, "ngIf"],
                        [1, "motto_expressions-box"],
                        [1, "motto_heart-user"],
                        ["src", "./assets/images/motto/kalp.png", 1, "expressions-ico"],
                        [1, "motto_expressions-username"],
                        [1, "motto_smile-user"],
                        ["src", "./assets/images/motto/gulucuk.png", 1, "expressions-ico"],
                        [1, "motto_angry_face_user"],
                        ["src", "./assets/images/motto/kurukafa.png", 1, "expressions-ico"],
                        [1, "mottocorelo"],
                        [1, "motto-badge-box"],
                        [3, "badge", 4, "ngIf"],
                        [3, "badge"],
                        [1, "icon", "pencil-icon"],
                        ["maxlength", "38", "wrap", "soft", "rows", "1", 1, "mottotxtbox", 3, "ngModel", "placeholder", "ngModelChange", "keyup", "keydown.enter"],
                        [1, "mottotxtbox", 2, "position", "relative", "float", "left"],
                        [1, "usermotto"],
                        [1, "user-score"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Vb(2, "div", 2), i.Zb(3, "div", 3), i.jc("click", (function() {
                            return e.visitProfile()
                        })), i.Tc(4), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                            return e.hide()
                        })), i.Yb(), i.Yb(), i.Vb(6, "div", 5), i.Zb(7, "div", 6), i.Vb(8, "div", 7), i.Yb(), i.Zb(9, "div", 8), i.Rc(10, vS, 2, 1, "div", 9), i.Yb(), i.Vb(11, "div", 5), i.Rc(12, TS, 4, 4, "div", 10), i.Rc(13, OS, 3, 1, "div", 11), i.Vb(14, "div", 5), i.Zb(15, "div", 12), i.Zb(16, "p", 13), i.Tc(17), i.nc(18, "translate"), i.Yb(), i.Rc(19, yS, 3, 3, "p", 14), i.Yb(), i.Vb(20, "div", 5), i.Zb(21, "div", 15), i.Zb(22, "div", 16), i.Vb(23, "img", 17), i.Zb(24, "p", 18), i.Tc(25), i.nc(26, "translate"), i.Yb(), i.Yb(), i.Zb(27, "div", 19), i.Vb(28, "img", 20), i.Zb(29, "p", 18), i.Tc(30), i.nc(31, "translate"), i.Yb(), i.Yb(), i.Zb(32, "div", 21), i.Vb(33, "img", 22), i.Zb(34, "p", 18), i.Tc(35), i.nc(36, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Zb(37, "p", 23), i.Tc(38, "All designs belong to \ud83d\udc9d "), i.Zb(39, "u"), i.Tc(40, "Corelo!"), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.Uc(e.userData.name), i.Gb(4), i.tc("figure", e.userData.figure)("direction", 4), i.Gb(2), i.tc("ngForOf", e.userData.badges), i.Gb(2), i.tc("ngIf", e.isOwnProfile), i.Gb(1), i.tc("ngIf", !e.isOwnProfile), i.Gb(4), i.Wc("", i.oc(18, 12, "extendedprofile.achievementscore"), " ", e.userData.activityPoints, ""), i.Gb(2), i.tc("ngIf", e.userData.carryItem > 0), i.Gb(6), i.Uc(i.oc(26, 14, "extendedprofile.add.friends")), i.Gb(5), i.Uc(i.oc(31, 16, "extendedprofile.add.friends")), i.Gb(5), i.Uc(i.oc(36, 18, "extendedprofile.add.friends")))
                    },
                    directives: [cf, hp.m, hp.n, qf, VE.b, VE.g, VE.j, VE.l],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const CS = i.bc(AS),
                MS = ["infostandsContainer"];
            let US = (() => {
                class t extends qb {
                    constructor(t, e, s) {
                        super(), this._inventoryService = t, this._componentFactoryResolver = e, this._ngZone = s, this._lastComponent = null, this._furniData = new Bf, this._userData = new zf, this._petData = new Hf, this._botData = new Wf, this.objectSelectedHandler = this.objectSelectedHandler.bind(this), this.objectDeselectedHandler = this.objectDeselectedHandler.bind(this), this.objectRemovedHandler = this.objectRemovedHandler.bind(this), this.userInfostandUpdateHandler = this.userInfostandUpdateHandler.bind(this), this.botInfostandUpdateHandler = this.botInfostandUpdateHandler.bind(this), this.furniInfostandUpdateHandler = this.furniInfostandUpdateHandler.bind(this), this.rentableBotInfostandUpdateHandler = this.rentableBotInfostandUpdateHandler.bind(this), this.petInfostandUpdateHandler = this.petInfostandUpdateHandler.bind(this)
                    }
                    registerUpdateEvents(t) {
                        t && (t.addEventListener(Rp.OBJECT_SELECTED, this.objectSelectedHandler), t.addEventListener(Rp.OBJECT_DESELECTED, this.objectDeselectedHandler), t.addEventListener(Rp.USER_REMOVED, this.objectRemovedHandler), t.addEventListener(Rp.FURNI_REMOVED, this.objectRemovedHandler), t.addEventListener(vb.OWN_USER, this.userInfostandUpdateHandler), t.addEventListener(vb.PEER, this.userInfostandUpdateHandler), t.addEventListener(vb.BOT, this.botInfostandUpdateHandler), t.addEventListener(Ib.FURNI, this.furniInfostandUpdateHandler), t.addEventListener(Rb.RENTABLE_BOT, this.rentableBotInfostandUpdateHandler), t.addEventListener(jf.PET_INFO, this.petInfostandUpdateHandler), super.registerUpdateEvents(t))
                    }
                    unregisterUpdateEvents(t) {
                        t && (t.removeEventListener(Rp.OBJECT_SELECTED, this.objectSelectedHandler), t.removeEventListener(Rp.OBJECT_DESELECTED, this.objectDeselectedHandler), t.removeEventListener(Rp.USER_REMOVED, this.objectRemovedHandler), t.removeEventListener(Rp.FURNI_REMOVED, this.objectRemovedHandler), t.removeEventListener(vb.OWN_USER, this.userInfostandUpdateHandler), t.removeEventListener(vb.PEER, this.userInfostandUpdateHandler), t.removeEventListener(vb.BOT, this.botInfostandUpdateHandler), t.removeEventListener(Ib.FURNI, this.furniInfostandUpdateHandler), t.removeEventListener(Rb.RENTABLE_BOT, this.rentableBotInfostandUpdateHandler), t.removeEventListener(jf.PET_INFO, this.petInfostandUpdateHandler), super.unregisterUpdateEvents(t))
                    }
                    close() {
                        this.infostandsContainer.length && this.infostandsContainer.remove(), this._lastComponent = null
                    }
                    objectSelectedHandler(t) {
                        this.messageListener.processWidgetMessage(new Up(Up.GET_OBJECT_INFO, t.id, t.category))
                    }
                    objectDeselectedHandler(t) {
                        this._ngZone.run(() => this.close())
                    }
                    objectRemovedHandler(t) {
                        let e = !1;
                        const s = this._lastComponent && this._lastComponent.instance.type || -1;
                        if (-1 === s && (e = !0), s > 0) switch (t.type) {
                            case Rp.FURNI_REMOVED:
                                s === Kf.FURNI && t.id === this._furniData.id && (e = !0);
                                break;
                            case Rp.USER_REMOVED:
                                (s === Kf.USER && t.id === this._userData.id || s === Kf.PET && t.id === this._petData._Str_2707 || s === Kf.BOT && t.id === this._userData.id || s === Kf.RENTABLE_BOT && t.id === this._botData.id) && (e = !0)
                        }
                        e && this._ngZone.run(() => this.close())
                    }
                    userInfostandUpdateHandler(t) {
                        t && this._ngZone.run(() => {
                            this._userData.populate(t);
                            const e = this.getInfoStand(t);
                            e && (e.userData = this._userData, e.update(t))
                        })
                    }
                    botInfostandUpdateHandler(t) {
                        t && this._ngZone.run(() => {
                            this._userData.populate(t);
                            const e = this.getInfoStand(t);
                            e && (e.userData = this._userData, e.update(t))
                        })
                    }
                    furniInfostandUpdateHandler(t) {
                        t && this._ngZone.run(() => {
                            this._furniData.populate(t);
                            const e = this.getInfoStand(t);
                            e && (e.furniData = this._furniData, e.update(t))
                        })
                    }
                    rentableBotInfostandUpdateHandler(t) {
                        t && this._ngZone.run(() => {
                            this._botData.populate(t);
                            const e = this.getInfoStand(t);
                            e && (e.botData = this._botData, e.update(t))
                        })
                    }
                    petInfostandUpdateHandler(t) {
                        t && this._ngZone.run(() => {
                            this._petData.populate(t);
                            const e = this.getInfoStand(t);
                            e && (e.petData = this._petData, e.update(t))
                        })
                    }
                    updateUserBadges(t, e) {
                        t === this._userData.id && (this._userData.getIsBot() || this._ngZone.run(() => this._userData.badges = e))
                    }
                    getInfoStand(t) {
                        const e = this.getInfoStandComponentType(t);
                        if (!e) return null;
                        if (this._lastComponent && this._lastComponent.instance instanceof e) return this._lastComponent.instance;
                        this.infostandsContainer.length && this.infostandsContainer.remove();
                        const s = this._componentFactoryResolver.resolveComponentFactory(e);
                        let i = null;
                        return s && (i = this.infostandsContainer.createComponent(s)), this._lastComponent = i, i ? (i.instance.widget = this, i.instance) : null
                    }
                    get furniData() {
                        return this._furniData
                    }
                    getInfoStandComponentType(t) {
                        if (!t) return null;
                        switch (t.type) {
                            case vb.BOT:
                                return eS;
                            case Ib.FURNI:
                                return lS;
                            case jf.PET_INFO:
                                return dS;
                            case Rb.RENTABLE_BOT:
                                return SS;
                            case vb.OWN_USER:
                            case vb.PEER:
                                return AS
                        }
                        return null
                    }
                    get handler() {
                        return this.widgetHandler
                    }
                    get inventoryTrading() {
                        return this._inventoryService.controller.tradeService
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(df), i.Ub(i.l), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(MS, !0, i.W), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.infostandsContainer = t.first)
                        }
                    },
                    features: [i.Db],
                    decls: 3,
                    vars: 0,
                    consts: [
                        [1, "nitro-room-infostand-component"],
                        ["infostandsContainer", ""]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Vb(1, "div", null, 1), i.Yb())
                    },
                    encapsulation: 2
                }), t
            })();

            function DS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 9), i.Zb(1, "p", 10), i.Tc(2), i.Yb(), i.Zb(3, "div", 11), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(2).accept(s)
                    })), i.Yb(), i.Zb(4, "div", 12), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(2).deny(s)
                    })), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(2), i.Vc("", t, " ")
                }
            }

            function NS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "p", 6), i.Tc(8, "Following users are ringing the doorbell:"), i.Yb(), i.Zb(9, "div", 7), i.Rc(10, DS, 5, 1, "div", 8), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 2, "widgets.doorbell.title")), i.Gb(7), i.tc("ngForOf", t.users)
                }
            }
            let wS = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this._ngZone = t, this._visible = !1, this._users = [], this.onRoomRinging = this.onRoomRinging.bind(this), this.onRoomAcceptedAndRejected = this.onRoomAcceptedAndRejected.bind(this)
                    }
                    registerUpdateEvents(t) {
                        t && (t.addEventListener(Hp.RWDE_RINGING, this.onRoomRinging), t.addEventListener(Hp.REJECTED, this.onRoomAcceptedAndRejected), t.addEventListener(Hp.RWDE_ACCEPTED, this.onRoomAcceptedAndRejected), super.registerUpdateEvents(t))
                    }
                    unregisterUpdateEvents(t) {
                        t && (t.removeEventListener(Hp.RWDE_RINGING, this.onRoomRinging), t.removeEventListener(Hp.REJECTED, this.onRoomAcceptedAndRejected), t.removeEventListener(Hp.RWDE_ACCEPTED, this.onRoomAcceptedAndRejected), super.unregisterUpdateEvents(t))
                    }
                    onRoomRinging(t) {
                        t && this._ngZone.run(() => this.addUser(t.userName))
                    }
                    onRoomAcceptedAndRejected(t) {
                        t && this._ngZone.run(() => this.removeUser(t.userName))
                    }
                    addUser(t) {
                        this._users.indexOf(t) >= 0 || (this._users.length >= 50 ? this.deny(t) : (this._visible = !0, this._users.push(t)))
                    }
                    removeUser(t) {
                        const e = this._users.indexOf(t); - 1 !== e && (this._users.splice(e, 1), this._users.length || (this._visible = !1))
                    }
                    deny(t) {
                        this.messageListener.processWidgetMessage(new Bp(t, !1)), this.removeUser(t)
                    }
                    accept(t) {
                        this.messageListener.processWidgetMessage(new Bp(t, !0)), this.removeUser(t)
                    }
                    hide() {
                        this._visible = !1
                    }
                    get visible() {
                        return this._visible
                    }
                    get users() {
                        return this._users
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-doorbell-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["id", "doorbell-bekleme", "noMemory", "true", 3, "bringToTop", "draggable", 4, "ngIf"],
                        ["id", "doorbell-bekleme", "noMemory", "true", 3, "bringToTop", "draggable"],
                        [1, "doorbell-bekleme_head", "drag-handler"],
                        [1, "db-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "dbekleme-body"],
                        [1, "doorbell-bekleme-desc"],
                        [1, "doorbell-bekleme-list"],
                        ["class", "doorbell-usernamebox", 4, "ngFor", "ngForOf"],
                        [1, "doorbell-usernamebox"],
                        [1, "username-txt"],
                        [1, "odaya-al", 3, "click"],
                        [1, "odaya-alma", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, NS, 11, 4, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, hp.m],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const LS = ["chatContainer"],
                xS = function(t) {
                    return {
                        "background-color": t
                    }
                };

            function PS(t, e) {
                if (1 & t && i.Vb(0, "div", 10), 2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.xc(1, xS, t.senderColorString))
                }
            }
            const FS = function(t) {
                    return {
                        "background-image": t,
                        transform: "scale(1)",
                        top: "-53px"
                    }
                },
                GS = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function YS(t, e) {
                if (1 & t && i.Vb(0, "div", 11), 2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", t.petType >= 0 ? i.xc(1, FS, "url(" + t.senderImageUrl + ")") : i.xc(3, GS, "url(" + t.senderImageUrl + ")"))
                }
            }
            let kS = (() => {
                class t {
                    update(t) {
                        this.chatType = t.chatType, this.chatStyle = t.styleId, this.senderId = t.userId, this.senderName = t.userName, this.senderCategory = t.userCategory, this.message = t.text, this.messageLinks = t.links, this.senderX = t.userX, this.senderImageUrl = t.userImage && t.userImage.src || null, this.senderColor = t.userColor, this.senderColorString = this.senderColor && "#" + this.senderColor.toString(16).padStart(6, "0") || null, this.roomId = t.roomId, this.userType = t.userType, this.petType = t.petType
                    }
                    ready() {
                        this.makeVisible()
                    }
                    makeVisible() {
                        this.chatContainerElement && (this.chatContainerElement.style.visibility = "visible")
                    }
                    getX() {
                        return this.x
                    }
                    setX(t) {
                        this.chatContainerElement && (this.x = t, this.chatContainerElement.style.left = t + "px")
                    }
                    getY() {
                        return this.y
                    }
                    setY(t) {
                        this.chatContainerElement && (this.y = t, this.chatContainerElement.style.top = t + "px")
                    }
                    selectUser() {
                        cp.instance.roomEngine.selectRoomObject(this.roomId, this.senderId, this.senderCategory)
                    }
                    get width() {
                        return this.chatContainerElement && this.chatContainerElement.clientWidth || 0
                    }
                    get height() {
                        return this.chatContainerElement && this.chatContainerElement.clientHeight || 0
                    }
                    get chatContainerElement() {
                        return this.chatContainer && this.chatContainer.nativeElement || null
                    }
                    get decoratedUsername() {
                        return this.senderName + ":"
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(LS, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.chatContainer = t.first)
                        }
                    },
                    inputs: {
                        id: "id"
                    },
                    decls: 11,
                    vars: 8,
                    consts: [
                        [1, "bubble-container"],
                        ["chatContainer", ""],
                        ["class", "user-container-bg", 3, "ngStyle", 4, "ngIf"],
                        [3, "click"],
                        [1, "user-container"],
                        ["class", "user-image", 3, "ngStyle", 4, "ngIf"],
                        [1, "chat-content"],
                        [1, "username", 3, "innerHTML"],
                        [1, "message"],
                        [1, "pointer"],
                        [1, "user-container-bg", 3, "ngStyle"],
                        [1, "user-image", 3, "ngStyle"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0, 1), i.Rc(2, PS, 1, 3, "div", 2), i.Zb(3, "div", 3), i.jc("click", (function() {
                            return e.selectUser()
                        })), i.Zb(4, "div", 4), i.Rc(5, YS, 1, 5, "div", 5), i.Yb(), i.Zb(6, "div", 6), i.Vb(7, "b", 7), i.Zb(8, "span", 8), i.Tc(9), i.Yb(), i.Yb(), i.Vb(10, "div", 9), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngIf", 0 === e.chatStyle), i.Gb(1), i.Kb("chat-bubble bubble-", e.chatStyle, " type-", e.chatType, ""), i.Gb(2), i.tc("ngIf", e.senderImageUrl), i.Gb(2), i.tc("innerHTML", e.decoratedUsername, i.Hc), i.Gb(2), i.Vc(" ", e.message, ""))
                    },
                    directives: [hp.n, hp.o],
                    encapsulation: 2
                }), t
            })();
            const VS = ["chatView"],
                ZS = ["chatContainer"];

            function jS(t, e) {}
            let BS = (() => {
                    class t extends qb {
                        constructor(t, e) {
                            super(), this.ngZone = t, this.componentFactoryResolver = e, this.timeoutTime = 0, this.originalScale = 0, this.scaleFactor = 1, this.cameraOffset = new u.j, this.chats = [], this.tempChats = [], this.pendingChats = [], this.processingChats = !1, this.onChatMessage = this.onChatMessage.bind(this), this.onRoomViewUpdate = this.onRoomViewUpdate.bind(this)
                        }
                        ngOnInit() {
                            this.ngZone.runOutsideAngular(() => cp.instance.ticker.add(this.update, this))
                        }
                        ngOnDestroy() {
                            console.log("destroy chat"), this.ngZone.runOutsideAngular(() => cp.instance.ticker.remove(this.update, this))
                        }
                        registerUpdateEvents(t) {
                            t && (console.log("call this"), t.addEventListener(Zp.RWCUE_EVENT_CHAT, this.onChatMessage), t.addEventListener(vp.SIZE_CHANGED, this.onRoomViewUpdate), t.addEventListener(vp.POSITION_CHANGED, this.onRoomViewUpdate), t.addEventListener(vp.SCALE_CHANGED, this.onRoomViewUpdate), super.registerUpdateEvents(t))
                        }
                        unregisterUpdateEvents(t) {
                            t && (t.removeEventListener(Zp.RWCUE_EVENT_CHAT, this.onChatMessage), t.removeEventListener(vp.SIZE_CHANGED, this.onRoomViewUpdate), t.removeEventListener(vp.POSITION_CHANGED, this.onRoomViewUpdate), t.removeEventListener(vp.SCALE_CHANGED, this.onRoomViewUpdate))
                        }
                        update(t) {
                            cp.instance.time > this.timeoutTime && (this.timeoutTime > 0 && this.moveAllChatsUp(), this.resetTimeout())
                        }
                        resetTimeout() {
                            this.timeoutTime = cp.instance.time + t.UPDATE_INTERVAL
                        }
                        onChatMessage(t) {
                            !t || rl.isRunning() && t.chatType !== Zp.CHAT_TYPE_WHISPER || (this.pendingChats.push(t), this.timeoutTime = 0, this.processPendingChats())
                        }
                        onRoomViewUpdate(t) {
                            t.scale > 0 && (this.originalScale ? this.scaleFactor = t.scale / this.originalScale : this.originalScale = t.scale), t.positionDelta && (this.cameraOffset.x = this.cameraOffset.x + t.positionDelta.x / this.scaleFactor, this.cameraOffset.y = this.cameraOffset.y + t.positionDelta.y / this.scaleFactor), this.resetAllChatLocations()
                        }
                        processPendingChats(t = !1) {
                            if (!t && this.processingChats) return;
                            this.processingChats = !0;
                            const e = this.pendingChats.shift();
                            if (!e) return this.resetTimeout(), void(this.processingChats = !1);
                            let s = null,
                                i = null;
                            this.ngZone.run(() => {
                                const t = this.componentFactoryResolver.resolveComponentFactory(kS);
                                s = this.chatContainer.createComponent(t), i = s.instance, i && (i.id = this.getFreeItemId(), i.update(e))
                            }), setTimeout(() => this.addChat(s), 0)
                        }
                        getFreeItemId() {
                            return "chat_item_" + t.CHAT_COUNTER
                        }
                        addChat(e) {
                            if (!e) return;
                            const s = e.instance;
                            s.senderX = s.senderX / this.scaleFactor - this.cameraOffset.x, s.setY(this.chatViewElement.offsetHeight - s.height), this.resetChatItemLocation(e), this.makeRoomForChat(e), this.chats.push(e), s.ready(), t.CHAT_COUNTER++, setTimeout(() => this.processPendingChats(!0), 0)
                        }
                        hideChat(t) {
                            if (!t) return;
                            const e = this.chats.indexOf(t);
                            e >= 0 && this.chats.splice(e, 1);
                            const s = this.chatContainer.indexOf(t.hostView);
                            s >= 0 && this.chatContainer.remove(s)
                        }
                        moveChatUp(t, e = 0) {
                            if (!t) return;
                            const s = t.instance;
                            let i = s.height;
                            e && (i = e), s.setY(s.getY() - i), s.getY() < -2 * s.height && this.hideChat(t)
                        }
                        moveAllChatsUp() {
                            let t = this.chats.length - 1;
                            for (; t >= 0;) this.moveChatUp(this.chats[t], 15), t--
                        }
                        makeRoomForChat(t) {
                            if (!t) return;
                            const e = t.instance,
                                s = this.chats[this.chats.length - 1],
                                i = s && s.instance;
                            if (!i) return;
                            const n = i.getY() + i.height - 1,
                                r = (e.getY(), e.height + 1),
                                o = this.chatViewElement.offsetHeight - n;
                            if (o < r)
                                for (const a of this.chats) this.moveChatUp(a, r - o)
                        }
                        resetAllChatLocations() {
                            let t = this.chats.length - 1;
                            for (; t >= 0;) {
                                const e = this.chats[t];
                                e && this.resetChatItemLocation(e), t--
                            }
                        }
                        resetChatItemLocation(t) {
                            const e = t.instance;
                            let s = (e.senderX + this.cameraOffset.x) * this.scaleFactor;
                            s -= e.width / 2, s += this.chatViewElement.offsetWidth / 2, e.setX(s)
                        }
                        get chatViewElement() {
                            return this.chatViewReference && this.chatViewReference.nativeElement || null
                        }
                        get handler() {
                            return this.widgetHandler
                        }
                    }
                    return t.CHAT_COUNTER = 0, t.MAX_CHAT_HISTORY = 250, t.UPDATE_INTERVAL = 4e3, t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(i.E), i.Ub(i.l))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-room-chat-component"]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && (i.Zc(VS, !0), i.Zc(ZS, !0, i.W)), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.chatViewReference = t.first), i.Cc(t = i.kc()) && (e.chatContainer = t.first)
                            }
                        },
                        features: [i.Db],
                        decls: 4,
                        vars: 0,
                        consts: [
                            [1, "nitro-room-chat-component"],
                            ["chatView", ""],
                            ["chatContainer", ""]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0, 1), i.Rc(2, jS, 0, 0, "ng-template", null, 2, i.Sc), i.Yb())
                        },
                        encapsulation: 2
                    }), t
                })(),
                HS = (() => {
                    class t {
                        constructor() {
                            this._currentRoomOwner = !1, this._currentVisitedRoomIndex = 0
                        }
                        get currentRoomOwner() {
                            return this._currentRoomOwner
                        }
                        set currentRoomOwner(t) {
                            this._currentRoomOwner = t
                        }
                        getVisitedRooms() {
                            return t._visitedRooms
                        }
                        addRoomToVisitedRooms(e) {
                            t._visitedRooms.push(e), t._visitedRooms.length > 10 && t._visitedRooms.shift(), this._currentVisitedRoomIndex = t._visitedRooms.length > 0 ? t._visitedRooms.length - 1 : 0
                        }
                        setCurrentIndexToRoomId(e) {
                            const s = t._visitedRooms;
                            for (let t = 0; t < s.length; t++) {
                                const i = s[t];
                                i && i.roomId == e && (this._currentVisitedRoomIndex = t)
                            }
                        }
                        canGoBack() {
                            return 0 != this._currentVisitedRoomIndex
                        }
                        canGoForward() {
                            return this._currentVisitedRoomIndex < t._visitedRooms.length - 1
                        }
                        getPreviousRoomId() {
                            const e = t._visitedRooms[this._currentVisitedRoomIndex - 1 < 0 ? 0 : this._currentVisitedRoomIndex - 1];
                            return e ? e.roomId : null
                        }
                        getNextRoomId() {
                            if (this._currentVisitedRoomIndex == t._visitedRooms.length - 1) return null;
                            const e = t._visitedRooms[this._currentVisitedRoomIndex + 1];
                            return e ? e.roomId : null
                        }
                    }
                    return t._visitedRooms = [], t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })(),
                WS = (() => {
                    class t {
                        constructor(e, s, i, n) {
                            this._notificationService = e, this._settingsService = s, this._navigatorDataService = i, this._ngZone = n, this._messages = [], this._component = null, this._topLevelContexts = [], this._topLevelContext = null, this._categories = [], this._filter = t.SEARCH_FILTERS[0], this._lastSearchResults = [], this._lastSearch = "", this._tradeSettings = [], this._homeRoomId = -1, this._isSearching = !1, this._isLoaded = !1, this._isLoading = !1, this._canRate = !1, this.onRoomSessionEvent = this.onRoomSessionEvent.bind(this), this.setTradeSettings(), this.registerMessages(), cp.instance.addLinkEventTracker(this)
                        }
                        ngOnDestroy() {
                            this.unregisterMessages(), cp.instance.removeLinkEventTracker(this)
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                cp.instance.roomSessionManager.events.addEventListener(Tl.CREATED, this.onRoomSessionEvent), this._messages = [new cc(this.onUserInfoEvent.bind(this)), new fr(this.onRoomForwardEvent.bind(this)), new Mr(this.onRoomInfoOwnerEvent.bind(this)), new Ar(this.onRoomInfoEvent.bind(this)), new mr(this.onRoomEnterErrorEvent.bind(this)), new Hr(this.onRoomCreatedEvent.bind(this)), new nr(this.onRoomDoorbellEvent.bind(this)), new sr(this.onRoomDoorbellAcceptedEvent.bind(this)), new Hs(this.onGenericErrorEvent.bind(this)), new or(this.onRoomDoorbellRejectedEvent.bind(this)), new fn(this.onNavigatorCategoriesEvent.bind(this)), new In(this.onNavigatorCollapsedEvent.bind(this)), new Tn(this.onNavigatorEventCategoriesEvent.bind(this)), new Mn(this.onNavigatorLiftedEvent.bind(this)), new wn(this.onNavigatorMetadataEvent.bind(this)), new xn(this.onNavigatorOpenRoomCreatorEvent.bind(this)), new Fn(this.onNavigatorSearchesEvent.bind(this)), new Zn(this.onNavigatorSearchEvent.bind(this)), new Bn(this.onNavigatorSettingsEvent.bind(this)), new yn(this.onNavigatorHomeRoomEvent.bind(this)), new Dr(this.onRoomScoreEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                cp.instance.roomSessionManager.events.removeEventListener(Tl.CREATED, this.onRoomSessionEvent);
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            })
                        }
                        onRoomSessionEvent(t) {
                            if (t) switch (t.type) {
                                case Tl.CREATED:
                                    return void this._ngZone.run(() => this._settingsService.hideNavigator())
                            }
                        }
                        onUserInfoEvent(t) {
                            t && t.getParser() && (cp.instance.communication.connection.send(new p_), cp.instance.communication.connection.send(new v_))
                        }
                        onRoomForwardEvent(t) {
                            if (!(t instanceof fr)) return;
                            const e = t.getParser();
                            e && cp.instance.communication.connection.send(new Y_(e.roomId, !1, !0))
                        }
                        onRoomInfoOwnerEvent(t) {
                            if (!(t instanceof Mr)) return;
                            const e = t.getParser();
                            e && (this._navigatorDataService.currentRoomOwner = e.isOwner, cp.instance.communication.connection.send(new Y_(e.roomId, !0, !1)), h.call("legacyTrack", "navigator", "private", [e.roomId]))
                        }
                        onRoomInfoEvent(t) {
                            if (!(t instanceof Ar)) return;
                            const e = t.getParser();
                            if (e)
                                if (e.roomEnter);
                                else if (e.roomForward) {
                                if (e.data.ownerName !== cp.instance.sessionDataManager.userName) switch (e.data.doorMode) {
                                    case Gn.DOORBELL_STATE:
                                        return void this.openRoomDoorbell(e.data);
                                    case Gn.PASSWORD_STATE:
                                        return void this.openRoomPassword(e.data)
                                }
                                this.goToRoom(e.data.roomId)
                            }
                        }
                        onRoomEnterErrorEvent(t) {
                            if (!(t instanceof mr)) return;
                            const e = t.getParser();
                            if (!e) return;
                            switch (e.reason) {
                                case gr.FULL_ERROR:
                                    this._ngZone.run(() => this._notificationService.alert("${navigator.guestroomfull.text}", "${navigator.guestroomfull.title}"));
                                    break;
                                case gr.QUEUE_ERROR:
                                    this._ngZone.run(() => this._notificationService.alert("${room.queue.error.title}", "${room.queue.error. " + e.parameter + "}"));
                                    break;
                                case gr.BANNED:
                                    this._ngZone.run(() => this._notificationService.alert("${navigator.banned.title}", "${navigator.banned.text}"));
                                    break;
                                default:
                                    this._ngZone.run(() => this._notificationService.alert("${room.queue.error.title}", "${room.queue.error.title}"))
                            }
                            cp.instance.communication.connection.send(new Gc);
                            const s = new Il(Il.TOOLBAR_CLICK);
                            s.iconName = Sl.HOTEL_VIEW, cp.instance.roomEngine.events.dispatchEvent(s)
                        }
                        onRoomCreatedEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this.goToRoom(e.roomId)
                        }
                        onRoomDoorbellEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && (e.userName && 0 !== e.userName.length || this._ngZone.run(() => this._component && this._component.openRoomDoorbell(null, !0)))
                        }
                        onRoomDoorbellAcceptedEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && (e.userName && 0 !== e.userName.length || this._ngZone.run(() => this._component && this._component.closeRoomDoorbell()))
                        }
                        onGenericErrorEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && -100002 === e.errorCode && this._ngZone.run(() => this._component && this._component.openRoomPassword(null, !0))
                        }
                        onRoomDoorbellRejectedEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && (e.userName && 0 !== e.userName.length || this._ngZone.run(() => this._component && this._component.openRoomDoorbell(null, !1, !0)))
                        }
                        onNavigatorCategoriesEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this._categories = e.categories)
                        }
                        onNavigatorCollapsedEvent(t) {
                            t && t.getParser()
                        }
                        onNavigatorEventCategoriesEvent(t) {
                            t && t.getParser()
                        }
                        onNavigatorLiftedEvent(t) {
                            t && t.getParser()
                        }
                        onNavigatorMetadataEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                this._topLevelContexts = e.topLevelContexts, this._topLevelContexts.length > 0 && this.setCurrentContext(this._topLevelContexts[0]), this.clearSearch()
                            })
                        }
                        onNavigatorOpenRoomCreatorEvent(t) {
                            t && t.getParser() && this._component && this._ngZone.run(() => this._component.openRoomCreator())
                        }
                        onNavigatorSearchesEvent(t) {
                            t && t.getParser()
                        }
                        onNavigatorSearchEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = e.result;
                            s && this._ngZone.run(() => {
                                this.setCurrentContextByCode(s.code), this._lastSearchResults = s.results, this._isSearching = !1
                            })
                        }
                        onNavigatorSettingsEvent(t) {
                            t && t.getParser()
                        }
                        onNavigatorHomeRoomEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && (this._homeRoomId = e.homeRoomId)
                        }
                        onRoomScoreEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this._canRate = e.canLike)
                        }
                        getMaxVisitors(e) {
                            const s = [];
                            let i = t.MAX_VISITOR_STEPPER;
                            for (; i <= e;) s.push(i), i += t.MAX_VISITOR_INCREMENTOR;
                            return s
                        }
                        setTradeSettings() {
                            this._tradeSettings = [], this._tradeSettings.push("${navigator.roomsettings.trade_not_allowed}", "${navigator.roomsettings.trade_not_with_Controller}", "${navigator.roomsettings.trade_allowed}")
                        }
                        goToRoom(t, e = null) {
                            cp.instance.roomSessionManager.createSession(t, e)
                        }
                        goToPrivateRoom(t) {
                            cp.instance.communication.connection.send(new Y_(t, !1, !0))
                        }
                        goToHomeRoom() {
                            return !(this._homeRoomId < 1 || (this.goToRoom(this._homeRoomId), 0))
                        }
                        getContextByCode(t) {
                            if (!t) return null;
                            for (const e of this._topLevelContexts)
                                if (e && e.code === t) return e;
                            return null
                        }
                        setCurrentContext(t, e = !0) {
                            t && this._topLevelContext !== t && (this._topLevelContext = t)
                        }
                        setCurrentContextByCode(t, e = !0) {
                            if (!t) return;
                            const s = this.getContextByCode(t);
                            s && this.setCurrentContext(s, e)
                        }
                        setCurrentFilter(t) {
                            t && this._filter !== t && (this._filter = t)
                        }
                        search(e = null) {
                            if (!this._topLevelContext || this._isSearching) return;
                            this._filter || this.setCurrentFilter(t.SEARCH_FILTERS[0]);
                            const s = this._filter && this._filter.query ? this._filter.query + ":" : "";
                            let i = e;
                            null === i && (i = this._lastSearch), this._lastSearch = i || "", this.sendSearch(this._topLevelContext.code, s + this._lastSearch)
                        }
                        clearSearch() {
                            this.setCurrentFilter(t.SEARCH_FILTERS[0]), this._lastSearch = null, this.isLoaded && this.search()
                        }
                        sendSearch(t, e) {
                            t && (this._isSearching = !0, this._ngZone.runOutsideAngular(() => cp.instance.communication.connection.send(new S_(t, e))))
                        }
                        loadNavigator() {
                            this._ngZone.runOutsideAngular(() => cp.instance.communication.connection.send(new E_)), this._isLoaded = !0
                        }
                        openRoomDoorbell(t) {
                            t && this._component && this._component.openRoomDoorbell(t)
                        }
                        openRoomPassword(t) {
                            t && this._component && this._component.openRoomPassword(t)
                        }
                        linkReceived(t) {
                            const e = t.split("/");
                            if (!(e.length < 2)) switch (e[1]) {
                                case "goto":
                                    if (e.length > 2) switch (e[2]) {
                                        case "home":
                                            this.goToHomeRoom();
                                            break;
                                        default:
                                            {
                                                const t = parseInt(e[2]);t > 0 && this.goToPrivateRoom(t)
                                            }
                                    }
                                    return
                            }
                        }
                        get eventUrlPrefix() {
                            return "navigator"
                        }
                        get component() {
                            return this._component
                        }
                        set component(t) {
                            this._component = t
                        }
                        get topLevelContexts() {
                            return this._topLevelContexts
                        }
                        get topLevelContext() {
                            return this._topLevelContext
                        }
                        get categories() {
                            return this._categories
                        }
                        get filter() {
                            return this._filter
                        }
                        get lastSearch() {
                            return this._lastSearch
                        }
                        set lastSearch(t) {
                            this._lastSearch = t
                        }
                        get lastSearchResults() {
                            return this._lastSearchResults
                        }
                        get isSearching() {
                            return this._isSearching
                        }
                        get isLoaded() {
                            return this._isLoaded
                        }
                        get isLoading() {
                            return this._isLoading
                        }
                        get canRate() {
                            return this._canRate
                        }
                        set canRate(t) {
                            this._canRate = t
                        }
                        get tradeSettings() {
                            return this._tradeSettings
                        }
                    }
                    return t.SEARCH_FILTERS = [{
                        name: "anything",
                        query: null
                    }, {
                        name: "room.name",
                        query: "roomname"
                    }, {
                        name: "owner",
                        query: "owner"
                    }, {
                        name: "tag",
                        query: "tag"
                    }, {
                        name: "group",
                        query: "group"
                    }], t.MAX_VISITOR_STEPPER = 10, t.MAX_VISITOR_INCREMENTOR = 5, t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(xb), i.gc(_p), i.gc(HS), i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })();

            function zS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 27), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).handleButtonClick("room_settings_button")
                    })), i.Zb(1, "p", 26), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "navigator.room.popup.info.room.settings")))
            }

            function KS(t, e) {
                1 & t && (i.Zb(0, "div", 28), i.Zb(1, "p", 26), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "navigator.roomsettings.roomfilter")))
            }

            function XS(t, e) {
                1 & t && (i.Zb(0, "div", 29), i.Zb(1, "p", 26), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "open.floor.plan.editor")))
            }

            function qS(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.Zb(8, "p", 7), i.Tc(9), i.Yb(), i.Yb(), i.Vb(10, "div", 8), i.Zb(11, "div", 9), i.Zb(12, "p", 10), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Vb(15, "div", 11), i.Zb(16, "p", 12), i.Tc(17), i.Yb(), i.Yb(), i.Zb(18, "div", 9), i.Zb(19, "p", 13), i.Tc(20), i.nc(21, "translate"), i.Yb(), i.Zb(22, "p", 14), i.Tc(23), i.Yb(), i.Yb(), i.Zb(24, "div", 15), i.Vb(25, "div", 16), i.Yb(), i.Zb(26, "div", 17), i.Vb(27, "div", 18), i.Zb(28, "p", 19), i.Tc(29, "Partagez"), i.Yb(), i.Yb(), i.Rc(30, zS, 4, 3, "div", 20), i.Rc(31, KS, 4, 3, "div", 21), i.Rc(32, XS, 4, 3, "div", 22), i.Zb(33, "div", 23), i.jc("click", (function() {
                        return i.Gc(t), i.mc().handleButtonClick("room_report_button")
                    })), i.Zb(34, "p", 24), i.Tc(35), i.nc(36, "translate"), i.Yb(), i.Yb(), i.Zb(37, "div", 25), i.jc("click", (function() {
                        return i.Gc(t), i.mc().handleButtonClick("room_mute_all")
                    })), i.Zb(38, "p", 26), i.Tc(39), i.nc(40, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 11, "navigator.room.info.popup.title")), i.Gb(6), i.Uc(t.roomData.roomName), i.Gb(4), i.Uc(i.oc(14, 13, "navigator.roomownercaption")), i.Gb(4), i.Uc(t.roomData.ownerName), i.Gb(3), i.Uc(i.oc(21, 15, "navigator.roomrating")), i.Gb(3), i.Uc(t.roomData.ranking), i.Gb(7), i.tc("ngIf", t.roomSettingsVisible), i.Gb(1), i.tc("ngIf", t.roomFilterVisible), i.Gb(1), i.tc("ngIf", t.floorPlanVisible), i.Gb(3), i.Uc(i.oc(36, 17, "help.emergency.main.report.room")), i.Gb(4), i.Uc(i.oc(40, 19, t.mutedVisible ? "navigator.muteall_on" : "navigator.muteall_off"))
                }
            }
            let JS = (() => {
                class t extends qb {
                    constructor(t) {
                        super(), this._navigatorDataService = t, this.visible = !1, this.visibleChange = new i.q
                    }
                    hide() {
                        this.visibleChange.emit(!1)
                    }
                    get roomSettingsVisible() {
                        return !!this.roomData && (this._navigatorDataService.currentRoomOwner || cp.instance.sessionDataManager.securityLevel >= ip.MODERATOR)
                    }
                    get roomFilterVisible() {
                        return !!this.roomData && (this._navigatorDataService.currentRoomOwner || cp.instance.sessionDataManager.securityLevel >= ip.MODERATOR)
                    }
                    get floorPlanVisible() {
                        return !!this.roomData && cp.instance.roomSessionManager.getSession(this.roomData.roomId).controllerLevel >= _r.GUEST
                    }
                    get addStaffPickedVisible() {
                        return !!this.roomData && cp.instance.sessionDataManager.securityLevel >= ip.COMMUNITY
                    }
                    get hoomRegionVisible() {
                        return !!this.roomData && this.roomData.showOwner
                    }
                    get canMuteVisible() {
                        return !!this.roomData && this.roomData.canMute
                    }
                    get mutedVisible() {
                        return !!this.roomData && this.roomData.allInRoomMuted
                    }
                    handleButtonClick(t) {
                        switch (t) {
                            case "room_report_button":
                                this.reportRoom();
                                break;
                            case "room_settings_button":
                                this.openRoomSettings();
                                break;
                            case "room_mute_all":
                                this.muteAll()
                        }
                    }
                    makeFavorite() {}
                    favoriteRegion() {}
                    openRoomSettings() {
                        cp.instance.communication.connection.send(new k_(this.roomData.roomId))
                    }
                    openRoomFilter() {}
                    muteAll() {
                        this.roomData.allInRoomMuted = !this.roomData.allInRoomMuted, cp.instance.communication.connection.send(new wh)
                    }
                    makeHomeRoom() {}
                    emdedSrc() {}
                    staffPick() {}
                    reportRoom() {}
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(HS))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-room-event-view-component"]
                    ],
                    inputs: {
                        roomData: "roomData",
                        visible: "visible"
                    },
                    outputs: {
                        visibleChange: "visibleChange"
                    },
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["dragHandle", "#room-infodrag", "id", "room-info", "class", "nitro-room-tools-room-info-component", 3, "bringToTop", "draggable", 4, "ngIf"],
                        ["dragHandle", "#room-infodrag", "id", "room-info", 1, "nitro-room-tools-room-info-component", 3, "bringToTop", "draggable"],
                        ["id", "room-infodrag"],
                        [1, "ri-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "ribox"],
                        [1, "roomn-wfixed"],
                        [1, "ritxt"],
                        [1, "main-room-select"],
                        [1, "ri-wfixed"],
                        [1, "owtxt"],
                        [1, "ri-userprofil"],
                        [1, "owname"],
                        [1, "scoretxt"],
                        [1, "scrnumb"],
                        [1, "ri-roompicture"],
                        [1, "ri-cameraico"],
                        [1, "ri-roomurl"],
                        [1, "ri-roomurlico"],
                        [1, "ri-urltxt"],
                        ["id", "roomsettings_on", "class", "ri-button", 3, "click", 4, "ngIf"],
                        ["id", "roomfilter_on", "class", "ri-button disabled", "disabled", "", 4, "ngIf"],
                        ["id", "roomflooredit_on", "class", "ri-button disabled", "disabled", "", 4, "ngIf"],
                        [1, "ri-roomticket", 3, "click"],
                        [1, "ri-rtxt"],
                        ["id", "roomunmute_on", 1, "ri-button", 3, "click"],
                        [1, "ribt_txt"],
                        ["id", "roomsettings_on", 1, "ri-button", 3, "click"],
                        ["id", "roomfilter_on", "disabled", "", 1, "ri-button", "disabled"],
                        ["id", "roomflooredit_on", "disabled", "", 1, "ri-button", "disabled"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, qS, 41, 21, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const QS = ["componentContainer"];

            function $S(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 6), i.Zb(1, "div", 7), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).toggleRoomTools()
                    })), i.Vb(2, "div", 8), i.Zb(3, "p", 9), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Yb(), i.Zb(6, "div", 10), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).toggleZoom()
                    })), i.Vb(7, "div", 11), i.Zb(8, "p", 9), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Yb(), i.Zb(11, "div", 12), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).toggleChatHistory()
                    })), i.Vb(12, "div", 13), i.Zb(13, "p", 9), i.Tc(14), i.nc(15, "translate"), i.Yb(), i.Yb(), i.Zb(16, "div", 14), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).likeRoom()
                    })), i.Vb(17, "div", 15), i.Zb(18, "p", 9), i.Tc(19), i.nc(20, "translate"), i.Yb(), i.Yb(), i.Zb(21, "div", 16), i.Vb(22, "div", 17), i.Zb(23, "p", 9), i.Tc(24, "Partagez"), i.Yb(), i.Yb(), i.Zb(25, "div", 18), i.Zb(26, "div", 19), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).goInDirection("back")
                    })), i.Yb(), i.Vb(27, "div", 20), i.Zb(28, "div", 21), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).goInDirection("forward")
                    })), i.Yb(), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(4), i.Uc(i.oc(5, 4, "room.settings.button.text")), i.Gb(5), i.Uc(i.oc(10, 6, "room.zoom.button.text")), i.Gb(5), i.Uc(i.oc(15, 8, "room.chathistory.button.text")), i.Gb(5), i.Uc(i.oc(20, 10, "room.like.button.text")))
            }

            function tI(t, e) {
                if (1 & t && (i.Zb(0, "div", 22), i.Zb(1, "div", 23), i.Tc(2), i.Yb(), i.Zb(3, "div", 24), i.Tc(4), i.nc(5, "translate"), i.nc(6, "translate"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.tc("@inOutAnimation", void 0), i.Gb(2), i.Uc(t.roomData.roomName), i.Gb(2), i.Uc(t.roomData.showOwner ? i.oc(5, 3, "room.tool.room.owner.prefix") + " " + t.roomData.ownerName : i.oc(6, 5, "room.tool.public.room"))
                }
            }

            function eI(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 2), i.Zb(1, "div", 3), i.jc("click", (function() {
                        return i.Gc(t), i.mc().toggleRoomOptions()
                    })), i.Yb(), i.Rc(2, $S, 29, 12, "div", 4), i.Rc(3, tI, 7, 7, "div", 5), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.Ib(t.acac), i.Gb(1), i.tc("ngIf", t.roomOptionsVisible), i.Gb(1), i.tc("ngIf", t.roomNameVisible)
                }
            }
            let sI = (() => {
                    class t extends qb {
                        constructor(t, e, s, i, n) {
                            super(), this._componentFactoryResolver = t, this._ngZone = e, this._navigatorDataService = s, this._settingsService = i, this._navigatorService = n, this.acac = "bri-slide-box-kapali", this.acikMi = !1, this._lastRoomId = -1, this._roomData = null, this._roomOptionsVisible = !1, this._roomNameVisible = !1, this._roomToolsVisible = !1, this._roomNameTimeout = null, this.toggleRoomTools = this.toggleRoomTools.bind(this)
                        }
                        ngOnInit() {}
                        ngOnDestroy() {
                            this.stopRoomNameTimeout()
                        }
                        loadRoomData(t) {
                            t && this._ngZone.run(() => {
                                this._roomData = t, this._lastRoomId !== this._roomData.roomId && (this._lastRoomId = this._roomData.roomId, setTimeout(() => this.showRoomName(), 1))
                            })
                        }
                        _Str_22970(t) {
                            const e = this._navigatorDataService.getVisitedRooms();
                            if (e) {
                                for (const s of e)
                                    if (s && s.roomId === t.roomId) return;
                                this._navigatorDataService.addRoomToVisitedRooms(t)
                            }
                        }
                        _Str_23696(t) {
                            this._navigatorDataService.setCurrentIndexToRoomId(t)
                        }
                        likeRoom() {
                            this.handler.rateRoom()
                        }
                        canGo(t) {
                            switch (t) {
                                case "back":
                                    return this._navigatorDataService.canGoBack();
                                case "forward":
                                    return this._navigatorDataService.canGoForward()
                            }
                            return !1
                        }
                        goInDirection(t) {
                            if (!this.canGo(t)) return;
                            let e = null;
                            switch (t) {
                                case "back":
                                    e = this._navigatorDataService.getPreviousRoomId();
                                    break;
                                case "forward":
                                    e = this._navigatorDataService.getNextRoomId()
                            }
                            e && this._navigatorService.goToPrivateRoom(e)
                        }
                        toggleChatHistory() {
                            this._settingsService.toggleChatHistory()
                        }
                        toggleZoom() {
                            this.widgetHandler.processWidgetMessage(new wb)
                        }
                        toggleRoomOptions() {
                            this._roomOptionsVisible = !this._roomOptionsVisible, 0 == this.acikMi ? (this.acac = "bri-slide-box-acik", this.acikMi = !0) : (this.acac = "bri-slide-box-kapali", this.acikMi = !1), this._roomOptionsVisible && this.showRoomName()
                        }
                        showRoomName() {
                            this._roomNameVisible = !0, this.stopRoomNameTimeout(), this._roomNameTimeout = setTimeout(() => {
                                this.stopRoomNameTimeout(), this._roomNameVisible = !1
                            }, 5e3)
                        }
                        stopRoomNameTimeout() {
                            this._roomNameTimeout && (clearTimeout(this._roomNameTimeout), this._roomNameTimeout = null)
                        }
                        toggleRoomTools() {
                            this._roomToolsVisible = !this._roomToolsVisible
                        }
                        get handler() {
                            return this.widgetHandler
                        }
                        get roomOptionsVisible() {
                            return this._roomOptionsVisible
                        }
                        get roomNameVisible() {
                            return this._roomNameVisible
                        }
                        get roomToolsVisible() {
                            return this._roomToolsVisible
                        }
                        set roomToolsVisible(t) {
                            this._roomToolsVisible = t
                        }
                        get roomData() {
                            return this._roomData
                        }
                        get canRate() {
                            return this._navigatorService.canRate
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(i.l), i.Ub(i.E), i.Ub(HS), i.Ub(_p), i.Ub(WS))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-room-tools-component"]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && i.Zc(QS, !0, i.W), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.componentContainer = t.first)
                            }
                        },
                        features: [i.Db],
                        decls: 2,
                        vars: 3,
                        consts: [
                            ["class", "bottom-room-information", 4, "ngIf"],
                            [3, "visible", "roomData", "visibleChange"],
                            [1, "bottom-room-information"],
                            [1, "bri-slide-box", 3, "click"],
                            ["class", "bri-room-options", 4, "ngIf"],
                            ["class", "bri-room-name_and_owner-box", 4, "ngIf"],
                            [1, "bri-room-options"],
                            [1, "bri-ro-settings-box", 3, "click"],
                            [1, "settingsico"],
                            [1, "room-options-desc_text"],
                            [1, "bri-ro-zoom-box", 3, "click"],
                            [1, "zoomico"],
                            [1, "bri-ro-roomchat-box", 3, "click"],
                            [1, "roomchatico"],
                            [1, "bri-ro-roomlike-box", 3, "click"],
                            [1, "roomlikeico"],
                            [1, "bri-ro-roomurl-box"],
                            [1, "roomurlico"],
                            [1, "rt-mainbutton"],
                            [1, "enter-previous-room", 3, "click"],
                            [1, "rooms-\u0131ve-been-to-before"],
                            [1, "enter-next-room", 3, "click"],
                            [1, "bri-room-name_and_owner-box"],
                            [1, "bri-room_name"],
                            [1, "bri-room_owner"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Rc(0, eI, 4, 4, "div", 0), i.Zb(1, "nitro-room-event-view-component", 1), i.jc("visibleChange", (function(t) {
                                return e.roomToolsVisible = t
                            })), i.Yb()), 2 & t && (i.tc("ngIf", e.roomData), i.Gb(1), i.tc("visible", e.roomToolsVisible)("roomData", e.roomData))
                        },
                        directives: [hp.n, JS],
                        pipes: [tE],
                        encapsulation: 2,
                        data: {
                            animation: [Object(pp.j)("inOutAnimation", [Object(pp.i)(":enter", [Object(pp.h)({
                                opacity: 0
                            }), Object(pp.e)(".3s ease-out", Object(pp.h)({
                                opacity: 1
                            }))]), Object(pp.i)(":leave", [Object(pp.h)({
                                opacity: 1
                            }), Object(pp.e)(".3s ease-in", Object(pp.h)({
                                opacity: 0
                            }))])])]
                        }
                    }), t
                })(),
                iI = (() => {
                    class t {
                        constructor(t) {
                            this._notificationService = t, this.title = "", this.message = "", this.choices = []
                        }
                        close() {
                            this._notificationService.closeAlert(this)
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(xb))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["ng-component"]
                        ],
                        decls: 15,
                        vars: 4,
                        consts: [
                            [1, "koyu-tamekran"],
                            ["id", "corelo-ha", "noMemory", "true"],
                            ["id", "coreloha-drag"],
                            [1, "cha-baslik"],
                            [1, "chabox"],
                            [1, "frankbaba"],
                            [1, "cha-text-box"],
                            [1, "cha-text", 3, "innerHTML"],
                            [1, "alerthr"],
                            [1, "w100-alertclose"],
                            [1, "mb-islem-onayla-box", 3, "click"],
                            [1, "mb-tamam-text"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "p", 3), i.Tc(4), i.Yb(), i.Yb(), i.Zb(5, "div", 4), i.Vb(6, "div", 5), i.Zb(7, "div", 6), i.Vb(8, "p", 7), i.nc(9, "keepHtml"), i.Yb(), i.Vb(10, "div", 8), i.Zb(11, "div", 9), i.Zb(12, "div", 10), i.jc("click", (function() {
                                return e.close()
                            })), i.Zb(13, "p", 11), i.Tc(14, "Tamam"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.Uc(e.title), i.Gb(4), i.tc("innerHTML", i.oc(9, 2, e.message), i.Hc))
                        },
                        pipes: [dE],
                        encapsulation: 2
                    }), t
                })();

            function nI(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "button", 6), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.index;
                        return i.mc().choose(s)
                    })), i.Tc(1), i.nc(2, "translate"), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.tc("ngClass", t.classes), i.Gb(1), i.Uc(i.oc(2, 2, t.localizationKey))
                }
            }
            let rI = (() => {
                class t extends iI {
                    constructor() {
                        super(...arguments), this.callback = null, this.choices = []
                    }
                    choose(t) {
                        try {
                            this.choices[t].callback()
                        } catch (e) {
                            g.log(e)
                        }
                        this.close()
                    }
                }
                return t.\u0275fac = function(e) {
                    return oI(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 8,
                    vars: 5,
                    consts: [
                        ["dragHandle", ".card-header", "noMemory", "true", 1, "card", "nitro-alert", "nitro-alert-generic-component", 3, "bringToTop", "draggable"],
                        [1, "card-header", "text-center"],
                        [1, "card-body"],
                        [1, "mb-3", 3, "innerHTML"],
                        [1, "btn-group", "w-100"],
                        ["type", "button", "class", "btn w-100", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        ["type", "button", 1, "btn", "w-100", 3, "ngClass", "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Tc(2), i.Yb(), i.Zb(3, "div", 2), i.Vb(4, "div", 3), i.nc(5, "keepHtml"), i.Zb(6, "div", 4), i.Rc(7, nI, 3, 4, "button", 5), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Vc(" ", e.title, " adfdfsd "), i.Gb(2), i.tc("innerHTML", i.oc(5, 3, e.message), i.Hc), i.Gb(3), i.tc("ngForOf", e.choices))
                    },
                    directives: [CE, kE, hp.m, hp.l],
                    pipes: [dE, tE],
                    encapsulation: 2
                }), t
            })();
            const oI = i.bc(rI);
            class aI {
                constructor(t, e, s = []) {
                    this._localizationKey = t, this._callback = e, this._classes = s
                }
                get localizationKey() {
                    return this._localizationKey
                }
                get callback() {
                    return this._callback
                }
                get classes() {
                    return this._classes
                }
            }
            let cI = (() => {
                class t extends iI {
                    constructor() {
                        super(...arguments), this.callback = null
                    }
                    confirm() {
                        if (this.callback) try {
                            this.callback()
                        } catch (t) {
                            g.log(t)
                        }
                        this.close()
                    }
                }
                return t.\u0275fac = function(e) {
                    return _I(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 18,
                    vars: 10,
                    consts: [
                        ["dragHandle", "#coreloha-drag", "id", "corelo-ha", "noMemory", "true", 3, "bringToTop", "draggable"],
                        ["id", "coreloha-drag"],
                        [1, "cha-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "chabox"],
                        [1, "cha-text-box"],
                        [1, "cha-text", 3, "innerHTML"],
                        [1, "w50cha-iptal", 3, "click"],
                        [1, "w50cha-onay"],
                        [1, "cha-ok-box", 3, "click"],
                        [1, "ch50-tamam-text"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.Yb(), i.Zb(4, "div", 3), i.jc("click", (function() {
                            return e.close()
                        })), i.Yb(), i.Yb(), i.Zb(5, "div", 4), i.Zb(6, "div", 5), i.Vb(7, "p", 6), i.nc(8, "keepHtml"), i.Yb(), i.Zb(9, "div", 7), i.jc("click", (function() {
                            return e.close()
                        })), i.Zb(10, "u"), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Yb(), i.Zb(13, "div", 8), i.Zb(14, "div", 9), i.jc("click", (function() {
                            return e.confirm()
                        })), i.Zb(15, "p", 10), i.Tc(16), i.nc(17, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(e.title), i.Gb(4), i.tc("innerHTML", i.oc(8, 4, e.message), i.Hc), i.Gb(4), i.Uc(i.oc(12, 6, "generic.close")), i.Gb(5), i.Uc(i.oc(17, 8, "generic.confirm")))
                    },
                    directives: [CE, kE],
                    pipes: [dE, tE],
                    encapsulation: 2
                }), t
            })();
            const _I = i.bc(cI);

            function hI(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 10), i.jc("click", (function() {
                        return i.Gc(t), i.mc().openLink()
                    })), i.Zb(1, "u"), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "mod.alert.link")))
            }
            let lI = (() => {
                class t extends iI {
                    constructor() {
                        super(...arguments), this.link = ""
                    }
                    openLink() {
                        window.open(this.link, "_blank")
                    }
                    get hasLink() {
                        return this.link.length > 0
                    }
                }
                return t.\u0275fac = function(e) {
                    return uI(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 12,
                    vars: 5,
                    consts: [
                        [1, "koyu-tamekran"],
                        ["id", "corelo-ha", "noMemory", "true"],
                        ["id", "coreloha-drag"],
                        [1, "cha-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "chabox"],
                        [1, "frankbaba"],
                        [1, "cha-text-box"],
                        [1, "cha-text", 3, "innerHTML"],
                        ["class", "w50cha-link", 3, "click", 4, "ngIf"],
                        [1, "w50cha-link", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "p", 3), i.Tc(4), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                            return e.close()
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Vb(7, "div", 6), i.Zb(8, "div", 7), i.Vb(9, "p", 8), i.nc(10, "keepHtml"), i.Yb(), i.Rc(11, hI, 4, 3, "div", 9), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.Uc(e.title), i.Gb(5), i.tc("innerHTML", i.oc(10, 3, e.message), i.Hc), i.Gb(2), i.tc("ngIf", e.hasLink))
                    },
                    directives: [hp.n],
                    pipes: [dE, tE],
                    encapsulation: 2
                }), t
            })();
            const uI = i.bc(lI);

            function dI(t, e) {
                if (1 & t && (i.Xb(0), i.Vb(1, "p", 11), i.nc(2, "keepHtml"), i.Wb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.tc("innerHTML", i.oc(2, 1, t), i.Hc)
                }
            }
            let gI = (() => {
                class t extends iI {
                    constructor() {
                        super(...arguments), this.messages = []
                    }
                }
                return t.\u0275fac = function(e) {
                    return mI(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 15,
                    vars: 2,
                    consts: [
                        ["dragHandle", "#corelocmnd-drag", "id", "corelo-cmnd", "noMemory", "true", 3, "bringToTop", "draggable"],
                        ["id", "corelocmnd-drag"],
                        [1, "ccmnd-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "ccmndbox"],
                        [1, "ccmnd-commandslist"],
                        [1, "ccmnd-commandsbg"],
                        [1, "ccmnd-desc"],
                        [2, "color", "#fd6305"],
                        [1, "ccmnd-hood"],
                        [4, "ngFor", "ngForOf"],
                        [1, "ccmnd-commands", 3, "innerHTML"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.Yb(), i.Zb(4, "div", 3), i.jc("click", (function() {
                            return e.close()
                        })), i.Yb(), i.Yb(), i.Zb(5, "div", 4), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.Zb(8, "p", 7), i.Tc(9, "Ayr\u0131ca bak\u0131n\u0131z: "), i.Zb(10, "u", 8), i.Tc(11, "Habbo Hotel'de sohbet etmek"), i.Yb(), i.Yb(), i.Zb(12, "p", 9), i.Tc(13, "Komut listesi"), i.Yb(), i.Rc(14, dI, 3, 3, "ng-container", 10), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(e.title), i.Gb(11), i.tc("ngForOf", e.messages))
                    },
                    directives: [CE, kE, hp.m],
                    pipes: [dE],
                    encapsulation: 2
                }), t
            })();
            const mI = i.bc(gI),
                pI = ["alertsContainer"];

            function bI(t, e) {}

            function EI(t, e) {}
            let fI = (() => {
                class t {
                    constructor(t, e, s) {
                        this._notificationService = t, this._componentFactoryResolver = e, this._ngZone = s, this._alerts = new Map
                    }
                    ngOnInit() {
                        this._notificationService.alertCenter = this
                    }
                    ngOnDestroy() {
                        this.closeAllAlerts(), this._notificationService.alertCenter = null
                    }
                    alert(t, e = null) {
                        return this.buildAlert(iI, t, e)
                    }
                    alertWithLink(t, e = null, s = null) {
                        const i = this.buildAlert(lI, t, s);
                        return i ? (i.link = e, i) : null
                    }
                    alertWithConfirm(t, e = null, s = null) {
                        const i = this.buildAlert(cI, t, e);
                        return i ? (i.callback = s, i) : null
                    }
                    alertWithChoices(t, e, s = null) {
                        let i = null;
                        return this._ngZone.run(() => {
                            i = this.createAlertComponent(rI), s ? s.startsWith("${") && (s = cp.instance.getLocalization(s)) : s = cp.instance.getLocalization("${mod.alert.title}"), t && (t.startsWith("${") && (t = cp.instance.getLocalization(t)), t = t.replace(/\r\n|\r|\n/g, "<br />")), i.title = s, i.message = t, i.choices = e
                        }), i || null
                    }
                    alertWithScrollableMessages(t, e = null) {
                        const s = this.buildAlert(gI, null, e);
                        if (!s) return;
                        const i = [];
                        for (const n of t) n && i.push(n.replace(/\r\n|\r|\n/g, "<br />"));
                        return s.messages = i, s
                    }
                    buildAlert(t, e, s = null) {
                        let i = null;
                        return this._ngZone.run(() => {
                            i = this.createAlertComponent(t), s ? s.startsWith("${") && (s = cp.instance.getLocalization(s)) : s = cp.instance.getLocalization("${mod.alert.title}"), e && (e.startsWith("${") && (e = cp.instance.getLocalization(e)), e = e.replace(/\r\n|\r|\n/g, "<br />")), i.title = s, i.message = e
                        }), i || null
                    }
                    createAlertComponent(t) {
                        if (!t) return null;
                        let e = null;
                        const s = this._componentFactoryResolver.resolveComponentFactory(t);
                        let i = null;
                        return s && (i = this.alertsContainer.createComponent(s), this._alerts.set(i.instance, i)), e = i.instance, e
                    }
                    closeAlert(t) {
                        if (!t) return;
                        const e = this._alerts.get(t);
                        e && (this._alerts.delete(t), this.removeAlertView(e.hostView))
                    }
                    closeAllAlerts() {
                        for (const t of this._alerts.keys()) this.closeAlert(t)
                    }
                    removeAlertView(t) {
                        if (!t) return;
                        const e = this.alertsContainer.indexOf(t); - 1 !== e && this.alertsContainer.remove(e)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(xb), i.Ub(i.l), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-alert-center-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(pI, !0, i.W), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.alertsContainer = t.first)
                        }
                    },
                    decls: 5,
                    vars: 0,
                    consts: [
                        [1, "d-flex", "flex-column-reverse"],
                        ["notificationsContainer", ""],
                        ["alertsContainer", ""]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Rc(1, bI, 0, 0, "ng-template", null, 1, i.Sc), i.Yb(), i.Rc(3, EI, 0, 0, "ng-template", null, 2, i.Sc))
                    },
                    encapsulation: 2
                }), t
            })();
            class SI {
                constructor(t) {
                    this._name = t, this._achievements = []
                }
                get name() {
                    return this._name
                }
                set name(t) {
                    this._name = t
                }
                get achievements() {
                    return this._achievements
                }
                set achievements(t) {
                    this._achievements = t
                }
            }
            let II = (() => {
                class t {
                    constructor(t, e) {
                        this._settingsService = t, this._ngZone = e, this._messages = [], this._categories = [], this._selectedCategory = null, this._achievementScore = 0, this._isInitalized = !1, this.registerMessages()
                    }
                    ngOnDestroy() {
                        this.unregisterMessages()
                    }
                    registerMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            this._messages = [new ei(this.onAchievementsMessageEvent.bind(this)), new ii(this.onAchievementsScoreEvent.bind(this)), new $s(this.onAchievementEvent.bind(this))];
                            for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                        })
                    }
                    unregisterMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                            this._messages = []
                        })
                    }
                    onAchievementsScoreEvent(t) {
                        if (!t) return;
                        const e = t.getParser();
                        e && this._ngZone.run(() => this._achievementScore = e.score)
                    }
                    onAchievementsMessageEvent(t) {
                        if (!t) return;
                        const e = t.getParser();
                        if (!e) return;
                        const s = [];
                        for (const i of e.achievements) {
                            if (!i) continue;
                            let t = null;
                            for (const e of s)
                                if (e && e.name === i.category) {
                                    t = e;
                                    break
                                }
                            t || (t = new SI(i.category), s.push(t)), t.achievements.push(i)
                        }
                        this._ngZone.run(() => {
                            this._categories = s, this._selectedCategory = this._categories[0], this._isInitalized = !0
                        })
                    }
                    onAchievementEvent(t) {
                        if (!t) return;
                        const e = t.getParser();
                        if (!e) return;
                        const s = e.achievement;
                        s && this._ngZone.run(() => {
                            for (const t of this._categories) {
                                if (!t || t.name !== s.category) continue;
                                let e = !1;
                                for (const i of t.achievements)
                                    if (i && i.achievementId === s.achievementId) {
                                        e = !0, i.progress !== s.progress && (i.reset(s), this.isIgnoredAchievement(i) || this._selectedCategory !== t && i.unseen++);
                                        break
                                    }
                                if (e) break
                            }
                        })
                    }
                    isIgnoredAchievement(t) {
                        if (!t) return !1;
                        const e = cp.instance.getConfiguration("achievements.unseen.ignored"),
                            s = t.badgeId.replace(/[0-9]/g, "");
                        return e.indexOf(s) >= 0
                    }
                    loadAchievements() {
                        cp.instance.communication.connection.send(new Cc)
                    }
                    get categories() {
                        return this._categories
                    }
                    get selectedCategory() {
                        return this._selectedCategory
                    }
                    set selectedCategory(t) {
                        this._selectedCategory = t
                    }
                    get achievementScore() {
                        return this._achievementScore
                    }
                    get isInitalized() {
                        return this._isInitalized
                    }
                    get unseenCount() {
                        let t = 0;
                        for (const e of this._categories)
                            if (e)
                                for (const s of e.achievements) s && (t += s.unseen);
                        return t
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.gc(_p), i.gc(i.E))
                }, t.\u0275prov = i.Qb({
                    token: t,
                    factory: t.\u0275fac
                }), t
            })();
            const RI = ["progressBar"],
                vI = ["nitro-achievements-category-list-component", ""];

            function TI(t, e) {
                if (1 & t && (i.Zb(0, "div", 15), i.Zb(1, "p", 16), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit,
                        e = i.mc();
                    i.Gb(2), i.Uc(e.getUnseenCount(t))
                }
            }
            const OI = function(t) {
                    return [t]
                },
                yI = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function AI(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 8), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectCategory(s)
                    })), i.Rc(1, TI, 3, 1, "div", 9), i.Zb(2, "div", 10), i.Zb(3, "p", 11), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Yb(), i.Zb(6, "div", 12), i.Zb(7, "div", 13), i.Zb(8, "p", 14), i.Tc(9), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.Gb(1), i.tc("ngIf", s.getUnseenCount(t)), i.Gb(3), i.Uc(i.oc(5, 5, "quests." + t.name + ".name")), i.Gb(2), i.tc("ngClass", i.xc(7, OI, ""))("ngStyle", i.xc(9, yI, "url(" + s.getCategoryImage(t.name, t.achievements) + ")")), i.Gb(3), i.Uc(s.getCategoryProgress(t.achievements))
                }
            }
            const CI = function(t) {
                return {
                    width: t
                }
            };
            let MI = (() => {
                class t {
                    constructor(t, e, s) {
                        this._settingsService = t, this._achivementsService = e, this._ngZone = s, this.visible = !1
                    }
                    selectCategory(t) {
                        this._achivementsService.selectedCategory = t
                    }
                    getProgressNumbers() {
                        let t = 0,
                            e = 0;
                        for (const s of this.categories)
                            if (s)
                                for (const i of s.achievements) i && (t += i._Str_7518 ? i.level : i.level - 1, e += i.totalLevels);
                        return [t, e]
                    }
                    getProgressPercentageString() {
                        const [t, e] = this.getProgressNumbers();
                        return Math.trunc(t / e * 100) + "%"
                    }
                    getProgressString() {
                        const [t, e] = this.getProgressNumbers();
                        return t + "/" + e
                    }
                    getCategoryImage(t, e, s = !1) {
                        if (s) return cp.instance.getConfiguration("achievements.images.url", cp.instance.core.configuration.getValue("image.library.url") + `quests/achcategory_${t}.png`).toString().replace("%image%", t);
                        let i = 0;
                        for (const r of e) i += r._Str_7518 ? r.level : r.level - 1;
                        const n = i > 0 ? "active" : "inactive";
                        return cp.instance.getConfiguration("achievements.images.url", cp.instance.core.configuration.getValue("image.library.url") + `quests/achcategory_${t}_${n}.png`).toString().replace("%image%", `achcategory_${t}_${n}`)
                    }
                    getCategoryProgress(t) {
                        let e = 0,
                            s = 0;
                        for (const i of t) i && (i._Str_7518 && (e = e + 1 + i.level), s += i.totalLevels);
                        return e + "/" + s
                    }
                    getUnseenCount(t) {
                        let e = 0;
                        if (t)
                            for (const s of t.achievements) s && (e += s.unseen);
                        return e
                    }
                    get categories() {
                        return this._achivementsService.categories
                    }
                    get selectedCategory() {
                        return this._achivementsService.selectedCategory
                    }
                    get achievementScore() {
                        return this._achivementsService.achievementScore
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(_p), i.Ub(II), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-achievements-category-list-component", ""]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(RI, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.progressBar = t.first)
                        }
                    },
                    inputs: {
                        visible: "visible"
                    },
                    attrs: vI,
                    decls: 11,
                    vars: 10,
                    consts: [
                        [1, "achievementsbox"],
                        ["class", "success-info-box", 3, "click", 4, "ngFor", "ngForOf"],
                        [1, "achievement-progression"],
                        [1, "ach-progessbox"],
                        [1, "achprbg"],
                        [1, "total-ach"],
                        [1, "achprogress", 3, "ngStyle"],
                        [1, "achprogtxt"],
                        [1, "success-info-box", 3, "click"],
                        ["class", "basari-mobicountbox", 4, "ngIf"],
                        [1, "achievements-title"],
                        [1, "achtxt"],
                        [1, "achico", 3, "ngClass", "ngStyle"],
                        [1, "number-of-success"],
                        [1, "nostxt"],
                        [1, "basari-mobicountbox"],
                        [1, "count-txt", "count"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Rc(1, AI, 10, 11, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Zb(4, "div", 4), i.Zb(5, "p", 5), i.Tc(6), i.Yb(), i.Vb(7, "div", 6), i.Yb(), i.Yb(), i.Zb(8, "p", 7), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(1), i.tc("ngForOf", e.categories), i.Gb(5), i.Vc("Toplam Ba\u015far\u0131lar: ", e.getProgressString(), ""), i.Gb(1), i.tc("ngStyle", i.xc(8, CI, e.getProgressPercentageString())), i.Gb(2), i.Uc(i.qc(10, 4, "achievements.categories.score", "score", e.achievementScore)))
                    },
                    directives: [hp.m, hp.o, hp.n, hp.l],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            class UI {
                constructor(t) {
                    this.badgeId = t, this._base = "", this._level = 1, this.parseText()
                }
                parseText() {
                    let t = this.badgeId.length - 1;
                    for (; t > 0 && this.isNumber(this.badgeId.charAt(t));) t--;
                    this._base = this.badgeId.substr(0, t + 1);
                    const e = this.badgeId.substr(t + 1, this.badgeId.length);
                    e && "" != e && (this._level = Number.parseInt(e))
                }
                isNumber(t) {
                    const e = t.charCodeAt(0);
                    return e >= 49 && e <= 57
                }
                set level(t) {
                    this._level = Math.max(1, t)
                }
                get level() {
                    return this._level
                }
                get getBadgeId() {
                    return this._base + this._level
                }
                get base() {
                    return this._base
                }
            }
            const DI = ["nitro-achievements-category-component", ""];

            function NI(t, e) {
                if (1 & t && (i.Zb(0, "div", 12), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.Uc(t.count)
                }
            }
            const wI = function(t, e) {
                    return [t, e]
                },
                LI = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function xI(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 9), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectAchievement(s)
                    })), i.Vb(1, "div", 10), i.Rc(2, NI, 2, 1, "div", 11), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.tc("ngClass", i.yc(4, wI, s.selectedAchievement === t ? "achcheck-box-active" : "", t && t._Str_10438 ? "" : "greyscale")), i.Gb(1), i.tc("ngClass", i.yc(7, wI, "", t && t._Str_10438 ? "" : "greyscale"))("ngStyle", i.xc(10, LI, "url(" + s.getBadgeImageUrl(t) + ")")), i.Gb(1), i.tc("ngIf", t.count)
                }
            }
            const PI = function(t) {
                    return [t]
                },
                FI = function(t) {
                    return {
                        width: t
                    }
                };

            function GI(t, e) {
                if (1 & t && (i.Zb(0, "div", 13), i.Zb(1, "div", 14), i.Zb(2, "div", 15), i.Vb(3, "img", 16), i.Yb(), i.Zb(4, "p", 17), i.Tc(5), i.Yb(), i.Yb(), i.Zb(6, "div", 18), i.Zb(7, "p", 19), i.Tc(8), i.Yb(), i.Zb(9, "p", 20), i.Tc(10), i.Yb(), i.Zb(11, "p", 21), i.Tc(12), i.nc(13, "translate"), i.Zb(14, "b"), i.Tc(15), i.Yb(), i.Vb(16, "img", 22), i.Yb(), i.Zb(17, "div", 23), i.Zb(18, "div", 24), i.Zb(19, "p", 25), i.Tc(20), i.Yb(), i.Vb(21, "div", 26), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.tc("ngClass", i.xc(11, PI, t.selectedAchievement._Str_10438 ? "" : "greyscale"))("src", t.getBadgeImageUrl(t.selectedAchievement), i.Ic), i.Gb(2), i.Uc(t.getBadgeLevelString(t.selectedAchievement)), i.Gb(3), i.Uc(t.getBadgeText(t.selectedAchievement)), i.Gb(2), i.Uc(t.getBadgeText(t.selectedAchievement, !0)), i.Gb(2), i.Vc("", i.oc(13, 9, "achievements.details.reward"), " "), i.Gb(3), i.Uc(t.selectedAchievement.rewardAmount), i.Gb(5), i.Uc(t.getProgress(t.selectedAchievement, !0)), i.Gb(1), i.tc("ngStyle", i.xc(13, FI, t.getProgress(t.selectedAchievement)))
                }
            }
            let YI = (() => {
                class t {
                    constructor(t) {
                        this._achivementsService = t, this.category = null, this._selectedAchievement = null
                    }
                    ngOnChanges(t) {
                        const e = t.category.currentValue;
                        e && e !== t.category.previousValue && (this._selectedAchievement = null)
                    }
                    selectAchievement(t) {
                        t.unseen = 0, this._selectedAchievement = t
                    }
                    getAchievedBadgeId(t) {
                        return t._Str_7518 ? t.badgeId : cp.instance.localization.getBadgeBaseAndLevel(t.badgeId)
                    }
                    getBadgeText(t, e = !1) {
                        const s = this.getAchievedBadgeId(t),
                            i = new UI(s);
                        let n;
                        return n = this.getText(e ? ["badge_desc_" + s, "badge_desc_" + i.base] : ["badge_name_" + s, "badge_name_" + i.base]), n.replace("%roman%", this.getRomanNumeral(i.level)).replace("%limit%", t._Str_24142.toString())
                    }
                    getText(t) {
                        let e = "",
                            s = 0;
                        for (; s < t.length;) {
                            const i = t[s];
                            if (e = cp.instance.getLocalization(i), e !== i) return e;
                            s++
                        }
                        return ""
                    }
                    getProgress(t, e = !1) {
                        if (t) return e ? t.progress + "/" + t.toNextProgress : Math.trunc(t.progress / t.toNextProgress * 100) + "%"
                    }
                    getBadgeLevelString(t) {
                        if (!t) return;
                        let e = cp.instance.getLocalization("achievements.details.level");
                        return e = e.replace("%level%", Math.max(1, t.level - 1).toString()), e = e.replace("%limit%", t.totalLevels.toString()), e
                    }
                    getRomanNumeral(t) {
                        return cp.instance.localization.getRomanNumeral(t)
                    }
                    getBadgeImageUrl(t) {
                        let e = t.badgeId;
                        return t.totalLevels > 1 && (e = e.replace(/[0-9]/g, ""), e += t.level - 1 > 0 ? t.level - 1 : t.level), cp.instance.sessionDataManager.getBadgeUrl(e)
                    }
                    getCurrencyUrl(t) {
                        return cp.instance.getConfiguration("currency.asset.icon.url").replace("%type%", t.toString())
                    }
                    get selectedAchievement() {
                        return this._selectedAchievement
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(II))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-achievements-category-component", ""]
                    ],
                    inputs: {
                        category: "category"
                    },
                    features: [i.Eb],
                    attrs: DI,
                    decls: 12,
                    vars: 5,
                    consts: [
                        [1, "achievements-check"],
                        [1, "achcheck-head"],
                        [1, "ach-backbutton"],
                        [1, "achname"],
                        [1, "achtotal_badge"],
                        [1, "ach-badge", 2, "background-image", "url(./assets/images/achievements/achbadge.png)"],
                        [1, "achcheck-body"],
                        ["class", "achcheck-box", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        ["class", "achcheck-info", 4, "ngIf"],
                        [1, "achcheck-box", 3, "ngClass", "click"],
                        [1, "achcheck-badge", 3, "ngClass", "ngStyle"],
                        ["class", "position-absolute btn btn-sm btn-danger px-1 py-0 rounded count", 4, "ngIf"],
                        [1, "position-absolute", "btn", "btn-sm", "btn-danger", "px-1", "py-0", "rounded", "count"],
                        [1, "achcheck-info"],
                        [1, "achcheck-left"],
                        [1, "achcheckbigbadge"],
                        [3, "ngClass", "src"],
                        [1, "achcheck-levelinfo"],
                        [1, "achcheck-right"],
                        [1, "achcheck-title"],
                        [1, "achcheck-desc"],
                        [1, "achcheck-leveltxt"],
                        ["src", "/assets/images/wallet/icons/0.png"],
                        [1, "achcheck-progessbox"],
                        [1, "achcheckprbg"],
                        [1, "total-ach"],
                        [1, "achprogress", 3, "ngStyle"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Vb(2, "div", 2), i.Zb(3, "p", 3), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Zb(6, "p", 4), i.Tc(7, "0 rozet topland\u0131"), i.Yb(), i.Vb(8, "div", 5), i.Yb(), i.Zb(9, "div", 6), i.Rc(10, xI, 3, 12, "div", 7), i.Rc(11, GI, 22, 15, "div", 8), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.Uc(i.oc(5, 3, "quests." + e.category.name + ".name")), i.Gb(6), i.tc("ngForOf", e.category.achievements), i.Gb(1), i.tc("ngIf", e.selectedAchievement))
                    },
                    directives: [hp.m, hp.n, hp.l, hp.o],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();

            function kI(t, e) {
                if (1 & t && i.Vb(0, "div", 7), 2 & t) {
                    const t = i.mc(2);
                    i.tc("category", t.selectedCategory)
                }
            }

            function VI(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Vb(6, "div", 5), i.Rc(7, kI, 1, 1, "div", 6), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 2, "inventory.achievements")), i.Gb(4), i.tc("ngIf", t.selectedCategory)
                }
            }
            let ZI = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._settingsService = t, this._achivementsService = e, this._ngZone = s, this.visible = !1
                        }
                        ngOnChanges(t) {
                            const e = t.visible.currentValue;
                            e && e !== (t.visible.previousValue || !1) && this.prepareAchievements()
                        }
                        prepareAchievements() {
                            this._achivementsService.isInitalized || this._achivementsService.loadAchievements()
                        }
                        hide() {
                            this._settingsService.hideAchievements()
                        }
                        get selectedCategory() {
                            return this._achivementsService.selectedCategory
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(_p), i.Ub(II), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-achievements-main-component"]
                        ],
                        inputs: {
                            visible: "visible"
                        },
                        features: [i.Eb],
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["id", "achievements", 3, "bringToTop", "draggable", 4, "ngIf"],
                            ["id", "achievements", 3, "bringToTop", "draggable"],
                            ["id", "achievementsdrag", 1, "drag-handler"],
                            [1, "oldh-hood"],
                            [1, "old-kapat", 3, "click"],
                            ["nitro-achievements-category-list-component", ""],
                            ["nitro-achievements-category-component", "", 3, "category", 4, "ngIf"],
                            ["nitro-achievements-category-component", "", 3, "category"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, VI, 8, 4, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        directives: [hp.n, CE, kE, MI, YI],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                jI = (() => {
                    class t {
                        constructor(t, e) {
                            this._notificationService = t, this._ngZone = e, this._component = null, this.registerMessages()
                        }
                        static getReasonAsString(t) {
                            switch (t) {
                                case 1:
                                    return "useless";
                                case 2:
                                    return "abusive";
                                default:
                                    return "resolved"
                            }
                        }
                        ngOnDestroy() {
                            this.unregisterMessages()
                        }
                        registerMessages() {
                            this._messages && this.unregisterMessages(), this._messages = [new Xs(this.onCallForHelpResultMessageEvent.bind(this))];
                            for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                        }
                        unregisterMessages() {
                            if (this._messages && this._messages.length)
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t)
                        }
                        onCallForHelpResultMessageEvent(e) {
                            if (!e) return;
                            const s = e.getParser();
                            if (!s) return;
                            let i = s.messageText;
                            "" === i && (i = cp.instance.getLocalization("${help.cfh.closed." + t.getReasonAsString(s.resultType) + "}")), this._ngZone.run(() => this._notificationService.alert(i, "${mod.alert.title}"))
                        }
                        get component() {
                            return this._component
                        }
                        set component(t) {
                            this._component = t
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(xb), i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })(),
                BI = (() => {
                    class t {
                        constructor(t, e) {
                            this._callForHelpService = t, this._ngZone = e
                        }
                        ngOnInit() {
                            this._callForHelpService.component = this
                        }
                        ngOnDestroy() {
                            this._callForHelpService.component = null
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(jI), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-call-for-help-main-component"]
                        ],
                        decls: 0,
                        vars: 0,
                        template: function(t, e) {},
                        encapsulation: 2
                    }), t
                })(),
                HI = (() => {
                    class t {
                        openPage(t) {}
                        closePage(t) {
                            t && this._component && this._component.close(t)
                        }
                        closeAll() {
                            this._component && this._component.closeAll()
                        }
                        get component() {
                            return this._component
                        }
                        set component(t) {
                            this._component = t
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })(),
                WI = (() => {
                    class t {
                        constructor(t) {
                            this._habbopediaService = t, this.url = ""
                        }
                        close() {
                            this._habbopediaService.closePage(this)
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(HI))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["ng-component"]
                        ],
                        decls: 0,
                        vars: 0,
                        template: function(t, e) {},
                        encapsulation: 2
                    }), t
                })();
            const zI = ["pagesContainer"];

            function KI(t, e) {}
            let XI = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._habbopediaService = t, this._componentFactoryResolver = e, this._ngZone = s, this._pages = new Map
                        }
                        ngOnInit() {
                            this._habbopediaService.component = this, cp.instance.addLinkEventTracker(this)
                        }
                        ngOnDestroy() {
                            cp.instance.removeLinkEventTracker(this), this._habbopediaService.component = null
                        }
                        openPage(t) {
                            this.buildPage(WI, t)
                        }
                        buildPage(t, e) {
                            const s = this.createComponent(t);
                            return s ? (s.url = e, s) : null
                        }
                        createComponent(t) {
                            if (!t) return null;
                            const e = this._componentFactoryResolver.resolveComponentFactory(t);
                            let s = null;
                            return e && (s = this.pagesContainer.createComponent(e), this._pages.set(s.instance, s)), s.instance
                        }
                        close(t) {
                            if (!t) return;
                            const e = this._pages.get(t);
                            e && (this._pages.delete(t), this.removeView(e.hostView))
                        }
                        closeAll() {
                            for (const t of this._pages.keys()) this.close(t)
                        }
                        removeView(t) {
                            if (!t) return;
                            const e = this.pagesContainer.indexOf(t); - 1 !== e && this.pagesContainer.remove(e)
                        }
                        linkReceived(t) {
                            const e = t.split("/");
                            e.length < 2 || (e.shift(), this.openPage(e.join("/")))
                        }
                        get eventUrlPrefix() {
                            return "habbopages/"
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(HI), i.Ub(i.l), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-pedia-main-component"]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && i.Zc(zI, !0, i.W), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.pagesContainer = t.first)
                            }
                        },
                        decls: 2,
                        vars: 0,
                        consts: [
                            ["pagesContainer", ""]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, KI, 0, 0, "ng-template", null, 0, i.Sc)
                        },
                        encapsulation: 2
                    }), t
                })(),
                qI = (() => {
                    class t {}
                    return t.GENERIC = "hd", t.HEAD = "head", t.TORSO = "torso", t.LEGS = "legs", t.HOTLOOKS = "hotlooks", t.WARDROBE = "wardrobe", t.EFFECTS = "effects", t
                })(),
                JI = (() => {
                    class t {
                        constructor(t) {
                            this._model = t, this._figureString = null, this._isDisposed = !1
                        }
                        dispose() {
                            this._isDisposed = !0
                        }
                        update(t, e = 0, s = 4) {
                            this._figureString = t
                        }
                        resetFigure(t) {}
                        get disposed() {
                            return this._isDisposed
                        }
                        get figureString() {
                            return this._figureString
                        }
                    }
                    return t._Str_9887 = 4, t
                })(),
                QI = (() => {
                    class t {
                        constructor() {
                            this._gender = "M", this._direction = 4, this._avatarEffectType = -1, this._direction = JI._Str_9887, this._view = new JI(this)
                        }
                        loadAvatarData(t, e) {
                            this._data = new Map, this._colors = new Map, this._gender = e, this.parseFigureString(t), this.updateView()
                        }
                        dispose() {
                            this._data = null, this._colors = null, this._isDisposed = !0, this._view && (this._view.dispose(), this._view = null)
                        }
                        get disposed() {
                            return this._isDisposed
                        }
                        parseFigureString(t) {
                            if (!t) return;
                            const e = t.split(".");
                            if (e && e.length)
                                for (const s of e) {
                                    const t = s.split("-");
                                    if (!t.length) continue;
                                    const e = t[0],
                                        i = parseInt(t[1]),
                                        n = [];
                                    let r = 2;
                                    for (; r < t.length;) n.push(parseInt(t[r])), r++;
                                    n.length || n.push(0), this.savePartSetId(e, i, !1), this.savePartSetColourId(e, n, !1)
                                }
                        }
                        getPartSetId(t) {
                            const e = this._data.get(t);
                            return void 0 !== e ? e : -1
                        }
                        getColourIds(t) {
                            const e = this._colors.get(t);
                            return void 0 !== e ? e : []
                        }
                        getFigureString() {
                            let t = "";
                            const e = [];
                            for (const [i, n] of this._data.entries()) {
                                const t = this._colors.get(i);
                                let s = i + "-" + n;
                                if (t && t.length) {
                                    let e = 0;
                                    for (; e < t.length;) s = s + "-" + t[e], e++
                                }
                                e.push(s)
                            }
                            let s = 0;
                            for (; s < e.length;) t += e[s], s < e.length - 1 && (t += "."), s++;
                            return t
                        }
                        savePartData(t, e, s, i = !1) {
                            this.savePartSetId(t, e, i), this.savePartSetColourId(t, s, i)
                        }
                        savePartSetId(e, s, i = !0) {
                            switch (e) {
                                case t.FACE:
                                case t.HR:
                                case t.HA:
                                case t.HE:
                                case t.EA:
                                case t.FA:
                                case t.CH:
                                case t.CC:
                                case t.CHEST_ACCESSORIES:
                                case t.CHEST_PRINTS:
                                case t.LG:
                                case t.SH:
                                case t.WA:
                                    s >= 0 ? this._data.set(e, s) : this._data.delete(e)
                            }
                            i && this.updateView()
                        }
                        savePartSetColourId(e, s, i = !0) {
                            switch (e) {
                                case t.FACE:
                                case t.HR:
                                case t.HA:
                                case t.HE:
                                case t.EA:
                                case t.FA:
                                case t.CH:
                                case t.CC:
                                case t.CHEST_ACCESSORIES:
                                case t.CHEST_PRINTS:
                                case t.LG:
                                case t.SH:
                                case t.WA:
                                    this._colors.set(e, s)
                            }
                            i && this.updateView()
                        }
                        getFigureStringWithFace(e, s = !0) {
                            let i = "";
                            const n = [t.FACE],
                                r = [];
                            for (const a of n) {
                                const i = this._colors.get(a);
                                if (void 0 === i) continue;
                                let n = this._data.get(a);
                                a === t.FACE && s && (n = e);
                                let o = a + "-" + n;
                                if (n >= 0) {
                                    let t = 0;
                                    for (; t < i.length;) o = o + "-" + i[t], t++
                                }
                                r.push(o)
                            }
                            let o = 0;
                            for (; o < r.length;) i += r[o], o < r.length - 1 && (i += "."), o++;
                            return i
                        }
                        updateView() {
                            this._view.update(this.getFigureString(), this._avatarEffectType, this._direction)
                        }
                        get view() {
                            return this._view
                        }
                        get gender() {
                            return this._gender
                        }
                        resetFigure(t) {
                            this.updateView()
                        }
                        set avatarEffectType(t) {
                            this._avatarEffectType = t
                        }
                        get avatarEffectType() {
                            return this._avatarEffectType
                        }
                        get direction() {
                            return this._direction
                        }
                        set direction(t) {
                            this._direction = t, this.updateView()
                        }
                    }
                    return t.M = "M", t.F = "F", t.U = "U", t.H = "h", t.STD = "std", t._Str_2028 = "0", t.FACE = "hd", t.HR = "hr", t.HA = "ha", t.HE = "he", t.EA = "ea", t.FA = "fa", t.CC = "cc", t.CH = "ch", t.CHEST_ACCESSORIES = "ca", t.CHEST_PRINTS = "cp", t.LG = "lg", t.SH = "sh", t.WA = "wa", t
                })();
            class $I {
                constructor(t, e, s = !1) {
                    this._model = t, this._partColor = e, this._isSelected = !1, this._isDisabledForWearing = s, this._Str_22595()
                }
                dispose() {
                    this._model = null, this._partColor = null
                }
                get isSelected() {
                    return this._isSelected
                }
                set isSelected(t) {
                    this._isSelected = t
                }
                _Str_22595() {
                    this._isHC = !!this._partColor && this._partColor.clubLevel > 0
                }
                get _Str_3420() {
                    return this._partColor
                }
                get color() {
                    return Em.int2rgb(this._partColor._Str_915)
                }
                get _Str_14863() {
                    return this._isDisabledForWearing
                }
                get isHC() {
                    return this._isHC
                }
            }
            let tR = (() => {
                class t {
                    constructor(t, e, s, i = !0, n = !1) {
                        if (this._renderManager = cp.instance.avatar, this._model = t, this._partSet = e, this._colors = s, this._useColors = i, this._isDisabledForWearing = n, this._thumbContainer = null, this._imageUrl = null, this._maxColorIndex = 0, this._isValidFigure = !1, this._isSelected = !1, this._isHC = !1, this._isSellable = !1, this._disposed = !1, this._isClear = !1, this._isInitalized = !1, e) {
                            const t = e._Str_806;
                            for (const e of t) this._maxColorIndex = Math.max(this._maxColorIndex, e._Str_827)
                        }
                    }
                    init() {
                        this._isInitalized || (this._isInitalized = !0, this.update())
                    }
                    dispose() {
                        this._disposed || (this._renderManager = null, this._model = null, this._partSet = null, this._colors = null, this._imageUrl = null, this._disposed = !0, this._isInitalized = !1, this._thumbContainer && (this._thumbContainer.destroy(), this._thumbContainer = null))
                    }
                    update() {
                        this.updateThumbVisualization()
                    }
                    analyzeFigure() {
                        if (!(this._renderManager && this._model && this.partSet && this.partSet._Str_806 && this.partSet._Str_806.length)) return !1;
                        const t = this._renderManager.createFigureContainer(this.partSet.type + "-" + this.partSet.id);
                        return this._renderManager.isFigureContainerReady(t) ? (this._isValidFigure = !0, !0) : (this._renderManager.downloadAvatarFigure(t, this), !1)
                    }
                    renderThumb() {
                        if (!this._renderManager || !this.partSet || !this._model) return null;
                        if (!this._isValidFigure && !this.analyzeFigure()) return null;
                        const e = this.partSet._Str_806.concat().sort(this.sortByDrawOrder),
                            s = new u.d;
                        for (const i of e) {
                            if (!i) continue;
                            let e = null,
                                n = 0,
                                r = !1;
                            for (; !r && n < t.THUMB_DIRECTIONS.length;) e = this._renderManager.getAssetByName(QI.H + "_" + QI.STD + "_" + i.type + "_" + i.id + "_" + t.THUMB_DIRECTIONS[n] + "_" + QI._Str_2028), e && e.texture ? r = !0 : n++;
                            if (!r) continue;
                            const o = e.offsetX,
                                a = e.offsetY;
                            let c = null;
                            if (this._useColors && i._Str_827 > 0) {
                                const t = this._colors[i._Str_827 - 1];
                                t && (c = t)
                            }
                            const _ = new u.n(e.texture);
                            _.position.set(o, a), c && (_.tint = c._Str_915), s.addChild(_)
                        }
                        return s
                    }
                    updateThumbVisualization() {
                        if (!this._isInitalized) return;
                        let t = this._thumbContainer;
                        t || (t = this.renderThumb()), t && (this._partSet ? (this._isHC = this._partSet.clubLevel > 0, this._isSellable = this._partSet._Str_651) : (this._isHC = !1, this._isSellable = !1), this._isDisabledForWearing && this.setAlpha(t, .2), this._imageUrl = ot.generateImageUrl(t))
                    }
                    setAlpha(t, e) {
                        return t.alpha = e, t
                    }
                    sortByDrawOrder(e, s) {
                        const i = t.DRAW_ORDER.indexOf(e.type),
                            n = t.DRAW_ORDER.indexOf(s.type);
                        return i < n ? -1 : i > n ? 1 : e.index < s.index ? -1 : e.index > s.index ? 1 : 0
                    }
                    resetFigure(t) {
                        this.analyzeFigure() && this.update()
                    }
                    get disposed() {
                        return this._disposed
                    }
                    get id() {
                        return this._partSet ? this._partSet.id : -1
                    }
                    get partSet() {
                        return this._partSet
                    }
                    set colors(t) {
                        this._colors = t, this.update()
                    }
                    get isDisabledForWearing() {
                        return this._isDisabledForWearing
                    }
                    set iconImage(t) {
                        this._thumbContainer = t, this.update()
                    }
                    get imageUrl() {
                        return this._imageUrl
                    }
                    get colorLayerCount() {
                        return this._maxColorIndex
                    }
                    get isSelected() {
                        return this._isSelected
                    }
                    set isSelected(t) {
                        this._isSelected = t
                    }
                    get isHC() {
                        return this._isHC
                    }
                    get isSellable() {
                        return this._isSellable
                    }
                    get isClear() {
                        return this._isClear
                    }
                    set isClear(t) {
                        this._isClear = t
                    }
                }
                return t.THUMB_DIRECTIONS = [2, 6, 0, 4, 3, 1], t.DRAW_ORDER = [ut.LEFT_HAND_ITEM, ut.LEFT_HAND, ut.LEFT_SLEEVE, ut.LEFT_COAT_SLEEVE, ut.BODY, ut.SHOES, ut.LEGS, ut.CHEST, ut.CHEST_ACCESSORY, ut.COAT_CHEST, ut.CHEST_PRINT, ut.WAIST_ACCESSORY, ut.RIGHT_HAND, ut.RIGHT_SLEEVE, ut.RIGHT_COAT_SLEEVE, ut.HEAD, ut.FACE, ut.EYES, ut.HAIR, ut.HAIR_BIG, ut.FACE_ACCESSORY, ut.EYE_ACCESSORY, ut.HEAD_ACCESSORY, ut.HEAD_ACCESSORY_EXTRA, ut.RIGHT_HAND_ITEM], t
            })();
            class eR {
                constructor(t, e, s) {
                    this.MAX_PALETTES = 2, this._selectedPartIndex = -1, this._name = t, this._parts = e, this._palettes = s, this._selectedPartIndex = -1
                }
                static defaultColorId(t, e) {
                    if (!t || !t.length) return -1;
                    let s = 0;
                    for (; s < t.length;) {
                        const i = t[s];
                        if (i._Str_3420 && i._Str_3420.clubLevel <= e) return i._Str_3420.id;
                        s++
                    }
                    return -1
                }
                init() {
                    for (const t of this._parts) t && t.init()
                }
                dispose() {
                    if (this._parts) {
                        for (const t of this._parts) t.dispose();
                        this._parts = null
                    }
                    if (this._palettes) {
                        for (const t of this._palettes)
                            if (t)
                                for (const e of t) e.dispose();
                        this._palettes = null
                    }
                    this._selectedPartIndex = -1, this._paletteIndexes = null
                }
                selectPartId(t) {
                    if (!this._parts) return;
                    let e = 0;
                    for (; e < this._parts.length;) {
                        if (this._parts[e].id === t) return void this.selectPartIndex(e);
                        e++
                    }
                }
                selectColorIds(t) {
                    if (!t || !this._palettes) return;
                    this._paletteIndexes = new Array(t.length);
                    let e = 0;
                    for (; e < this._palettes.length;) {
                        const s = this.getPalette(e);
                        if (s) {
                            let i = 0;
                            if (t.length > e) i = t[e];
                            else {
                                const t = s[0];
                                t && t._Str_3420 && (i = t._Str_3420.id)
                            }
                            let n = 0;
                            for (; n < s.length;) {
                                const t = s[n];
                                t._Str_3420.id === i ? (this._paletteIndexes[e] = n, t.isSelected = !0) : t.isSelected = !1, n++
                            }
                        }
                        e++
                    }
                    this.updatePartColors()
                }
                selectPartIndex(t) {
                    if (!this._parts) return null;
                    if (this._selectedPartIndex >= 0 && this._parts.length > this._selectedPartIndex) {
                        const t = this._parts[this._selectedPartIndex];
                        t && (t.isSelected = !1)
                    }
                    if (this._parts.length > t) {
                        const e = this._parts[t];
                        if (e) return e.isSelected = !0, this._selectedPartIndex = t, e
                    }
                    return null
                }
                selectColorIndex(t, e) {
                    const s = this.getPalette(e);
                    if (!s) return null;
                    if (s.length <= t) return null;
                    this.deselectColorIndex(this._paletteIndexes[e], e), this._paletteIndexes[e] = t;
                    const i = s[t];
                    return i ? (i.isSelected = !0, this.updatePartColors(), i) : null
                }
                getCurrentColorIndex(t) {
                    return this._paletteIndexes[t]
                }
                deselectColorIndex(t, e) {
                    const s = this.getPalette(e);
                    if (!s) return;
                    if (s.length <= t) return;
                    const i = s[t];
                    i && (i.isSelected = !1)
                }
                getSelectedColorIds() {
                    if (!this._paletteIndexes || !this._paletteIndexes.length) return null;
                    if (!this._palettes || !this._palettes.length) return null;
                    const t = this._palettes[0];
                    if (!t || !t.length) return null;
                    const e = t[0];
                    if (!e || !e._Str_3420) return null;
                    const s = e._Str_3420.id,
                        i = [];
                    let n = 0;
                    for (; n < this._paletteIndexes.length;) {
                        const t = this._palettes[n];
                        if (t && !(t.length <= n))
                            if (t.length > this._paletteIndexes[n]) {
                                const e = t[this._paletteIndexes[n]];
                                i.push(e && e._Str_3420 ? e._Str_3420.id : s)
                            } else i.push(s);
                        n++
                    }
                    const r = this.getCurrentPart();
                    return r ? i.slice(0, Math.max(r.colorLayerCount, 1)) : null
                }
                getSelectedColors() {
                    const t = [];
                    let e = 0;
                    for (; e < this._paletteIndexes.length;) {
                        const s = this.getSelectedColor(e);
                        t.push(s ? s._Str_3420 : null), e++
                    }
                    return t
                }
                getSelectedColor(t) {
                    const e = this.getPalette(t);
                    return !e || e.length <= this._paletteIndexes[t] ? null : e[this._paletteIndexes[t]]
                }
                getSelectedColorId(t) {
                    const e = this.getSelectedColor(t);
                    return e && e._Str_3420 ? e._Str_3420.id : 0
                }
                get parts() {
                    return this._parts
                }
                getPalette(t) {
                    return !this._paletteIndexes || !this._palettes || this._palettes.length <= t ? null : this._palettes[t]
                }
                getCurrentPart() {
                    return this._parts[this._selectedPartIndex]
                }
                updatePartColors() {
                    const t = this.getSelectedColors();
                    for (const e of this._parts) e && (e.colors = t)
                }
                hasClubSelectionsOverLevel(t) {
                    let e = !1;
                    const s = this.getSelectedColors();
                    if (s) {
                        let i = 0;
                        for (; i < s.length;) {
                            const n = s[i];
                            n && n.clubLevel > t && (e = !0), i++
                        }
                    }
                    let i = !1;
                    const n = this.getCurrentPart();
                    if (n && n.partSet) {
                        const e = n.partSet;
                        e && e.clubLevel > t && (i = !0)
                    }
                    return e || i
                }
                hasInvalidSelectedItems(t) {
                    const e = this.getCurrentPart();
                    if (!e) return !1;
                    const s = e.partSet;
                    return s && s._Str_651 ? !t.hasFigureSetId(s.id) : void 0
                }
                stripClubItemsOverLevel(t) {
                    const e = this.getCurrentPart();
                    if (e && e.partSet && e.partSet.clubLevel > t) {
                        const t = this.selectPartIndex(0);
                        return t && !t.partSet && this.selectPartIndex(1), !0
                    }
                    return !1
                }
                stripClubColorsOverLevel(t) {
                    const e = [],
                        s = this.getSelectedColors();
                    let i = !1;
                    const n = this.getPalette(0),
                        r = eR.defaultColorId(n, t);
                    if (-1 === r) return !1;
                    let o = 0;
                    for (; o < s.length;) {
                        const n = s[o];
                        n ? n.clubLevel > t ? (e.push(r), i = !0) : e.push(n.id) : (e.push(r), i = !0), o++
                    }
                    return i && this.selectColorIds(e), i
                }
                get name() {
                    return this._name
                }
                get selectedPartIndex() {
                    return this._selectedPartIndex
                }
            }
            class sR {
                constructor(t) {
                    this._editor = t, this._isInitalized = !1, this._maxPaletteCount = 0
                }
                dispose() {
                    this._categories = null, this._editor = null, this._disposed = !0
                }
                get disposed() {
                    return this._disposed
                }
                init() {
                    this._categories || (this._categories = new x)
                }
                reset() {
                    if (this._isInitalized = !1, this._categories)
                        for (const t of this._categories.getValues()) t && t.dispose();
                    this._categories = new x, this._viewer && this._viewer.prepareModel()
                }
                setViewer(t) {
                    this._viewer = t
                }
                addCategory(t) {
                    let e = this._categories.getValue(t);
                    e || (e = this._editor._Str_24037(this, t), e && (this._categories.add(t, e), this.updateSelectionsFromFigure(t)))
                }
                updateSelectionsFromFigure(t) {
                    if (!this._categories || !this._editor || !this._editor.figureData) return;
                    const e = this._categories.getValue(t);
                    if (!e) return;
                    const s = this._editor.figureData.getPartSetId(t);
                    let i = this._editor.figureData.getColourIds(t);
                    i || (i = []), e.selectPartId(s), e.selectColorIds(i)
                }
                hasClubSelectionsOverLevel(t) {
                    if (!this._categories) return !1;
                    for (const e of this._categories.getValues())
                        if (e && e.hasClubSelectionsOverLevel(t)) return !0;
                    return !1
                }
                hasInvalidSelectedItems(t) {
                    if (!this._categories) return !1;
                    for (const e of this._categories.getValues())
                        if (e && e.hasInvalidSelectedItems(t)) return !0;
                    return !1
                }
                _Str_15298(t) {
                    if (!this._categories) return !1;
                    let e = !1;
                    for (const s of this._categories.getKeys()) {
                        const i = this._categories.getValue(s);
                        if (!i) continue;
                        let n = !1;
                        if (i.stripClubItemsOverLevel(t) && (n = !0), i.stripClubColorsOverLevel(t) && (n = !0), n) {
                            const t = i.getCurrentPart();
                            t && this._editor && this._editor.figureData && i && this._editor.figureData.savePartData(s, t.id, i.getSelectedColorIds(), !0), e = !0
                        }
                    }
                    return e
                }
                _Str_8360() {
                    if (!this._categories) return !1;
                    for (const t of this._categories.getKeys()) this._categories.getValue(t);
                    return !1
                }
                selectPart(t, e) {
                    const s = this._categories.getValue(t);
                    if (!s) return;
                    const i = s.selectedPartIndex;
                    s.selectPartIndex(e);
                    const n = s.getCurrentPart();
                    if (n) {
                        if (n.isDisabledForWearing) return s.selectPartIndex(i), void this._editor.openHabboClubAdWindow();
                        this._maxPaletteCount = n.colorLayerCount, this._editor && this._editor.figureData && this._editor.figureData.savePartData(t, n.id, s.getSelectedColorIds(), !0)
                    }
                }
                selectColor(t, e, s) {
                    const i = this._categories.getValue(t);
                    if (!i) return;
                    const n = i.getCurrentColorIndex(s);
                    if (i.selectColorIndex(e, s), this._editor && this._editor.figureData) {
                        if (i.getSelectedColor(s)._Str_14863) return i.selectColorIndex(n, s), void this._editor.openHabboClubAdWindow();
                        this._editor.figureData.savePartSetColourId(t, i.getSelectedColorIds(), !0)
                    }
                }
                get controller() {
                    return this._editor
                }
                getCategoryData(t) {
                    return this._isInitalized || this.init(), this._categories ? this._categories.getValue(t) : null
                }
                get categories() {
                    return this._categories
                }
                get canSetGender() {
                    return !1
                }
                get maxPaletteCount() {
                    return this._maxPaletteCount
                }
                set maxPaletteCount(t) {
                    this._maxPaletteCount = t
                }
                get name() {
                    return null
                }
            }
            class iR extends sR {
                constructor() {
                    super(...arguments), this._imageCallBackHandled = !1
                }
                init() {
                    super.init(), this.addCategory(QI.FACE), this._isInitalized = !0
                }
                selectColor(t, e, s) {
                    super.selectColor(t, e, s), this.updateSelectionsFromFigure(QI.FACE)
                }
                updateSelectionsFromFigure(t) {
                    if (!this._categories || !this._editor || !this._editor.figureData) return;
                    const e = this._categories.getValue(t);
                    if (!e) return;
                    const s = this._editor.figureData.getPartSetId(t);
                    let i = this._editor.figureData.getColourIds(t);
                    i || (i = []), e.selectPartId(s), e.selectColorIds(i);
                    for (const n of e.parts) {
                        const t = this.controller.figureData.getFigureStringWithFace(n.id),
                            e = cp.instance.avatar.createAvatarImage(t, dt.LARGE, null, this),
                            s = e.getImageAsSprite(It.HEAD);
                        s && (s.y = 10, n.iconImage = s, setTimeout(() => e.dispose(), 0))
                    }
                }
                resetFigure(t) {
                    this._imageCallBackHandled || (this._imageCallBackHandled = !0, this.updateSelectionsFromFigure(QI.FACE))
                }
                get canSetGender() {
                    return !0
                }
                get name() {
                    return qI.GENERIC
                }
            }
            class nR extends sR {
                init() {
                    super.init(), this.addCategory(QI.HR), this.addCategory(QI.HA), this.addCategory(QI.HE), this.addCategory(QI.EA), this.addCategory(QI.FA), this._isInitalized = !0
                }
                get name() {
                    return qI.HEAD
                }
            }
            class rR extends sR {
                init() {
                    super.init(), this.addCategory(QI.LG), this.addCategory(QI.SH), this.addCategory(QI.WA), this._isInitalized = !0
                }
                get name() {
                    return qI.LEGS
                }
            }
            class oR extends sR {
                init() {
                    super.init(), this.addCategory(QI.CH), this.addCategory(QI.CHEST_PRINTS), this.addCategory(QI.CC), this.addCategory(QI.CHEST_ACCESSORIES), this._isInitalized = !0
                }
                get name() {
                    return qI.TORSO
                }
            }
            const aR = function(t) {
                return {
                    "ae-mactv": t
                }
            };

            function cR(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 22), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(2).selectCategory(s.name)
                    })), i.Vb(1, "div", 23), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc(2);
                    i.tc("ngClass", i.xc(2, aR, s.activeCategory === t)), i.Gb(1), i.tc("ngClass", "icon-" + t.name)
                }
            }

            function _R(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 24), i.Vb(1, "div", 25), i.Vb(2, "div", 26), i.Zb(3, "div", 27), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc(2);
                        return e.rotateAvatar(e.figureData.direction + 1)
                    })), i.Yb(), i.Zb(4, "div", 28), i.Zb(5, "div", 29), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).saveFigure()
                    })), i.Zb(6, "p", 30), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.Gb(2), i.tc("figure", t.figureData.view.figureString)("direction", t.figureData.direction)("scale", 2), i.Gb(5), i.Uc(i.oc(8, 4, "avatareditor.save"))
                }
            }

            function hR(t, e) {
                if (1 & t && i.Vb(0, "div", 31), 2 & t) {
                    const t = i.mc(2);
                    i.tc("model", t.activeCategory)("gender", t.gender)
                }
            }

            function lR(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.Tc(8, "Change ton look"), i.Yb(), i.Zb(9, "div", 7), i.Rc(10, cR, 2, 4, "div", 8), i.Zb(11, "div", 9), i.Vb(12, "div", 10), i.Yb(), i.Yb(), i.Yb(), i.Zb(13, "div", 11), i.Rc(14, _R, 9, 6, "div", 12), i.Rc(15, hR, 1, 2, "div", 13), i.Yb(), i.Zb(16, "div", 14), i.Zb(17, "p", 15), i.Tc(18, "Garde Robe"), i.Yb(), i.Zb(19, "div", 16), i.Zb(20, "div", 17), i.Vb(21, "div", 18), i.Vb(22, "div", 19), i.Zb(23, "div", 20), i.Vb(24, "img", 21), i.Yb(), i.Yb(), i.Zb(25, "div", 17), i.Vb(26, "div", 18), i.Vb(27, "div", 19), i.Zb(28, "div", 20), i.Vb(29, "img", 21), i.Yb(), i.Yb(), i.Zb(30, "div", 17), i.Vb(31, "div", 18), i.Vb(32, "div", 19), i.Zb(33, "div", 20), i.Vb(34, "img", 21), i.Yb(), i.Yb(), i.Zb(35, "div", 17), i.Vb(36, "div", 18), i.Vb(37, "div", 19), i.Zb(38, "div", 20), i.Vb(39, "img", 21), i.Yb(), i.Yb(), i.Zb(40, "div", 17), i.Vb(41, "div", 18), i.Vb(42, "div", 19), i.Zb(43, "div", 20), i.Vb(44, "img", 21), i.Yb(), i.Yb(), i.Zb(45, "div", 17), i.Vb(46, "div", 18), i.Vb(47, "div", 19), i.Zb(48, "div", 20), i.Vb(49, "img", 21), i.Yb(), i.Yb(), i.Zb(50, "div", 17), i.Vb(51, "div", 18), i.Vb(52, "div", 19), i.Zb(53, "div", 20), i.Vb(54, "img", 21), i.Yb(), i.Yb(), i.Zb(55, "div", 17), i.Vb(56, "div", 18), i.Vb(57, "div", 19), i.Zb(58, "div", 20), i.Vb(59, "img", 21), i.Yb(), i.Yb(), i.Zb(60, "div", 17), i.Vb(61, "div", 18), i.Vb(62, "div", 19), i.Zb(63, "div", 20), i.Vb(64, "img", 21), i.Yb(), i.Yb(), i.Zb(65, "div", 17), i.Vb(66, "div", 18), i.Vb(67, "div", 19), i.Zb(68, "div", 20), i.Vb(69, "img", 21), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 5, "avatareditor.title")), i.Gb(7), i.tc("ngForOf", t.categories.getValues()), i.Gb(1), i.tc("ngClass", i.xc(7, aR, t.activeCategory === t.category)), i.Gb(3), i.tc("ngIf", t.figureData), i.Gb(1), i.tc("ngIf", t.activeCategory)
                }
            }
            let uR = (() => {
                class t {
                    constructor(t, e, s) {
                        this._inventoryService = t, this._settingsService = e, this._avatarEditorService = s, this.visible = !1
                    }
                    ngOnInit() {
                        this._avatarEditorService.component = this, this._figureStructureData = cp.instance.avatar.structureData, this._categories = new x, this._figures = new Map, this._gender = QI.M, this._clubMemberLevel = 0, this._lastSavedFigure = "", this._lastSavedGender = QI.M;
                        const e = new QI,
                            s = new QI;
                        e.loadAvatarData(t._Str_18590, QI.M), s.loadAvatarData(t._Str_18820, QI.F), this._figures.set(QI.M, e), this._figures.set(QI.F, s), this._categories.add(qI.GENERIC, new iR(this)), this._categories.add(qI.HEAD, new nR(this)), this._categories.add(qI.TORSO, new oR(this)), this._categories.add(qI.LEGS, new rR(this)), this.selectFirstCategory()
                    }
                    ngOnDestroy() {
                        this._avatarEditorService.component = null
                    }
                    hide() {
                        this._settingsService.hideAvatarEditor()
                    }
                    selectFirstCategory() {
                        const t = this._categories.getWithIndex(0);
                        t && this.selectCategory(t.name)
                    }
                    selectCategory(t) {
                        if (!t) return;
                        const e = this._categories.getValue(t);
                        e && (this._aciveCategory = e)
                    }
                    loadAvatarInEditor(t, e, s, i = !0) {
                        switch (e) {
                            case QI.M:
                            case "m":
                            case "M":
                                e = QI.M;
                                break;
                            case QI.F:
                            case "f":
                            case "F":
                                e = QI.F;
                                break;
                            default:
                                e = QI.M
                        }
                        let n = !1;
                        this._clubMemberLevel = s;
                        const r = this._figures.get(e);
                        if (r) {
                            if (t !== r.getFigureString() && (n = !0), e !== this._gender && (this._gender = e, n = !0), r.loadAvatarData(t, e), n)
                                for (const t of this._categories.getValues()) t && t.reset();
                            i && (this._lastSavedFigure = t, this._lastSavedGender = this._gender)
                        }
                    }
                    _Str_24037(e, s) {
                        if (!e || !s) return null;
                        const i = [],
                            n = [];
                        let r = 0;
                        for (; r < t._Str_6331;) n.push([]), r++;
                        const o = this._Str_20100(s);
                        if (!o) return null;
                        const a = this._Str_783(o._Str_734);
                        if (!a) return null;
                        let c = this.figureData.getColourIds(s);
                        c || (c = []);
                        const _ = new Array(c.length),
                            h = this._Str_24175;
                        for (const p of a.colors.values())
                            if (p.isSelectable && (h || this.clubMemberLevel >= p.clubLevel)) {
                                let i = 0;
                                for (; i < t._Str_6331;) {
                                    const t = new $I(e, p, this.clubMemberLevel < p.clubLevel);
                                    n[i].push(t), i++
                                }
                                if (s !== QI.FACE) {
                                    let t = 0;
                                    for (; t < c.length;) p.id === c[t] && (_[t] = p), t++
                                }
                            }
                        let l = 0,
                            u = [];
                        if (h ? (l = 2, u = cp.instance.avatar._Str_838(this.gender, l)) : u = cp.instance.avatar._Str_838(this.gender, this.clubMemberLevel), -1 == u.indexOf(s)) {
                            const t = new tR(e, null, null, !1);
                            t.isClear = !0, i.push(t)
                        }
                        const d = s !== QI.FACE,
                            g = o._Str_710;
                        let m = g.length - 1;
                        for (; m >= 0;) {
                            const t = g.getWithIndex(m);
                            let s = !1;
                            if ((t.gender === QI.U || t.gender == this.gender) && (s = !0), t._Str_608 && s && (h || this.clubMemberLevel >= t.clubLevel)) {
                                const s = this.clubMemberLevel < t.clubLevel;
                                let n = !0;
                                if (t._Str_651 && (n = this._inventoryService && this._inventoryService.hasFigureSetId(t.id)), n) {
                                    const n = new tR(e, t, _, d, s);
                                    i.push(n)
                                }
                            }
                            m--
                        }
                        for (i.sort(this._Str_25757 ? this._Str_25189 : this._Str_23935), r = 0; r < t._Str_6331;) n[r].sort(this._Str_23625), r++;
                        return new eR(s, i, n)
                    }
                    openHabboClubAdWindow() {}
                    _Str_20100(t) {
                        return this._figureStructureData ? this._figureStructureData._Str_740(t) : null
                    }
                    _Str_783(t) {
                        return this._figureStructureData ? this._figureStructureData._Str_783(t) : null
                    }
                    _Str_25189(t, e) {
                        const s = t.partSet ? t.partSet.clubLevel : 9999999999,
                            i = e.partSet ? e.partSet.clubLevel : 9999999999,
                            n = !!t.partSet && t.partSet._Str_651,
                            r = !!e.partSet && e.partSet._Str_651;
                        return n && !r ? 1 : r && !n || s > i ? -1 : s < i ? 1 : t.partSet.id > e.partSet.id ? -1 : t.partSet.id < e.partSet.id ? 1 : 0
                    }
                    _Str_23935(t, e) {
                        const s = t.partSet ? t.partSet.clubLevel : -1,
                            i = e.partSet ? e.partSet.clubLevel : -1,
                            n = !!t.partSet && t.partSet._Str_651,
                            r = !!e.partSet && e.partSet._Str_651;
                        return n && !r ? 1 : r && !n || s < i ? -1 : s > i ? 1 : t.partSet.id < e.partSet.id ? -1 : t.partSet.id > e.partSet.id ? 1 : 0
                    }
                    _Str_23625(t, e) {
                        const s = t._Str_3420 ? t._Str_3420.clubLevel : -1,
                            i = e._Str_3420 ? e._Str_3420.clubLevel : -1;
                        return s < i ? -1 : s > i ? 1 : t._Str_3420.index < e._Str_3420.index ? -1 : t._Str_3420.index > e._Str_3420.index ? 1 : 0
                    }
                    rotateAvatar(t) {
                        let e = t;
                        e < lt.MIN_DIRECTION && (e = lt.MAX_DIRECTION + (e + 1)), e > lt.MAX_DIRECTION && (e -= lt.MAX_DIRECTION + 1), this.figureData.direction = e
                    }
                    saveFigure() {
                        const t = this.figureData;
                        t && (this._lastSavedFigure = t.getFigureString(), this._lastSavedGender = t.gender, cp.instance.communication.connection.send(new Gh(t.gender, this._lastSavedFigure)), this.hide())
                    }
                    clearFigure() {
                        const t = this.figureData;
                        t && this.loadAvatarInEditor(t.getFigureStringWithFace(0, !1), t.gender, this._clubMemberLevel, !1)
                    }
                    resetFigure() {
                        this.loadAvatarInEditor(this._lastSavedFigure, this._gender, this._clubMemberLevel)
                    }
                    get _Str_25757() {
                        return cp.instance.getConfiguration("avatareditor.show.clubitems.first", !0)
                    }
                    get _Str_24175() {
                        return cp.instance.getConfiguration("avatareditor.show.clubitems.dimmed", !0)
                    }
                    get clubMemberLevel() {
                        return this._clubMemberLevel ? this._clubMemberLevel : cp.instance.sessionDataManager.clubLevel
                    }
                    set clubMemberLevel(t) {
                        this._clubMemberLevel = t
                    }
                    get figureStructureData() {
                        return this._figureStructureData
                    }
                    get figureData() {
                        return this._figures.get(this._gender)
                    }
                    get gender() {
                        return this._gender
                    }
                    set gender(t) {
                        if (this._gender !== t) {
                            switch (t) {
                                case QI.M:
                                case "m":
                                case "M":
                                    t = QI.M;
                                    break;
                                case QI.F:
                                case "f":
                                case "F":
                                    t = QI.F;
                                    break;
                                default:
                                    t = QI.M
                            }
                            this._gender = t;
                            for (const t of this._categories.getValues()) t.reset();
                            this.selectFirstCategory()
                        }
                    }
                    get categories() {
                        return this._categories
                    }
                    get activeCategory() {
                        return this._aciveCategory
                    }
                }
                return t._Str_18590 = "hr-100.hd-180-7.ch-215-66.lg-270-79.sh-305-62.ha-1002-70.wa-2007", t._Str_18820 = "hr-515-33.hd-600-1.ch-635-70.lg-716-66-62.sh-735-68", t._Str_6331 = 2, t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(df), i.Ub(_p), i.Ub(vE))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-avatar-editor-main-component"]
                    ],
                    inputs: {
                        visible: "visible"
                    },
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["dragHandle", "#avatareditordrag", "id", "avatareditor", 3, "bringToTop", "draggable", 4, "ngIf"],
                        ["dragHandle", "#avatareditordrag", "id", "avatareditor", 3, "bringToTop", "draggable"],
                        ["id", "avatareditordrag"],
                        [1, "ae-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "avatareditor-head-box"],
                        [1, "avatareditor-username"],
                        [1, "avatareditor-menu", 2, "margin-left", "10px"],
                        ["class", "avatareditor_menu-button", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        ["id", "ae-bestavatar-box", 1, "avatareditor_menu-button", 3, "ngClass"],
                        [1, "ae-menu-ico", 2, "background-image", "url(./assets/images/avatareditor/saved-looks.png)"],
                        [1, "avatar-builder-viewport"],
                        ["class", "myavatar-view", 4, "ngIf"],
                        ["class", "d-flex flex-column", "nitro-avatar-model-viewer-component", "", 3, "model", "gender", 4, "ngIf"],
                        [1, "avatareditor-wardrobe"],
                        [1, "wardrobe-desc"],
                        [1, "wardrobe-bg"],
                        [1, "wardrobe-processing-center"],
                        [1, "put-in-wardrobe"],
                        [1, "use-the-outfit"],
                        [1, "wardrobe-user-clothing-box"],
                        ["src", "https://www.habbo.com.tr/habbo-imaging/avatarimage?figure=hd-180-1.hr-828-33.ch-255-66.lg-280-110.sh-305-62&action=&gesture=sml&direction=2&head_direction=2&size=s&frame=wlk=3&img_format=png", 1, "wardrobe-avatar"],
                        [1, "avatareditor_menu-button", 3, "ngClass", "click"],
                        [1, "ae-menu-ico", 3, "ngClass"],
                        [1, "myavatar-view"],
                        [1, "avatar-shadow"],
                        ["id", "ae-myavatar", "nitro-avatar-image", "", 3, "figure", "direction", "scale"],
                        [1, "turn-avatar", 3, "click"],
                        [1, "bort"],
                        [1, "ae_save-changes", 3, "click"],
                        [1, "sc-text"],
                        ["nitro-avatar-model-viewer-component", "", 1, "d-flex", "flex-column", 3, "model", "gender"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, lR, 70, 9, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    encapsulation: 2
                }), t
            })();
            class dR {
                constructor(t, e, s, i, n, r) {
                    this._id = t, this._playerAmount = e, this._name = s, this._ownerName = i, this._description = n, this._owner = r
                }
                get id() {
                    return this._id
                }
                get playerAmount() {
                    return this._playerAmount
                }
                get name() {
                    return this._name
                }
                get ownerName() {
                    return this._ownerName
                }
                get description() {
                    return this._description
                }
                get owner() {
                    return this._owner
                }
            }
            class gR {
                constructor(t, e) {
                    this._id = t, this._username = e
                }
                get id() {
                    return this._id
                }
                get username() {
                    return this._username
                }
            }
            class mR {
                constructor(t, e, s) {
                    this._id = t, this._name = e, this._chatlogs = s
                }
                get id() {
                    return this._id
                }
                get name() {
                    return this._name
                }
                get chatlogs() {
                    return this._chatlogs
                }
            }
            let pR = (() => {
                class t {
                    constructor(t, e) {
                        this._notificationService = t, this._ngZone = e, this._rooms = [], this._users = [], this._roomChatlogs = [], this._component = null, this.registerMessages()
                    }
                    ngOnDestroy() {
                        this.unregisterMessages()
                    }
                    registerMessages() {
                        this._messages && this.unregisterMessages(), this._messages = [new un(this.onRoomInfoEvent.bind(this)), new cc(this.onUserInfoEvent.bind(this)), new pn(this.onModtoolUserChatlogEvent.bind(this)), new hn(this.onModtoolRoomChatlogEvent.bind(this))];
                        for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                    }
                    unregisterMessages() {
                        if (this._messages && this._messages.length)
                            for (const t of this._messages) cp.instance.communication.removeMessageEvent(t)
                    }
                    get component() {
                        return this._component
                    }
                    set component(t) {
                        this._component = t
                    }
                    onRoomInfoEvent(t) {
                        if (!t) return;
                        if (!cp.instance.sessionDataManager.isModerator) return;
                        const e = t.getParser();
                        e && this._ngZone.run(() => {
                            this._rooms.push(new dR(e.id, e.playerAmount, e.name, e.ownerName, e.description, e.owner))
                        })
                    }
                    onUserInfoEvent(t) {
                        const e = t.getParser().userInfo;
                        this._ngZone.run(() => {
                            this._users.push(new gR(e.userId, e.username))
                        })
                    }
                    onModtoolUserChatlogEvent(t) {
                        this._ngZone.run(() => {
                            this._roomVisits = t.getParser().roomVisits
                        })
                    }
                    onModtoolRoomChatlogEvent(t) {
                        this._ngZone.run(() => {
                            const e = t.getParser();
                            this._roomChatlogs.push(new mR(e.id, e.name, e.chatlogs))
                        })
                    }
                    openRoomTool() {
                        const t = cp.instance.roomSessionManager.viewerSession.roomId,
                            e = this._rooms.find(e => e.id === t);
                        if (null != e) {
                            const t = this._rooms.indexOf(e);
                            this.closeRoomTool(t)
                        } else cp.instance.communication.connection.send(new g_(t))
                    }
                    closeRoomTool(t) {
                        this._rooms.splice(t, 1)
                    }
                    openChatlogTool() {
                        const t = cp.instance.roomSessionManager.viewerSession;
                        if (null != t) {
                            const e = this._roomChatlogs.find(e => e.id === t.roomId);
                            if (e) {
                                const t = this._roomChatlogs.indexOf(e);
                                this.closeChatlogTool(t)
                            } else cp.instance.communication.connection.send(new d_(t.roomId))
                        }
                    }
                    closeChatlogTool(t) {
                        this._roomChatlogs.splice(t, 1)
                    }
                    openUserTool() {
                        cp.instance.communication.connection.send(new m_(1))
                    }
                    closeUserTool(t) {
                        this._users.splice(t, 1)
                    }
                    get rooms() {
                        return this._rooms
                    }
                    get users() {
                        return this._users
                    }
                    get roomVisits() {
                        return this._roomVisits
                    }
                    get roomChatlogs() {
                        return this._roomChatlogs
                    }
                    get isInRoom() {
                        return null !== this._rooms
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.gc(xb), i.gc(i.E))
                }, t.\u0275prov = i.Qb({
                    token: t,
                    factory: t.\u0275fac
                }), t
            })();

            function bR(t, e) {
                if (1 & t && (i.Zb(0, "span", 18), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(1), i.Uc(t.user.username)
                }
            }

            function ER(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 5), i.Zb(1, "div", 6), i.Zb(2, "p", 7), i.Tc(3, "Mod Tools"), i.Yb(), i.Vb(4, "div", 8), i.Yb(), i.Zb(5, "div", 9), i.Zb(6, "div", 10), i.jc("click", (function() {
                        return i.Gc(t), i.mc().openRoomTool()
                    })), i.Vb(7, "div", 11), i.Zb(8, "p", 12), i.Tc(9, "Room tool for this room"), i.Yb(), i.Yb(), i.Zb(10, "div", 10), i.jc("click", (function() {
                        return i.Gc(t), i.mc().openChatlogTool()
                    })), i.Vb(11, "div", 13), i.Zb(12, "p", 12), i.Tc(13, "Chatlog for this room"), i.Yb(), i.Yb(), i.Zb(14, "div", 14), i.jc("click", (function() {
                        return i.Gc(t), i.mc().openUserTool()
                    })), i.Vb(15, "div", 15), i.Zb(16, "p", 12), i.Tc(17, "User info: "), i.Rc(18, bR, 2, 1, "span", 16), i.Yb(), i.Yb(), i.Zb(19, "div", 14), i.jc("click", (function() {
                        return i.Gc(t), i.mc().toggleReportsTool()
                    })), i.Vb(20, "div", 17), i.Zb(21, "p", 12), i.Tc(22, "Ticket browser"), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.tc("center", !1), i.Gb(6), i.tc("disabled", !t.inRoom), i.Gb(4), i.tc("disabled", !t.inRoom), i.Gb(8), i.tc("ngIf", t.user)
                }
            }

            function fR(t, e) {
                if (1 & t && i.Vb(0, "nitro-mod-tool-room-component", 19), 2 & t) {
                    const t = e.index;
                    i.tc("room", e.$implicit)("index", t)
                }
            }

            function SR(t, e) {
                if (1 & t && i.Vb(0, "nitro-mod-tool-chatlog-component", 20), 2 & t) {
                    const t = e.index;
                    i.tc("roomChatlogs", e.$implicit)("index", t)
                }
            }

            function IR(t, e) {
                if (1 & t && i.Vb(0, "nitro-mod-tool-user-component", 21), 2 & t) {
                    const t = e.index;
                    i.tc("user", e.$implicit)("index", t)
                }
            }
            let RR = (() => {
                class t {
                    constructor(t, e, s) {
                        this._settingsService = t, this._modToolService = e, this._ngZone = s, this.visible = !1, this.roomToolVisible = !1, this.chatlogToolVisible = !1, this.userToolVisible = !1, this.reportsToolVisible = !1
                    }
                    ngOnInit() {
                        this._modToolService.component = this
                    }
                    ngOnDestroy() {
                        this._modToolService.component = null
                    }
                    toggleRoomTool() {
                        this.roomToolVisible = !this.roomToolVisible
                    }
                    openRoomTool() {
                        this._modToolService.openRoomTool()
                    }
                    openChatlogTool() {
                        this._modToolService.openChatlogTool()
                    }
                    openUserTool() {
                        this._modToolService.openUserTool()
                    }
                    toggleReportsTool() {
                        this.reportsToolVisible = !this.reportsToolVisible
                    }
                    get inRoom() {
                        return null !== cp.instance.roomSessionManager.viewerSession
                    }
                    get rooms() {
                        return this._modToolService.rooms
                    }
                    get chatlogs() {
                        return this._modToolService.roomChatlogs
                    }
                    get users() {
                        return this._modToolService.users
                    }
                    get user() {
                        return this._modToolService.users[0]
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(_p), i.Ub(pR), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-mod-tool-main-component"]
                    ],
                    inputs: {
                        visible: "visible"
                    },
                    decls: 5,
                    vars: 5,
                    consts: [
                        ["dragHandle", "#modtoolsdrag", "id", "modtools", 3, "draggable", "center", 4, "ngIf"],
                        [3, "room", "index", 4, "ngFor", "ngForOf"],
                        [3, "roomChatlogs", "index", 4, "ngFor", "ngForOf"],
                        [3, "user", "index", 4, "ngFor", "ngForOf"],
                        [3, "visible", "visibleChange"],
                        ["dragHandle", "#modtoolsdrag", "id", "modtools", 3, "draggable", "center"],
                        ["id", "modtoolsdrag"],
                        [1, "mt-baslik"],
                        [1, "old-kapat"],
                        [1, "modtools-body"],
                        [1, "mt-menu", 3, "disabled", "click"],
                        [1, "mtico", 2, "background-image", "url(./assets/images/modtools/room.png)"],
                        [1, "mt-menutxt"],
                        [1, "mtico", 2, "background-image", "url(./assets/images/modtools/chat.png)"],
                        [1, "mt-menu", 3, "click"],
                        [1, "mtico", 2, "background-image", "url(./assets/images/modtools/user.png)"],
                        ["class", "username", 4, "ngIf"],
                        [1, "mtico", 2, "background-image", "url(./assets/images/modtools/ticket.png)"],
                        [1, "username"],
                        [3, "room", "index"],
                        [3, "roomChatlogs", "index"],
                        [3, "user", "index"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Rc(0, ER, 23, 4, "div", 0), i.Rc(1, fR, 1, 2, "nitro-mod-tool-room-component", 1), i.Rc(2, SR, 1, 2, "nitro-mod-tool-chatlog-component", 2), i.Rc(3, IR, 1, 2, "nitro-mod-tool-user-component", 3), i.Zb(4, "nitro-mod-tool-reports-component", 4), i.jc("visibleChange", (function(t) {
                            return e.reportsToolVisible = t
                        })), i.Yb()), 2 & t && (i.tc("ngIf", e.visible), i.Gb(1), i.tc("ngForOf", e.rooms), i.Gb(1), i.tc("ngForOf", e.chatlogs), i.Gb(1), i.tc("ngForOf", e.users), i.Gb(1), i.tc("visible", e.reportsToolVisible))
                    },
                    encapsulation: 2
                }), t
            })();

            function vR(t, e) {
                if (1 & t && (i.Zb(0, "p", 44), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(1), i.Uc(t.totalFriendRequests)
                }
            }

            function TR(t, e) {
                if (1 & t && i.Vb(0, "div", 45), 2 & t) {
                    const t = i.mc(2);
                    i.tc("threadSelector", t.selectThread)
                }
            }

            function OR(t, e) {
                if (1 & t && i.Vb(0, "div", 46), 2 & t) {
                    const t = i.mc(2);
                    i.tc("thread", t.currentThread)
                }
            }
            const yR = function(t) {
                return {
                    active: t
                }
            };

            function AR(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Vb(7, "div", 6), i.Zb(8, "div", 7), i.Vb(9, "div", 8), i.Zb(10, "p", 9), i.Tc(11, "Online"), i.Yb(), i.Yb(), i.Zb(12, "div", 10), i.Vb(13, "div", 11), i.Zb(14, "p", 9), i.Tc(15, "Leerlauf"), i.Yb(), i.Yb(), i.Zb(16, "div", 12), i.Vb(17, "div", 13), i.Zb(18, "p", 9), i.Tc(19, "K\xfcmmern Sie sich nicht"), i.Yb(), i.Zb(20, "p", 14), i.Tc(21, "Sie erhalten keine Desktop-Benachrichtigungen."), i.Yb(), i.Yb(), i.Zb(22, "div", 15), i.Vb(23, "div", 16), i.Zb(24, "p", 9), i.Tc(25, "Offline"), i.Yb(), i.Zb(26, "p", 14), i.Tc(27, "Es wird nicht online angezeigt, aber Sie k\xf6nnen im Hotel aktiv bleiben."), i.Yb(), i.Yb(), i.Vb(28, "div", 17), i.Vb(29, "div", 18), i.Yb(), i.Zb(30, "div", 19), i.Zb(31, "div", 20), i.Zb(32, "div", 21), i.Zb(33, "div", 22), i.Rc(34, vR, 2, 1, "p", 23), i.Yb(), i.Zb(35, "div", 24), i.jc("click", (function() {
                        return i.Gc(t), i.mc().displayFriends()
                    })), i.Yb(), i.Yb(), i.Zb(36, "div", 25), i.Zb(37, "div", 26), i.Vb(38, "div", 27), i.Yb(), i.Yb(), i.Yb(), i.Zb(39, "div", 28), i.Vb(40, "input", 29), i.Zb(41, "div", 30), i.jc("click", (function() {
                        return i.Gc(t), i.mc().displayFriends()
                    })), i.Zb(42, "p", 31), i.Tc(43), i.nc(44, "translate"), i.Yb(), i.Yb(), i.Zb(45, "div", 32), i.Zb(46, "p", 33), i.Tc(47), i.nc(48, "translate"), i.Yb(), i.Zb(49, "div", 34), i.Vb(50, "div", 35), i.Yb(), i.Yb(), i.Zb(51, "div", 36), i.Zb(52, "div", 37), i.Vb(53, "img", 38), i.Vb(54, "div", 39), i.Yb(), i.Zb(55, "div", 40), i.Tc(56, "(ME) username"), i.Yb(), i.Zb(57, "div", 41), i.Tc(58, "user_status"), i.Yb(), i.Yb(), i.Yb(), i.Zb(59, "div"), i.Rc(60, TR, 1, 1, "div", 42), i.Rc(61, OR, 1, 1, "div", 43), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 10, "messenger.title")), i.Gb(31), i.tc("ngIf", t.totalFriendRequests > 0), i.Gb(1), i.tc("ngClass", i.xc(16, yR, t.friendsVisible)), i.Gb(6), i.tc("ngClass", i.xc(18, yR, t.friendsVisible)), i.Gb(2), i.Uc(i.oc(44, 12, "friendlist.friends")), i.Gb(4), i.Vc("", i.oc(48, 14, "toolbar.icon.label.messenger"), " "), i.Gb(3), i.tc("currentThread", t.currentThread)("threadSelector", t.selectThread), i.Gb(10), i.tc("ngIf", t.friendsVisible), i.Gb(1), i.tc("ngIf", t.currentThread)
                }
            }
            let CR = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._settingsService = t, this._friendListService = e, this._ngZone = s, this.visible = !1, this._friendsVisible = !0, this._currentThread = null, this.selectThread = this.selectThread.bind(this)
                        }
                        ngOnInit() {
                            this._friendListService.component = this, cp.instance.communication.connection.send(new Wc)
                        }
                        ngOnChanges(t) {
                            const e = t.visible.currentValue;
                            e || e === t.visible.previousValue || this.selectThread(null)
                        }
                        ngOnDestroy() {
                            this._friendListService.component = null
                        }
                        hide() {
                            this._settingsService.hideFriendList()
                        }
                        displayFriends() {
                            this._friendsVisible = !0, this._currentThread = null
                        }
                        selectThread(t) {
                            if (t) return this._friendsVisible = !1, this._currentThread = t, void t.setRead();
                            this._friendsVisible = !0, this._currentThread = null
                        }
                        get currentThread() {
                            return this._currentThread
                        }
                        get friendsVisible() {
                            return this._friendsVisible && !this._currentThread
                        }
                        get totalFriendRequests() {
                            return this._friendListService.requests.size
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(_p), i.Ub(jb), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-friendlist-main-component"]
                        ],
                        inputs: {
                            visible: "visible"
                        },
                        features: [i.Eb],
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["id", "messenger", 3, "bringToTop", "draggable", 4, "ngIf"],
                            ["id", "messenger", 3, "bringToTop", "draggable"],
                            ["id", "messengerdrag", 1, "drag-handler"],
                            [1, "messenger-title"],
                            [1, "messenger-close", 3, "click"],
                            [1, "user-activity-status", 2, "display", "none"],
                            [1, "userstatus-head"],
                            [1, "online-status-box"],
                            [1, "ua-online-box"],
                            [1, "activity-status-txt"],
                            [1, "idle-status-box"],
                            [1, "ua-idle-box"],
                            [1, "do_not_disturb-status-box"],
                            [1, "ua-donotdisturb-box"],
                            [1, "activity-status-desc"],
                            [1, "offline-status-box"],
                            [1, "ua-offline-box"],
                            [1, "uas-bottom"],
                            [1, "userstatus-bottom"],
                            [1, "messenger-box"],
                            [1, "messenger-group_list"],
                            [1, "gl-friends_chats-box"],
                            [1, "message-arrived", 2, "display", "none"],
                            ["class", "number-of-incoming-messages", 4, "ngIf"],
                            [1, "friendsico", 2, "background-image", "url(./assets/images/chat2/friends.png)", 3, "ngClass", "click"],
                            ["id", "active-groups-list"],
                            [1, "gl-groups_chats-box"],
                            [1, "groupsico", 2, "background-image", "url(./assets/images/chat2/groupico.png)"],
                            [1, "messenger-friends_list"],
                            ["placeholder", "Search..", 1, "search-friends"],
                            [1, "friends-button", 3, "ngClass", "click"],
                            [1, "frib-text"],
                            [1, "direct-messages"],
                            [1, "drcmsg_text"],
                            [1, "direct-messages-list"],
                            ["nitro-friendlist-thread-list-component", "", 3, "currentThread", "threadSelector"],
                            [1, "me-profil"],
                            [1, "drcmsg-activechat_user-avatar"],
                            ["src", "https://www.habbo.com/habbo-imaging/avatarimage?figure=hd-180-1.ch-255-66.lg-280-110.sh-305-62.ha-1012-110.hr-828-61&action=std&gesture=std&direction=2&head_direction=2&size=s&headonly=1&img_format=png", 1, "drcmsg-uavatar-position"],
                            [1, "user-onof-status", "online"],
                            [1, "drcmsg-username"],
                            [1, "user-status"],
                            ["nitro-friendlist-friends-viewer-component", "", "style", "width: 452px;float: right;", 3, "threadSelector", 4, "ngIf"],
                            ["nitro-friendlist-thread-viewer-component", "", 3, "thread", 4, "ngIf"],
                            [1, "number-of-incoming-messages"],
                            ["nitro-friendlist-friends-viewer-component", "", 2, "width", "452px", "float", "right", 3, "threadSelector"],
                            ["nitro-friendlist-thread-viewer-component", "", 3, "thread"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, AR, 62, 20, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        encapsulation: 2
                    }), t
                })(),
                MR = (() => {
                    class t {
                        constructor(t, e = 1) {
                            this._previewRoomId = 1, this._currentPreviewObjectType = 0, this._currentPreviewObjectCategory = 0, this._currentPreviewObjectData = "", this._currentPreviewRectangle = null, this._currentPreviewCanvasWidth = 0, this._currentPreviewCanvasHeight = 0, this._currentPreviewScale = 64, this._disableUpdate = !1, this._roomEngine = t, this._previewRoomId = Ep.makeRoomPreviewerId(e), this._addViewOffset = new u.j(0, 0), this.onRoomObjectAdded = this.onRoomObjectAdded.bind(this), this.onRoomInitializedonRoomInitialized = this.onRoomInitializedonRoomInitialized.bind(this), this.isRoomEngineReady && this._roomEngine.events && (this._roomEngine.events.addEventListener(Al.ADDED, this.onRoomObjectAdded), this._roomEngine.events.addEventListener(Al.CONTENT_UPDATED, this.onRoomObjectAdded), this._roomEngine.events.addEventListener(Qh.INITIALIZED, this.onRoomInitializedonRoomInitialized)), this.createRoomForPreview()
                        }
                        dispose() {
                            this.reset(!0), this.isRoomEngineReady && this._roomEngine.events && (this._roomEngine.events.removeEventListener(Al.ADDED, this.onRoomObjectAdded), this._roomEngine.events.removeEventListener(Al.CONTENT_UPDATED, this.onRoomObjectAdded), this._roomEngine.events.removeEventListener(Qh.INITIALIZED, this.onRoomInitializedonRoomInitialized))
                        }
                        createRoomForPreview() {
                            if (this.isRoomEngineReady) {
                                const t = 7,
                                    e = new Zo;
                                e.initializeTileMap(t + 2, t + 2);
                                let s = 1;
                                for (; s < 1 + t;) {
                                    let i = 1;
                                    for (; i < 1 + t;) e.setTileHeight(i, s, 0), i++;
                                    s++
                                }
                                e.initializeFromTileData(), this._roomEngine.createRoomInstance(this._previewRoomId, e.getMapData()), e.dispose()
                            }
                        }
                        reset(e) {
                            this.isRoomEngineReady && (this._roomEngine.removeRoomObjectFloor(this._previewRoomId, t.PREVIEW_OBJECT_ID), this._roomEngine.removeRoomObjectWall(this._previewRoomId, t.PREVIEW_OBJECT_ID), this._roomEngine.removeRoomObjectUser(this._previewRoomId, t.PREVIEW_OBJECT_ID), e || this.updatePreviewRoomView()), this._currentPreviewObjectCategory = V.MINIMUM
                        }
                        addFurnitureIntoRoom(e, s, i = null, n = null) {
                            if (i || (i = new Si), this.isRoomEngineReady) {
                                if (this._currentPreviewObjectCategory === V.FLOOR && this._currentPreviewObjectType === e) return t.PREVIEW_OBJECT_ID;
                                if (this.reset(!1), this._currentPreviewObjectType = e, this._currentPreviewObjectCategory = V.FLOOR, this._currentPreviewObjectData = "", this._roomEngine.addFurnitureFloor(this._previewRoomId, t.PREVIEW_OBJECT_ID, e, new K(t.PREVIEW_OBJECT_LOCATION_X, t.PREVIEW_OBJECT_LOCATION_Y, 0), s, 0, i, NaN, -1, 0, -1, "", !0, !1)) {
                                    if (this._previousAutomaticStateChangeTime = cp.instance.time, this._automaticStateChange = !0, n) {
                                        const e = this._roomEngine.getRoomObject(this._previewRoomId, t.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);
                                        e && e.model.setValue(j.FURNITURE_EXTRAS, n)
                                    }
                                    return this.updatePreviewRoomView(), t.PREVIEW_OBJECT_ID
                                }
                            }
                            return -1
                        }
                        addWallItemIntoRoom(e, s, i) {
                            if (this.isRoomEngineReady) {
                                if (this._currentPreviewObjectCategory === V.WALL && this._currentPreviewObjectType === e && this._currentPreviewObjectData === i) return t.PREVIEW_OBJECT_ID;
                                if (this.reset(!1), this._currentPreviewObjectType = e, this._currentPreviewObjectCategory = V.WALL, this._currentPreviewObjectData = i, this._roomEngine.addFurnitureWall(this._previewRoomId, t.PREVIEW_OBJECT_ID, e, new K(.5, 2.3, 1.8), s, 0, i, 0, 0, -1, "", !1)) return this._previousAutomaticStateChangeTime = cp.instance.time, this._automaticStateChange = !0, this.updatePreviewRoomView(), t.PREVIEW_OBJECT_ID
                            }
                            return -1
                        }
                        addAvatarIntoRoom(e, s) {
                            return this.isRoomEngineReady ? (this.reset(!1), this._currentPreviewObjectType = 1, this._currentPreviewObjectCategory = V.UNIT, this._currentPreviewObjectData = e, this._roomEngine.addRoomObjectUser(this._previewRoomId, t.PREVIEW_OBJECT_ID, new K(t.PREVIEW_OBJECT_LOCATION_X, t.PREVIEW_OBJECT_LOCATION_Y, 0), new K(90, 0, 0), 135, 1, e) && (this._previousAutomaticStateChangeTime = cp.instance.time, this._automaticStateChange = !0, this.updateUserGesture(1), this.updateUserEffect(s), this.updateUserPosture("std")), this.updatePreviewRoomView(), t.PREVIEW_OBJECT_ID) : -1
                        }
                        updateUserPosture(e, s = "") {
                            this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserPosture(this._previewRoomId, t.PREVIEW_OBJECT_ID, e, s)
                        }
                        updateUserGesture(e) {
                            this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserGesture(this._previewRoomId, t.PREVIEW_OBJECT_ID, e)
                        }
                        updateUserEffect(e) {
                            this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserEffect(this._previewRoomId, t.PREVIEW_OBJECT_ID, e)
                        }
                        updateObjectUserFigure(e, s = null, i = null, n = !1) {
                            return !!this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserFigure(this._previewRoomId, t.PREVIEW_OBJECT_ID, e, s, i, n)
                        }
                        updateObjectUserAction(e, s, i = null) {
                            this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserAction(this._previewRoomId, t.PREVIEW_OBJECT_ID, e, s, i)
                        }
                        changeRoomObjectState() {
                            this.isRoomEngineReady && (this._automaticStateChange = !1, this._currentPreviewObjectCategory !== V.UNIT && this._roomEngine.changeObjectState(this._previewRoomId, t.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory))
                        }
                        changeRoomObjectDirection() {
                            if (this.isRoomEngineReady) {
                                const e = this._roomEngine.getRoomObject(this._previewRoomId, t.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);
                                if (!e) return;
                                const s = this._roomEngine.objectEventHandler._Str_17555(e, !0);
                                switch (this._currentPreviewObjectCategory) {
                                    case V.FLOOR:
                                        {
                                            const e = new K(t.PREVIEW_OBJECT_LOCATION_X, t.PREVIEW_OBJECT_LOCATION_Y),
                                                i = new K(s, s, s);
                                            return void this._roomEngine.updateRoomObjectFloor(this._previewRoomId, t.PREVIEW_OBJECT_ID, e, i, null, null)
                                        }
                                    case V.WALL:
                                        return
                                }
                            }
                        }
                        checkAutomaticRoomObjectStateChange() {
                            if (this._automaticStateChange) {
                                const e = cp.instance.time;
                                e > this._previousAutomaticStateChangeTime + t.AUTOMATIC_STATE_CHANGE_INTERVAL && (this._previousAutomaticStateChangeTime = e, this.isRoomEngineReady && this._roomEngine.changeObjectState(this._previewRoomId, t.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory))
                            }
                        }
                        getRoomCanvas(e, s) {
                            if (this.isRoomEngineReady) {
                                const i = this._roomEngine.getRoomInstanceDisplay(this._previewRoomId, t.PREVIEW_CANVAS_ID, e, s, this._currentPreviewScale);
                                this._roomEngine.setRoomInstanceRenderingCanvasMask(this._previewRoomId, t.PREVIEW_CANVAS_ID, !0);
                                const n = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, t.PREVIEW_CANVAS_ID);
                                return n && n.adjustLocation(new K(t.PREVIEW_OBJECT_LOCATION_X, t.PREVIEW_OBJECT_LOCATION_Y, 0), 30), this._currentPreviewCanvasWidth = e, this._currentPreviewCanvasHeight = s, i
                            }
                            return null
                        }
                        modifyRoomCanvas(e, s) {
                            this.isRoomEngineReady && (this._currentPreviewCanvasWidth = e, this._currentPreviewCanvasHeight = s, this._roomEngine.initializeRoomInstanceRenderingCanvas(this._previewRoomId, t.PREVIEW_CANVAS_ID, e, s))
                        }
                        set addViewOffset(t) {
                            this._addViewOffset = t
                        }
                        get addViewOffset() {
                            return this._addViewOffset
                        }
                        updatePreviewObjectBoundingRectangle(e) {
                            const s = this._roomEngine.getRoomObjectBoundingRectangle(this._previewRoomId, t.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory, t.PREVIEW_CANVAS_ID);
                            if (s && e)
                                if (s.x += -(this._currentPreviewCanvasWidth >> 1), s.y += -(this._currentPreviewCanvasHeight >> 1), s.x += -e.x, s.y += -e.y, this._currentPreviewRectangle) {
                                    const t = this._currentPreviewRectangle.clone().enlarge(s);
                                    (t.width - this._currentPreviewRectangle.width > this._currentPreviewCanvasWidth - this._currentPreviewRectangle.width >> 1 || t.height - this._currentPreviewRectangle.height > this._currentPreviewCanvasHeight - this._currentPreviewRectangle.height >> 1 || this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1) && (this._currentPreviewRectangle = t)
                                } else this._currentPreviewRectangle = s
                        }
                        validatePreviewSize(e) {
                            if (this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1) return e;
                            if (this.isRoomEngineReady) {
                                const s = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, t.PREVIEW_CANVAS_ID);
                                this._currentPreviewRectangle.width > this._currentPreviewCanvasWidth * (1 + t.ALLOWED_IMAGE_CUT) || this._currentPreviewRectangle.height > this._currentPreviewCanvasHeight * (1 + t.ALLOWED_IMAGE_CUT) ? t.ZOOM_ENABLED ? .5 !== this._roomEngine.getRoomInstanceRenderingCanvasScale(this._previewRoomId, t.PREVIEW_CANVAS_ID) && (this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, t.PREVIEW_CANVAS_ID, .5, null, null), this._currentPreviewScale = t.SCALE_SMALL, this._currentPreviewNeedsZoomOut = !0, e.x = e.x >> 1, e.y = e.y >> 1, this._currentPreviewRectangle.x = this._currentPreviewRectangle.x >> 2, this._currentPreviewRectangle.y = this._currentPreviewRectangle.y >> 2, this._currentPreviewRectangle.width = this._currentPreviewRectangle.width >> 2, this._currentPreviewRectangle.height = this._currentPreviewRectangle.height >> 2) : s.isZoomedIn() && (s.performZoomOut(), this._currentPreviewScale = t.SCALE_SMALL, this._currentPreviewNeedsZoomOut = !0) : this._currentPreviewNeedsZoomOut || (t.ZOOM_ENABLED ? 1 !== this._roomEngine.getRoomInstanceRenderingCanvasScale(this._previewRoomId, t.PREVIEW_CANVAS_ID) && (this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, t.PREVIEW_CANVAS_ID, 1, null, null), this._currentPreviewScale = t.SCALE_NORMAL) : s.isZoomedIn() || (s.performZoomIn(), this._currentPreviewScale = t.SCALE_NORMAL))
                            }
                            return e
                        }
                        zoomIn() {
                            this.isRoomEngineReady && (t.ZOOM_ENABLED ? this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, t.PREVIEW_CANVAS_ID, 1) : this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, t.PREVIEW_CANVAS_ID).performZoomIn()), this._currentPreviewScale = t.SCALE_NORMAL
                        }
                        zoomOut() {
                            this.isRoomEngineReady && (t.ZOOM_ENABLED ? this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, t.PREVIEW_CANVAS_ID, .5) : this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, t.PREVIEW_CANVAS_ID).performZoomOut()), this._currentPreviewScale = t.SCALE_SMALL
                        }
                        updateAvatarDirection(e, s) {
                            this.isRoomEngineReady && this._roomEngine.updateRoomObjectUserLocation(this._previewRoomId, t.PREVIEW_OBJECT_ID, new K(t.PREVIEW_OBJECT_LOCATION_X, t.PREVIEW_OBJECT_LOCATION_Y, 0), new K(t.PREVIEW_OBJECT_LOCATION_X, t.PREVIEW_OBJECT_LOCATION_Y, 0), !1, 0, new K(45 * e, 0, 0), 45 * s)
                        }
                        updateObjectRoom(t = null, e = null, s = null, i = !1) {
                            return !!this.isRoomEngineReady && this._roomEngine.updateRoomInstancePlaneType(this._previewRoomId, t, e, s, i)
                        }
                        updateRoomWallsAndFloorVisibility(t, e = !0) {
                            this.isRoomEngineReady && this._roomEngine.updateRoomInstancePlaneVisibility(this._previewRoomId, t, e)
                        }
                        getCanvasOffset(t) {
                            if (this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1) return t;
                            let e = -(this._currentPreviewRectangle.left + this._currentPreviewRectangle.right) >> 1,
                                s = -(this._currentPreviewRectangle.top + this._currentPreviewRectangle.bottom) >> 1;
                            const i = this._currentPreviewCanvasHeight - this._currentPreviewRectangle.height >> 1;
                            i > 10 ? s += Math.min(15, i - 10) : this._currentPreviewObjectCategory !== V.UNIT ? s += 5 - Math.max(0, i / 2) : s -= 5 - Math.min(0, i / 2), s += this._addViewOffset.y, e += this._addViewOffset.x;
                            const n = e - t.x,
                                r = s - t.y;
                            if (0 !== n || 0 !== r) {
                                const i = Math.sqrt(n * n + r * r);
                                return i > 10 && (e = t.x + 10 * n / i, s = t.y + 10 * r / i), new u.j(e, s)
                            }
                            return null
                        }
                        updatePreviewRoomView(e = !1) {
                            if ((!this._disableUpdate || e) && (this.checkAutomaticRoomObjectStateChange(), this.isRoomEngineReady)) {
                                let e = this._roomEngine.getRoomInstanceRenderingCanvasOffset(this._previewRoomId, t.PREVIEW_CANVAS_ID);
                                if (e && (this.updatePreviewObjectBoundingRectangle(e), this._currentPreviewRectangle)) {
                                    const s = this._currentPreviewScale;
                                    e = this.validatePreviewSize(e);
                                    const i = this.getCanvasOffset(e);
                                    i && this._roomEngine.setRoomInstanceRenderingCanvasOffset(this._previewRoomId, t.PREVIEW_CANVAS_ID, i), this._currentPreviewScale !== s && (this._currentPreviewRectangle = null)
                                }
                            }
                        }
                        set disableUpdate(t) {
                            this._disableUpdate = t
                        }
                        set disableRoomEngineUpdate(t) {
                            this.isRoomEngineReady && this._roomEngine.disableUpdate(t)
                        }
                        onRoomInitializedonRoomInitialized(t) {
                            if (t) switch (t.type) {
                                case Qh.INITIALIZED:
                                    return void(t.roomId === this._previewRoomId && this.isRoomEngineReady && this._roomEngine.updateRoomInstancePlaneType(this._previewRoomId, "110", "99999"))
                            }
                        }
                        onRoomObjectAdded(e) {
                            if (e.roomId === this._previewRoomId && e.objectId === t.PREVIEW_OBJECT_ID && e.category === this._currentPreviewObjectCategory) {
                                this._currentPreviewRectangle = null, this._currentPreviewNeedsZoomOut = !1;
                                const t = this._roomEngine.getRoomObject(e.roomId, e.objectId, e.category);
                                if (t && t.model && e.category === V.WALL) {
                                    const s = t.model.getValue(j.FURNITURE_SIZE_Z),
                                        i = t.model.getValue(j.FURNITURE_CENTER_Z);
                                    null === s && null === i || this._roomEngine.updateRoomObjectWallLocation(e.roomId, e.objectId, new K(.5, 2.3, (3.6 - s) / 2 + i))
                                }
                            }
                        }
                        updateRoomEngine() {
                            this.isRoomEngineReady && this._roomEngine.runUpdate()
                        }
                        getRenderingCanvas() {
                            return this._roomEngine.getRoomInstanceRenderingCanvas(this._previewRoomId, t.PREVIEW_CANVAS_ID) || null
                        }
                        getGenericRoomObjectImage(t, e, s, i, n, r = 0, o = null, a = null, c = -1, _ = -1, h = null) {
                            return this.isRoomEngineReady ? this._roomEngine.getGenericRoomObjectImage(t, e, s, i, n, r, o, a, c, _, h) : null
                        }
                        getRoomObjectImage(e, s, i, n = 0) {
                            return this.isRoomEngineReady ? this._roomEngine.getRoomObjectImage(this._previewRoomId, t.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory, e, s, i, n) : null
                        }
                        getRoomObjectCurrentImage() {
                            if (this.isRoomEngineReady) {
                                const e = this._roomEngine.getRoomObject(this._previewRoomId, t.PREVIEW_OBJECT_ID, V.UNIT);
                                if (e && e.visualization) return e.visualization.getImage(16777215, -1)
                            }
                            return null
                        }
                        getRoomPreviewObject() {
                            if (this.isRoomEngineReady) {
                                const e = this._roomEngine.getRoomObject(this._previewRoomId, t.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);
                                if (e) return e
                            }
                            return null
                        }
                        get isRoomEngineReady() {
                            return this._roomEngine && this._roomEngine.ready
                        }
                        get roomId() {
                            return this._previewRoomId
                        }
                    }
                    return t.SCALE_NORMAL = 64, t.SCALE_SMALL = 32, t.PREVIEW_COUNTER = 0, t.PREVIEW_CANVAS_ID = 1, t.PREVIEW_OBJECT_ID = 1, t.PREVIEW_OBJECT_LOCATION_X = 2, t.PREVIEW_OBJECT_LOCATION_Y = 2, t.ALLOWED_IMAGE_CUT = .25, t.AUTOMATIC_STATE_CHANGE_INTERVAL = 2500, t.ZOOM_ENABLED = !0, t
                })();
            class UR {
                constructor(t) {
                    if (this._isEnabled = !1, this._price = null, this._stuffTypes = null, this._boxTypes = null, this._ribbonTypes = null, this._defaultStuffTypes = null, !t) return;
                    const e = t.getParser();
                    e && (this._isEnabled = e.isEnabled, this._price = e.price, this._boxTypes = e.boxTypes, this._ribbonTypes = e.ribbonTypes, this._stuffTypes = e.giftWrappers, this._defaultStuffTypes = e.giftFurnis)
                }
                get isEnabled() {
                    return this._isEnabled
                }
                get price() {
                    return this._price
                }
                get stuffTypes() {
                    return this._stuffTypes
                }
                get boxTypes() {
                    return this._boxTypes
                }
                get ribbonTypes() {
                    return this._ribbonTypes
                }
                get defaultStuffTypes() {
                    return this._defaultStuffTypes
                }
            }
            class DR {}
            let NR = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._settingsService = t, this._notificationService = e, this._ngZone = s, this._messages = [], this._component = null, this._catalogMode = -1, this._catalogRoot = null, this._clubGiftsParser = null, this._activePage = null, this._activePageData = null, this._manuallyCollapsed = [], this._isLoading = !1, this._purse = new DR, this._clubOffers = [], this._vipTemplate = null, this._giftWrappingConfiguration = null, this.registerMessages()
                        }
                        ngOnDestroy() {
                            this.unregisterMessages(), this._vipTemplate = null
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                this._messages = [new Ae(this.onCatalogClubEvent.bind(this)), new Pe(this.onCatalogModeEvent.bind(this)), new ke(this.onCatalogPageEvent.bind(this)), new je(this.onCatalogPagesEvent.bind(this)), new We(this.onCatalogPurchaseEvent.bind(this)), new Ke(this.onCatalogPurchaseFailedEvent.bind(this)), new qe(this.onCatalogPurchaseUnavailableEvent.bind(this)), new Qe(this.onCatalogSearchEvent.bind(this)), new ts(this.onCatalogSoldOutEvent.bind(this)), new ss(this.onCatalogUpdatedEvent.bind(this)), new Ac(this.onUserSubscriptionEvent.bind(this)), new Ne(this.onCatalogClubGiftsEvent.bind(this)), new Le(this.onGiftConfigurationEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t);
                                cp.instance.communication.connection.send(new Nc)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            })
                        }
                        onCatalogClubEvent(t) {
                            if (!t || !t.getParser() || !this._vipTemplate) return;
                            const e = t.getParser().offers;
                            this._clubOffers = e, this._vipTemplate.setOffers(e)
                        }
                        onCatalogClubGiftsEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && (this._clubGiftsParser = e)
                        }
                        registerVipBuyTemplate(t) {
                            this._vipTemplate = t
                        }
                        onGiftConfigurationEvent(t) {
                            this._giftWrappingConfiguration = new UR(t)
                        }
                        onCatalogModeEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => this._catalogMode = e.mode)
                        }
                        onCatalogPageEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                this._activePage = e, this._manuallyCollapsed = [], this._component && this._component.setupLayout(), this._isLoading = !1
                            })
                        }
                        onCatalogPagesEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                this._catalogRoot = e.root, this._isLoading = !1, this._component && this._component.selectFirstTab()
                            })
                        }
                        onCatalogPurchaseEvent(t) {
                            t && t.getParser() && this._ngZone.run(() => this._component && this._component.hidePurchaseConfirmation())
                        }
                        onCatalogPurchaseFailedEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                this._notificationService.alert("${catalog.alert.purchaseerror.description." + e.code + "}", "${catalog.alert.purchaseerror.title}"), this._component && this._component.hidePurchaseConfirmation()
                            })
                        }
                        onCatalogPurchaseUnavailableEvent(t) {
                            t && t.getParser()
                        }
                        onCatalogSearchEvent(t) {
                            t && t.getParser()
                        }
                        onCatalogSoldOutEvent(t) {
                            t && t.getParser()
                        }
                        onUserSubscriptionEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && (this._purse.clubDays = Math.max(0, e.days), this._purse.clubPeriods = Math.max(0, e.months), this._purse.isVip = e.isVip, this._purse.pastClubDays = e.pastClubDays, this._purse.Str_14389 = e.years == yc._Str_14729, this._purse.minutesUntilExpiration = e.totalSeconds)
                        }
                        onCatalogUpdatedEvent(t) {
                            t && t.getParser() && this._ngZone.run(() => {
                                this._isLoading = !1, this._catalogMode = -1, this._catalogRoot = null, this._activePage = null, this._activePageData = null, this._component && this._component.reset(), this._settingsService.catalogVisible && (this._component.hide(), this._notificationService.alert("${catalog.alert.published.description}", "${catalog.alert.published.title}"))
                            })
                        }
                        setupCatalog(t) {
                            t && (this._isLoading = !0, this._catalogRoot = null, this._activePage = null, this._activePageData = null, this._component && this._component.reset(), cp.instance.communication.connection.send(new Mc(t)))
                        }
                        requestPage(e) {
                            e && this.canSelectPage(e) && (this._activePageData = e, -1 !== e.pageId && (this._isLoading = !0, this.requestPageData(e.pageId, -1, t.MODE_NORMAL)))
                        }
                        requestPageData(t, e, s) {
                            cp.instance.communication.connection.send(new Uc(t, e, s))
                        }
                        isDescendant(t, e) {
                            if (!t || !e) return !1;
                            if (t === e) return !0;
                            if (t.children.length)
                                for (const s of t.children)
                                    if (s) {
                                        if (s === e) return !0;
                                        if (this.isDescendant(s, e)) return !0
                                    }
                            return !1
                        }
                        getFurnitureDataForProductOffer(t) {
                            if (!t) return null;
                            let e = null;
                            switch (t.productType.toUpperCase()) {
                                case k.FLOOR:
                                    e = cp.instance.sessionDataManager.getFloorItemData(t.furniClassId);
                                    break;
                                case k.WALL:
                                    e = cp.instance.sessionDataManager.getWallItemData(t.furniClassId)
                            }
                            return e
                        }
                        getFurnitureDataIconUrl(t) {
                            if (!t) return null;
                            const e = cp.instance.roomEngine.roomContentLoader.getAssetUrls(t.className, t.colorId.toString(), !0);
                            return e && e[0] || null
                        }
                        purchase(t, e, s, i = null) {
                            t && e && s && this.purchaseById(t.pageId, e.offerId, s, i)
                        }
                        purchaseById(t, e, s, i = null) {
                            t && e && s && cp.instance.communication.connection.send(new Dc(t, e, i, s))
                        }
                        requestOffers(t) {
                            cp.instance.communication.connection.send(new Lc(t))
                        }
                        requestClubGifts() {
                            cp.instance.communication.connection.send(new wc)
                        }
                        redeemVoucher(t) {
                            t && 0 !== t.trim().length && cp.instance.communication.connection.send(new Fc(t))
                        }
                        manuallyCollapsePage(t) {
                            const e = this._manuallyCollapsed.indexOf(t); - 1 === e ? this._manuallyCollapsed.push(t) : this._manuallyCollapsed.splice(e, 1)
                        }
                        canSelectPage(t) {
                            return !(!t || !t.visible)
                        }
                        get component() {
                            return this._component
                        }
                        set component(t) {
                            this._component = t
                        }
                        get catalogMode() {
                            return this._catalogMode
                        }
                        get catalogRoot() {
                            return this._catalogRoot
                        }
                        get activePage() {
                            return this._activePage
                        }
                        get activePageData() {
                            return this._activePageData
                        }
                        get manuallyCollapsed() {
                            return this._manuallyCollapsed
                        }
                        get purse() {
                            return this._purse
                        }
                        get vipOffers() {
                            return this._clubOffers
                        }
                        get clubGiftsParser() {
                            return this._clubGiftsParser
                        }
                        hasClubDays() {
                            return !!this._purse && this._purse.clubDays > 0
                        }
                    }
                    return t.MODE_NORMAL = "NORMAL", t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(_p), i.gc(xb), i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })(),
                wR = (() => {
                    class t {
                        constructor(t, e) {
                            this._catalogService = t, this._ngZone = e, this.activePage = null
                        }
                        getText(t = 0) {
                            let e = this.activePage.localization.texts[t] || null;
                            return e = e.replace(/\r\n|\r|\n/g, "<br />"), e
                        }
                        getImage(t = 0) {
                            let e = cp.instance.getConfiguration("catalog.asset.image.url");
                            return e = e.replace("%name%", this.activePage.localization.images[t]), e
                        }
                        get headerText() {
                            return this._catalogService.catalogRoot.localization || null
                        }
                        get offers() {
                            return this._catalogService.activePage.offers
                        }
                        get activeOffer() {
                            return this._catalogService.component && this._catalogService.component.activeOffer || null
                        }
                        get roomPreviewer() {
                            return this._catalogService.component && this._catalogService.component.roomPreviewer || null
                        }
                        getCurrencyUrl(t) {
                            return cp.instance.getConfiguration("currency.asset.icon.url").replace("%type%", t.toString())
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(NR), i.Ub(i.E))
                    }, t.\u0275dir = i.Pb({
                        type: t
                    }), t
                })(),
                LR = (() => {
                    class t {}
                    return t.WALL = "i", t.FLOOR = "s", t.EFFECT = "e", t.HABBO_CLUB = "h", t.BADGE = "b", t.GAME_TOKEN = "GAME_TOKEN", t.PET = "p", t.ROBOT = "r", t
                })();

            function xR(t, e) {
                if (1 & t && i.Vb(0, "img", 9), 2 & t) {
                    const t = i.mc();
                    i.tc("src", t.getImage(1), i.Ic)
                }
            }

            function PR(t, e) {
                if (1 & t && i.Vb(0, "div", 13), 2 & t) {
                    const t = i.mc(2);
                    i.tc("figure", t.activeOffer.products[0].extraParam)("direction", 4)
                }
            }

            function FR(t, e) {
                if (1 & t && (i.Zb(0, "div", 10), i.Zb(1, "div", 11), i.Rc(2, PR, 1, 2, "div", 12), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.tc("ngIf", t.activeOffer.products.length > 0)
                }
            }
            const GR = function(t) {
                return {
                    secildi: t
                }
            };

            function YR(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 14), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectOffer(s)
                    })), i.Zb(1, "div", 15), i.Vb(2, "div", 16), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.tc("ngClass", i.xc(4, GR, s.activeOffer === t)), i.Gb(2), i.tc("figure", s.getFigureForBot(t))("headOnly", !0)("direction", 3)
                }
            }

            function kR(t, e) {
                if (1 & t && (i.Zb(0, "div", 17), i.Vb(1, "div", 18), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("activePage", t.activePage)("activeOffer", t.activeOffer)("quantityEnabled", t.activeOffer.bundlePurchaseAllowed)
                }
            }
            let VR = (() => {
                class t extends wR {
                    constructor(t, e) {
                        super(t, e), this._catalogService = t, this._ngZone = e
                    }
                    ngOnInit() {
                        lp((function() {
                            lp(".mobi-menuview").click((function() {
                                lp(".mobi-menuview").removeClass("ctlgmactive"), lp(this).addClass("ctlgmactive")
                            }))
                        }))
                    }
                    selectOffer(t) {
                        t && this._catalogService.component && this._catalogService.component.selectOffer(t)
                    }
                    getFigureForBot(t) {
                        if (!t) return "";
                        const e = t.products[0];
                        return e ? e.extraParam : ""
                    }
                    offerImage(t) {
                        if (!t) return "";
                        const e = t.products[0];
                        if (!e) return "";
                        const s = this.getProductFurniData(e);
                        if (!s) return "";
                        switch (e.productType) {
                            case LR.ROBOT:
                                return this._catalogService.getFurnitureDataIconUrl(s)
                        }
                        return ""
                    }
                    getProductFurniData(t) {
                        return t ? this._catalogService.getFurnitureDataForProductOffer(t) : null
                    }
                }
                return t.CODE = "bots", t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(NR), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 10,
                    vars: 4,
                    consts: [
                        [1, "d-flex", "flex-column", "justify-content-center", "align-items-center", "position-relative", "w-100", "flex-grow-1", 2, "height", "240px"],
                        [3, "src", 4, "ngIf"],
                        ["class", "position-relative w-100 h-100", 4, "ngIf"],
                        [1, "catalog-mobibox"],
                        [1, "ctlg_mobi-liste"],
                        ["class", "mview-height", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [1, "urun-secilmemis"],
                        [1, "us-txt"],
                        ["class", "mobi-purchase-box", 4, "ngIf"],
                        [3, "src"],
                        [1, "position-relative", "w-100", "h-100"],
                        [1, "mobi-display-box", 2, "position", "relative", "z-index", "1", "background", "#ebe9df", "display", "flex", "flex-direction", "column", "justify-content", "center", "align-items", "center"],
                        ["nitro-avatar-image", "", 3, "figure", "direction", 4, "ngIf"],
                        ["nitro-avatar-image", "", 3, "figure", "direction"],
                        [1, "mview-height", 3, "ngClass", "click"],
                        [1, "mobi-menuview"],
                        ["nitro-avatar-image", "", 1, "mview-box", "detail-image", 2, "display", "flex", "flex-direction", "column", "justify-content", "center", "align-items", "center", "padding-top", "28px", 3, "figure", "headOnly", "direction"],
                        [1, "mobi-purchase-box"],
                        ["nitro-catalog-purchase-component", "", 3, "activePage", "activeOffer", "quantityEnabled"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Rc(1, xR, 1, 1, "img", 1), i.Rc(2, FR, 3, 1, "div", 2), i.Yb(), i.Zb(3, "div", 3), i.Zb(4, "div", 4), i.Rc(5, YR, 3, 6, "div", 5), i.Yb(), i.Yb(), i.Zb(6, "div", 6), i.Zb(7, "p", 7), i.Tc(8, "Bir \xfcr\xfcn se\xe7!"), i.Yb(), i.Yb(), i.Rc(9, kR, 2, 3, "div", 8)), 2 & t && (i.Gb(1), i.tc("ngIf", !e.activeOffer && e.getImage(1)), i.Gb(1), i.tc("ngIf", e.activeOffer), i.Gb(3), i.tc("ngForOf", e.offers), i.Gb(4), i.tc("ngIf", e.activeOffer))
                    },
                    encapsulation: 2
                }), t
            })();

            function ZR(t, e) {
                if (1 & t && i.Vb(0, "img", 9), 2 & t) {
                    const t = i.mc();
                    i.tc("src", t.getImage(1), i.Ic)
                }
            }

            function jR(t, e) {
                if (1 & t && (i.Xb(0), i.Zb(1, "div", 10), i.Tc(2), i.Yb(), i.Vb(3, "div", 11), i.Wb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.offerName(t.activeOffer)), i.Gb(1), i.tc("roomPreviewer", t.roomPreviewer)("width", 360)("height", 240)
                }
            }

            function BR(t, e) {
                if (1 & t && (i.Zb(0, "div", 18), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit,
                        e = i.mc();
                    i.Gb(1), i.Vc("x", e.offerCount(t), "")
                }
            }

            function HR(t, e) {
                if (1 & t && (i.Zb(0, "div", 19), i.Zb(1, "p", 20), i.Tc(2), i.Yb(), i.Zb(3, "div", 21), i.Vb(4, "i", 22), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(2), i.Uc(t.priceCredits)
                }
            }

            function WR(t, e) {
                if (1 & t && (i.Zb(0, "div", 23), i.Zb(1, "p", 20), i.Tc(2), i.Yb(), i.Zb(3, "div", 21), i.Vb(4, "i"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit,
                        e = i.mc();
                    i.Gb(2), i.Vc("+ ", e.offerCount(t), ""), i.Gb(2), i.Jb("icon icon-currency-", t.priceActivityPointsType, " scale-0-75")
                }
            }

            function zR(t, e) {
                if (1 & t && (i.Zb(0, "div", 23), i.Zb(1, "p", 20), i.Tc(2), i.Yb(), i.Zb(3, "div", 21), i.Vb(4, "i"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(2), i.Vc("+ ", t.priceActivityPoints, ""), i.Gb(2), i.Jb("icon icon-currency-", t.priceActivityPointsType, " scale-0-75")
                }
            }
            const KR = function(t) {
                    return {
                        secildi: t
                    }
                },
                XR = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function qR(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 12), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectOffer(s)
                    })), i.Zb(1, "div", 13), i.Rc(2, BR, 2, 1, "div", 14), i.Vb(3, "div", 15), i.Rc(4, HR, 5, 1, "div", 16), i.Rc(5, WR, 5, 4, "div", 17), i.Rc(6, zR, 5, 4, "div", 17), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.tc("ngClass", i.xc(6, KR, s.activeOffer === t)), i.Gb(2), i.tc("ngIf", s.offerCount(t) > 1), i.Gb(1), i.tc("ngStyle", i.xc(8, XR, "url(" + s.offerImage(t) + ")")), i.Gb(1), i.tc("ngIf", t.priceCredits), i.Gb(1), i.tc("ngIf", s.offerCount(t) > 1), i.Gb(1), i.tc("ngIf", t.priceActivityPoints)
                }
            }

            function JR(t, e) {
                if (1 & t && (i.Xb(0), i.Zb(1, "div", 24), i.Vb(2, "div", 25), i.Yb(), i.Wb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.tc("activePage", t.activePage)("activeOffer", t.activeOffer)("quantityEnabled", t.activeOffer.bundlePurchaseAllowed)
                }
            }
            let QR = (() => {
                class t extends wR {
                    ngOnInit() {
                        lp((function() {
                            lp(".mobi-menuview").click((function() {
                                lp(".mobi-menuview").removeClass("ctlgmactive"), lp(this).addClass("ctlgmactive")
                            }))
                        }))
                    }
                    selectOffer(t) {
                        t && this._catalogService.component && this._catalogService.component.selectOffer(t)
                    }
                    getFirstProduct(t) {
                        return t && t.products[0] || null
                    }
                    hasMultipleProducts(t) {
                        return t.products.length > 1
                    }
                    offerName(t) {
                        let e = "";
                        const s = this.getFirstProduct(t);
                        if (s) switch (s.productType) {
                            case LR.FLOOR:
                                e = "roomItem.name." + s.furniClassId;
                                break;
                            case LR.WALL:
                                e = "wallItem.name." + s.furniClassId
                        }
                        return "" === e ? e : cp.instance.getLocalization(e)
                    }
                    getProductFurniData(t) {
                        return t ? this._catalogService.getFurnitureDataForProductOffer(t) : null
                    }
                    offerImage(t) {
                        if (!t) return "";
                        const e = t.products[0];
                        if (!e) return "";
                        const s = this.getProductFurniData(e);
                        if (!s) return "";
                        switch (e.productType) {
                            case LR.FLOOR:
                            case LR.WALL:
                                return this._catalogService.getFurnitureDataIconUrl(s)
                        }
                        return ""
                    }
                    offerCount(t) {
                        if (!this.hasMultipleProducts(t)) {
                            const e = this.getFirstProduct(t);
                            if (e) return e.productCount
                        }
                        return 1
                    }
                }
                return t.CODE = "default_3x3", t.\u0275fac = function(e) {
                    return $R(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 12,
                    vars: 7,
                    consts: [
                        [1, "nitro-catalog-layout-default-component"],
                        [1, "d-flex", "flex-column", "justify-content-center", "align-items-center", "position-relative", "w-100", "flex-grow-1", 2, "height", "240px"],
                        [3, "src", 4, "ngIf"],
                        [4, "ngIf"],
                        [1, "catalog-mobibox"],
                        [1, "ctlg_mobi-liste"],
                        ["class", "mview-height", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [1, "urun-secilmemis"],
                        [1, "us-txt"],
                        [3, "src"],
                        [1, "select-mobi-name", "offer-name"],
                        ["nitro-room-preview-component", "", 1, "mobi-display-box", "room-preview", 2, "position", "relative", "z-index", "1", 3, "roomPreviewer", "width", "height"],
                        [1, "mview-height", 3, "ngClass", "click"],
                        [1, "mobi-menuview"],
                        ["class", "multiple-purchase-indicators count", 4, "ngIf"],
                        [1, "mview-box", "detail-image", 3, "ngStyle"],
                        ["class", "first-price-box", 4, "ngIf"],
                        ["class", "second-price-box", 4, "ngIf"],
                        [1, "multiple-purchase-indicators", "count"],
                        [1, "first-price-box"],
                        [1, "mobi-price-caption"],
                        [1, "mobi-price-ico"],
                        [1, "icon", "icon-currency--1", "scale-0-75"],
                        [1, "second-price-box"],
                        [1, "mobi-purchase-box"],
                        ["nitro-catalog-purchase-component", "", 3, "activePage", "activeOffer", "quantityEnabled"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Rc(2, ZR, 1, 1, "img", 2), i.Rc(3, jR, 4, 4, "ng-container", 3), i.Yb(), i.Zb(4, "div", 4), i.Zb(5, "div", 5), i.Rc(6, qR, 7, 10, "div", 6), i.Yb(), i.Yb(), i.Zb(7, "div", 7), i.Zb(8, "p", 8), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Yb(), i.Rc(11, JR, 3, 3, "ng-container", 3), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngIf", !e.activeOffer && e.getImage(1)), i.Gb(1), i.tc("ngIf", e.activeOffer), i.Gb(3), i.tc("ngForOf", e.offers), i.Gb(3), i.Uc(i.oc(10, 5, "catalog.purchase.select.info")), i.Gb(2), i.tc("ngIf", e.activeOffer))
                    },
                    encapsulation: 2
                }), t
            })();
            const $R = i.bc(QR);
            let tv = (() => {
                class t extends wR {}
                return t.CODE = "frontpage_featured", t.\u0275fac = function(e) {
                    return ev(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 2,
                    vars: 0,
                    consts: [
                        [1, "nitro-catalog-layout-frontpagefeatured-component"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Tc(1, " frontpage\n"), i.Yb())
                    },
                    encapsulation: 2
                }), t
            })();
            const ev = i.bc(tv),
                sv = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function iv(t, e) {
                if (1 & t && (i.Zb(0, "div", 7), i.Zb(1, "p", 8), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.xc(2, sv, "url(" + t.getImagesUrl() + t.activePage.frontPageItems[0].itemPromoImage + ")")), i.Gb(2), i.Uc(t.activePage.frontPageItems[0].itemName)
                }
            }

            function nv(t, e) {
                if (1 & t && (i.Zb(0, "div", 9), i.Zb(1, "p", 10), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.xc(2, sv, "url(" + t.getImagesUrl() + t.activePage.frontPageItems[1].itemPromoImage + ")")), i.Gb(2), i.Uc(t.activePage.frontPageItems[1].itemName)
                }
            }

            function rv(t, e) {
                if (1 & t && (i.Zb(0, "div", 11), i.Zb(1, "p", 10), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.xc(2, sv, "url(" + t.getImagesUrl() + t.activePage.frontPageItems[2].itemPromoImage + ")")), i.Gb(2), i.Uc(t.activePage.frontPageItems[2].itemName)
                }
            }

            function ov(t, e) {
                if (1 & t && (i.Zb(0, "div", 12), i.Zb(1, "p", 10), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.xc(2, sv, "url(" + t.getImagesUrl() + t.activePage.frontPageItems[3].itemPromoImage + ")")), i.Gb(2), i.Uc(t.activePage.frontPageItems[3].itemName)
                }
            }
            let av = (() => {
                class t extends wR {
                    getImagesUrl() {
                        return cp.instance.core.configuration.getValue("image.library.url")
                    }
                }
                return t.CODE = "frontpage4", t.\u0275fac = function(e) {
                    return cv(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 7,
                    vars: 5,
                    consts: [
                        [1, "dd"],
                        [1, "frontpage-yeniurunler"],
                        ["class", "yeniurun1_box", 3, "ngStyle", 4, "ngIf"],
                        ["class", "yeniurun2_box", 3, "ngStyle", 4, "ngIf"],
                        ["class", "yeniurun3_box", 3, "ngStyle", 4, "ngIf"],
                        ["class", "yeniurun4_box", 3, "ngStyle", 4, "ngIf"],
                        [3, "localization"],
                        [1, "yeniurun1_box", 3, "ngStyle"],
                        [1, "bigbox-yeniurun-aciklama"],
                        [1, "yeniurun2_box", 3, "ngStyle"],
                        [1, "smallbox-yeniurun-aciklama"],
                        [1, "yeniurun3_box", 3, "ngStyle"],
                        [1, "yeniurun4_box", 3, "ngStyle"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Rc(2, iv, 3, 4, "div", 2), i.Rc(3, nv, 3, 4, "div", 3), i.Rc(4, rv, 3, 4, "div", 4), i.Rc(5, ov, 3, 4, "div", 5), i.Vb(6, "redeem-voucher-component", 6), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngIf", e.activePage.frontPageItems[0]), i.Gb(1), i.tc("ngIf", e.activePage.frontPageItems[1]), i.Gb(1), i.tc("ngIf", e.activePage.frontPageItems[2]), i.Gb(1), i.tc("ngIf", e.activePage.frontPageItems[3]), i.Gb(1), i.tc("localization", e.activePage.localization))
                    },
                    encapsulation: 2
                }), t
            })();
            const cv = i.bc(av);
            let _v = (() => {
                class t extends wR {}
                return t.CODE = "pets", t.\u0275fac = function(e) {
                    return hv(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 2,
                    vars: 0,
                    consts: [
                        [1, "d-flex", "flex-column", "w-100", "h-100", "nitro-catalog-layout-pets2-component"],
                        [1, "hatasayfa"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Vb(1, "div", 1), i.Yb())
                    },
                    encapsulation: 2
                }), t
            })();
            const hv = i.bc(_v);
            let lv = (() => {
                class t extends wR {}
                return t.CODE = "pets2", t.\u0275fac = function(e) {
                    return uv(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 8,
                    vars: 4,
                    consts: [
                        [1, "d-flex", "flex-column", "justify-content-center", "align-items-center", "w-100", "h-100", "nitro-catalog-layout-pets3-component"],
                        [1, "hatasayfa"],
                        [1, "hs-head"],
                        [1, "hs-ico2"],
                        [1, "align-self-center", 3, "src"],
                        [1, "hs-hood", 3, "innerHtml"],
                        [1, "hs-desc", 3, "innerHtml"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Vb(4, "img", 4), i.Yb(), i.Vb(5, "p", 5), i.Yb(), i.Vb(6, "p", 6), i.Vb(7, "p", 6), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.tc("src", e.getImage(1), i.Ic), i.Gb(1), i.tc("innerHtml", e.getText(1), i.Hc), i.Gb(1), i.tc("innerHtml", e.getText(2), i.Hc), i.Gb(1), i.tc("innerHtml", e.getText(3), i.Hc))
                    },
                    encapsulation: 2
                }), t
            })();
            const uv = i.bc(lv);
            let dv = (() => {
                class t extends wR {}
                return t.CODE = "pets3", t.\u0275fac = function(e) {
                    return gv(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 8,
                    vars: 4,
                    consts: [
                        [1, "d-flex", "flex-column", "justify-content-center", "align-items-center", "w-100", "h-100", "nitro-catalog-layout-pets3-component"],
                        [1, "hatasayfa"],
                        [1, "hs-head"],
                        [1, "hs-ico2"],
                        [1, "align-self-center", 3, "src"],
                        [1, "hs-hood", 3, "innerHtml"],
                        [1, "hs-desc", 3, "innerHtml"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Vb(4, "img", 4), i.Yb(), i.Vb(5, "p", 5), i.Yb(), i.Vb(6, "p", 6), i.Vb(7, "p", 6), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.tc("src", e.getImage(1), i.Ic), i.Gb(1), i.tc("innerHtml", e.getText(1), i.Hc), i.Gb(1), i.tc("innerHtml", e.getText(2), i.Hc), i.Gb(1), i.tc("innerHtml", e.getText(3), i.Hc))
                    },
                    encapsulation: 2
                }), t
            })();
            const gv = i.bc(dv);

            function mv(t, e) {
                if (1 & t && i.Vb(0, "img", 13), 2 & t) {
                    const t = i.mc();
                    i.tc("src", t.getImage(1), i.Ic)
                }
            }

            function pv(t, e) {
                if (1 & t && (i.Xb(0), i.Vb(1, "div", 14), i.Wb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("roomPreviewer", t.roomPreviewer)("width", 360)("height", 240)
                }
            }

            function bv(t, e) {
                if (1 & t && (i.Zb(0, "div", 22), i.Zb(1, "p", 23), i.Tc(2), i.Yb(), i.Zb(3, "div", 24), i.Vb(4, "i", 25), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(2), i.Uc(t.priceCredits)
                }
            }

            function Ev(t, e) {
                if (1 & t && (i.Zb(0, "div", 26), i.Zb(1, "p", 23), i.Tc(2), i.Yb(), i.Zb(3, "div", 24), i.Vb(4, "i"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit,
                        e = i.mc(2);
                    i.Gb(2), i.Vc("+ ", e.offerCount(t), ""), i.Gb(2), i.Jb("icon icon-currency-", t.priceActivityPointsType, " scale-0-75")
                }
            }

            function fv(t, e) {
                if (1 & t && (i.Zb(0, "div", 26), i.Zb(1, "p", 23), i.Tc(2), i.Yb(), i.Zb(3, "div", 24), i.Vb(4, "i"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(2), i.Vc("+ ", t.priceActivityPoints, ""), i.Gb(2), i.Jb("icon icon-currency-", t.priceActivityPointsType, " scale-0-75")
                }
            }
            const Sv = function(t) {
                    return {
                        secildi: t
                    }
                },
                Iv = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function Rv(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 17), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(2).selectOffer(s)
                    })), i.Zb(1, "div", 18), i.Vb(2, "div", 19), i.Rc(3, bv, 5, 1, "div", 20), i.Rc(4, Ev, 5, 4, "div", 21), i.Rc(5, fv, 5, 4, "div", 21), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc(2);
                    i.tc("ngClass", i.xc(5, Sv, s.activeOffer === t)), i.Gb(2), i.tc("ngStyle", i.xc(7, Iv, "url(" + s.offerImage(t) + ")")), i.Gb(1), i.tc("ngIf", t.priceCredits), i.Gb(1), i.tc("ngIf", s.offerCount(t) > 1), i.Gb(1), i.tc("ngIf", t.priceActivityPoints)
                }
            }

            function vv(t, e) {
                if (1 & t && (i.Zb(0, "div", 15), i.Rc(1, Rv, 6, 9, "div", 16), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngForOf", t.groups[t.activeGroupIndex])
                }
            }

            function Tv(t, e) {
                if (1 & t && (i.Xb(0), i.Zb(1, "div", 27), i.Vb(2, "div", 28), i.Yb(), i.Wb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.tc("vertical", !0)("activePage", t.activePage)("activeOffer", t.activeOffer)
                }
            }
            const Ov = function(t) {
                return {
                    "selectspaces-active": t
                }
            };
            let yv = (() => {
                class t extends QR {
                    constructor() {
                        super(...arguments), this._groupNames = ["wallpaper", "floor", "landscape"], this._groups = [], this._activeGroupIndex = -1
                    }
                    ngOnInit() {
                        this.sortOffers(), this.selectFirstSpace(), lp((function() {
                            lp(".spacesmact").click((function() {
                                lp(".spacesmact").removeClass("ctlgmactive"), lp(this).addClass("ctlgmactive")
                            }))
                        }))
                    }
                    sortOffers() {
                        for (const t of this.offers) {
                            if (!t) continue;
                            const e = this.getFirstProduct(t);
                            if (e && (e.productType === LR.WALL || e.productType === LR.FLOOR)) {
                                const s = this.getProductFurniData(e);
                                if (s) {
                                    const e = s.className,
                                        i = this._groupNames.indexOf(e);
                                    for (-1 === i && this._groupNames.push(e); this._groups.length < this._groupNames.length;) this._groups.push([]);
                                    switch (e) {
                                        case "floor":
                                        case "wallpaper":
                                        case "landscape":
                                            this._groups[i].push(t)
                                    }
                                }
                            }
                        }
                        this.switchCategory("walls")
                    }
                    switchCategory(t) {
                        let e = -1;
                        switch (t) {
                            case "walls":
                                e = 0;
                                break;
                            case "floor":
                                e = 1;
                                break;
                            case "landscape":
                                e = 2
                        }
                        this._activeGroupIndex = e
                    }
                    selectFirstSpace() {
                        if (-1 === this._activeGroupIndex) return;
                        const t = this._groups[this.activeGroupIndex];
                        t && t.length && this.selectOffer(t[0])
                    }
                    offerName(t) {
                        let e = "";
                        const s = this.getFirstProduct(t);
                        if (s) switch (s.productType) {
                            case LR.FLOOR:
                                e = "roomItem.name." + s.furniClassId;
                                break;
                            case LR.WALL:
                                e = "wallItem.name." + s.furniClassId
                        }
                        return "" === e ? e : cp.instance.getLocalization(e)
                    }
                    offerImage(t) {
                        if (!t) return "";
                        const e = t.products[0];
                        if (!e) return "";
                        const s = this.getProductFurniData(e);
                        if (!s) return "";
                        const i = cp.instance.getConfiguration("catalog.asset.url");
                        let n = "";
                        switch (e.productType) {
                            case LR.WALL:
                                switch (s.className) {
                                    case "floor":
                                        n = ["th", s.className, e.extraParam].join("_");
                                        break;
                                    case "wallpaper":
                                        n = ["th", "wall", e.extraParam].join("_");
                                        break;
                                    case "landscape":
                                        n = ["th", s.className, e.extraParam.replace(".", "_"), "001"].join("_")
                                }
                                break;
                            default:
                                return super.offerImage(t)
                        }
                        return i + "/" + n + ".png"
                    }
                    get groups() {
                        return this._groups
                    }
                    get activeGroupIndex() {
                        return this._activeGroupIndex
                    }
                }
                return t.CODE = "spaces_new", t.\u0275fac = function(e) {
                    return Av(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 22,
                    vars: 25,
                    consts: [
                        [1, "nitro-catalog-layout-default-component"],
                        [1, "d-flex", "flex-column", "justify-content-center", "align-items-center", "position-relative", "w-100", "flex-grow-1", 2, "height", "240px"],
                        [3, "src", 4, "ngIf"],
                        [4, "ngIf"],
                        [1, "spaces-select-menu-corelo"],
                        [1, "btn-group", 2, "box-shadow", "0px 0px 0px 1px #ffffff26", "border-radius", "3px"],
                        ["type", "button", 1, "ssm-left", 2, "outline", "0", 3, "ngClass", "click"],
                        ["type", "button", 1, "ssm-middle", 2, "outline", "0", 3, "ngClass", "click"],
                        ["type", "button", 1, "ssm-right", 2, "outline", "0", 3, "ngClass", "click"],
                        [1, "catalog-mobibox"],
                        ["class", "ctlg_mobi-liste", 4, "ngIf"],
                        [1, "urun-secilmemis"],
                        [1, "us-txt"],
                        [3, "src"],
                        ["nitro-room-preview-component", "", 1, "mobi-display-box", "room-preview", 2, "position", "relative", "z-index", "1", 3, "roomPreviewer", "width", "height"],
                        [1, "ctlg_mobi-liste"],
                        ["class", "mview-height", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [1, "mview-height", 3, "ngClass", "click"],
                        [1, "mobi-menuview", "spacesmact"],
                        [1, "mview-box", "detail-image", 3, "ngStyle"],
                        ["class", "first-price-box", 4, "ngIf"],
                        ["class", "second-price-box", 4, "ngIf"],
                        [1, "first-price-box"],
                        [1, "mobi-price-caption"],
                        [1, "mobi-price-ico"],
                        [1, "icon", "icon-currency--1", "scale-0-75"],
                        [1, "second-price-box"],
                        [1, "mobi-purchase-box"],
                        ["nitro-catalog-purchase-component", "", 3, "vertical", "activePage", "activeOffer"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Rc(2, mv, 1, 1, "img", 2), i.Rc(3, pv, 2, 3, "ng-container", 3), i.Yb(), i.Zb(4, "div", 4), i.Zb(5, "div", 5), i.Zb(6, "button", 6), i.jc("click", (function() {
                            return e.switchCategory("walls")
                        })), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Zb(9, "button", 7), i.jc("click", (function() {
                            return e.switchCategory("floor")
                        })), i.Tc(10), i.nc(11, "translate"), i.Yb(), i.Zb(12, "button", 8), i.jc("click", (function() {
                            return e.switchCategory("landscape")
                        })), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Zb(15, "div", 9), i.Rc(16, vv, 2, 1, "div", 10), i.Yb(), i.Zb(17, "div", 11), i.Zb(18, "p", 12), i.Tc(19), i.nc(20, "translate"), i.Yb(), i.Yb(), i.Rc(21, Tv, 3, 3, "ng-container", 3), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngIf", !e.activeOffer && e.getImage(1)), i.Gb(1), i.tc("ngIf", e.activeOffer), i.Gb(3), i.tc("ngClass", i.xc(19, Ov, 0 === e.activeGroupIndex)), i.Gb(1), i.Uc(i.oc(8, 11, "catalog.spaces.tab.walls")), i.Gb(2), i.tc("ngClass", i.xc(21, Ov, 1 === e.activeGroupIndex)), i.Gb(1), i.Uc(i.oc(11, 13, "catalog.spaces.tab.floors")), i.Gb(2), i.tc("ngClass", i.xc(23, Ov, 2 === e.activeGroupIndex)), i.Gb(1), i.Uc(i.oc(14, 15, "catalog.spaces.tab.views")), i.Gb(3), i.tc("ngIf", e.activeGroupIndex >= 0), i.Gb(3), i.Uc(i.oc(20, 17, "catalog.purchase.select.info")), i.Gb(2), i.tc("ngIf", e.activeOffer))
                    },
                    encapsulation: 2
                }), t
            })();
            const Av = i.bc(yv);

            function Cv(t, e) {
                1 & t && i.Vb(0, "p", 23), 2 & t && i.tc("innerHtml", e.$implicit, i.Hc)
            }

            function Mv(t, e) {
                1 & t && (i.Zb(0, "p", 24), i.Tc(1, "5"), i.Yb())
            }
            let Uv = (() => {
                class t extends wR {
                    constructor() {
                        super(...arguments), this.textPages = [], this._allTrophyOffers = new x, this.currentTrophyOffer = null, this._imageUrl = null, this._currentTrophy = null, this._availableColorsForCurrentTrophy = null, this._currentTrophyIndex = 0, this._orderOfColors = ["g", "s", "b"], this.enteredText = ""
                    }
                    ngOnInit() {
                        const t = this.activePage.offers;
                        if (this.textPages = this.activePage.localization.texts.filter(t => t && t.length > 0), t && t.length)
                            for (const e of t) {
                                if (!e) continue;
                                const t = this.getTrophyNameWithoutColors(e.localizationId),
                                    s = this.getTrophyColorCharacter(e.localizationId);
                                let i = this._allTrophyOffers.getValue(t);
                                i || (i = new x, this._allTrophyOffers.add(t, i)), i.add(s, e)
                            }
                        this.selectOfferByIndex(this._currentTrophyIndex)
                    }
                    selectOfferByIndex(t) {
                        const e = this._allTrophyOffers.getWithIndex(this._currentTrophyIndex);
                        e && this.selectOffer(e)
                    }
                    selectOffer(t) {
                        if (!t) return;
                        let e = null;
                        const s = [];
                        this._orderOfColors.map(i => {
                            const n = t.getValue(i);
                            n && s.push(i), e || (e = n)
                        }), e || (e = t.getWithIndex(0)), e && (this._currentTrophyColor = this.getTrophyColorCharacter(e.localizationId)), this._availableColorsForCurrentTrophy = s, this.selectTrophyColor(e)
                    }
                    selectTrophyColor(t) {
                        if (!t) return;
                        this.currentTrophyOffer = t;
                        const e = t.products[0];
                        if (!e) return;
                        const s = cp.instance.roomEngine.getFurnitureFloorImage(e.furniClassId, new K(2, 0, 0), 64, this, 0, e.extraParam);
                        if (s) {
                            const t = s.getImage();
                            t && (this._imageUrl = t.src)
                        }
                        this._currentTrophy = e
                    }
                    handleTrophyColor(t) {
                        if (this._availableColorsForCurrentTrophy.indexOf(t) < 0) return;
                        const e = this._allTrophyOffers.getWithIndex(this._currentTrophyIndex).getValue(t);
                        e && (this._currentTrophyColor = t, this.selectTrophyColor(e))
                    }
                    getActiveClass(t) {
                        return this._availableColorsForCurrentTrophy.indexOf(t) >= 0 && this._currentTrophyColor == t ? "selected" : ""
                    }
                    imageReady(t, e, s) {
                        if (e) {
                            const t = ot.generateImageUrl(e);
                            t && this._ngZone.run(() => this._imageUrl = t)
                        }
                    }
                    handleButton(t) {
                        switch (t) {
                            case "next":
                                this._allTrophyOffers.length - 1 == this._currentTrophyIndex ? this._currentTrophyIndex = 0 : this._currentTrophyIndex++;
                                break;
                            case "previous":
                                0 == this._currentTrophyIndex ? this._currentTrophyIndex = this._allTrophyOffers.length - 1 : this._currentTrophyIndex--
                        }
                        this.selectOfferByIndex(this._currentTrophyIndex)
                    }
                    imageFailed(t) {
                        console.log("failed")
                    }
                    hasMultipleOffers() {
                        return this._allTrophyOffers && this._allTrophyOffers.length > 0
                    }
                    trophyHasColor(t) {
                        return this._availableColorsForCurrentTrophy.indexOf(t) > -1
                    }
                    getTrophyNameWithoutColors(t) {
                        const e = this.getTrophyColorCharacter(t);
                        return e.length > 0 ? t.slice(0, t.length - 1 - e.length) : t
                    }
                    getTrophyColorCharacter(t) {
                        if (-1 != t.indexOf("prizetrophy_2011_")) return "";
                        const e = t.lastIndexOf("_") + 1;
                        if (e <= 0) return "";
                        const s = t.substr(e);
                        return s.length > 1 || "g" != s && "s" != s && "b" != s ? "" : s
                    }
                    buyCurrentItem() {
                        this._catalogService.component && this._catalogService.component.confirmPurchase(this.activePage, this.currentTrophyOffer, 1, this.enteredText)
                    }
                    getText() {
                        return ""
                    }
                    get imageUrl() {
                        return this._imageUrl
                    }
                }
                return t.CODE = "trophies", t.\u0275fac = function(e) {
                    return Dv(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 29,
                    vars: 11,
                    consts: [
                        [1, "trophiespage"],
                        [1, "trophies-descbox"],
                        ["class", "trophiesdesctxt", 3, "innerHtml", 4, "ngFor", "ngForOf"],
                        [1, "trophies-mobiview"],
                        [1, "trophies-sol", 3, "click"],
                        [1, "tmobiview"],
                        [1, "align-self-center", 3, "src"],
                        [1, "trophies-sag", 3, "click"],
                        [1, "mobi-fiyat-box", "trophiesmfb"],
                        [1, "mdb-fbox", "mobi-fiyat-dia"],
                        ["class", "mobi-mapfbox-fiyat-text", 4, "ngIf"],
                        [1, "mobi-fiyat-birimico"],
                        [1, "icon", "icon-currencybig-cc"],
                        [1, "catalog-trophies-mobibox", "nitro-catalog-layout-trophies-types"],
                        [1, "trophies-renk-select", 2, "background", "#c19d31", 3, "ngClass", "click"],
                        [1, "trophies-renk-select", 2, "background", "#a5a4a2", 3, "ngClass", "click"],
                        [1, "trophies-renk-select", 2, "background", "#865600", 3, "ngClass", "click"],
                        ["autofocus", "", "name", "trophie", "maxlength", "300", 1, "trophies-mobinamebox", 3, "ngModel", "ngModelChange"],
                        [1, "mobi-purchase-box"],
                        [1, "mobi-hediye-box"],
                        [1, "mobigift-text"],
                        [1, "mobi-buy-box", 3, "click"],
                        [1, "mobibuy-text"],
                        [1, "trophiesdesctxt", 3, "innerHtml"],
                        [1, "mobi-mapfbox-fiyat-text"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Rc(2, Cv, 1, 1, "p", 2), i.Yb(), i.Zb(3, "div", 3), i.Zb(4, "div", 4), i.jc("click", (function() {
                            return e.handleButton("previous")
                        })), i.Tc(5, "<"), i.Yb(), i.Zb(6, "div", 5), i.Vb(7, "img", 6), i.Yb(), i.Zb(8, "div", 7), i.jc("click", (function() {
                            return e.handleButton("next")
                        })), i.Tc(9, ">"), i.Yb(), i.Zb(10, "div", 8), i.Zb(11, "div", 9), i.Rc(12, Mv, 2, 0, "p", 10), i.Zb(13, "div", 11), i.Vb(14, "i", 12), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Zb(15, "div", 13), i.Zb(16, "div", 14), i.jc("click", (function() {
                            return e.handleTrophyColor("g")
                        })), i.Yb(), i.Zb(17, "div", 15), i.jc("click", (function() {
                            return e.handleTrophyColor("s")
                        })), i.Yb(), i.Zb(18, "div", 16), i.jc("click", (function() {
                            return e.handleTrophyColor("b")
                        })), i.Yb(), i.Yb(), i.Zb(19, "textarea", 17), i.jc("ngModelChange", (function(t) {
                            return e.enteredText = t
                        })), i.Tc(20), i.Yb(), i.Zb(21, "div", 18), i.Zb(22, "div", 19), i.Zb(23, "p", 20), i.Tc(24, "Hediye Et"), i.Yb(), i.Yb(), i.Zb(25, "div", 21), i.jc("click", (function() {
                            return e.buyCurrentItem()
                        })), i.Zb(26, "p", 22), i.Tc(27), i.nc(28, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngForOf", e.textPages), i.Gb(5), i.tc("src", e.imageUrl, i.Ic), i.Gb(5), i.tc("ngIf", e.currentTrophyOffer.priceCredits), i.Gb(4), i.tc("ngClass", "color-gold" + e.getActiveClass("g")), i.Gb(1), i.tc("ngClass", "color-silver" + e.getActiveClass("s")), i.Gb(1), i.tc("ngClass", "color-bronze" + e.getActiveClass("b")), i.Gb(1), i.tc("ngModel", e.enteredText), i.Gb(1), i.Uc(e.enteredText), i.Gb(7), i.Uc(i.oc(28, 9, "buy")))
                    },
                    directives: [hp.m, hp.n, hp.l, VE.b, VE.g, VE.j, VE.l],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const Dv = i.bc(Uv);
            let Nv = (() => {
                class t extends wR {}
                return t.CODE = "UNSUPPORTED", t.\u0275fac = function(e) {
                    return wv(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 10,
                    vars: 0,
                    consts: [
                        [1, "d-flex", "flex-column", "justify-content-center", "align-items-center", "w-100", "h-100", "nitro-catalog-layout-unsupported-component"],
                        [1, "hatasayfa"],
                        [1, "hs-head"],
                        [1, "hs-ico"],
                        [1, "hs-hood"],
                        [1, "hs-desc"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Vb(3, "div", 3), i.Zb(4, "p", 4), i.Tc(5, "Hata..!"), i.Yb(), i.Yb(), i.Zb(6, "p", 5), i.Tc(7, "Habbo Hotel M\xfcd\xfcr\xfc Frank, \u015fuan bu kategorinin yap\u0131m a\u015famas\u0131nda oldu\u011funu a\xe7\u0131kl\u0131yor.."), i.Yb(), i.Zb(8, "p", 5), i.Tc(9, "E\u011fer yard\u0131m almak istiyorsan\u0131z, teknik personel birimine bildirim g\xf6nderin!"), i.Yb(), i.Yb(), i.Yb())
                    },
                    encapsulation: 2
                }), t
            })();
            const wv = i.bc(Nv);

            function Lv(t, e) {
                if (1 & t && (i.Zb(0, "div", 18), i.Vb(1, "img", 19), i.Zb(2, "p", 20), i.Tc(3), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit,
                        e = i.mc();
                    i.Gb(3), i.Uc(e.getOfferText(t.productCode))
                }
            }

            function xv(t, e) {
                if (1 & t && (i.Zb(0, "p", 21), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.Uc(t.priceCredits)
                }
            }

            function Pv(t, e) {
                if (1 & t && (i.Zb(0, "p", 21), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.Uc(t.priceActivityPoints)
                }
            }

            function Fv(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 22), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc().$implicit;
                        return i.mc().buyVip(e)
                    })), i.Zb(1, "p", 16), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "catalog.purchase_confirmation.gift")))
            }

            function Gv(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "div", 7), i.Rc(2, Lv, 4, 1, "div", 8), i.Zb(3, "div", 9), i.Zb(4, "div", 10), i.Rc(5, xv, 2, 1, "p", 11), i.Vb(6, "div", 12), i.Yb(), i.Zb(7, "div", 10), i.Zb(8, "p", 13), i.Tc(9, "+"), i.Yb(), i.Rc(10, Pv, 2, 1, "p", 11), i.Vb(11, "div", 14), i.Yb(), i.Yb(), i.Zb(12, "div", 15), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().buyVip(s)
                    })), i.Zb(13, "p", 16), i.Tc(14), i.nc(15, "translate"), i.Yb(), i.Yb(), i.Rc(16, Fv, 4, 3, "div", 17), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(2), i.tc("ngIf", t.productCode), i.Gb(3), i.tc("ngIf", t.priceCredits), i.Gb(5), i.tc("ngIf", t.priceActivityPoints), i.Gb(4), i.Uc(i.oc(15, 5, "buy")), i.Gb(2), i.tc("ngIf", t.giftable)
                }
            }
            let Yv = (() => {
                class t extends wR {
                    constructor(t, e) {
                        super(t, e), this._catalogService = t, this._ngZone = e, this.vipOffers = [], t.registerVipBuyTemplate(this), t.requestOffers(6)
                    }
                    setOffers(t) {
                        this._ngZone.run(() => {
                            this.vipOffers = t.reverse()
                        })
                    }
                    getPurseContent() {
                        const t = this._catalogService.purse;
                        return cp.instance.localization.getValueWithParameter("catalog.vip.extend.info", "days", (31 * t.clubPeriods + t.clubDays).toString())
                    }
                    buyVip(t) {
                        this._catalogService.component && this._catalogService.component.confirmVipSubscription(t)
                    }
                    getOfferText(t) {
                        return cp.instance.getLocalizationWithParameter("friendlytime.months.short", "amount", t.replace(/[^\d.]/g, ""))
                    }
                }
                return t.CODE = "vip_buy", t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(NR), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 11,
                    vars: 8,
                    consts: [
                        [1, "hc-info-box"],
                        ["src", "./assets/images/catalog/hc-bg.png", 1, "hc-bg"],
                        [1, "hc-info-hood"],
                        [1, "hc-info-desc", 3, "innerHtml"],
                        [4, "ngFor", "ngForOf"],
                        [1, "hc-ex-info"],
                        [2, "width", "250px"],
                        [1, "hc-buy"],
                        ["class", "hc-buy-box_head", 4, "ngIf"],
                        [1, "hc-fiyat-box"],
                        [1, "mdb-fbox"],
                        ["class", "hc-fiyat-text", "style", "padding-right: 3px;", 4, "ngIf"],
                        [1, "mobi-fiyat-birimico", 2, "background-image", "url(./assets/images/catalog/bigcc.png)", "height", "20px", "margin-top", "4px"],
                        [1, "plusprice"],
                        [1, "mobi-fiyat-birimico", 2, "background-image", "url(./assets/images/catalog/bigdia.png)", "height", "20px", "margin-top", "4px"],
                        [1, "hc-buy-box", 3, "click"],
                        [1, "hcbuy-text"],
                        ["class", "hc-hediye-box", 3, "click", 4, "ngIf"],
                        [1, "hc-buy-box_head"],
                        ["src", "./assets/images/catalog/1395__-hi.png", 1, "hc-logo"],
                        [1, "hcbuy-months-info"],
                        [1, "hc-fiyat-text", 2, "padding-right", "3px"],
                        [1, "hc-hediye-box", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Vb(1, "img", 1), i.Zb(2, "strong", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Vb(5, "p", 3), i.Yb(), i.Rc(6, Gv, 17, 7, "ng-container", 4), i.Zb(7, "div", 5), i.Zb(8, "p", 6), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 4, "catalog.vip.extend.title")), i.Gb(2), i.tc("innerHtml", e.getPurseContent(), i.Hc), i.Gb(1), i.tc("ngForOf", e.vipOffers), i.Gb(3), i.Uc(i.oc(10, 6, "catalog.vip.buy.hccenter")))
                    },
                    directives: [hp.m, hp.n],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            var kv = s("Kdsb");

            function Vv(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 13), i.Zb(1, "span", 9), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Zb(4, "button", 14), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc().$implicit;
                        return i.mc(2).selectOffer(e)
                    })), i.Tc(5), i.nc(6, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 2, "catalog.club_gift.selectable")), i.Gb(3), i.Uc(i.oc(6, 4, "catalog.club_gift.select")))
            }

            function Zv(t, e) {
                if (1 & t && (i.Zb(0, "div", 9), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit,
                        e = i.mc(2);
                    i.Gb(1), i.Vc(" ", e.nonAvailableText(t.offerId), " ")
                }
            }
            const jv = function(t) {
                return {
                    "background-image": t
                }
            };

            function Bv(t, e) {
                if (1 & t && (i.Zb(0, "div", 7), i.Vb(1, "div", 8), i.Zb(2, "div", 9), i.Zb(3, "p", 10), i.Tc(4), i.Yb(), i.Rc(5, Vv, 7, 6, "div", 11), i.Rc(6, Zv, 2, 1, "div", 12), i.Yb(), i.Yb()), 2 & t) {
                    const t = e.$implicit,
                        s = i.mc(2);
                    i.Gb(1), i.tc("ngStyle", i.xc(4, jv, "url(" + s.offerImage(t) + ")")), i.Gb(3), i.Uc(s.getProductFurniData(t.products[0]).name), i.Gb(1), i.tc("ngIf", s.getAvailability(t.offerId)), i.Gb(1), i.tc("ngIf", !s.getAvailability(t.offerId))
                }
            }

            function Hv(t, e) {
                if (1 & t && (i.Zb(0, "div", 2), i.Zb(1, "p", 3), i.Tc(2), i.Yb(), i.Zb(3, "perfect-scrollbar", 4), i.Rc(4, Bv, 7, 6, "div", 5), i.Yb(), i.Zb(5, "p", 6), i.Tc(6), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.giftsAvailable), i.Gb(2), i.tc("ngForOf", t.gifts), i.Gb(2), i.Uc(t.pastClubDays)
                }
            }

            function Wv(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 15), i.Zb(1, "div", 16), i.Zb(2, "h6", 17), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "button", 18), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hidePopup()
                    })), i.Vb(6, "i", 19), i.Yb(), i.Yb(), i.Zb(7, "div", 20), i.Zb(8, "div", 21), i.Vb(9, "div", 22), i.Yb(), i.Zb(10, "div", 23), i.Zb(11, "div", 24), i.Tc(12), i.Yb(), i.Yb(), i.Yb(), i.Zb(13, "div", 25), i.Zb(14, "div", 26), i.Zb(15, "button", 27), i.jc("click", (function() {
                        return i.Gc(t), i.mc().confirmGift()
                    })), i.Tc(16), i.nc(17, "translate"), i.Yb(), i.Zb(18, "button", 28), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hidePopup()
                    })), i.Tc(19), i.nc(20, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 5, "catalog.club_gift.confirm")), i.Gb(6), i.tc("ngStyle", i.xc(11, jv, "url(" + t.getGiftImage() + ")")), i.Gb(3), i.Uc(t.giftName()), i.Gb(4), i.Uc(i.oc(17, 7, "catalog.club_gift.select")), i.Gb(3), i.Uc(i.oc(20, 9, "cancel"))
                }
            }
            let zv = (() => {
                class t extends wR {
                    constructor(t, e) {
                        super(t, e), this._catalogService = t, this._ngZone = e, this.showPopup = !1, this.vipOffers = [], this._currentSelectedVipOffer = null
                    }
                    get visible() {
                        return null !== this._catalogService.clubGiftsParser
                    }
                    hidePopup() {
                        this.showPopup = !1
                    }
                    get gifts() {
                        return this.visible ? this._catalogService.clubGiftsParser.offers : []
                    }
                    get direction() {
                        return new K(90)
                    }
                    selectOffer(t) {
                        this._currentSelectedVipOffer = t, this.showPopup = !0
                    }
                    get pastClubDays() {
                        const t = this._catalogService.purse.pastClubDays,
                            e = t > 31 ? "catalog.club_gift.past_club.long" : "catalog.club_gift.past_club",
                            s = Math.floor(t % 31),
                            i = Math.floor(t / 31);
                        let n = cp.instance.localization.getValue(e);
                        return n = n.replace("%days%", s.toString()), n = n.replace("%months%", i.toString()), n
                    }
                }
                return t.CODE = "club_gifts", t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(NR), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 2,
                    vars: 2,
                    consts: [
                        ["class", "w-100 h-100 nitro-catalog-layout-vip-gifts-component px-1", 4, "ngIf"],
                        ["class", "nitro-catalog-confirm-purchase-component card", 3, "bringToTop", "draggable", 4, "ngIf"],
                        [1, "w-100", "h-100", "nitro-catalog-layout-vip-gifts-component", "px-1"],
                        [1, "text-center", "w-100"],
                        [2, "min-height", "450px", "max-height", "450px", "height", "450px"],
                        ["class", "gift-item rounded bg-secondary mb-2 d-flex flex-row p-1", 4, "ngFor", "ngForOf"],
                        [1, "w-100", "text-center", "p-0", "m-0"],
                        [1, "gift-item", "rounded", "bg-secondary", "mb-2", "d-flex", "flex-row", "p-1"],
                        [1, "gift-image", "align-self-center", "mr-2", "flex-shrink-0", 3, "ngStyle"],
                        [1, "w-100"],
                        [1, "mb-0", "pb-0", "d-block"],
                        ["class", "w-100 d-flex flex-row justify-content-between", 4, "ngIf"],
                        ["class", "w-100", 4, "ngIf"],
                        [1, "w-100", "d-flex", "flex-row", "justify-content-between"],
                        ["type", "button", 1, "btn", "btn-sm", "btn-primary", "align-self-center", 3, "click"],
                        [1, "nitro-catalog-confirm-purchase-component", "card", 3, "bringToTop", "draggable"],
                        [1, "drag-handler", "d-flex", "justify-content-between", "align-items-center", "px-3", "pt-3"],
                        [1, "m-0"],
                        ["type", "button", 1, "close", 3, "click"],
                        [1, "fas", "fa-times"],
                        [1, "row", "p-3"],
                        [1, "col-6", "d-flex", "flex-column"],
                        [1, "product-preview", "bg-secondary", "rounded", 3, "ngStyle"],
                        [1, "col-6", "d-flex", "flex-column", "align-items-center", "justify-content-center"],
                        [1, "offer-name"],
                        [1, "row", "align-items-end", "pt-0", "px-3", "pb-3"],
                        [1, "col", "btn-group"],
                        ["type", "button", 1, "btn", "btn-success", 3, "click"],
                        ["type", "button", 1, "btn", "btn-primary", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Rc(0, Hv, 7, 3, "div", 0), i.Rc(1, Wv, 21, 13, "div", 1)), 2 & t && (i.tc("ngIf", e.visible), i.Gb(1), i.tc("ngIf", e.showPopup))
                    },
                    directives: [hp.n, kv.b, hp.m, hp.o, CE, kE],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            class Kv {
                getLayoutForType(t) {
                    switch (t) {
                        case tv.CODE:
                            return tv;
                        case av.CODE:
                            return av;
                        case VR.CODE:
                            return VR;
                        case _v.CODE:
                            return _v;
                        case lv.CODE:
                            return lv;
                        case dv.CODE:
                            return dv;
                        case yv.CODE:
                            return yv;
                        case QR.CODE:
                            return QR;
                        case Yv.CODE:
                            return Yv;
                        case Uv.CODE:
                            return Uv;
                        case zv.CODE:
                            return zv;
                        default:
                            return Nv
                    }
                }
            }
            let Xv = (() => {
                class t {
                    constructor(t) {
                        this._ngZone = t, this._isReady = !1, this._messages = [], this._currencies = new Map, this.registerMessages()
                    }
                    ngOnDestroy() {
                        this.unregisterMessages()
                    }
                    registerMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            this.unregisterMessages(), this._messages = [new Ic(this.onUserCreditsEvent.bind(this)), new vc(this.onUserCurrencyEvent.bind(this)), new Oc(this.onUserCurrencyUpdateEvent.bind(this)), new Ac(this.onUserSubscriptionEvent.bind(this))];
                            for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                        })
                    }
                    unregisterMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            if (this._messages && this._messages.length) {
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            }
                        })
                    }
                    requestUpdate() {
                        cp.instance.communication.connection.send(new jh)
                    }
                    onUserCreditsEvent(t) {
                        if (!t) return;
                        const e = t.getParser();
                        this._isReady = !0, this._ngZone.run(() => this.setCurrency(-1, parseFloat(e.credits)))
                    }
                    onUserCurrencyEvent(t) {
                        if (!t) return;
                        const e = t.getParser();
                        this._ngZone.run(() => {
                            for (const [t, s] of e.currencies) this.setCurrency(t, s)
                        })
                    }
                    onUserCurrencyUpdateEvent(t) {
                        if (!t) return;
                        const e = t.getParser();
                        this._ngZone.run(() => this.setCurrency(e.type, e.amount))
                    }
                    onUserSubscriptionEvent(t) {
                        if (!t) return;
                        const e = t.getParser();
                        if (e) switch (e.name) {
                            case "habbo_club":
                                return void(this._habboClubSubscription = e);
                            default:
                                console.log("unknown")
                        }
                    }
                    setCurrency(t, e) {
                        this._currencies.set(t, e)
                    }
                    get currencies() {
                        return this._currencies
                    }
                    get visibleCurrencies() {
                        return cp.instance.getConfiguration("system.currency.types", [])
                    }
                    get hcSub() {
                        return this._habboClubSubscription
                    }
                    get isReady() {
                        return this._isReady
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.gc(i.E))
                }, t.\u0275prov = i.Qb({
                    token: t,
                    factory: t.\u0275fac
                }), t
            })();
            const qv = ["layoutsContainer"],
                Jv = function(t) {
                    return {
                        ctlgactive: t
                    }
                };

            function Qv(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "div", 22), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(3).selectTab(s)
                    })), i.Tc(2), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc(3);
                    i.Gb(1), i.tc("ngClass", i.xc(2, Jv, s.activeTab === t)), i.Gb(1), i.Uc(t.localization)
                }
            }

            function $v(t, e) {
                if (1 & t && (i.Zb(0, "div", 20), i.Rc(1, Qv, 3, 4, "ng-container", 21), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(1), i.tc("ngForOf", t.catalogRoot.children)
                }
            }

            function tT(t, e) {
                1 & t && (i.Zb(0, "div", 23), i.Zb(1, "div", 24), i.Vb(2, "input", 25), i.Yb(), i.Vb(3, "div", 26), i.Yb())
            }

            function eT(t, e) {}
            const sT = function(t) {
                return {
                    "background-image": t
                }
            };

            function iT(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 4), i.Zb(1, "div", 5), i.Zb(2, "p", 6), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 7), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Vb(6, "div", 8), i.Yb(), i.Zb(7, "div", 9), i.Rc(8, $v, 2, 1, "div", 10), i.Zb(9, "div", 11), i.Vb(10, "div", 12), i.Vb(11, "div", 13), i.Zb(12, "p", 14), i.Tc(13), i.Yb(), i.Zb(14, "p", 15), i.Tc(15), i.Yb(), i.Yb(), i.Zb(16, "div", 16), i.Rc(17, tT, 4, 0, "div", 17), i.Zb(18, "div", 18), i.Rc(19, eT, 0, 0, "ng-template", null, 19, i.Sc), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 7, "catalog.title")), i.Gb(5), i.tc("ngIf", t.catalogRoot && t.catalogRoot.children.length > 0), i.Gb(2), i.tc("ngStyle", i.xc(9, sT, "url(" + t.headerImageUrl + ")")), i.Gb(1), i.tc("ngStyle", i.xc(11, sT, "url(" + t.iconUrl + ")")), i.Gb(2), i.Uc(null == t.activePageData ? null : t.activePageData.localization), i.Gb(2), i.Uc(null == t.activePage || null == t.activePage.localization ? null : t.activePage.localization.texts[0]), i.Gb(2), i.tc("ngIf", t.activeTab && t.activeTab.children.length > 0)
                }
            }

            function nT(t, e) {
                if (1 & t && i.Vb(0, "nitro-catalog-confirm-purchase-component", 27), 2 & t) {
                    const t = i.mc();
                    i.tc("page", t.purchaseOfferPage)("isGift", t.isGift)("offer", t.purchaseOffer)("quantity", t.purchaseOfferQuantity)("extra", t.purchaseOfferExtra)("completed", t.purchaseCompleted)
                }
            }

            function rT(t, e) {
                if (1 & t && i.Vb(0, "nitro-catalog-confirm-vip-subscription-component", 28), 2 & t) {
                    const t = i.mc();
                    i.tc("subscription", t.purchaseVipSubscription)
                }
            }

            function oT(t, e) {
                1 & t && i.Vb(0, "nitro-catalog-confirm-purchase-insufficient-funds")
            }
            let aT = (() => {
                class t {
                    constructor(t, e, s, i, n, r) {
                        this._settingsService = t, this._notificationService = e, this._catalogService = s, this._componentFactoryResolver = i, this._purseService = n, this._ngZone = r, this.visible = !1, this._roomPreviewer = null, this._lastComponent = null, this._layoutFactory = null, this._activeTab = null, this._activeOffer = null, this._purchaseOfferPage = null, this._purchaseOffer = null, this._purchaseVipSubscription = null, this._purchaseOfferQuantity = 1, this._purchaseOfferExtra = null, this._purchaseCompleted = !1, this._showInsufficientFunds = !1, this._isGiftOffer = !1, s.requestClubGifts()
                    }
                    ngOnInit() {
                        this._catalogService.component = this, this._layoutFactory = new Kv, this._roomPreviewer || (this._roomPreviewer = new MR(cp.instance.roomEngine, ++MR.PREVIEW_COUNTER))
                    }
                    ngOnChanges(t) {
                        const e = t.visible.currentValue;
                        e !== t.visible.previousValue && (e ? this.prepareCatalog() : this.removeLastComponent())
                    }
                    ngOnDestroy() {
                        this._roomPreviewer && this._roomPreviewer.dispose(), this.reset(), this._catalogService.component = null, this._layoutFactory = null
                    }
                    reset() {
                        this.removeLastComponent(), this._activeTab = null, this._activeOffer = null, this.hidePurchaseConfirmation()
                    }
                    hide() {
                        this._settingsService.hideCatalog()
                    }
                    hidePurchaseConfirmation() {
                        this._purchaseOfferPage = null, this._purchaseOffer = null, this._purchaseOfferQuantity = 1, this._purchaseOfferExtra = null, this._purchaseVipSubscription = null
                    }
                    prepareCatalog() {
                        this._catalogService.catalogRoot ? setTimeout(() => {
                            this._activeTab ? this._catalogService.activePage ? this.setupLayout() : this.selectFirstPage(this._activeTab) : this.selectFirstTab()
                        }, 0) : this._catalogService.setupCatalog(NR.MODE_NORMAL)
                    }
                    setupLayout() {
                        const t = this._catalogService.activePage;
                        if (!t) return;
                        const e = this._layoutFactory.getLayoutForType(t.layoutCode);
                        e ? (this.createComponent(e), this._lastComponent && (this._lastComponent.instance.activePage = t), this.selectOffer(null)) : this.removeLastComponent()
                    }
                    createComponent(t) {
                        if (!t) return;
                        this.removeLastComponent();
                        const e = this._componentFactoryResolver.resolveComponentFactory(t);
                        let s = null;
                        e && (s = this.layoutsContainer.createComponent(e)), console.log(s), this._lastComponent = s
                    }
                    removeLastComponent() {
                        this.layoutsContainer && this.layoutsContainer.remove(), this._lastComponent = null, this._activeOffer = null
                    }
                    selectTab(t) {
                        t && (this._activeTab = t, this.selectFirstPage(t))
                    }
                    selectPage(t) {
                        t && this._catalogService.requestPage(t)
                    }
                    selectFirstPage(t) {
                        t && this.selectPage(0 === t.children.length ? t : t.children && t.children[0])
                    }
                    selectFirstTab() {
                        if (!this.catalogRoot) return;
                        const t = this.catalogRoot.children && this.catalogRoot.children[0];
                        t && this.selectTab(t)
                    }
                    selectOffer(t) {
                        if (this._activeOffer = t, this._activeOffer) {
                            const t = this._activeOffer.products[0];
                            if (!t) return;
                            if (!this._roomPreviewer) return;
                            const e = this._catalogService.getFurnitureDataForProductOffer(t);
                            if (!this._roomPreviewer) return;
                            this._ngZone.runOutsideAngular(() => {
                                switch (t.productType) {
                                    case LR.FLOOR:
                                        if (this._roomPreviewer.updateObjectRoom("default", "default", "default"), e.specialType === rf.FIGURE_PURCHASABLE_SET) {
                                            const t = [],
                                                s = e.customParams.split(",");
                                            for (const e of s) {
                                                const s = parseInt(e);
                                                cp.instance.avatar.isValidFigureSetForGender(s, cp.instance.sessionDataManager.gender) && t.push(s)
                                            }
                                            const i = cp.instance.avatar.getFigureStringWithFigureIds(cp.instance.sessionDataManager.figure, cp.instance.sessionDataManager.gender, t);
                                            this._roomPreviewer.addAvatarIntoRoom(i, 0)
                                        } else this._roomPreviewer.addFurnitureIntoRoom(t.furniClassId, new K(90));
                                        return;
                                    case LR.WALL:
                                        switch (e.className) {
                                            case "floor":
                                                this._roomPreviewer.reset(!1), this._roomPreviewer.updateObjectRoom(t.extraParam);
                                                break;
                                            case "wallpaper":
                                                this._roomPreviewer.reset(!1), this._roomPreviewer.updateObjectRoom(null, t.extraParam);
                                                break;
                                            case "landscape":
                                                this._roomPreviewer.reset(!1), this._roomPreviewer.updateObjectRoom(null, null, t.extraParam);
                                                break;
                                            default:
                                                return this._roomPreviewer.updateObjectRoom("default", "default", "default"), void this._roomPreviewer.addWallItemIntoRoom(t.furniClassId, new K(90), null)
                                        }
                                        return
                                }
                            })
                        } else this._ngZone.runOutsideAngular(() => this._roomPreviewer && this._roomPreviewer.reset(!1))
                    }
                    hasSufficientFunds(t, e, s, i = 1) {
                        if (!this._purseService) return !1;
                        const n = this._purseService.currencies,
                            r = n.get(-1),
                            o = n.get(e);
                        return !(r < t * i || o < s * i)
                    }
                    confirmPurchase(t, e, s = 1, i = null, n = !1) {
                        this.hasSufficientFunds(e.priceCredits, e.priceActivityPointsType, e.priceActivityPoints, s) ? (this._purchaseOfferPage = t, this._purchaseOffer = e, this._purchaseOfferQuantity = s, this._purchaseOfferExtra = i, this._isGiftOffer = n) : this.setInsufficientFunds(!0)
                    }
                    confirmVipSubscription(t) {
                        this.hasSufficientFunds(t.priceCredits, t.priceActivityPointsType, t.priceActivityPoints, 1) ? this._purchaseVipSubscription = t : this.setInsufficientFunds(!0)
                    }
                    get roomPreviewer() {
                        return this._roomPreviewer
                    }
                    get catalogRoot() {
                        return this._catalogService.catalogRoot
                    }
                    get activeTab() {
                        return this._activeTab
                    }
                    get activeOffer() {
                        return this._activeOffer
                    }
                    get activePage() {
                        return this._catalogService.activePage
                    }
                    get activePageData() {
                        return this._catalogService.activePageData
                    }
                    get purchaseOfferPage() {
                        return this._purchaseOfferPage
                    }
                    get purchaseOffer() {
                        return this._purchaseOffer
                    }
                    get isGift() {
                        return this._isGiftOffer
                    }
                    get purchaseOfferQuantity() {
                        return this._purchaseOfferQuantity
                    }
                    get purchaseOfferExtra() {
                        return this._purchaseOfferExtra
                    }
                    get purchaseCompleted() {
                        return this._purchaseCompleted
                    }
                    get purchaseVipSubscription() {
                        return this._purchaseVipSubscription
                    }
                    setInsufficientFunds(t) {
                        this._showInsufficientFunds = t
                    }
                    get showInsufficientFunds() {
                        return this._showInsufficientFunds
                    }
                    get iconUrl() {
                        return null != this._catalogService && null != this._catalogService.activePageData ? cp.instance.getConfiguration("catalog.asset.icon.url").replace(/%name%/gi, this._catalogService.activePageData.icon.toString()) : ""
                    }
                    get headerImageUrl() {
                        if (null !== this.activePage) {
                            let t = cp.instance.getConfiguration("catalog.asset.image.url");
                            return t = t.replace("%name%", this.activePage.localization.images[0]), t
                        }
                        return ""
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(_p), i.Ub(xb), i.Ub(NR), i.Ub(i.l), i.Ub(Xv), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-catalog-main-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(qv, !0, i.W), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.layoutsContainer = t.first)
                        }
                    },
                    inputs: {
                        visible: "visible"
                    },
                    features: [i.Eb],
                    decls: 4,
                    vars: 4,
                    consts: [
                        ["dragHandle", "#catalogdrag", "id", "catalog", 3, "bringToTop", "draggable", 4, "ngIf"],
                        [3, "page", "isGift", "offer", "quantity", "extra", "completed", 4, "ngIf"],
                        [3, "subscription", 4, "ngIf"],
                        [4, "ngIf"],
                        ["dragHandle", "#catalogdrag", "id", "catalog", 3, "bringToTop", "draggable"],
                        ["id", "catalogdrag"],
                        [1, "ch-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "old-bilgi"],
                        [1, "magaza-body"],
                        ["class", "catalog-menu", 4, "ngIf"],
                        [1, "ctlg-page-headinfo"],
                        [1, "catalog_header", 3, "ngStyle"],
                        [1, "catalog_header-ico", 3, "ngStyle"],
                        [1, "catalog_header-title-text"],
                        [1, "catalog_header-description-text"],
                        [1, "catalog-lowerbody"],
                        ["class", "catalog-leftbox", 4, "ngIf"],
                        [1, "catalog-rightbox"],
                        ["layoutsContainer", ""],
                        [1, "catalog-menu"],
                        [4, "ngFor", "ngForOf"],
                        [1, "ctlgmenu-button", 3, "ngClass", "click"],
                        [1, "catalog-leftbox"],
                        [1, "ara-bgbox"],
                        ["placeholder", "Recherche", 1, "catalog-ara"],
                        ["nitro-catalog-navigation-component", ""],
                        [3, "page", "isGift", "offer", "quantity", "extra", "completed"],
                        [3, "subscription"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Rc(0, iT, 21, 13, "div", 0), i.Rc(1, nT, 1, 6, "nitro-catalog-confirm-purchase-component", 1), i.Rc(2, rT, 1, 1, "nitro-catalog-confirm-vip-subscription-component", 2), i.Rc(3, oT, 1, 0, "nitro-catalog-confirm-purchase-insufficient-funds", 3)), 2 & t && (i.tc("ngIf", e.visible), i.Gb(1), i.tc("ngIf", null !== e.purchaseOffer), i.Gb(1), i.tc("ngIf", null !== e.purchaseVipSubscription), i.Gb(1), i.tc("ngIf", e.showInsufficientFunds))
                    },
                    encapsulation: 2
                }), t
            })();
            class cT {
                constructor(t, e, s) {
                    this._level = t, this._tileSize = e, this._name = s
                }
                get level() {
                    return this._level
                }
                get tileSize() {
                    return this._tileSize
                }
                get name() {
                    return this._name
                }
            }
            var _T = s("1kSV");
            const hT = ["nitro-navigator-room-creator-component", ""];

            function lT(t, e) {
                if (1 & t && (i.Zb(0, "option", 23), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.tc("value", t.id), i.Gb(1), i.Uc(i.oc(2, 2, t.name))
                }
            }

            function uT(t, e) {
                if (1 & t && (i.Zb(0, "option", 23), i.Tc(1), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.tc("value", t), i.Gb(1), i.Uc(t)
                }
            }

            function dT(t, e) {
                if (1 & t && (i.Zb(0, "option", 23), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.tc("value", t.key), i.Gb(1), i.Uc(i.oc(2, 2, t.value))
                }
            }
            const gT = function(t) {
                    return {
                        rcactive: t
                    }
                },
                mT = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function pT(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 24), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().setRoomLayout(s.name)
                    })), i.Vb(1, "div", 25), i.Zb(2, "div", 26), i.Vb(3, "div", 27), i.Zb(4, "p", 28), i.Tc(5), i.nc(6, "translate"), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.tc("ngClass", i.xc(6, gT, s.roomLayoutControl.value === t.name)), i.Gb(1), i.tc("ngStyle", i.xc(8, mT, "url(" + s.getRoomLayoutImageUrl(t.name) + ")")), i.Gb(4), i.Wc("", t.tileSize, " ", i.oc(6, 4, "navigator.createroom.tilesize"), "")
                }
            }
            let bT = (() => {
                class t {
                    constructor(t, e, s) {
                        this._navigatorService = t, this._activeModal = e, this._formBuilder = s, this._layouts = [], this._maxVisitors = [], this._tradeSettings = [], this._roomCreateListener = null
                    }
                    ngOnInit() {
                        this.setRoomLayouts(), this.setMaxVisitors(50), this.setTradeSettings(), this.createForm(), this._roomCreateListener = new Hr(this.onRoomCreatedEvent.bind(this)), cp.instance.communication.registerMessageEvent(this._roomCreateListener)
                    }
                    ngOnDestroy() {
                        cp.instance.communication.removeMessageEvent(this._roomCreateListener)
                    }
                    onRoomCreatedEvent(t) {
                        this.hide()
                    }
                    createForm() {
                        let t = 0;
                        const e = this.categories[0];
                        e && (t = e.id), this._form = this._formBuilder.group({
                            roomName: ["", VE.r.required],
                            roomDesc: [""],
                            roomLayout: [this.layouts[0].name, VE.r.required],
                            roomCategory: [t.toString(), VE.r.required],
                            roomVisitors: [this.maxVisitors[0].toString(), VE.r.required],
                            roomTrade: ["0", VE.r.required]
                        })
                    }
                    submit() {
                        if (!this.form.valid) return;
                        const t = this.roomNameControl.value,
                            e = this.roomDescControl.value,
                            s = "model_" + this.roomLayoutControl.value,
                            i = parseInt(this.roomCategoryControl.value),
                            n = parseInt(this.roomVisitorsControl.value),
                            r = parseInt(this.roomTradeControl.value);
                        t && "" !== t && cp.instance.communication.connection.send(new bh(t, e, s, i, n, r))
                    }
                    hide() {
                        this._activeModal.close()
                    }
                    setRoomLayouts() {
                        this._layouts = [new cT(wp._Str_3159, 104, "a"), new cT(wp._Str_3159, 94, "b"), new cT(wp._Str_3159, 36, "c"), new cT(wp._Str_3159, 84, "d"), new cT(wp._Str_3159, 80, "e"), new cT(wp._Str_3159, 80, "f"), new cT(wp._Str_3159, 416, "i"), new cT(wp._Str_3159, 320, "j"), new cT(wp._Str_3159, 448, "k"), new cT(wp._Str_3159, 352, "l"), new cT(wp._Str_3159, 384, "m"), new cT(wp._Str_3159, 372, "n"), new cT(wp._Str_2964, 80, "g"), new cT(wp._Str_2964, 74, "h"), new cT(wp._Str_2964, 416, "o"), new cT(wp._Str_2964, 352, "p"), new cT(wp._Str_2964, 304, "q"), new cT(wp._Str_2964, 336, "r"), new cT(wp._Str_2964, 748, "u"), new cT(wp._Str_2964, 438, "v"), new cT(wp._Str_2575, 540, "t"), new cT(wp._Str_2575, 512, "w"), new cT(wp._Str_2575, 396, "x"), new cT(wp._Str_2575, 440, "y"), new cT(wp._Str_2575, 456, "z"), new cT(wp._Str_2575, 208, "0"), new cT(wp._Str_2575, 1009, "1"), new cT(wp._Str_2575, 1044, "2"), new cT(wp._Str_2575, 183, "3"), new cT(wp._Str_2575, 254, "4"), new cT(wp._Str_2575, 1024, "5"), new cT(wp._Str_2575, 801, "6"), new cT(wp._Str_2575, 354, "7"), new cT(wp._Str_2575, 888, "8"), new cT(wp._Str_2575, 926, "9")]
                    }
                    setMaxVisitors(e) {
                        this._maxVisitors = [];
                        let s = t.MAX_VISITOR_STEPPER;
                        for (; s <= e;) this._maxVisitors.push(s), s += t.MAX_VISITOR_INCREMENTOR
                    }
                    setTradeSettings() {
                        this._tradeSettings = [], this._tradeSettings.push("${navigator.roomsettings.trade_not_allowed}", "${navigator.roomsettings.trade_not_with_Controller}", "${navigator.roomsettings.trade_allowed}")
                    }
                    setRoomLayout(t) {
                        const e = this.roomLayoutControl;
                        e && e.setValue(t)
                    }
                    getRoomLayoutImageUrl(t) {
                        let e = cp.instance.getConfiguration("images.url");
                        return e += `/navigator/models/model_${t}.png`, e
                    }
                    get form() {
                        return this._form
                    }
                    get categories() {
                        return this._navigatorService.categories
                    }
                    get layouts() {
                        return this._layouts
                    }
                    get maxVisitors() {
                        return this._maxVisitors
                    }
                    get tradeSettings() {
                        return this._tradeSettings
                    }
                    get roomNameControl() {
                        return this._form.controls.roomName
                    }
                    get roomDescControl() {
                        return this._form.controls.roomDesc
                    }
                    get roomLayoutControl() {
                        return this._form.controls.roomLayout
                    }
                    get roomCategoryControl() {
                        return this._form.controls.roomCategory
                    }
                    get roomVisitorsControl() {
                        return this._form.controls.roomVisitors
                    }
                    get roomTradeControl() {
                        return this._form.controls.roomTrade
                    }
                    get isLoading() {
                        return !1
                    }
                }
                return t.MAX_VISITOR_STEPPER = 10, t.MAX_VISITOR_INCREMENTOR = 5, t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(WS), i.Ub(_T.a), i.Ub(VE.c))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-navigator-room-creator-component", ""]
                    ],
                    attrs: hT,
                    decls: 52,
                    vars: 32,
                    consts: [
                        ["dragHandle", "#roomcreatedrag", "id", "roomcreate", 3, "bringToTop", "draggable"],
                        ["id", "roomcreatedrag"],
                        [1, "rc-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "roomcreatebox"],
                        [1, "rcleft-box"],
                        [3, "formGroup"],
                        [1, "form-group", 2, "margin-bottom", "0rem"],
                        [1, "rctxt"],
                        ["type", "text", "formControlName", "roomName", 1, "rc_roomname"],
                        ["formControlName", "roomDesc", 1, "rc_roomdesc"],
                        ["id", "rccategory-select", "formControlName", "roomCategory", 2, "background-image", "url(./assets/images/rcoption.png)"],
                        [3, "value", 4, "ngFor", "ngForOf"],
                        ["id", "rccategory-select", "formControlName", "roomVisitors", 2, "background-image", "url(./assets/images/rcoption.png)"],
                        ["id", "rccategory-select", "formControlName", "roomTrade", 2, "background-image", "url(./assets/images/rcoption.png)"],
                        [1, "rcbuttonoptions"],
                        [1, "rc-roomcreate", 2, "outline", "0", 3, "disabled", "click"],
                        [1, "rc-buttontxt"],
                        [1, "rc-roomcreate-close", 2, "outline", "0", 3, "click"],
                        [1, "rcright-box"],
                        [1, "rctxt", 2, "padding-bottom", "3px"],
                        [1, "rc-roomselect"],
                        ["class", "rc-roomview", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [3, "value"],
                        [1, "rc-roomview", 3, "ngClass", "click"],
                        [1, "rc-roomdetail", 3, "ngStyle"],
                        [1, "rc-roomkaro"],
                        [1, "rico"],
                        [1, "rc-karoinfo"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.jc("click", (function() {
                            return e.hide()
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 4), i.Zb(7, "div", 5), i.Zb(8, "form", 6), i.Zb(9, "div", 7), i.Zb(10, "p", 8), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Vb(13, "input", 9), i.Yb(), i.Zb(14, "div", 7), i.Zb(15, "p", 8), i.Tc(16), i.nc(17, "translate"), i.Yb(), i.Vb(18, "textarea", 10), i.Yb(), i.Zb(19, "div", 7), i.Zb(20, "p", 8), i.Tc(21), i.nc(22, "translate"), i.Yb(), i.Zb(23, "select", 11), i.Rc(24, lT, 3, 4, "option", 12), i.Yb(), i.Yb(), i.Zb(25, "div", 7), i.Zb(26, "p", 8), i.Tc(27), i.nc(28, "translate"), i.Yb(), i.Zb(29, "select", 13), i.Rc(30, uT, 2, 2, "option", 12), i.Yb(), i.Yb(), i.Zb(31, "div", 7), i.Zb(32, "p", 8), i.Tc(33), i.nc(34, "translate"), i.Yb(), i.Zb(35, "select", 14), i.Rc(36, dT, 3, 4, "option", 12), i.nc(37, "keyvalue"), i.Yb(), i.Yb(), i.Yb(), i.Zb(38, "div", 15), i.Zb(39, "button", 16), i.jc("click", (function() {
                            return e.submit()
                        })), i.Zb(40, "p", 17), i.Tc(41), i.nc(42, "translate"), i.Yb(), i.Yb(), i.Zb(43, "button", 18), i.jc("click", (function() {
                            return e.hide()
                        })), i.Zb(44, "p", 17), i.Tc(45), i.nc(46, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Zb(47, "div", 19), i.Zb(48, "p", 20), i.Tc(49, "Choisis un model"), i.Yb(), i.Zb(50, "div", 21), i.Rc(51, pT, 7, 10, "div", 22), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 14, "navigator.createroom.title")), i.Gb(5), i.tc("formGroup", e.form), i.Gb(3), i.Uc(i.oc(12, 16, "navigator.createroom.roomnameinfo")), i.Gb(5), i.Uc(i.oc(17, 18, "navigator.createroom.roomdescinfo")), i.Gb(5), i.Uc(i.oc(22, 20, "navigator.category")), i.Gb(3), i.tc("ngForOf", e.categories), i.Gb(3), i.Uc(i.oc(28, 22, "navigator.maxvisitors")), i.Gb(3), i.tc("ngForOf", e.maxVisitors), i.Gb(3), i.Uc(i.oc(34, 24, "navigator.tradesettings")), i.Gb(3), i.tc("ngForOf", i.oc(37, 26, e.tradeSettings)), i.Gb(3), i.tc("disabled", e.form.pristine || e.form.invalid), i.Gb(2), i.Uc(i.oc(42, 28, "navigator.createroom.create")), i.Gb(4), i.Uc(i.oc(46, 30, "generic.cancel")), i.Gb(6), i.tc("ngForOf", e.layouts))
                    },
                    directives: [CE, kE, VE.t, VE.k, VE.e, VE.b, VE.j, VE.d, VE.q, hp.m, VE.m, VE.s, hp.l, hp.o],
                    pipes: [tE, hp.h],
                    encapsulation: 2
                }), t
            })();
            const ET = ["nitro-navigator-room-doorbell-component", ""];

            function fT(t, e) {
                1 & t && (i.Zb(0, "span"), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "navigator.doorbell.info")))
            }

            function ST(t, e) {
                1 & t && (i.Zb(0, "span"), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "navigator.doorbell.waiting")))
            }

            function IT(t, e) {
                1 & t && (i.Zb(0, "span"), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "navigator.doorbell.no.answer")))
            }

            function RT(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "button", 10), i.jc("click", (function() {
                        return i.Gc(t), i.mc().ring()
                    })), i.Tc(1), i.nc(2, "translate"), i.Yb()
                }
                2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "navigator.doorbell.button.ring")))
            }
            let vT = (() => {
                class t {
                    constructor(t, e) {
                        this._navigatorService = t, this._activeModal = e, this.room = null, this.isWaiting = !1, this.noAnswer = !1
                    }
                    ring() {
                        !this.room || this.isWaiting || this.noAnswer || (this._navigatorService.goToRoom(this.room.roomId), this.hide())
                    }
                    close() {
                        this._navigatorService.component.closeRoomDoorbell(), this.isWaiting && cp.instance.communication.connection.send(new Gc)
                    }
                    hide() {
                        this._activeModal.close()
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(WS), i.Ub(_T.a))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-navigator-room-doorbell-component", ""]
                    ],
                    inputs: {
                        room: "room",
                        isWaiting: "isWaiting",
                        noAnswer: "noAnswer"
                    },
                    attrs: ET,
                    decls: 18,
                    vars: 10,
                    consts: [
                        [1, "modal-header"],
                        ["type", "button", 1, "close", 3, "click"],
                        [1, "fas", "fa-times"],
                        [1, "modal-body"],
                        [1, "row"],
                        [1, "col-12"],
                        [4, "ngIf"],
                        [1, "d-flex", "justify-content-between"],
                        ["type", "button", 1, "btn", "btn-secondary", 3, "click"],
                        ["type", "button", "class", "btn btn-primary", 3, "click", 4, "ngIf"],
                        ["type", "button", 1, "btn", "btn-primary", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Tc(1), i.nc(2, "translate"), i.Zb(3, "button", 1), i.jc("click", (function() {
                            return e.close()
                        })), i.Vb(4, "i", 2), i.Yb(), i.Yb(), i.Zb(5, "div", 3), i.Zb(6, "div", 4), i.Zb(7, "div", 5), i.Rc(8, fT, 3, 3, "span", 6), i.Rc(9, ST, 3, 3, "span", 6), i.Rc(10, IT, 3, 3, "span", 6), i.Yb(), i.Yb(), i.Zb(11, "div", 4), i.Zb(12, "div", 5), i.Zb(13, "div", 7), i.Zb(14, "button", 8), i.jc("click", (function() {
                            return e.close()
                        })), i.Tc(15), i.nc(16, "translate"), i.Yb(), i.Rc(17, RT, 3, 3, "button", 9), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(1), i.Vc(" ", i.oc(2, 6, "navigator.doorbell.title"), " "), i.Gb(7), i.tc("ngIf", !e.isWaiting && !e.noAnswer), i.Gb(1), i.tc("ngIf", e.isWaiting && !e.noAnswer), i.Gb(1), i.tc("ngIf", e.noAnswer), i.Gb(5), i.Uc(i.oc(16, 8, "generic.cancel")), i.Gb(2), i.tc("ngIf", !e.isWaiting && !e.noAnswer))
                    },
                    directives: [hp.n],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const TT = ["nitro-navigator-room-password-component", ""];

            function OT(t, e) {
                if (1 & t && (i.Zb(0, "div", 12), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.Uc(t.room.roomName)
                }
            }

            function yT(t, e) {
                1 & t && (i.Zb(0, "div"), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "navigator.password.info")))
            }

            function AT(t, e) {
                1 & t && (i.Zb(0, "div"), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "navigator.password.retryinfo")))
            }
            let CT = (() => {
                class t {
                    constructor(t, e) {
                        this._navigatorService = t, this._activeModal = e, this.room = null, this.isWrongPassword = !1, this.password = ""
                    }
                    tryPassword() {
                        this.room && this.password && (this._navigatorService.goToRoom(this.room.roomId, this.password), this.hide())
                    }
                    close() {
                        this._navigatorService.component.closeRoomPassword()
                    }
                    hide() {
                        this._activeModal.close()
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(WS), i.Ub(_T.a))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-navigator-room-password-component", ""]
                    ],
                    inputs: {
                        room: "room",
                        isWrongPassword: "isWrongPassword"
                    },
                    attrs: TT,
                    decls: 25,
                    vars: 16,
                    consts: [
                        [1, "modal-header"],
                        ["type", "button", 1, "close", 3, "click"],
                        [1, "modal-body"],
                        [1, "row"],
                        [1, "col-12"],
                        ["class", "font-weight-bold", 4, "ngIf"],
                        [4, "ngIf"],
                        [1, "form-group"],
                        ["autocomplete", "new-password", "type", "password", "placeholder", "*****", 1, "form-control", "form-control-sm", 3, "ngModel", "ngModelChange"],
                        [1, "d-flex", "justify-content-between"],
                        ["type", "button", 1, "btn", "btn-secondary", 3, "click"],
                        ["type", "button", 1, "btn", "btn-primary", 3, "click"],
                        [1, "font-weight-bold"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Tc(1), i.nc(2, "translate"), i.Zb(3, "button", 1), i.jc("click", (function() {
                            return e.close()
                        })), i.Yb(), i.Yb(), i.Zb(4, "div", 2), i.Zb(5, "div", 3), i.Zb(6, "div", 4), i.Rc(7, OT, 2, 1, "div", 5), i.Rc(8, yT, 3, 3, "div", 6), i.Rc(9, AT, 3, 3, "div", 6), i.Vb(10, "br"), i.Zb(11, "div", 7), i.Zb(12, "label"), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "input", 8), i.jc("ngModelChange", (function(t) {
                            return e.password = t
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Zb(16, "div", 3), i.Zb(17, "div", 4), i.Zb(18, "div", 9), i.Zb(19, "button", 10), i.jc("click", (function() {
                            return e.close()
                        })), i.Tc(20), i.nc(21, "translate"), i.Yb(), i.Zb(22, "button", 11), i.jc("click", (function() {
                            return e.tryPassword()
                        })), i.Tc(23), i.nc(24, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(1), i.Vc(" ", i.oc(2, 8, "navigator.password.title"), " "), i.Gb(6), i.tc("ngIf", e.room), i.Gb(1), i.tc("ngIf", !e.isWrongPassword), i.Gb(1), i.tc("ngIf", e.isWrongPassword), i.Gb(4), i.Uc(i.oc(14, 10, "navigator.password.enter")), i.Gb(2), i.tc("ngModel", e.password), i.Gb(5), i.Uc(i.oc(21, 12, "generic.cancel")), i.Gb(3), i.Uc(i.oc(24, 14, "navigator.password.button.try")))
                    },
                    directives: [hp.n, VE.b, VE.j, VE.l],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const MT = function(t) {
                return {
                    navactive: t
                }
            };

            function UT(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 17), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(2).setCurrentContext(s)
                    })), i.Tc(1), i.nc(2, "translate"), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc(2);
                    i.tc("ngClass", i.xc(4, MT, s.topLevelContext === t)), i.Gb(1), i.Uc(i.oc(2, 2, "navigator.toplevelview." + t.code))
                }
            }

            function DT(t, e) {
                1 & t && i.Vb(0, "div", 18), 2 & t && i.tc("result", e.$implicit)
            }

            function NT(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Vb(6, "div", 5), i.Yb(), i.Zb(7, "div", 6), i.Vb(8, "div", 7), i.Rc(9, UT, 3, 6, "div", 8), i.Yb(), i.Vb(10, "div", 9), i.Zb(11, "div", 10), i.Rc(12, DT, 1, 1, "div", 11), i.Yb(), i.Zb(13, "div", 12), i.Zb(14, "div", 13), i.jc("click", (function() {
                        return i.Gc(t), i.mc().openRoomCreator()
                    })), i.Zb(15, "p", 14), i.Tc(16, "Créer un appart"), i.Yb(), i.Yb(), i.Zb(17, "div", 15), i.Zb(18, "p", 14), i.Tc(19, "Promouvoir un appart"), i.Yb(), i.Yb(), i.Yb(), i.Vb(20, "div", 16), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 3, t.isLoading ? "navigator.title.is.busy" : "navigator.title")), i.Gb(6), i.tc("ngForOf", t.topLevelContexts), i.Gb(3), i.tc("ngForOf", t.lastSearchResults)
                }
            }
            let wT = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._settingsService = t, this._navigatorService = e, this._modalService = s, this.visible = !1
                        }
                        ngOnInit() {
                            this._navigatorService.component = this
                        }
                        ngOnChanges(t) {
                            const e = t.visible.currentValue;
                            e && e !== t.visible.previousValue && this.prepareNavigator()
                        }
                        ngOnDestroy() {
                            this._roomCreatorModal && this._roomCreatorModal.close(), this._navigatorService.component = null
                        }
                        prepareNavigator() {
                            this._navigatorService.isLoaded ? this._navigatorService.search() : this._navigatorService.loadNavigator()
                        }
                        setCurrentContext(t) {
                            this._navigatorService.setCurrentContext(t), this._navigatorService.clearSearch()
                        }
                        hide() {
                            this._settingsService.hideNavigator()
                        }
                        openRoomCreator() {
                            this._roomCreatorModal || (this._roomCreatorModal = this._modalService.open(bT, {
                                backdrop: "static",
                                size: "lg",
                                centered: !0,
                                keyboard: !1
                            }), this._roomCreatorModal && this._roomCreatorModal.result.then(() => this._roomCreatorModal = null))
                        }
                        openRoomDoorbell(t, e = !1, s = !1) {
                            this._roomPasswordModal && this._roomPasswordModal.close(), t || (t = this._lastRoom), this._lastRoom = t;
                            let i = this._roomDoorbellModal;
                            if (i || (i = this._roomDoorbellModal = this._modalService.open(vT, {
                                    backdrop: "static",
                                    size: "sm",
                                    centered: !0,
                                    keyboard: !1
                                }), i.result.then(() => this._roomDoorbellModal = null)), this._roomDoorbellModal = i, this._roomDoorbellModal) {
                                const n = i.componentInstance;
                                n && (n.room = t, n.isWaiting = e, n.noAnswer = s)
                            }
                        }
                        closeRoomDoorbell() {
                            this._roomDoorbellModal && (this._roomDoorbellModal.close(), this._lastRoom = null)
                        }
                        openRoomPassword(t, e = !1) {
                            this._roomDoorbellModal && this._roomDoorbellModal.close(), t || (t = this._lastRoom), this._lastRoom = t;
                            let s = this._roomPasswordModal;
                            if (s || (s = this._roomPasswordModal = this._modalService.open(CT, {
                                    backdrop: "static",
                                    size: "sm",
                                    centered: !0,
                                    keyboard: !1
                                }), s.result.then(() => this._roomPasswordModal = null)), this._roomPasswordModal = s, this._roomPasswordModal) {
                                const i = s.componentInstance;
                                if (!i) return;
                                i.room = t, i.isWrongPassword = e
                            }
                        }
                        closeRoomPassword() {
                            this._roomPasswordModal && (this._roomPasswordModal.close(), this._lastRoom = null)
                        }
                        get topLevelContext() {
                            return this._navigatorService && this._navigatorService.topLevelContext || null
                        }
                        get topLevelContexts() {
                            return this._navigatorService && this._navigatorService.topLevelContexts || null
                        }
                        get lastSearchResults() {
                            return this._navigatorService.lastSearchResults
                        }
                        get isLoading() {
                            return this._navigatorService && (this._navigatorService.isLoading || this._navigatorService.isSearching)
                        }
                        get sliderVisible() {
                            return cp.instance.core.configuration.getValue("navigator.slider.enabled")
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(_p), i.Ub(WS), i.Ub(_T.g))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-navigator-main-component"]
                        ],
                        inputs: {
                            visible: "visible"
                        },
                        features: [i.Eb],
                        decls: 2,
                        vars: 1,
                        consts: [
                            ["dragHandle", "#navigatordrag", "id", "navigator", 3, "bringToTop", "draggable", 4, "ngIf"],
                            ["dragHandle", "#navigatordrag", "id", "navigator", 3, "bringToTop", "draggable"],
                            ["id", "navigatordrag"],
                            [1, "nh-baslik"],
                            [1, "old-kapat", 3, "click"],
                            [1, "old-bilgi"],
                            [1, "navigator-menu"],
                            [1, "ex"],
                            ["class", "navmenu-button", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                            ["nitro-navigator-search-component", ""],
                            [1, "nav-oda-liste"],
                            ["class", "mb-1", "nitro-navigator-search-result-component", "", 3, "result", 4, "ngFor", "ngForOf"],
                            [1, "nav-bottom-buttons"],
                            [1, "oldnav-roomcreate", 3, "click"],
                            [1, "roomcreate-hood"],
                            [1, "oldnav-roompromos"],
                            [1, "box-height-adjustment"],
                            [1, "navmenu-button", 3, "ngClass", "click"],
                            ["nitro-navigator-search-result-component", "", 1, "mb-1", 3, "result"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Rc(0, NT, 21, 5, "div", 0), i.Vb(1, "nitro-navigator-roomsettings-component")), 2 & t && i.tc("ngIf", e.visible)
                        },
                        encapsulation: 2
                    }), t
                })(),
                LT = (() => {
                    class t {}
                    return t.DEFAULT = 1, t._Str_3639 = 2, t._Str_3683 = 3, t._Str_3432 = 4, t._Str_12351 = 5, t._Str_5186 = 6, t._Str_21911 = 7, t._Str_9125 = 8, t._Str_5922 = 9, t._Str_18231 = 10, t._Str_4255 = 11, t._Str_19933 = 12, t._Str_7696 = 13, t._Str_7297 = 14, t._Str_7954 = 15, t._Str_6096 = 16, t._Str_12454 = 17, t._Str_19144 = 18, t.MONSTERPLANT_SEED = 19, t._Str_6915 = 20, t._Str_8726 = 21, t._Str_9449 = 22, t._Str_12534 = 23, t
                })();
            class xT {
                constructor(t) {
                    this._locked = !1, this._id = t.itemId, this._type = t.spriteId, this._ref = t.ref, this._category = t.category, this._groupable = t.isGroupable && !t.rentable, this._tradeable = t.tradable, this._recyclable = t.isRecycleable, this._sellable = t.sellable, this._stuffData = t.stuffData, this._extra = t._Str_2794, this._secondsToExpiration = t.secondsToExpiration, this._expirationTimeStamp = t._Str_10616, this._hasRentPeriodStarted = t.hasRentPeriodStarted, this._creationDay = t._Str_8932, this._creationMonth = t._Str_9050, this._creationYear = t._Str_9408, this._slotId = t.slotId, this._songId = t._Str_3951, this._flatId = t.flatId, this._isRented = t.rentable, this._isWallItem = t.isWallItem
                }
                get rentable() {
                    return this._isRented
                }
                get id() {
                    return this._id
                }
                get ref() {
                    return this._ref
                }
                get category() {
                    return this._category
                }
                get type() {
                    return this._type
                }
                get stuffData() {
                    return this._stuffData
                }
                set stuffData(t) {
                    this._stuffData = t
                }
                get _Str_2794() {
                    return this._extra
                }
                get _Str_16260() {
                    return this._recyclable
                }
                get isTradable() {
                    return this._tradeable
                }
                get isGroupable() {
                    return this._groupable
                }
                get sellable() {
                    return this._sellable
                }
                get secondsToExpiration() {
                    if (-1 === this._secondsToExpiration) return -1;
                    let t = -1;
                    return this._hasRentPeriodStarted ? (t = this._secondsToExpiration - (cp.instance.time - this._expirationTimeStamp) / 1e3, t < 0 && (t = 0)) : t = this._secondsToExpiration, t
                }
                get _Str_8932() {
                    return this._creationDay
                }
                get _Str_9050() {
                    return this._creationMonth
                }
                get _Str_9408() {
                    return this._creationYear
                }
                get slotId() {
                    return this._slotId
                }
                get _Str_3951() {
                    return this._songId
                }
                get locked() {
                    return this._locked
                }
                set locked(t) {
                    this._locked = t
                }
                get flatId() {
                    return this._flatId
                }
                get isWallItem() {
                    return this._isWallItem
                }
                get hasRentPeriodStarted() {
                    return this._hasRentPeriodStarted
                }
                get _Str_10616() {
                    return this._expirationTimeStamp
                }
                update(t) {
                    this._type = t.spriteId, this._ref = t.ref, this._category = t.category, this._groupable = t.isGroupable && !t.rentable, this._tradeable = t.tradable, this._recyclable = t.isRecycleable, this._sellable = t.sellable, this._stuffData = t.stuffData, this._extra = t._Str_2794, this._secondsToExpiration = t.secondsToExpiration, this._expirationTimeStamp = t._Str_10616, this._hasRentPeriodStarted = t.hasRentPeriodStarted, this._creationDay = t._Str_8932, this._creationMonth = t._Str_9050, this._creationYear = t._Str_9408, this._slotId = t.slotId, this._songId = t._Str_3951, this._flatId = t.flatId, this._isRented = t.rentable, this._isWallItem = t.isWallItem
                }
            }
            let PT = (() => {
                    class t {
                        constructor(t, e, s, i, n) {
                            this._Str_18094 = 1, this._Str_18535 = .2, this._type = t, this._category = e, this._roomEngine = s, this._stuffData = i, this._extra = n, this._isWallItem = !1, this._iconUrl = null, this._name = null, this._description = null, this._locked = !1, this._selected = !1, this._hasUnseenItems = !1, this._items = new x
                        }
                        prepareGroup() {
                            this.setIcon(), this.setName(), this.setDescription()
                        }
                        dispose() {}
                        getItemByIndex(t) {
                            return this._items.getWithIndex(t)
                        }
                        getItemById(t) {
                            return this._items.getValue(t)
                        }
                        getTradeItems(t) {
                            const e = [],
                                s = this.getLastItem();
                            if (!s) return e;
                            let i = 0,
                                n = 0;
                            for (; n < this._items.length && !(i >= t);) {
                                const t = this.getItemByIndex(n);
                                !t.locked && t.isTradable && t.type === s.type && (e.push(t), i++), n++
                            }
                            return e
                        }
                        push(t, e = !1) {
                            const s = this._items.getValue(t.id);
                            s ? s.locked = !1 : this._items.add(t.id, t), 1 === this._items.length && this.prepareGroup()
                        }
                        pop() {
                            let t = null;
                            return this._items.length > 0 && (t = this._items.getWithIndex(this._items.length - 1), this._items.remove(t.id)), t
                        }
                        remove(t) {
                            const e = this._items.getValue(t);
                            return e ? (this._items.remove(t), e) : null
                        }
                        getTotalCount() {
                            if (this._category === LT._Str_12351) {
                                let t = 0,
                                    e = 0;
                                for (; e < this._items.length;) {
                                    const s = this._items.getWithIndex(e);
                                    t += parseInt(s.stuffData.getLegacyString()), e++
                                }
                                return t
                            }
                            return this._items.length
                        }
                        getUnlockedCount() {
                            if (this.category === LT._Str_12351) return this.getTotalCount();
                            let t = 0,
                                e = 0;
                            for (; e < this._items.length;) this._items.getWithIndex(e).locked || t++, e++;
                            return t
                        }
                        getLastItem() {
                            return this._items.length ? this._items.getWithIndex(this._items.length - 1) : null
                        }
                        unlockAllItems() {
                            if (this._items.length)
                                for (const t of this._items.getValues()) t && t.locked && (t.locked = !1)
                        }
                        lockItemIds(t) {
                            for (const e of this._items.getValues()) {
                                const s = t.indexOf(e.ref) >= 0;
                                e.locked !== s && (e.locked = s)
                            }
                        }
                        setName() {
                            const t = this.getLastItem();
                            if (!t) return void(this._name = "");
                            let e = "";
                            switch (this._category) {
                                case LT._Str_5186:
                                    e = "poster_" + t.stuffData.getLegacyString() + "_name";
                                    break;
                                case LT._Str_9125:
                                    return void(this._name = "SONG_NAME");
                                default:
                                    e = this.isWallItem ? "wallItem.name." + t.type : "roomItem.name." + t.type
                            }
                            this._name = cp.instance.getLocalization(e)
                        }
                        setDescription() {
                            this._description = ""
                        }
                        setIcon() {
                            if (this._iconUrl) return;
                            let t = null;
                            t = this.isWallItem ? this._roomEngine.getFurnitureWallIcon(this._type, this, this._stuffData.getLegacyString()) : this._roomEngine.getFurnitureFloorIcon(this._type, this, this._extra.toString(), this._stuffData), (t.image || t.data) && this.setIconUrl(t.image ? t.image.src : t.getImage().src)
                        }
                        setIconUrl(t) {
                            t && (this._iconUrl = t)
                        }
                        imageReady(t, e, s = null) {
                            -1 !== t && s && (this._iconUrl && this._iconUrl.length && s.src === this._iconUrl || this.setIconUrl(s.src))
                        }
                        imageFailed(t) {}
                        get type() {
                            return this._type
                        }
                        get category() {
                            return this._category
                        }
                        get stuffData() {
                            return this._stuffData
                        }
                        get extra() {
                            return this._extra
                        }
                        get iconUrl() {
                            return this._iconUrl
                        }
                        get name() {
                            return this._name
                        }
                        get description() {
                            return this._description
                        }
                        get hasUnseenItems() {
                            return this._hasUnseenItems
                        }
                        set hasUnseenItems(t) {
                            this._hasUnseenItems = t
                        }
                        get locked() {
                            return this._locked
                        }
                        set locked(t) {
                            this._locked = t
                        }
                        get selected() {
                            return this._selected
                        }
                        set selected(t) {
                            this._selected = t
                        }
                        get isWallItem() {
                            const t = this.getItemByIndex(0);
                            return !!t && t.isWallItem
                        }
                        get isGroupable() {
                            const t = this.getItemByIndex(0);
                            return !!t && t.isGroupable
                        }
                        get items() {
                            return this._items
                        }
                    }
                    return t.INVENTORY_THUMB_XML = "inventory_thumb_xml", t._Str_4072 = 13421772, t._Str_4169 = 10275685, t
                })(),
                FT = (() => {
                    class t {
                        constructor(t, e) {
                            this._inventoryService = t, this._ngZone = e, this._messages = [], this._furniMsgFragments = null, this._groupItems = [], this._itemIdInFurniPlacing = -1, this._isObjectMoverRequested = !1, this._isInitialized = !1, this._needsUpdate = !1, this.onRoomEngineObjectPlacedEvent = this.onRoomEngineObjectPlacedEvent.bind(this), this.registerMessages()
                        }
                        ngOnDestroy() {
                            this.unregisterMessages()
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                cp.instance.roomEngine.events.addEventListener(Al.PLACED, this.onRoomEngineObjectPlacedEvent), this._messages = [new Mi(this.onFurnitureListAddOrUpdateEvent.bind(this)), new Di(this.onFurnitureListEvent.bind(this)), new wi(this.onFurnitureListInvalidateEvent.bind(this)), new xi(this.onFurnitureListRemovedEvent.bind(this)), new Fi(this.onFurniturePostItPlacedEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                cp.instance.roomEngine.events.removeEventListener(Al.PLACED, this.onRoomEngineObjectPlacedEvent);
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            })
                        }
                        onRoomEngineObjectPlacedEvent(t) {
                            t && this._isObjectMoverRequested && t.type === Al.PLACED && (this._isObjectMoverRequested = !1, t._Str_4057 || this._ngZone.run(() => this._inventoryService.showWindow()))
                        }
                        onFurnitureListAddOrUpdateEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = e.items;
                            this._ngZone.run(() => {
                                for (const t of s) {
                                    const e = this.getGroupItemForFurnitureId(t.itemId);
                                    if (e) {
                                        const s = e.getItemById(t.itemId);
                                        s && (s.update(t), e.hasUnseenItems = !0)
                                    } else {
                                        const e = new xT(t);
                                        this.addFurnitureItem(e, !1)
                                    }
                                }
                            })
                        }
                        onFurnitureListEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            this._furniMsgFragments || (this._furniMsgFragments = new Array(e.totalFragments));
                            const s = new Map([...e.fragment]),
                                i = this.mergeFragments(s, e.totalFragments, e.fragmentNumber, this._furniMsgFragments);
                            i && (this._ngZone.run(() => this.processFragment(i)), this._furniMsgFragments = null)
                        }
                        onFurnitureListInvalidateEvent(t) {
                            t && t.getParser() && (this._inventoryService.furnitureVisible ? this.requestLoad() : this._needsUpdate = !0)
                        }
                        onFurnitureListRemovedEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                this.removeItemById(e.itemId) && this.setAllFurnitureSeen()
                            })
                        }
                        onFurniturePostItPlacedEvent(t) {
                            t && t.getParser()
                        }
                        mergeFragments(t, e, s, i) {
                            if (1 === e) return t;
                            i[s] = t;
                            for (const r of i)
                                if (!r) return null;
                            const n = new Map;
                            for (const r of i) {
                                for (const [t, e] of r) n.set(t, e);
                                r.clear()
                            }
                            return i = null, n
                        }
                        processFragment(e) {
                            const s = this.getAllItemIds(),
                                i = [],
                                n = [];
                            for (const t of e.keys()) - 1 === s.indexOf(t) && i.push(t);
                            for (const t of s) e.get(t) || n.push(t);
                            const r = 0 === s.length;
                            for (const t of n) this.removeItemById(t);
                            for (const t of i) {
                                const s = e.get(t);
                                if (!s) continue;
                                const i = new xT(s);
                                this.addFurnitureItem(i, !0)
                            }
                            r || i.length && this._inventoryService.updateItemLocking(), i.length && this._inventoryService.furniController && (this._inventoryService.furniController.paginateConfig.currentPage = 1), this._isInitialized = !0, this._inventoryService.events.next(t.INVENTORY_UPDATED), this._inventoryService.furniController && this._inventoryService.furniController.selectExistingGroupOrDefault()
                        }
                        getAllItemIds() {
                            const t = [];
                            for (const e of this._groupItems) {
                                let s = e.getTotalCount();
                                e.category === LT._Str_12351 && (s = 1);
                                let i = 0;
                                for (; i < s;) t.push(e.getItemByIndex(i).id), i++
                            }
                            return t
                        }
                        addFurnitureItem(t, e) {
                            let s = null;
                            s = t.isGroupable ? this.addGroupableFurnitureItem(t, e) : this.addSingleFurnitureItem(t, e), e || (s.hasUnseenItems = !0)
                        }
                        addSingleFurnitureItem(t, e) {
                            const s = [];
                            for (const r of this._groupItems) r.type === t.type && s.push(r);
                            for (const r of s)
                                if (r.getItemById(t.id)) return r;
                            const i = this.isFurnitureUnseen(t),
                                n = this.createGroupItem(t.type, t.category, t.stuffData, t._Str_2794, e);
                            return n.push(t, i), i ? (n.hasUnseenItems = !0, this.unshiftGroupitem(n)) : this.pushGroupItem(n), n
                        }
                        addGroupableFurnitureItem(t, e) {
                            let s = null;
                            for (const n of this._groupItems)
                                if (n.type === t.type && n.isWallItem == t.isWallItem && n.isGroupable)
                                    if (t.category === LT._Str_5186) {
                                        if (n.stuffData.getLegacyString() === t.stuffData.getLegacyString()) {
                                            s = n;
                                            break
                                        }
                                    } else {
                                        if (t.category !== LT._Str_12454) {
                                            s = n;
                                            break
                                        }
                                        if (t.stuffData.compare(n.stuffData)) {
                                            s = n;
                                            break
                                        }
                                    }
                            const i = this.isFurnitureUnseen(t);
                            return s ? (s.push(t, i), i && (s.hasUnseenItems = !0, this.removeAndUnshiftGroupitem(s)), s) : (s = this.createGroupItem(t.type, t.category, t.stuffData, t._Str_2794, e), s.push(t, i), i ? (s.hasUnseenItems = !0, this.unshiftGroupitem(s)) : this.pushGroupItem(s), s)
                        }
                        createGroupItem(t, e, s, i = NaN, n = !1) {
                            return new PT(t, e, cp.instance.roomEngine, s, i)
                        }
                        removeItemById(t) {
                            let e = 0;
                            for (; e < this._groupItems.length;) {
                                const s = this._groupItems[e],
                                    i = s.remove(t);
                                if (i) return this._itemIdInFurniPlacing === i.ref && (this.cancelRoomObjectPlacement(), this.attemptItemPlacement() || this._inventoryService.showWindow()), s.getTotalCount() <= 0 && (this._groupItems.splice(e, 1), s.dispose()), s;
                                e++
                            }
                            return null
                        }
                        isFurnitureUnseen(t) {
                            let e = 0;
                            return e = t.rentable ? lf.RENTABLE : lf.FURNI, this._inventoryService.unseenTracker._Str_3613(e, t.id)
                        }
                        setAllFurnitureSeen() {
                            this._inventoryService.unseenTracker._Str_8813(lf.FURNI);
                            for (const t of this._groupItems) t.hasUnseenItems && (t.hasUnseenItems = !1);
                            this._inventoryService.updateUnseenCount()
                        }
                        attemptItemPlacement(t = !1) {
                            const e = this.getSelectedGroup();
                            if (!e) return !1;
                            if (!e.getUnlockedCount()) return !1;
                            const s = e.getLastItem();
                            if (!s) return !1;
                            if (s.category === LT._Str_3683 || s.category === LT._Str_3639 || s.category === LT._Str_3432) {
                                if (t) return !1;
                                cp.instance.communication.connection.send(new sh(s.id))
                            } else this.startRoomObjectPlacement(s);
                            return !0
                        }
                        startRoomObjectPlacement(t) {
                            let e = 0,
                                s = !1;
                            e = t.isWallItem ? V.WALL : V.FLOOR, s = t.category === LT._Str_5186 ? cp.instance.roomEngine.processRoomObjectPlacement(ag.INVENTORY, t.id, e, t.type, t.stuffData.getLegacyString()) : cp.instance.roomEngine.processRoomObjectPlacement(ag.INVENTORY, t.id, e, t.type, t.stuffData.getLegacyString(), t.stuffData), s && (this._itemIdInFurniPlacing = t.ref, this.setObjectMoverRequested(!0))
                        }
                        cancelRoomObjectPlacement() {
                            this._itemIdInFurniPlacing > -1 && (this.setObjectMoverRequested(!1), this._itemIdInFurniPlacing = -1)
                        }
                        getGroupItemForFurnitureId(t) {
                            for (const e of this._groupItems)
                                if (e.getItemById(t)) return e;
                            return null
                        }
                        getSelectedGroup() {
                            for (const t of this._groupItems)
                                if (t && t.selected) return t;
                            return null
                        }
                        unshiftGroupitem(t) {
                            this._groupItems.unshift(t)
                        }
                        pushGroupItem(t) {
                            this._groupItems.push(t)
                        }
                        removeGroupItem(t) {
                            const e = this._groupItems.indexOf(t);
                            e > -1 && this._groupItems.splice(e, 1)
                        }
                        removeAndUnshiftGroupitem(t) {
                            this.removeGroupItem(t), this.unshiftGroupitem(t)
                        }
                        unlockAllItems() {
                            for (const t of this._groupItems) t.unlockAllItems()
                        }
                        unselectAllGroupItems() {
                            for (const t of this._groupItems) t.selected = !1
                        }
                        requestLoad() {
                            this._needsUpdate = !1, cp.instance.communication.connection.send(new s_)
                        }
                        setObjectMoverRequested(t) {
                            this._isObjectMoverRequested !== t && this._ngZone.run(() => this._isObjectMoverRequested = t)
                        }
                        get controller() {
                            return this._inventoryService.controller
                        }
                        get isInitalized() {
                            return this._isInitialized
                        }
                        get needsUpdate() {
                            return this._needsUpdate
                        }
                        get groupItems() {
                            return this._groupItems
                        }
                        get isObjectMoverRequested() {
                            return this._isObjectMoverRequested
                        }
                    }
                    return t.INVENTORY_UPDATED = "IFS_INVENTORY_UPDATED", t.SELECT_FIRST_GROUP = "IFS_SELECT_FIRST_GROUP", t.SELECT_EXISTING_GROUP_DEFAULT = "IFS_SELECT_EXISTING_GROUP_DEFAULT", t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(df), i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })();
            const GT = ["nitro-inventory-trading-component", ""];

            function YT(t, e) {
                if (1 & t && (i.Zb(0, "div", 29), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc(2).index,
                        e = i.mc(3);
                    i.Gb(1), i.Uc(e.ownUserItems[t].stuffData.uniqueNumber)
                }
            }
            const kT = function(t) {
                return {
                    "background-image": t
                }
            };

            function VT(t, e) {
                if (1 & t && (i.Zb(0, "div", 25), i.Zb(1, "div", 26), i.Zb(2, "p", 27), i.Tc(3), i.Yb(), i.Yb(), i.Rc(4, YT, 2, 1, "div", 28), i.Yb()), 2 & t) {
                    const t = i.mc().index,
                        e = i.mc(3);
                    i.tc("ngStyle", i.xc(3, kT, "url(" + e.getIconUrl(e.ownUserItems[t]) + ")")), i.Gb(3), i.Uc(e.ownUserItems[t].getUnlockedCount()), i.Gb(1), i.tc("ngIf", e.ownUserItems[t].stuffData.uniqueNumber)
                }
            }

            function ZT(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 23), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.index;
                        return i.mc(3).removeItem(s)
                    })), i.Rc(1, VT, 5, 5, "div", 24), i.Yb()
                }
                if (2 & t) {
                    const t = e.index,
                        s = i.mc(3);
                    i.Gb(1), i.tc("ngIf", s.ownUserItems[t])
                }
            }

            function jT(t, e) {
                1 & t && i.Vb(0, "div", 30)
            }

            function BT(t, e) {
                if (1 & t && (i.Zb(0, "div", 29), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc(2).index,
                        e = i.mc(3);
                    i.Gb(1), i.Uc(e.otherUserItems[t].stuffData.uniqueNumber)
                }
            }

            function HT(t, e) {
                if (1 & t && (i.Zb(0, "div", 25), i.Zb(1, "div", 26), i.Zb(2, "p", 27), i.Tc(3), i.Yb(), i.Yb(), i.Rc(4, BT, 2, 1, "div", 28), i.Yb()), 2 & t) {
                    const t = i.mc().index,
                        e = i.mc(3);
                    i.tc("ngStyle", i.xc(3, kT, "url(" + e.getIconUrl(e.otherUserItems[t]) + ")")), i.Gb(3), i.Uc(e.otherUserItems[t].getUnlockedCount()), i.Gb(1), i.tc("ngIf", e.otherUserItems[t].stuffData.uniqueNumber)
                }
            }

            function WT(t, e) {
                if (1 & t && (i.Zb(0, "div", 30), i.Rc(1, HT, 5, 5, "div", 24), i.Yb()), 2 & t) {
                    const t = e.index,
                        s = i.mc(3);
                    i.Gb(1), i.tc("ngIf", s.otherUserItems[t])
                }
            }

            function zT(t, e) {
                1 & t && i.Vb(0, "button", 30)
            }
            const KT = function(t, e) {
                return {
                    "takas-unlocked": t,
                    "takas-locked": e
                }
            };

            function XT(t, e) {
                if (1 & t && (i.Zb(0, "div", 9), i.Zb(1, "p", 10), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Zb(4, "div", 11), i.Zb(5, "p", 12), i.Zb(6, "b"), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Zb(11, "div", 13), i.Rc(12, ZT, 2, 1, "div", 14), i.Rc(13, jT, 1, 0, "div", 15), i.Yb(), i.Vb(14, "div", 16), i.Zb(15, "div", 17), i.Zb(16, "p", 18), i.Tc(17), i.Yb(), i.Zb(18, "p", 19), i.Tc(19), i.Yb(), i.Yb(), i.Yb(), i.Vb(20, "div", 20), i.Zb(21, "div", 21), i.Zb(22, "p", 12), i.Zb(23, "b"), i.Tc(24), i.Yb(), i.Tc(25), i.nc(26, "translate"), i.Yb(), i.Zb(27, "div", 13), i.Rc(28, WT, 2, 1, "div", 22), i.Rc(29, zT, 1, 0, "button", 15), i.Yb(), i.Vb(30, "div", 16), i.Zb(31, "div", 17), i.Zb(32, "p", 18), i.Tc(33), i.Yb(), i.Zb(34, "p", 19), i.Tc(35), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(2), i.Uc(i.oc(3, 15, "inventory.trading.info.add")), i.Gb(5), i.Uc(i.oc(8, 17, "inventory.trading.you")), i.Gb(2), i.Vc(" ", i.oc(10, 19, "inventory.trading.isoffering"), ""), i.Gb(3), i.tc("ngForOf", t.indexs), i.Gb(1), i.tc("ngIf", !t.ownUserItems[t.i]), i.Gb(1), i.tc("ngClass", i.yc(23, KT, !t.ownUserAccepts, t.ownUserAccepts)), i.Gb(3), i.Vc("", t.ownUserNumItems, " items"), i.Gb(2), i.Vc("", t.ownUserNumCredits, " credits wort of credit furni"), i.Gb(5), i.Uc(t.otherUserName), i.Gb(1), i.Vc(" ", i.oc(26, 21, "inventory.trading.isoffering"), ""), i.Gb(3), i.tc("ngForOf", t.indexs), i.Gb(1), i.tc("ngIf", !t.otherUserItems[t.i]), i.Gb(1), i.tc("ngClass", i.yc(26, KT, !t.otherUserAccepts, t.otherUserAccepts)), i.Gb(3), i.Vc("", t.otherUserNumItems, " items"), i.Gb(2), i.Vc("", t.otherUserNumCredits, " credits")
                }
            }

            function qT(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 31), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).progressTrade()
                    })), i.Zb(1, "p", 8), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.tc("disabled", !t.ownUserNumItems && !t.otherUserNumItems), i.Gb(2), i.Uc(i.oc(3, 2, "inventory.trading.accept"))
                }
            }

            function JT(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 31), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).progressTrade()
                    })), i.Zb(1, "p", 8), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.tc("disabled", !t.ownUserNumItems && !t.otherUserNumItems), i.Gb(2), i.Uc(i.oc(3, 2, t.ownUserAccepts ? "inventory.trading.modify" : "inventory.trading.accept"))
                }
            }

            function QT(t, e) {
                if (1 & t && (i.Zb(0, "div", 32), i.Zb(1, "p", 8), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(2), i.Uc(i.qc(3, 1, "inventory.trading.countdown", "counter", t.timerTick))
                }
            }

            function $T(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 33), i.jc("click", (function() {
                        return i.Gc(t), i.mc(2).progressTrade()
                    })), i.Zb(1, "p", 8), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "inventory.trading.confirm")))
            }

            function tO(t, e) {
                1 & t && (i.Zb(0, "div", 32), i.Zb(1, "p", 8), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "inventory.trading.info.waiting")))
            }

            function eO(t, e) {
                1 & t && (i.Zb(0, "div", 32), i.Zb(1, "p", 8), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "inventory.trading.accept")))
            }

            function sO(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Rc(1, XT, 36, 29, "div", 1), i.Zb(2, "div", 2), i.Xb(3, 3), i.Rc(4, qT, 4, 4, "div", 4), i.Rc(5, JT, 4, 4, "div", 4), i.Rc(6, QT, 4, 5, "div", 5), i.Rc(7, $T, 4, 3, "div", 6), i.Rc(8, tO, 4, 3, "div", 5), i.Rc(9, eO, 4, 3, "div", 5), i.Wb(), i.Zb(10, "div", 7), i.jc("click", (function() {
                        return i.Gc(t), i.mc().cancelTrade()
                    })), i.Zb(11, "p", 8), i.Tc(12), i.nc(13, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngIf", t.visible), i.Gb(2), i.tc("ngSwitch", t.state), i.Gb(1), i.tc("ngSwitchCase", 0), i.Gb(1), i.tc("ngSwitchCase", 1), i.Gb(1), i.tc("ngSwitchCase", 2), i.Gb(1), i.tc("ngSwitchCase", 3), i.Gb(1), i.tc("ngSwitchCase", 4), i.Gb(1), i.tc("ngSwitchCase", 5), i.Gb(3), i.Uc(i.oc(13, 9, "generic.cancel"))
                }
            }
            let iO = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._notificationService = t, this._inventoryService = e, this._ngZone = s, this.visible = !1, this.indexs = [0, 1, 2, 3, 4, 5, 6, 7, 8], this._timerTick = 3
                        }
                        ngOnInit() {
                            this._inventoryService.tradeController = this
                        }
                        ngOnDestroy() {
                            this._inventoryService.tradeController = null
                        }
                        startTimer() {
                            this._timer && (clearInterval(this._timer), this._timer = null), this._timerTick = 3, this._timer = setInterval(this.progressTimer.bind(this), 1e3)
                        }
                        resetTimer() {
                            this._timer && clearInterval(this._timer), this._timerTick = -1
                        }
                        progressTimer() {
                            -1 !== this._timerTick ? (this._timerTick--, 0 === this._timerTick && this._inventoryService.controller.tradeService.onTimerFinished()) : this.resetTimer()
                        }
                        getIconUrl(t) {
                            return t && t.iconUrl || null
                        }
                        removeItem(t) {
                            this._inventoryService.controller.tradeService.removeItem(t)
                        }
                        progressTrade() {
                            switch (this._inventoryService.controller.tradeService.state) {
                                case nO.TRADING_STATE_RUNNING:
                                    this.otherUserItems.length || this.ownUserAccepts || this._notificationService.alert("${inventory.trading.warning.other_not_offering}"), this.ownUserAccepts ? this._inventoryService.controller.tradeService.sendTradingUnacceptComposer() : this._inventoryService.controller.tradeService.sendTradingAcceptComposer();
                                    break;
                                case nO.TRADING_STATE_CONFIRMING:
                                    this._inventoryService.controller.tradeService.sendTradingConfirmComposer()
                            }
                        }
                        cancelTrade() {
                            switch (this._inventoryService.controller.tradeService.state) {
                                case nO.TRADING_STATE_RUNNING:
                                    this._inventoryService.controller.tradeService.sendTradingCloseComposer();
                                    break;
                                case nO.TRADING_STATE_CONFIRMING:
                                    this._inventoryService.controller.tradeService.sendTradingCancelComposer()
                            }
                        }
                        get timerTick() {
                            return this._timerTick
                        }
                        get state() {
                            return this._inventoryService.controller.tradeService.state
                        }
                        get ownUserName() {
                            return this._inventoryService.controller.tradeService.ownUserName
                        }
                        get ownUserItems() {
                            return this._inventoryService.controller.tradeService.ownUserItems.getValues()
                        }
                        get ownUserNumItems() {
                            return this._inventoryService.controller.tradeService.ownUserNumItems
                        }
                        get ownUserNumCredits() {
                            return this._inventoryService.controller.tradeService.ownUserNumCredits
                        }
                        get ownUserAccepts() {
                            return this._inventoryService.controller.tradeService.ownUserAccepts
                        }
                        get otherUserName() {
                            return this._inventoryService.controller.tradeService.otherUserName
                        }
                        get otherUserItems() {
                            return this._inventoryService.controller.tradeService.otherUserItems.getValues()
                        }
                        get otherUserNumItems() {
                            return this._inventoryService.controller.tradeService.otherUserNumItems
                        }
                        get otherUserNumCredits() {
                            return this._inventoryService.controller.tradeService.otherUserNumCredits
                        }
                        get otherUserAccepts() {
                            return this._inventoryService.controller.tradeService.otherUserAccepts
                        }
                    }
                    return t.COLOR_LOCKED = 4284532064, t.COLOR_UNLOCKED = 2577770, t.ALERT_SCAM = 0, t.ALERT_OTHER_CANCELLED = 1, t.ALERT_ALREADY_OPEN = 2, t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(xb), i.Ub(df), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["", "nitro-inventory-trading-component", ""]
                        ],
                        inputs: {
                            visible: "visible"
                        },
                        attrs: GT,
                        decls: 1,
                        vars: 1,
                        consts: [
                            [4, "ngIf"],
                            ["class", "envanter-takas", 4, "ngIf"],
                            [1, "takas-button"],
                            [3, "ngSwitch"],
                            ["class", "takas-onaybuton", 3, "disabled", "click", 4, "ngSwitchCase"],
                            ["class", "takas-onaybuton", "disabled", "", 4, "ngSwitchCase"],
                            ["class", "takas-onaybuton", 3, "click", 4, "ngSwitchCase"],
                            [1, "takas-iptalbuton", 3, "click"],
                            [1, "takasbuton-txt"],
                            [1, "envanter-takas"],
                            [1, "takas-desc"],
                            [1, "takasbox-mobi", 2, "margin-left", "20px"],
                            [1, "takas-yapan-user"],
                            [1, "takas-edilen-mobiler"],
                            ["class", "takas-mobi-box", 3, "click", 4, "ngFor", "ngForOf"],
                            ["class", "takas-mobi-box", 4, "ngIf"],
                            [3, "ngClass"],
                            [1, "takas-txtinfo"],
                            [1, "how-many-items"],
                            [1, "how-many-credits"],
                            [1, "takas-separator-hr"],
                            [1, "takasbox-mobi", 2, "margin-left", "30px"],
                            ["class", "takas-mobi-box", 4, "ngFor", "ngForOf"],
                            [1, "takas-mobi-box", 3, "click"],
                            ["class", "takas-mobi-view", 3, "ngStyle", 4, "ngIf"],
                            [1, "takas-mobi-view", 3, "ngStyle"],
                            [1, "items-part-number"],
                            [1, "ipn-text"],
                            ["class", "badge badge-primary w-100", 4, "ngIf"],
                            [1, "badge", "badge-primary", "w-100"],
                            [1, "takas-mobi-box"],
                            [1, "takas-onaybuton", 3, "disabled", "click"],
                            ["disabled", "", 1, "takas-onaybuton"],
                            [1, "takas-onaybuton", 3, "click"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, sO, 14, 11, "ng-container", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        directives: [hp.n, hp.p, hp.q, hp.m, hp.l, hp.o],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                nO = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._notificationService = t, this._inventoryService = e, this._ngZone = s, this._messages = [], this._state = 0, this._running = !1, this._ownUserIndex = -1, this._ownUserName = "", this._ownUserNumItems = 0, this._ownUserNumCredits = 0, this._ownUserAccepts = !1, this._ownUserCanTrade = !1, this._otherUserIndex = -1, this._otherUserName = "", this._otherUserNumItems = 0, this._otherUserNumCredits = 0, this._otherUserAccepts = !1, this._otherUserCanTrade = !1, this._offeredItemIds = [], this.registerMessages()
                        }
                        static _Str_16998(t, e) {
                            let s = t.toString();
                            const i = e;
                            if (!(e instanceof vi)) return s;
                            let n = 1;
                            for (; n < 5;) s = s + "," + i.getValue(n), n++;
                            return s
                        }
                        ngOnDestroy() {
                            this.unregisterMessages()
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                this._messages = [new Yi(this.onTradingAcceptEvent.bind(this)), new Vi(this.onTradingCloseEvent.bind(this)), new ji(this.onTradingCompletedEvent.bind(this)), new Hi(this.onTradingConfirmationEvent.bind(this)), new Ki(this.onTradingListItemEvent.bind(this)), new qi(this.onTradingNotOpenEvent.bind(this)), new Qi(this.onTradingOpenEvent.bind(this)), new tn(this.onTradingOpenFailedEvent.bind(this)), new sn(this.onTradingOtherNotAllowedEvent.bind(this)), new rn(this.onTradingYouAreNotAllowedEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            })
                        }
                        onTradingAcceptEvent(t) {
                            t && (console.log(t), t.getParser() && this._ngZone.run(() => {
                                t._Str_4963 === this._ownUserIndex ? this._ownUserAccepts = t._Str_15794 : this._otherUserAccepts = t._Str_15794
                            }))
                        }
                        tradingNotificationMessage(t) {
                            switch (t) {
                                case iO.ALERT_SCAM:
                                    return void this._notificationService.alert("${inventory.trading.notification.title}", "${inventory.trading.warning.other_not_offering}");
                                case iO.ALERT_OTHER_CANCELLED:
                                    return void this._notificationService.alert("${inventory.trading.notification.title}", "${inventory.trading.info.closed}");
                                case iO.ALERT_ALREADY_OPEN:
                                    return void this._notificationService.alert("${inventory.trading.notification.title}", "${inventory.trading.info.already_open}")
                            }
                        }
                        onTradingCloseEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._running && this._ngZone.run(() => {
                                e.reason === ki._Str_16410 ? this._notificationService.alert("${inventory.trading.notification.caption}, ${inventory.trading.notification.commiterror.info}", "${inventory.trading.notification.title}") : e._Str_4963 !== this._ownUserIndex && this.tradingNotificationMessage(iO.ALERT_OTHER_CANCELLED), this.close()
                            })
                        }
                        onTradingCompletedEvent(e) {
                            e && e.getParser() && this._ngZone.run(() => this.state = t.TRADING_STATE_COMPLETED)
                        }
                        onTradingConfirmationEvent(e) {
                            e && e.getParser() && this._ngZone.run(() => this.state = t.TRADING_STATE_COUNTDOWN)
                        }
                        onTradingListItemEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                const t = new x,
                                    s = new x;
                                this.parseItems(e._Str_17841, t), this.parseItems(e._Str_17465, s), this.updateTrade(e, t, s)
                            })
                        }
                        onTradingNotOpenEvent(t) {}
                        onTradingOpenEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = cp.instance.sessionDataManager,
                                i = this._inventoryService.roomSession;
                            if (!s || !i) return;
                            let n = e._Str_4963;
                            const r = i.userDataManager.getUserData(n);
                            if (!r) return;
                            let o = r.name,
                                a = e._Str_16764,
                                c = e._Str_17613;
                            const _ = i.userDataManager.getUserData(c);
                            if (!_) return;
                            let h = _.name,
                                l = e._Str_13374;
                            if (c === s.userId) {
                                const t = n,
                                    e = o,
                                    s = a;
                                n = c, o = h, a = l, c = t, h = e, l = s
                            }
                            this._ngZone.run(() => {
                                this._inventoryService.showWindow(), this._inventoryService.furnitureVisible = !0, this._inventoryService.tradingVisible = !0, this._Str_23457(n, o, a, c, h, l)
                            })
                        }
                        onTradingOpenFailedEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && (e.reason !== $i._Str_18150 && e.reason !== $i._Str_18383 || this._ngZone.run(() => {
                                this.tradingNotificationMessage(iO.ALERT_ALREADY_OPEN)
                            }))
                        }
                        onTradingOtherNotAllowedEvent(t) {
                            t && this._ngZone.run(() => {
                                this._notificationService.alert("${inventory.trading.warning.others_account_disabled}", "${inventory.trading.notification.title}")
                            })
                        }
                        onTradingYouAreNotAllowedEvent(t) {
                            t && this._ngZone.run(() => {
                                this._notificationService.alert("${inventory.trading.warning.own_account_disabled}", "${inventory.trading.notification.title}")
                            })
                        }
                        close() {
                            this._running && (this._state !== t.TRADING_STATE_READY && this._state !== t.TRADING_STATE_COMPLETED && (this.sendTradingCloseComposer(), this.state = t.TRADING_STATE_CANCELLED), this._inventoryService.controller.furnitureService.unlockAllItems(), this.state = t.TRADING_STATE_READY, this._running = !1, this._inventoryService.tradingVisible = !1)
                        }
                        startTrade(t, e) {
                            this.controller && (this.controller.furnitureService.isInitalized || this.controller.furnitureService.requestLoad(), this.sendTradingOpenComposer(t))
                        }
                        _Str_23457(e, s, i, n, r, o) {
                            this._ownUserIndex = e, this._ownUserName = s, this._ownUserItems = new x, this._ownUserAccepts = !1, this._ownUserCanTrade = i, this._otherUserIndex = n, this._otherUserName = r, this._otherUserItems = new x, this._otherUserAccepts = !1, this._otherUserCanTrade = o, this._running = !0, this.state = t.TRADING_STATE_RUNNING
                        }
                        parseItems(t, e) {
                            if (!this.controller) return;
                            const s = t.length;
                            let i = 0;
                            for (; i < s;) {
                                const s = t[i];
                                if (s) {
                                    const t = s.spriteId,
                                        i = s.category;
                                    let n = s.furniType + t;
                                    s.isGroupable && !this.isExternalImage(t) || (n = "itemid" + s.itemId), s.category === LT._Str_5186 ? n = s.itemId + "poster" + s.stuffData.getLegacyString() : s.category === LT._Str_12454 && (n = "");
                                    let r = s.isGroupable && !this.isExternalImage(s.spriteId) ? e.getValue(n) : null;
                                    r || (r = this.controller.furnitureService.createGroupItem(t, i, s.stuffData), e.add(n, r)), r.push(new xT(s))
                                }
                                i++
                            }
                        }
                        isExternalImage(t) {
                            const e = cp.instance.sessionDataManager.getWallItemData(t);
                            return e && e.isExternalImage
                        }
                        updateTrade(t, e, s) {
                            this._ownUserItems && this._ownUserItems.reset(), this._otherUserItems && this._otherUserItems.reset(), t._Str_15162 === this._ownUserIndex ? (this._ownUserItems = e, this._ownUserNumItems = t._Str_14946, this._ownUserNumCredits = t._Str_15709, this._otherUserItems = s, this._otherUserNumItems = t._Str_13801, this._otherUserNumCredits = t._Str_9138) : (this._ownUserItems = s, this._ownUserNumItems = t._Str_13801, this._ownUserNumCredits = t._Str_9138, this._otherUserItems = e, this._otherUserNumItems = t._Str_14946, this._otherUserNumCredits = t._Str_15709), this._ownUserAccepts = !1, this._otherUserAccepts = !1, this._inventoryService.updateItemLocking()
                        }
                        offerItems(t, e, s, i, n, r) {
                            if (!n && t.length) cp.instance.communication.connection.send(new a_(t.pop()));
                            else {
                                const o = [];
                                for (const a of t) this.canTradeItem(e, s, i, n, r) && o.push(a);
                                o.length && cp.instance.communication.connection.send(1 === o.length ? new a_(o.pop()) : new c_(...o))
                            }
                        }
                        canTradeItem(e, s, i, n, r) {
                            if (this._ownUserAccepts) return !1;
                            if (null == this._ownUserItems) return !1;
                            if (this._ownUserItems.length < t.MAX_ITEMS_TO_TRADE) return !0;
                            if (!n) return !1;
                            let o = s.toString();
                            return o = i === LT._Str_5186 ? o + "poster" + r.getLegacyString() : i === LT._Str_12454 ? t._Str_16998(s, r) : (e ? "I" : "S") + o, !!this._ownUserItems.getValue(o)
                        }
                        removeItem(t) {
                            const e = this._ownUserItems.getWithIndex(t);
                            if (!e) return;
                            const s = e.getLastItem();
                            s && cp.instance.communication.connection.send(new __(s.id))
                        }
                        getOwnTradingItemIds() {
                            const t = [];
                            if (!this._ownUserItems || !this._ownUserItems.length) return t;
                            for (const e of this._ownUserItems.getValues()) {
                                let s = 0;
                                for (; s < e.getTotalCount();) {
                                    const i = e.getItemByIndex(s);
                                    i && t.push(i.ref), s++
                                }
                            }
                            return t
                        }
                        onTimerFinished() {
                            this._state === t.TRADING_STATE_COUNTDOWN && (this.state = t.TRADING_STATE_CONFIRMING)
                        }
                        sendTradingAcceptComposer() {
                            cp.instance.communication.connection.send(new i_)
                        }
                        sendTradingUnacceptComposer() {
                            cp.instance.communication.connection.send(new l_)
                        }
                        sendTradingConfirmComposer() {
                            this.state = t.TRADING_STATE_CONFIRMED, cp.instance.communication.connection.send(new o_)
                        }
                        sendTradingCloseComposer() {
                            cp.instance.communication.connection.send(new r_)
                        }
                        sendTradingCancelComposer() {
                            cp.instance.communication.connection.send(new n_)
                        }
                        sendTradingOpenComposer(t) {
                            cp.instance.communication.connection.send(new h_(t))
                        }
                        get controller() {
                            return this._inventoryService.controller
                        }
                        get state() {
                            return this._state
                        }
                        set state(e) {
                            if (this._state === e) return;
                            const s = this._state;
                            let i = !1;
                            switch (this._state) {
                                case t.TRADING_STATE_READY:
                                    e !== t.TRADING_STATE_RUNNING && e !== t.TRADING_STATE_COMPLETED || (this._state = e, i = !0);
                                    break;
                                case t.TRADING_STATE_RUNNING:
                                    e === t.TRADING_STATE_COUNTDOWN ? (this._state = e, i = !0, this._inventoryService.tradeController.startTimer()) : e === t.TRADING_STATE_CANCELLED && (this._state = e, i = !0);
                                    break;
                                case t.TRADING_STATE_COUNTDOWN:
                                    (e === t.TRADING_STATE_CONFIRMING || e === t.TRADING_STATE_CANCELLED || e === t.TRADING_STATE_RUNNING) && (this._state = e, i = !0);
                                    break;
                                case t.TRADING_STATE_CONFIRMING:
                                    e === t.TRADING_STATE_CONFIRMED ? (this._state = e, i = !0) : (e === t.TRADING_STATE_COMPLETED || e === t.TRADING_STATE_CANCELLED) && (this._state = e, i = !0, this.close());
                                    break;
                                case t.TRADING_STATE_CONFIRMED:
                                    (e === t.TRADING_STATE_COMPLETED || e === t.TRADING_STATE_CANCELLED) && (this._state = e, i = !0, this.close());
                                    break;
                                case t.TRADING_STATE_COMPLETED:
                                    e === t.TRADING_STATE_READY && (this._state = e, i = !0);
                                    break;
                                case t.TRADING_STATE_CANCELLED:
                                    (e === t.TRADING_STATE_READY || e === t.TRADING_STATE_RUNNING) && (this._state = e, i = !0)
                            }
                            console.log(s, this._state)
                        }
                        get running() {
                            return this._running
                        }
                        get ownUserName() {
                            return this._ownUserName
                        }
                        get ownUserItems() {
                            return this._ownUserItems
                        }
                        get ownUserNumItems() {
                            return this._ownUserNumItems
                        }
                        get ownUserNumCredits() {
                            return this._ownUserNumCredits
                        }
                        get ownUserAccepts() {
                            return this._ownUserAccepts
                        }
                        get ownUserCanTrade() {
                            return this._ownUserCanTrade
                        }
                        get otherUserName() {
                            return this._otherUserName
                        }
                        get otherUserItems() {
                            return this._otherUserItems
                        }
                        get otherUserNumItems() {
                            return this._otherUserNumItems
                        }
                        get otherUserNumCredits() {
                            return this._otherUserNumCredits
                        }
                        get otherUserAccepts() {
                            return this._otherUserAccepts
                        }
                        get otherUserCanTrade() {
                            return this._otherUserCanTrade
                        }
                    }
                    return t.MAX_ITEMS_TO_TRADE = 9, t.TRADING_STATE_READY = 0, t.TRADING_STATE_RUNNING = 1, t.TRADING_STATE_COUNTDOWN = 2, t.TRADING_STATE_CONFIRMING = 3, t.TRADING_STATE_CONFIRMED = 4, t.TRADING_STATE_COMPLETED = 5, t.TRADING_STATE_CANCELLED = 6, t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(xb), i.gc(df), i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })();
            const rO = function(t) {
                return {
                    envanteractive: t
                }
            };

            function oO(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.jc("click", (function() {
                        return i.Gc(t), i.mc().showFurniture()
                    })), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "div", 7), i.Tc(11, "Hayvanlar"), i.Yb(), i.Zb(12, "div", 8), i.Tc(13, "Kazan\u0131lan Rozetler"), i.Yb(), i.Zb(14, "div", 9), i.jc("click", (function() {
                        return i.Gc(t), i.mc().showBots()
                    })), i.Tc(15), i.nc(16, "translate"), i.Yb(), i.Yb(), i.Vb(17, "div", 10), i.Vb(18, "div", 11), i.Vb(19, "div", 12), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 9, "inventory.title")), i.Gb(4), i.tc("ngClass", i.xc(15, rO, t.furnitureVisible || t.tradingVisible)), i.Gb(1), i.Uc(i.oc(9, 11, "inventory.furni")), i.Gb(6), i.tc("ngClass", i.xc(17, rO, t.botsVisible)), i.Gb(1), i.Uc(i.oc(16, 13, "inventory.bots")), i.Gb(2), i.tc("visible", t.botsVisible), i.Gb(1), i.tc("visible", t.furnitureVisible)("roomPreviewer", t.roomPreviewer), i.Gb(1), i.tc("visible", t.tradingVisible)
                }
            }
            let aO = (() => {
                    class t {
                        constructor(t, e, s, i) {
                            this._settingsService = t, this._inventoryService = e, this._inventoryFurnitureService = s, this._inventoryTradingService = i, this.visible = !1, this._roomPreviewer = null
                        }
                        ngOnInit() {
                            this._roomPreviewer || (this._roomPreviewer = new MR(cp.instance.roomEngine, ++MR.PREVIEW_COUNTER)), this._inventoryService.controller = this
                        }
                        ngOnDestroy() {
                            this._roomPreviewer && this._roomPreviewer.dispose(), this._inventoryService.controller = null
                        }
                        ngOnChanges(t) {
                            const e = t.visible.currentValue;
                            e !== t.visible.previousValue && (e ? this.showFurniture() : (this._inventoryTradingService.close(), this.setAllFurnitureSeen()))
                        }
                        hide() {
                            this._inventoryService.hideWindow()
                        }
                        showFurniture() {
                            this._inventoryService.furnitureVisible = !0
                        }
                        updateItemLocking() {
                            const t = [];
                            if (t.push(...this._inventoryTradingService.getOwnTradingItemIds()), t.length)
                                for (const e of this._inventoryFurnitureService.groupItems) e.lockItemIds(t);
                            else this._inventoryFurnitureService.unlockAllItems()
                        }
                        setAllFurnitureSeen() {
                            this._inventoryFurnitureService.setAllFurnitureSeen()
                        }
                        get roomPreviewer() {
                            return this._roomPreviewer
                        }
                        get furnitureVisible() {
                            return this._inventoryService.furnitureVisible
                        }
                        get tradingVisible() {
                            return this._inventoryService.tradingVisible
                        }
                        get furnitureService() {
                            return this._inventoryFurnitureService
                        }
                        get tradeService() {
                            return this._inventoryTradingService
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(_p), i.Ub(df), i.Ub(FT), i.Ub(nO))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-inventory-main-component"]
                        ],
                        inputs: {
                            visible: "visible"
                        },
                        features: [i.Eb],
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["id", "envanter", "dragHandle", "#envanterdrag", 3, "bringToTop", "draggable", 4, "ngIf"],
                            ["id", "envanter", "dragHandle", "#envanterdrag", 3, "bringToTop", "draggable"],
                            ["id", "envanterdrag"],
                            [1, "eh-baslik"],
                            [1, "old-kapat", 3, "click"],
                            [1, "envanter-menu"],
                            ["id", "envantermenu_mobi", 1, "envantermenu-button", 3, "ngClass", "click"],
                            ["id", "envantermenu_pets", 1, "envantermenu-button"],
                            ["id", "envantermenu_badge", 1, "envantermenu-button"],
                            ["id", "envantermenu_bot", 1, "envantermenu-button", 3, "ngClass", "click"],
                            ["nitro-inventory-bots-component", "", 3, "visible"],
                            ["nitro-inventory-furniture-component", "", 3, "visible", "roomPreviewer"],
                            ["nitro-inventory-trading-component", "", 3, "visible"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, oO, 20, 19, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        encapsulation: 2
                    }), t
                })(),
                cO = (() => {
                    class t {
                        constructor(t, e) {
                            this._ngZone = t, this._settingsService = e, this.onRoomEngineObjectEvent = this.onRoomEngineObjectEvent.bind(this), this.flush(), this.registerMessages(), cp.instance.addLinkEventTracker(this)
                        }
                        ngOnDestroy() {
                            cp.instance.removeLinkEventTracker(this), this.unregisterMessages()
                        }
                        flush() {
                            this._userLoadedProfile = null, this._userBadges = [], this._heartRelationships = [], this._smileRelationships = [], this._bobbaRelationships = [], this._selectedGroup = null
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                this.unregisterMessages(), cp.instance.roomEngine.events.addEventListener(Al.SELECTED, this.onRoomEngineObjectEvent), this._messages = [new dc(this.onUserProfileEvent.bind(this)), new ic(this.onUserCurrentBadgesEvent.bind(this)), new bc(this.onUserRelationshipsEvent.bind(this)), new zs(this.onGroupInformationEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                if (cp.instance.roomEngine.events.removeEventListener(Al.SELECTED, this.onRoomEngineObjectEvent), this._messages && this._messages.length)
                                    for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            })
                        }
                        onRoomEngineObjectEvent(t) {
                            if (t) switch (t.type) {
                                case Al.SELECTED:
                                    return
                            }
                        }
                        onUserProfileEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                this.flush(), this._userLoadedProfile = e, cp.instance.communication.connection.send(new Fh(this._userLoadedProfile.id)), cp.instance.communication.connection.send(new Zh(this._userLoadedProfile.id)), e.groups.length > 0 && cp.instance.communication.connection.send(new $c(this._userLoadedProfile.groups[0].id, !1)), this._settingsService.showUserProfile()
                            })
                        }
                        onUserCurrentBadgesEvent(t) {
                            if (!t || !this._userLoadedProfile) return;
                            const e = t.getParser();
                            e && e.userId === this._userLoadedProfile.id && this._ngZone.run(() => this._userBadges = e.badges)
                        }
                        onUserRelationshipsEvent(t) {
                            if (!t || !this._userLoadedProfile) return;
                            const e = t.getParser();
                            e && e.id === this._userLoadedProfile.id && this._ngZone.run(() => {
                                this._heartRelationships = e.hearts, this._smileRelationships = e.smiles, this._bobbaRelationships = e.bobbas, this._component && this._component.getRandomRelationships()
                            })
                        }
                        onGroupInformationEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && !e.flag && this._ngZone.run(() => this._selectedGroup = e)
                        }
                        selectGroup(t) {
                            cp.instance.communication.connection.send(new $c(t, !1))
                        }
                        loadUserProfile(t) {
                            cp.instance.communication.connection.send(new Vh(t))
                        }
                        linkReceived(t) {
                            const e = t.split("/");
                            if (!(e.length < 2)) switch (e[1]) {
                                case "goto":
                                    if (e.length > 2) {
                                        const t = parseInt(e[2]);
                                        t > 0 && this.loadUserProfile(t)
                                    }
                                    return
                            }
                        }
                        get eventUrlPrefix() {
                            return "profile"
                        }
                        set component(t) {
                            this._component = t
                        }
                        get userLoadedProfile() {
                            return this._userLoadedProfile
                        }
                        get userBadges() {
                            return this._userBadges
                        }
                        get heartRelationships() {
                            return this._heartRelationships
                        }
                        get smileRelationships() {
                            return this._smileRelationships
                        }
                        get bobbaRelationships() {
                            return this._bobbaRelationships
                        }
                        get selectedGroup() {
                            return this._selectedGroup
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(i.E), i.gc(_p))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })(),
                _O = (() => {
                    class t {
                        constructor(t) {
                            this._ngZone = t, this._userId = -1, this._userName = null, this._figure = null, this._gender = null, this.registerMessages()
                        }
                        ngOnDestroy() {
                            this.unregisterMessages()
                        }
                        registerMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                this._messages = [new cc(this.onUserInfoEvent.bind(this)), new rc(this.onUserFigureEvent.bind(this))];
                                for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                            })
                        }
                        unregisterMessages() {
                            this._ngZone.runOutsideAngular(() => {
                                for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                                this._messages = []
                            })
                        }
                        onUserInfoEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            if (!e) return;
                            const s = e.userInfo;
                            this._ngZone.run(() => {
                                this._userId = s.userId, this._userName = s.username, this._figure = s.figure, this._gender = s.gender
                            })
                        }
                        onUserFigureEvent(t) {
                            if (!t) return;
                            const e = t.getParser();
                            e && this._ngZone.run(() => {
                                this._figure = e.figure, this._gender = e.gender
                            })
                        }
                        get userId() {
                            return this._userId
                        }
                        get userName() {
                            return this._userName
                        }
                        get figure() {
                            return this._figure
                        }
                        get gender() {
                            return this._gender
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.gc(i.E))
                    }, t.\u0275prov = i.Qb({
                        token: t,
                        factory: t.\u0275fac
                    }), t
                })();

            function hO(t, e) {
                if (1 & t && i.Vb(0, "div", 71), 2 & t) {
                    const t = i.mc(2);
                    i.tc("headOnly", !0)("figure", t.currentRandomHeartRelationship.figure)("direction", 4)
                }
            }

            function lO(t, e) {
                if (1 & t && i.Vb(0, "div", 71), 2 & t) {
                    const t = i.mc(2);
                    i.tc("headOnly", !0)("figure", t.currentRandomSmileRelationship.figure)("direction", 4)
                }
            }

            function uO(t, e) {
                if (1 & t && i.Vb(0, "div", 71), 2 & t) {
                    const t = i.mc(2);
                    i.tc("headOnly", !0)("figure", t.currentRandomBobbaRelationship.figure)("direction", 4)
                }
            }
            const dO = function(t) {
                return [t]
            };

            function gO(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.Vb(8, "div", 7), i.Zb(9, "div", 8), i.Zb(10, "p", 9), i.Tc(11), i.Yb(), i.Yb(), i.Zb(12, "div", 10), i.Zb(13, "p", 11), i.Tc(14), i.Yb(), i.Yb(), i.Zb(15, "div", 12), i.Vb(16, "p", 13), i.nc(17, "translate"), i.Yb(), i.Zb(18, "div", 14), i.Vb(19, "p", 15), i.nc(20, "translate"), i.Yb(), i.Zb(21, "div", 14), i.Zb(22, "p", 16), i.Zb(23, "b", 17), i.Tc(24), i.nc(25, "translate"), i.Yb(), i.Tc(26), i.Yb(), i.Yb(), i.Vb(27, "div", 18), i.Zb(28, "div", 19), i.Vb(29, "div", 20), i.Zb(30, "div", 21), i.Zb(31, "p", 22), i.Tc(32, "Arkada\u015f olarak ekle"), i.Yb(), i.Yb(), i.Yb(), i.Zb(33, "div", 23), i.Zb(34, "p", 24), i.jc("click", (function() {
                        return i.Gc(t), i.mc().toggleAvatarEditor()
                    })), i.Tc(35, "Change Looks"), i.Yb(), i.Zb(36, "p", 25), i.jc("click", (function() {
                        return i.Gc(t), i.mc().clickIcon("inventory")
                    })), i.Tc(37, "Change Badges"), i.Yb(), i.Yb(), i.Zb(38, "div", 26), i.Vb(39, "div", 27), i.Yb(), i.Yb(), i.Vb(40, "div", 28), i.Zb(41, "div", 29), i.Zb(42, "div", 30), i.Zb(43, "p", 31), i.Zb(44, "b", 17), i.Tc(45), i.nc(46, "translate"), i.Yb(), i.Tc(47), i.Yb(), i.Yb(), i.Zb(48, "p", 32), i.Tc(49), i.nc(50, "translate"), i.Yb(), i.Zb(51, "div", 33), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc();
                        return e.openRelationshipProfile(e.currentRandomHeartRelationship)
                    })), i.Zb(52, "p", 34), i.Tc(53), i.nc(54, "translate"), i.Yb(), i.Vb(55, "div", 35), i.Zb(56, "div", 36), i.Zb(57, "p", 37), i.Tc(58), i.nc(59, "translate"), i.Yb(), i.Rc(60, hO, 1, 3, "div", 38), i.Yb(), i.Yb(), i.Zb(61, "div", 33), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc();
                        return e.openRelationshipProfile(e.currentRandomSmileRelationship)
                    })), i.Zb(62, "p", 34), i.Tc(63), i.nc(64, "translate"), i.Yb(), i.Vb(65, "div", 39), i.Zb(66, "div", 36), i.Zb(67, "p", 37), i.Tc(68), i.nc(69, "translate"), i.Yb(), i.Rc(70, lO, 1, 3, "div", 38), i.Yb(), i.Yb(), i.Zb(71, "div", 40), i.Zb(72, "p", 34), i.Tc(73), i.nc(74, "translate"), i.Yb(), i.Vb(75, "div", 41), i.Zb(76, "div", 36), i.Zb(77, "p", 37), i.Tc(78), i.nc(79, "translate"), i.Yb(), i.Rc(80, uO, 1, 3, "div", 38), i.Yb(), i.Yb(), i.Yb(), i.Vb(81, "div", 42), i.Zb(82, "div", 43), i.Vb(83, "div", 44), i.Zb(84, "p", 45), i.Tc(85, "Apparts"), i.Yb(), i.Yb(), i.Vb(86, "div", 42), i.Zb(87, "div", 46), i.Zb(88, "div", 47), i.Zb(89, "div", 48), i.Zb(90, "p", 49), i.Zb(91, "b", 17), i.Tc(92, "Groupe:"), i.Yb(), i.Tc(93, " 0"), i.Yb(), i.Yb(), i.Zb(94, "div", 50), i.Zb(95, "div", 51), i.Vb(96, "div", 52), i.Vb(97, "div", 53), i.Yb(), i.Zb(98, "div", 54), i.Vb(99, "div", 55), i.Vb(100, "div", 53), i.Yb(), i.Zb(101, "div", 54), i.Vb(102, "div", 55), i.Vb(103, "div", 53), i.Yb(), i.Zb(104, "div", 54), i.Vb(105, "div", 55), i.Vb(106, "div", 53), i.Yb(), i.Yb(), i.Yb(), i.Zb(107, "div", 56), i.Zb(108, "div", 57), i.Zb(109, "div", 58), i.Vb(110, "div", 59), i.Zb(111, "div", 60), i.Tc(112, "Membres : 0"), i.Yb(), i.Yb(), i.Zb(113, "div", 61), i.Zb(114, "p", 62), i.Vb(115, "img", 63), i.Tc(116, "Groupe"), i.Yb(), i.Zb(117, "p", 64), i.Tc(118, "Pas encore disponible"), i.Zb(119, "u"), i.Tc(120, "user"), i.Yb(), i.Tc(121, " "), i.Yb(), i.Zb(122, "p", 65), i.Tc(123, "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."), i.Yb(), i.Zb(124, "p", 66), i.Tc(125, "Bientot disponible "), i.Yb(), i.Zb(126, "p", 67), i.Tc(127, "Bientot disponible"), i.Yb(), i.Zb(128, "p", 68), i.Tc(129, "Bientot disponible"), i.Yb(), i.Zb(130, "div", 69), i.Zb(131, "p", 70), i.Tc(132, "Bientot disponible"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 22, "extendedprofile.caption")), i.Gb(5), i.tc("figure", t.userProfile.figure)("direction", 2), i.Gb(1), i.tc("ngClass", i.xc(50, dO, t.isMe || t.isFriend ? "" : "rounded-left")), i.Gb(2), i.Uc(t.userProfile.username), i.Gb(3), i.Uc(t.userProfile.motto), i.Gb(2), i.tc("innerHTML", i.qc(17, 24, "extendedprofile.created", "created", t.userProfile.registration), i.Hc), i.Gb(3), i.tc("innerHTML", i.qc(20, 28, "extendedprofile.last.login", "lastlogin", t.userProfile.lastVisit), i.Hc), i.Gb(5), i.Uc(i.oc(25, 32, "extendedprofile.achievementscore")), i.Gb(2), i.Vc(" ", t.userProfile.achievementPoints, ""), i.Gb(19), i.Vc("", i.oc(46, 34, "friendlist.friends"), ":"), i.Gb(2), i.Vc(" ", t.userProfile.friendsCount, ""), i.Gb(2), i.Uc(i.oc(50, 36, "extendedprofile.relstatus")), i.Gb(4), i.Uc(i.oc(54, 38, "extendedprofile.relstatus.others.heart")), i.Gb(5), i.Uc(t.currentRandomHeartRelationship ? t.currentRandomHeartRelationship.username : i.oc(59, 40, "extendedprofile.no.friends.in.this.category")), i.Gb(2), i.tc("ngIf", t.currentRandomHeartRelationship), i.Gb(3), i.Uc(i.oc(64, 42, "extendedprofile.relstatus.others.smile")), i.Gb(5), i.Uc(t.currentRandomSmileRelationship ? t.currentRandomSmileRelationship.username : i.oc(69, 44, "extendedprofile.no.friends.in.this.category")), i.Gb(2), i.tc("ngIf", t.currentRandomSmileRelationship), i.Gb(3), i.Uc(i.oc(74, 46, "extendedprofile.relstatus.others.bobba")), i.Gb(5), i.Uc(t.currentRandomBobbaRelationship ? t.currentRandomBobbaRelationship.username : i.oc(79, 48, "extendedprofile.no.friends.in.this.category")), i.Gb(2), i.tc("ngIf", t.currentRandomBobbaRelationship)
                }
            }
            let mO = (() => {
                class t {
                    constructor(t, e, s) {
                        this._userProfileService = t, this._sessionService = e, this._settingsService = s, this._currentRandomHeartRelationship = null, this._currentRandomSmileRelationship = null, this._currentRandomBobbaRelationship = null, this._tabId = 0
                    }
                    ngOnInit() {
                        this._userProfileService.component = this
                    }
                    ngOnDestroy() {
                        this._userProfileService.component = null
                    }
                    hide() {
                        this._settingsService.hideUserProfile()
                    }
                    openRelationshipProfile(t) {
                        t && cp.instance.communication.connection.send(new Vh(t.userId))
                    }
                    getRandomRelationships() {
                        this._currentRandomHeartRelationship = this.heartRelationships[Math.floor(Math.random() * this.heartRelationships.length)], this._currentRandomSmileRelationship = this.smileRelationships[Math.floor(Math.random() * this.smileRelationships.length)], this._currentRandomBobbaRelationship = this.bobbaRelationships[Math.floor(Math.random() * this.bobbaRelationships.length)]
                    }
                    selectGroup(t) {
                        this._userProfileService.selectGroup(t)
                    }
                    selectTab(t) {
                        this._tabId = t
                    }
                    get visible() {
                        return this._settingsService.userProfileVisible
                    }
                    get userProfile() {
                        return this._userProfileService.userLoadedProfile
                    }
                    get userBadges() {
                        return this._userProfileService.userBadges
                    }
                    get isMe() {
                        return !!this.userProfile && this._sessionService.userId === this.userProfile.id
                    }
                    get isFriend() {
                        return !!this.userProfile && this.userProfile.isMyFriend
                    }
                    get heartRelationships() {
                        return this._userProfileService.heartRelationships
                    }
                    get currentRandomHeartRelationship() {
                        return this._currentRandomHeartRelationship
                    }
                    get smileRelationships() {
                        return this._userProfileService.smileRelationships
                    }
                    get currentRandomSmileRelationship() {
                        return this._currentRandomSmileRelationship
                    }
                    get bobbaRelationships() {
                        return this._userProfileService.bobbaRelationships
                    }
                    get currentRandomBobbaRelationship() {
                        return this._currentRandomBobbaRelationship
                    }
                    get selectedGroup() {
                        return this._userProfileService.selectedGroup
                    }
                    get tabId() {
                        return this._tabId
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(cO), i.Ub(_O), i.Ub(_p))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-user-profile-component"]
                    ],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["id", "user-profile", "dragHandle", ".drag-handler", 3, "bringToTop", "draggable", 4, "ngIf"],
                        ["id", "user-profile", "dragHandle", ".drag-handler", 3, "bringToTop", "draggable"],
                        ["id", "user-profiledrag", 1, "drag-handler"],
                        [1, "up-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "uprofile-box"],
                        [1, "uprofile-left"],
                        ["nitro-avatar-image", "", 1, "uprofile_avatar-preview", 3, "figure", "direction"],
                        [1, "uprofile-username-position", 3, "ngClass"],
                        [1, "text-shadow", "uprofile-username"],
                        [1, "uprofile-motto-position"],
                        [1, "uprofile-motto-text"],
                        [1, "uprofile-text-position", 2, "padding-top", "0px"],
                        [1, "uprofile-create", 3, "innerHTML"],
                        [1, "uprofile-text-position"],
                        [1, "uprofile-lastlogin", 3, "innerHTML"],
                        [1, "uprofile-score"],
                        [1, "text-shadow"],
                        [1, "uprofile-user_online"],
                        [1, "notactive", 2, "display", "none"],
                        [1, "uprofile-user_offline", 2, "display", "none"],
                        [1, "uprofile-user-addfriends"],
                        [1, "up-addfriends-text"],
                        [1, "profil-avatar-edit"],
                        [1, "changelooks", 3, "click"],
                        [1, "changebadges", 3, "click"],
                        [1, "uprofile-badge-preview"],
                        [1, "up-badge-preview-box", 2, "background-image", "url(https://images.habbo.com/c_images/album1584/BR988.gif)"],
                        [1, "uprofile-separator"],
                        [1, "uprofile-right"],
                        [1, "uprofile-friends-position"],
                        [1, "uprofile-friends"],
                        [1, "relationship-text"],
                        [1, "relationship-box-position", 3, "click"],
                        [1, "and-others-text"],
                        [1, "relationship-ico", 2, "background-image", "url(./assets/images/userprofile/kalp.png)"],
                        [1, "relationship-user-box"],
                        [1, "relationship-username"],
                        ["class", "uprofile-habbo-avatar", "nitro-avatar-image", "", 3, "headOnly", "figure", "direction", 4, "ngIf"],
                        [1, "relationship-ico", 2, "background-image", "url(./assets/images/userprofile/gulucuk.png)"],
                        [1, "relationship-box-position"],
                        [1, "relationship-ico", 2, "background-image", "url(./assets/images/userprofile/kurukafa.png)"],
                        [1, "uprofile-separator2"],
                        [1, "uprofile-navigator-box"],
                        [1, "up-nbox-ico"],
                        [1, "up-nbox-text"],
                        [1, "uprofile-group-list_box"],
                        [1, "up-groupl-menu-box"],
                        [1, "uprofile-gtext-position"],
                        [1, "uprofile-create"],
                        [1, "uprofile-group-list"],
                        [1, "group_box-bg", 2, "background", "url(./assets/images/userprofile/gon.png)"],
                        [1, "uprofile-group-favorite", 2, "background", "url(./assets/images/userprofile/favon.png)"],
                        [1, "uprofile-group-badge", 2, "background-image", "url(./assets/images/userprofile/gbadge.png)"],
                        [1, "group_box-bg"],
                        [1, "uprofile-group-favorite"],
                        [1, "up-groupl-preview-box"],
                        [1, "group-info-bg"],
                        [1, "group-info-box_left"],
                        [1, "gbe-badge", 2, "background-image", "url(./assets/images/userprofile/gbadge-big.png)"],
                        [1, "group-members"],
                        [1, "group-info-box_right"],
                        [1, "ginfo_group-name"],
                        ["src", "./assets/images/userprofile/grupico.png", 2, "margin", "4px", "float", "left", "cursor", "pointer"],
                        [1, "ginfo_group-creation-date"],
                        [1, "ginfo_group-description"],
                        [1, "ginfo_group-room"],
                        [1, "ginfo_buy-group-mobi"],
                        [1, "ginfo_popular-groups"],
                        [1, "leave_group-box"],
                        [1, "leaveg-text"],
                        ["nitro-avatar-image", "", 1, "uprofile-habbo-avatar", 3, "headOnly", "figure", "direction"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, gO, 133, 52, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, cf, hp.l],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const pO = ["historyScroller"],
                bO = function(t) {
                    return {
                        "background-color": t
                    }
                };

            function EO(t, e) {
                if (1 & t && i.Vb(0, "div", 21), 2 & t) {
                    const t = i.mc(2).$implicit;
                    i.tc("ngStyle", i.xc(1, bO, t.senderColorString))
                }
            }
            const fO = function(t) {
                return {
                    "background-image": t
                }
            };

            function SO(t, e) {
                if (1 & t && i.Vb(0, "div", 22), 2 & t) {
                    const t = i.mc(2).$implicit;
                    i.tc("ngStyle", i.xc(1, fO, "url(" + t.senderImageUrl + ")"))
                }
            }

            function IO(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 14), i.jc("click", (function() {
                        i.Gc(t);
                        const e = i.mc().$implicit;
                        return i.mc(3).selectUser(e.senderId)
                    })), i.Rc(1, EO, 1, 3, "div", 15), i.Zb(2, "div"), i.Zb(3, "div", 16), i.Rc(4, SO, 1, 3, "div", 17), i.Yb(), i.Zb(5, "div", 18), i.Vb(6, "b", 19), i.Zb(7, "span", 20), i.Tc(8), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.tc("ngIf", 0 === t.chatStyle), i.Gb(1), i.Kb("chat-bubble bubble-", t.chatStyle, " type-", t.chatType, ""), i.Gb(2), i.tc("ngIf", t.senderImageUrl), i.Gb(2), i.tc("innerHTML", t.senderName, i.Hc), i.Gb(2), i.Vc(" ", t.content, "")
                }
            }

            function RO(t, e) {
                if (1 & t && (i.Zb(0, "div", 23), i.Vb(1, "img", 24), i.Tc(2), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(2), i.Uc(t.content)
                }
            }

            function vO(t, e) {
                if (1 & t && (i.Xb(0), i.Zb(1, "div", 8), i.Zb(2, "div", 9), i.Zb(3, "div", 10), i.Tc(4), i.nc(5, "date"), i.Yb(), i.Yb(), i.Zb(6, "div", 11), i.Rc(7, IO, 9, 8, "div", 12), i.Rc(8, RO, 3, 1, "div", 13), i.Yb(), i.Yb(), i.Wb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(4), i.Uc(i.pc(5, 3, t.date, "hh:mm:ss")), i.Gb(3), i.tc("ngIf", -1 !== t.senderId), i.Gb(1), i.tc("ngIf", -1 === t.senderId)
                }
            }

            function TO(t, e) {
                if (1 & t && (i.Zb(0, "div", 6), i.Rc(1, vO, 9, 6, "ng-container", 7), i.Yb()), 2 & t) {
                    const t = e.$implicit,
                        s = i.mc(2);
                    i.Gb(1), i.tc("ngForOf", t.items)("ngForTrackBy", s.trackById)
                }
            }

            function OO(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2, 3), i.Rc(3, TO, 2, 2, "div", 4), i.Yb(), i.Zb(4, "div", 5), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.tc("center", !1)("noMemory", !0), i.Gb(3), i.tc("ngForOf", t.historySets.getValues())("ngForTrackBy", t.trackById)
                }
            }
            let yO = (() => {
                class t {
                    constructor(t, e) {
                        this._settingsService = t, this._chatHistoryService = e
                    }
                    ngOnChanges(t) {
                        const e = t.visible.currentValue;
                        e && e !== t.visible.previousValue && setTimeout(() => this.scrollToBottom(), 1)
                    }
                    hide() {
                        this._settingsService.hideChatHistory()
                    }
                    selectUser(t) {
                        t && cp.instance.roomEngine.selectRoomObject(cp.instance.roomEngine.activeRoomId, t, V.UNIT)
                    }
                    trackById(t, e) {
                        return e.id
                    }
                    scrollToBottom() {
                        this.historyScroller && (console.log("scroll"), this.historyScroller.directiveRef.scrollToBottom(0))
                    }
                    get historySets() {
                        return this._chatHistoryService.historySets
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(_p), i.Ub(Hb))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-chat-history-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(pO, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.historyScroller = t.first)
                        }
                    },
                    inputs: {
                        visible: "visible"
                    },
                    features: [i.Eb],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "sohbetgecmis nitro-chat-history-component", 3, "center", "noMemory", 4, "ngIf"],
                        [1, "sohbetgecmis", "nitro-chat-history-component", 3, "center", "noMemory"],
                        [1, "historyscroller", "position-relative"],
                        ["historyScroller", ""],
                        ["class", "d-flex flex-column", 4, "ngFor", "ngForOf", "ngForTrackBy"],
                        [1, "sohbetgecmis-kapat", 3, "click"],
                        [1, "d-flex", "flex-column"],
                        [4, "ngFor", "ngForOf", "ngForTrackBy"],
                        [1, "row", 2, "margin-bottom", "-1px"],
                        [1, "d-flex", "col-2", "align-items-center"],
                        [1, "badge", "badge-sm", 2, "font-style", "italic", "color", "#ffffff70"],
                        [1, "d-flex", "col-9", "align-items-center", "pl-0"],
                        ["class", "bubble-container", 3, "click", 4, "ngIf"],
                        ["class", "badge badge-sm", "style", "color: red;font-family: system-ui;", 4, "ngIf"],
                        [1, "bubble-container", 3, "click"],
                        ["class", "user-container-bg", 3, "ngStyle", 4, "ngIf"],
                        [1, "user-container"],
                        ["class", "user-image", 3, "ngStyle", 4, "ngIf"],
                        [1, "chat-content"],
                        [1, "username-container", 3, "innerHTML"],
                        [1, "message"],
                        [1, "user-container-bg", 3, "ngStyle"],
                        [1, "user-image", 3, "ngStyle"],
                        [1, "badge", "badge-sm", 2, "color", "red", "font-family", "system-ui"],
                        ["src", "smallroomico.png"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, OO, 5, 4, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, hp.m, hp.o],
                    pipes: [hp.d],
                    encapsulation: 2
                }), t
            })();
            var AO = s("qoEl");
            class CO extends u.e {
                constructor(t, e) {
                    super("\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}", "\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec3 lineColor;\nuniform vec3 color;\nvoid main(void) {\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\n    vec3 colorLine = lineColor * currentColor.a;\n    vec3 colorOverlay = color * currentColor.a;\n\n    if(currentColor.r == 0.0 && currentColor.g == 0.0 && currentColor.b == 0.0 && currentColor.a > 0.0) {\n        gl_FragColor = vec4(colorLine.r, colorLine.g, colorLine.b, currentColor.a);\n    } else if(currentColor.a > 0.0) {\n        gl_FragColor = vec4(colorOverlay.r, colorOverlay.g, colorOverlay.b, currentColor.a);\n    }\n}"), this.uniforms.lineColor = new Float32Array(3), this.uniforms.color = new Float32Array(3), this.lineColor = t, this.color = e
                }
                get lineColor() {
                    return this._lineColor
                }
                set lineColor(t) {
                    const e = this.uniforms.lineColor;
                    "number" == typeof t ? (Object(AO.l)(t, e), this._lineColor = t) : (e[0] = t[0], e[1] = t[1], e[2] = t[2], this._lineColor = Object(AO.x)(e))
                }
                get color() {
                    return this._color
                }
                set color(t) {
                    const e = this.uniforms.color;
                    "number" == typeof t ? (Object(AO.l)(t, e), this._color = t) : (e[0] = t[0], e[1] = t[1], e[2] = t[2], this._color = Object(AO.x)(e))
                }
            }
            class MO {
                constructor(t) {
                    this._component = t;
                    const e = new CO([1, 1, 1], [.6, .6, .6]);
                    this._selectionShader = e
                }
                show(t) {
                    this.applySelectionShader(this.getRoomObject(t))
                }
                hide(t) {
                    this.clearSelectionShader(this.getRoomObject(t))
                }
                clearSelectionShaderFromFurni(t) {
                    for (const e of t) this.clearSelectionShader(this.getRoomObject(e))
                }
                applySelectionShaderToFurni(t) {
                    for (const e of t) this.applySelectionShader(this.getRoomObject(e))
                }
                getRoomObject(t) {
                    return this._component ? cp.instance.roomEngine.getRoomObject(this._component.roomId, t, V.FLOOR) : null
                }
                applySelectionShader(t) {
                    if (!t) return;
                    const e = t.visualization;
                    if (e)
                        for (const s of e.sprites) s.blendMode !== u.b.ADD && (s.filters = [this._selectionShader])
                }
                clearSelectionShader(t) {
                    if (!t) return;
                    const e = t.visualization;
                    if (e)
                        for (const s of e.sprites) s.filters = []
                }
            }
            let UO = (() => {
                class t {
                    constructor(t, e) {
                        this._wiredService = t, this._formBuilder = e
                    }
                    get code() {
                        return -1
                    }
                    get negativeCode() {
                        return -1
                    }
                    get requiresFurni() {
                        return JA._Str_5431
                    }
                    get hasStateSnapshot() {
                        return !1
                    }
                    readIntegerParamsFromForm() {
                        return []
                    }
                    readStringParamFromForm() {
                        return ""
                    }
                    onInitStart() {}
                    onEditStart(t) {}
                    get hasSpecialInputs() {
                        return !1
                    }
                    validate() {
                        return null
                    }
                    static getLocaleName(t) {
                        const e = Math.floor(t / 2);
                        return t % 2 ? (e + .5).toString() : e.toString()
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(Pb), i.Ub(VE.c))
                }, t.\u0275dir = i.Pb({
                    type: t
                }), t
            })();
            class DO extends UO {
                constructor() {
                    super(...arguments), this.delay = 0
                }
                onEditStart(t) {
                    this.delay = t.delayInPulses
                }
            }
            class NO extends UO {}
            let wO = (() => {
                    class t {}
                    return t.STATES_MATCH = 0, t.FURNIS_HAVE_AVATARS = 1, t.TRIGGERER_IS_ON_FURNI = 2, t.TIME_ELAPSED_MORE = 3, t.TIME_ELAPSED_LESS = 4, t.USER_COUNT_IN = 5, t.ACTOR_IS_IN_TEAM = 6, t.HAS_STACKED_FURNIS = 7, t.STUFF_TYPE_MATCHES = 8, t.STUFFS_IN_FORMATION = 9, t.ACTOR_IS_GROUP_MEMBER = 10, t.ACTOR_IS_WEARING_BADGE = 11, t.ACTOR_IS_WEARING_EFFECT = 12, t.NOT_STATES_MATCH = 13, t.FURNI_NOT_HAVE_HABBO = 14, t.NOT_ACTOR_ON_FURNI = 15, t.NOT_USER_COUNT_IN = 16, t.NOT_ACTOR_IN_TEAM = 17, t.NOT_HAS_STACKED_FURNIS = 18, t.NOT_FURNI_IS_OF_TYPE = 19, t.NOT_STUFFS_IN_FORMATION = 20, t.NOT_ACTOR_IN_GROUP = 21, t.NOT_ACTOR_WEARS_BADGE = 22, t.NOT_ACTOR_WEARING_EFFECT = 23, t.DATE_RANGE_ACTIVE = 24, t.ACTOR_HAS_HANDITEM = 25, t
                })(),
                LO = (() => {
                    class t extends NO {
                        constructor() {
                            super(...arguments), this.allowedHanditemIds = ["2", "5", "7", "8", "9", "10", "27"], this.handitemId = "0"
                        }
                        get code() {
                            return t.CODE
                        }
                        onEditStart(t) {
                            this.handitemId = t.intData.length > 0 && this.allowedHanditemIds.includes(t.intData[0].toString()) ? t.intData[0].toString() : "0"
                        }
                        readIntegerParamsFromForm() {
                            return [parseInt(this.handitemId)]
                        }
                        get hasSpecialInputs() {
                            return !0
                        }
                    }
                    return t.CODE = wO.ACTOR_HAS_HANDITEM, t.\u0275fac = function(e) {
                        return xO(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["ng-component"]
                        ],
                        features: [i.Db],
                        decls: 30,
                        vars: 36,
                        consts: [
                            [1, "wired-options-box"],
                            [1, "wired-subheader"],
                            [1, "wiredselectbox", 3, "ngModel", "ngModelChange"],
                            ["value", "0", 3, "selected"],
                            ["value", "2", 3, "selected"],
                            ["value", "5", 3, "selected"],
                            ["value", "7", 3, "selected"],
                            ["value", "8", 3, "selected"],
                            ["value", "9", 3, "selected"],
                            ["value", "10", 3, "selected"],
                            ["value", "27", 3, "selected"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "select", 2), i.jc("ngModelChange", (function(t) {
                                return e.handitemId = t
                            })), i.Zb(6, "option", 3), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Zb(9, "option", 4), i.Tc(10), i.nc(11, "translate"), i.Yb(), i.Zb(12, "option", 5), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "option", 6), i.Tc(16), i.nc(17, "translate"), i.Yb(), i.Zb(18, "option", 7), i.Tc(19), i.nc(20, "translate"), i.Yb(), i.Zb(21, "option", 8), i.Tc(22), i.nc(23, "translate"), i.Yb(), i.Zb(24, "option", 9), i.Tc(25), i.nc(26, "translate"), i.Yb(), i.Zb(27, "option", 10), i.Tc(28), i.nc(29, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 18, "wiredfurni.params.handitem")), i.Gb(2), i.tc("ngModel", e.handitemId), i.Gb(1), i.tc("selected", "0" == e.handitemId), i.Gb(1), i.Uc(i.oc(8, 20, "wiredfurni.tooltip.handitem")), i.Gb(2), i.tc("selected", "2" == e.handitemId), i.Gb(1), i.Uc(i.oc(11, 22, "handitem2")), i.Gb(2), i.tc("selected", "5" == e.handitemId), i.Gb(1), i.Uc(i.oc(14, 24, "handitem5")), i.Gb(2), i.tc("selected", "7" == e.handitemId), i.Gb(1), i.Uc(i.oc(17, 26, "handitem7")), i.Gb(2), i.tc("selected", "8" == e.handitemId), i.Gb(1), i.Uc(i.oc(20, 28, "handitem8")), i.Gb(2), i.tc("selected", "9" == e.handitemId), i.Gb(1), i.Uc(i.oc(23, 30, "handitem9")), i.Gb(2), i.tc("selected", "10" == e.handitemId), i.Gb(1), i.Uc(i.oc(26, 32, "handitem10")), i.Gb(2), i.tc("selected", "27" == e.handitemId), i.Gb(1), i.Uc(i.oc(29, 34, "handitem27")))
                        },
                        encapsulation: 2
                    }), t
                })();
            const xO = i.bc(LO);
            let PO = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                }
                return t.CODE = wO.ACTOR_IS_GROUP_MEMBER, t.NEGATIVE_CODE = wO.NOT_ACTOR_IN_GROUP, t.\u0275fac = function(e) {
                    return FO(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const FO = i.bc(PO);
            let GO = (() => {
                class t extends NO {
                    constructor() {
                        super(...arguments), this.team = "1"
                    }
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    onEditStart(t) {
                        this.team = t.intData[0].toString()
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.team)]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = wO.ACTOR_IS_IN_TEAM, t.NEGATIVE_CODE = wO.NOT_ACTOR_IN_TEAM, t.\u0275fac = function(e) {
                    return YO(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 25,
                    vars: 19,
                    consts: [
                        [1, "select-trigger-user"],
                        [1, "wired-subheader"],
                        [1, "rs-select_container-radio"],
                        ["type", "radio", "name", "radio", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["type", "radio", "name", "radio", "value", "2", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "radio", "value", "3", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "radio", "value", "4", 1, "form-check-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 2), i.Zb(6, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.team = t
                        })), i.Yb(), i.Zb(7, "label", 4), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Yb(), i.Zb(10, "div", 2), i.Zb(11, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.team = t
                        })), i.Yb(), i.Zb(12, "label", 4), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Zb(15, "div", 2), i.Zb(16, "input", 6), i.jc("ngModelChange", (function(t) {
                            return e.team = t
                        })), i.Yb(), i.Zb(17, "label", 4), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Yb(), i.Zb(20, "div", 2), i.Zb(21, "input", 7), i.jc("ngModelChange", (function(t) {
                            return e.team = t
                        })), i.Yb(), i.Zb(22, "label", 4), i.Tc(23), i.nc(24, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 9, "wiredfurni.params.team")), i.Gb(3), i.tc("ngModel", e.team), i.Gb(2), i.Uc(i.oc(9, 11, "wiredfurni.params.team.1")), i.Gb(3), i.tc("ngModel", e.team), i.Gb(2), i.Uc(i.oc(14, 13, "wiredfurni.params.team.2")), i.Gb(3), i.tc("ngModel", e.team), i.Gb(2), i.Uc(i.oc(19, 15, "wiredfurni.params.team.3")), i.Gb(3), i.tc("ngModel", e.team), i.Gb(2), i.Uc(i.oc(24, 17, "wiredfurni.params.team.4")))
                    },
                    encapsulation: 2
                }), t
            })();
            const YO = i.bc(GO);
            let kO = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    readIntegerParamsFromForm() {
                        const t = parseInt(this.effectId);
                        return isNaN(t) ? [] : [t]
                    }
                    onEditStart(t) {
                        this.effectId = t.stringData.length > 0 ? t.stringData : "0"
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = wO.ACTOR_IS_WEARING_EFFECT, t.NEGATIVE_CODE = wO.NOT_ACTOR_WEARING_EFFECT, t.\u0275fac = function(e) {
                    return VO(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 6,
                    vars: 4,
                    consts: [
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.effectId = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 2, "wiredfurni.params.effectid")), i.Gb(2), i.tc("ngModel", e.effectId))
                    },
                    encapsulation: 2
                }), t
            })();
            const VO = i.bc(kO);
            let ZO = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                }
                return t.CODE = wO.TRIGGERER_IS_ON_FURNI, t.NEGATIVE_CODE = wO.NOT_ACTOR_ON_FURNI, t.\u0275fac = function(e) {
                    return jO(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const jO = i.bc(ZO);
            let BO = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    readStringParamFromForm() {
                        return this.botName
                    }
                    onEditStart(t) {
                        this.botName = t.stringData
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = wO.ACTOR_IS_WEARING_BADGE, t.NEGATIVE_CODE = wO.NOT_ACTOR_WEARS_BADGE, t.\u0275fac = function(e) {
                    return HO(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 6,
                    vars: 4,
                    consts: [
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.botName = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 2, "wiredfurni.params.badgecode")), i.Gb(2), i.tc("ngModel", e.botName))
                    },
                    encapsulation: 2
                }), t
            })();
            const HO = i.bc(BO);
            let WO = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    test() {
                        return t.CODE
                    }
                    readIntegerParamsFromForm() {
                        const t = [],
                            e = new Date(this.startDate).getTime();
                        if (!isNaN(e)) {
                            t.push(e / 1e3);
                            const s = new Date(this.endDate).getTime();
                            isNaN(s) || t.push(s / 1e3)
                        }
                        return t
                    }
                    onEditStart(t) {
                        let e, s;
                        e = t.intData.length > 0 ? new Date(1e3 * t.intData[0]) : new Date(0), s = t.intData.length > 1 ? new Date(1e3 * t.intData[1]) : new Date(0), this.startDate = this.dateToString(e), this.endDate = this.dateToString(s)
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    dateToString(t) {
                        return `${t.getFullYear()}/${("0"+(t.getMonth()+1)).slice(-2)}/${("0"+t.getDate()).slice(-2)} ${("0"+t.getHours()).slice(-2)}:${("0"+t.getMinutes()).slice(-2)}`
                    }
                }
                return t.CODE = wO.DATE_RANGE_ACTIVE, t.\u0275fac = function(e) {
                    return zO(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 11,
                    vars: 8,
                    consts: [
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.startDate = t
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 0), i.Zb(7, "p", 1), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.endDate = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 4, "wiredfurni.params.startdate")), i.Gb(2), i.tc("ngModel", e.startDate), i.Gb(3), i.Uc(i.oc(9, 6, "wiredfurni.params.enddate")), i.Gb(2), i.tc("ngModel", e.endDate))
                    },
                    encapsulation: 2
                }), t
            })();
            const zO = i.bc(WO);
            let KO = (() => {
                class t extends NO {
                    constructor() {
                        super(...arguments), this.requireAll = "0"
                    }
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                    onEditStart(t) {
                        this.requireAll = t.intData.length > 0 && 1 === t.intData[0] ? "1" : "0"
                    }
                    readIntegerParamsFromForm() {
                        return ["1" === this.requireAll ? 1 : 0]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = wO.NOT_HAS_STACKED_FURNIS, t.\u0275fac = function(e) {
                    return XO(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 15,
                    vars: 11,
                    consts: [
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        [1, "rs-select_container-radio"],
                        ["type", "radio", "name", "radio", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["type", "radio", "name", "radio", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 2), i.Zb(6, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.requireAll = t
                        })), i.Yb(), i.Zb(7, "label", 4), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Yb(), i.Zb(10, "div", 2), i.Zb(11, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.requireAll = t
                        })), i.Yb(), i.Zb(12, "label", 4), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 5, "wiredfurni.params.not_requireall")), i.Gb(3), i.tc("ngModel", e.requireAll), i.Gb(2), i.Uc(i.oc(9, 7, "wiredfurni.params.not_requireall.0")), i.Gb(3), i.tc("ngModel", e.requireAll), i.Gb(2), i.Uc(i.oc(14, 9, "wiredfurni.params.not_requireall.1")))
                    },
                    encapsulation: 2
                }), t
            })();
            const XO = i.bc(KO);
            let qO = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                }
                return t.CODE = wO.FURNIS_HAVE_AVATARS, t.NEGATIVE_CODE = wO.FURNI_NOT_HAVE_HABBO, t.\u0275fac = function(e) {
                    return JO(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const JO = i.bc(qO);
            let QO = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4991
                    }
                }
                return t.CODE = wO.STUFF_TYPE_MATCHES, t.NEGATIVE_CODE = wO.NOT_FURNI_IS_OF_TYPE, t.\u0275fac = function(e) {
                    return $O(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const $O = i.bc(QO);
            let ty = (() => {
                class t extends NO {
                    constructor() {
                        super(...arguments), this.requireAll = "0"
                    }
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                    onEditStart(t) {
                        this.requireAll = t.intData.length > 0 && 1 === t.intData[0] ? "1" : "0"
                    }
                    readIntegerParamsFromForm() {
                        return ["1" === this.requireAll ? 1 : 0]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = wO.HAS_STACKED_FURNIS, t.\u0275fac = function(e) {
                    return ey(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 15,
                    vars: 11,
                    consts: [
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        [1, "rs-select_container-radio"],
                        ["type", "radio", "name", "radio", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["type", "radio", "name", "radio", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 2), i.Zb(6, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.requireAll = t
                        })), i.Yb(), i.Zb(7, "label", 4), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Yb(), i.Zb(10, "div", 2), i.Zb(11, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.requireAll = t
                        })), i.Yb(), i.Zb(12, "label", 4), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 5, "wiredfurni.params.requireall")), i.Gb(3), i.tc("ngModel", e.requireAll), i.Gb(2), i.Uc(i.oc(9, 7, "wiredfurni.params.requireall.0")), i.Gb(3), i.tc("ngModel", e.requireAll), i.Gb(2), i.Uc(i.oc(14, 9, "wiredfurni.params.requireall.1")))
                    },
                    encapsulation: 2
                }), t
            })();
            const ey = i.bc(ty);
            let sy = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                    get hasStateSnapshot() {
                        return !0
                    }
                    onEditStart(t) {
                        this.state = t.getBoolean(0), this.direction = t.getBoolean(1), this.position = t.getBoolean(2)
                    }
                    readIntegerParamsFromForm() {
                        return [this.state ? 1 : 0, this.direction ? 1 : 0, this.position ? 1 : 0]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = wO.STATES_MATCH, t.NEGATIVE_CODE = wO.NOT_STATES_MATCH, t.\u0275fac = function(e) {
                    return iy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 23,
                    vars: 15,
                    consts: [
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        [1, "wpanel-select_container2"],
                        [2, "margin-top", "-2px", "float", "left"],
                        ["type", "checkbox", 3, "ngModel", "ngModelChange"],
                        [1, "checkmark2"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "label", 2), i.Zb(6, "p", 3), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Zb(9, "input", 4), i.jc("ngModelChange", (function(t) {
                            return e.state = t
                        })), i.Yb(), i.Vb(10, "span", 5), i.Yb(), i.Zb(11, "label", 2), i.Zb(12, "p", 3), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "input", 4), i.jc("ngModelChange", (function(t) {
                            return e.direction = t
                        })), i.Yb(), i.Vb(16, "span", 5), i.Yb(), i.Zb(17, "label", 2), i.Zb(18, "p", 3), i.Tc(19), i.nc(20, "translate"), i.Yb(), i.Zb(21, "input", 4), i.jc("ngModelChange", (function(t) {
                            return e.position = t
                        })), i.Yb(), i.Vb(22, "span", 5), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 7, "wiredfurni.params.conditions")), i.Gb(4), i.Uc(i.oc(8, 9, "wiredfurni.params.condition.state")), i.Gb(2), i.tc("ngModel", e.state), i.Gb(4), i.Uc(i.oc(14, 11, "wiredfurni.params.condition.direction")), i.Gb(2), i.tc("ngModel", e.direction), i.Gb(4), i.Uc(i.oc(20, 13, "wiredfurni.params.condition.position")), i.Gb(2), i.tc("ngModel", e.position))
                    },
                    encapsulation: 2
                }), t
            })();
            const iy = i.bc(sy);
            let ny = (() => {
                class t extends NO {
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                    onInit() {}
                    onEditStart(t) {}
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = wO.STUFFS_IN_FORMATION, t.NEGATIVE_CODE = wO.NOT_STUFFS_IN_FORMATION, t.\u0275fac = function(e) {
                    return ry(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 2,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Tc(1, "STUFFS_IN_FORMATION"), i.Yb())
                    },
                    encapsulation: 2
                }), t
            })();
            const ry = i.bc(ny);
            let oy = (() => {
                class t extends NO {
                    constructor() {
                        super(...arguments), this.time = 0, this.timeLocale = ""
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.time = t.intData[0] || 1, this.updateLocaleParameter()
                    }
                    readIntegerParamsFromForm() {
                        return [this.time]
                    }
                    onSliderChange() {
                        this.updateLocaleParameter()
                    }
                    decrease() {
                        this.time -= 1, this.time < t.MINIMUM_VALUE && (this.time = t.MINIMUM_VALUE)
                    }
                    increase() {
                        this.time += 1, this.time > t.MAXIMUM_VALUE && (this.time = t.MAXIMUM_VALUE)
                    }
                    updateLocaleParameter() {
                        this.timeLocale = cp.instance.getLocalizationWithParameter("wiredfurni.params.allowbefore", "seconds", UO.getLocaleName(this.time))
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get sliderOptions() {
                        return {
                            floor: t.MINIMUM_VALUE,
                            ceil: t.MAXIMUM_VALUE,
                            step: t.STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.CODE = wO.TIME_ELAPSED_LESS, t.MINIMUM_VALUE = 1, t.MAXIMUM_VALUE = 1200, t.STEPPER_VALUE = 1, t.\u0275fac = function(e) {
                    return ay(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 8,
                    vars: 3,
                    consts: [
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "time", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.Yb(), i.Zb(4, "div", 2), i.Zb(5, "div", 3), i.jc("click", (function() {
                            return e.decrease()
                        })), i.Yb(), i.Zb(6, "ngx-slider", 4), i.jc("valueChange", (function(t) {
                            return e.time = t
                        }))("valueChange", (function() {
                            return e.onSliderChange()
                        })), i.Yb(), i.Zb(7, "div", 5), i.jc("click", (function() {
                            return e.increase()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(e.timeLocale), i.Gb(3), i.tc("options", e.sliderOptions)("value", e.time))
                    },
                    encapsulation: 2
                }), t
            })();
            const ay = i.bc(oy);
            let cy = (() => {
                class t extends oy {
                    get code() {
                        return t.CODE
                    }
                    decrease() {
                        this.time -= 1, this.time < t.MINIMUM_VALUE && (this.time = t.MINIMUM_VALUE)
                    }
                    increase() {
                        this.time += 1, this.time > t.MAXIMUM_VALUE && (this.time = t.MAXIMUM_VALUE)
                    }
                    updateLocaleParameter() {
                        this.timeLocale = cp.instance.getLocalizationWithParameter("wiredfurni.params.allowafter", "seconds", UO.getLocaleName(this.time))
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get sliderOptions() {
                        return {
                            floor: t.MINIMUM_VALUE,
                            ceil: t.MAXIMUM_VALUE,
                            step: t.STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.CODE = wO.TIME_ELAPSED_MORE, t.\u0275fac = function(e) {
                    return _y(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 8,
                    vars: 3,
                    consts: [
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "time", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.Yb(), i.Zb(4, "div", 2), i.Zb(5, "div", 3), i.jc("click", (function() {
                            return e.decrease()
                        })), i.Yb(), i.Zb(6, "ngx-slider", 4), i.jc("valueChange", (function(t) {
                            return e.time = t
                        }))("valueChange", (function() {
                            return e.onSliderChange()
                        })), i.Yb(), i.Zb(7, "div", 5), i.jc("click", (function() {
                            return e.increase()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(e.timeLocale), i.Gb(3), i.tc("options", e.sliderOptions)("value", e.time))
                    },
                    encapsulation: 2
                }), t
            })();
            const _y = i.bc(cy);
            let hy = (() => {
                class t extends NO {
                    constructor() {
                        super(...arguments), this.minUsers = 0, this.maxUsers = 0
                    }
                    get code() {
                        return t.CODE
                    }
                    get negativeCode() {
                        return t.NEGATIVE_CODE
                    }
                    onEditStart(t) {
                        this.minUsers = t.intData[0] || 1, this.maxUsers = t.intData[1] || 50
                    }
                    readIntegerParamsFromForm() {
                        return [this.minUsers, this.maxUsers]
                    }
                    decreaseMin() {
                        this.minUsers -= 1, this.minUsers < t.MINIMUM_VALUE && (this.minUsers = t.MINIMUM_VALUE)
                    }
                    decreaseMax() {
                        this.maxUsers -= 1, this.maxUsers < t.MINIMUM_VALUE && (this.maxUsers = t.MINIMUM_VALUE)
                    }
                    increaseMin() {
                        this.minUsers += 1, this.minUsers > t.MAXIMUM_VALUE && (this.minUsers = t.MAXIMUM_VALUE)
                    }
                    increaseMax() {
                        this.maxUsers += 1, this.maxUsers > t.MAXIMUM_VALUE && (this.maxUsers = t.MAXIMUM_VALUE)
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get sliderOptions() {
                        return {
                            floor: t.MINIMUM_VALUE,
                            ceil: t.MAXIMUM_VALUE,
                            step: t.STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.CODE = wO.USER_COUNT_IN, t.NEGATIVE_CODE = wO.NOT_USER_COUNT_IN, t.MINIMUM_VALUE = 1, t.MAXIMUM_VALUE = 50, t.STEPPER_VALUE = 1, t.\u0275fac = function(e) {
                    return ly(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 17,
                    vars: 14,
                    consts: [
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "minUsers", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"],
                        ["name", "maxUsers", 3, "options", "value", "valueChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 2), i.Zb(6, "div", 3), i.jc("click", (function() {
                            return e.decreaseMin()
                        })), i.Yb(), i.Zb(7, "ngx-slider", 4), i.jc("valueChange", (function(t) {
                            return e.minUsers = t
                        })), i.Yb(), i.Zb(8, "div", 5), i.jc("click", (function() {
                            return e.increaseMin()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Zb(9, "div", 0), i.Zb(10, "p", 1), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Zb(13, "div", 2), i.Zb(14, "div", 3), i.jc("click", (function() {
                            return e.decreaseMax()
                        })), i.Yb(), i.Zb(15, "ngx-slider", 6), i.jc("valueChange", (function(t) {
                            return e.maxUsers = t
                        })), i.Yb(), i.Zb(16, "div", 5), i.jc("click", (function() {
                            return e.increaseMax()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.qc(4, 6, "wiredfurni.params.usercountmin", "value", e.minUsers)), i.Gb(4), i.tc("options", e.sliderOptions)("value", e.minUsers), i.Gb(4), i.Uc(i.qc(12, 10, "wiredfurni.params.usercountmax", "value", e.maxUsers)), i.Gb(4), i.tc("options", e.sliderOptions)("value", e.maxUsers))
                    },
                    encapsulation: 2
                }), t
            })();
            const ly = i.bc(hy);
            class uy {
                _Str_9781(t) {
                    switch (t) {
                        case ZO.CODE:
                        case ZO.NEGATIVE_CODE:
                            return ZO;
                        case qO.CODE:
                        case qO.NEGATIVE_CODE:
                            return qO;
                        case sy.CODE:
                        case sy.NEGATIVE_CODE:
                            return sy;
                        case cy.CODE:
                            return cy;
                        case oy.CODE:
                            return oy;
                        case hy.CODE:
                        case hy.NEGATIVE_CODE:
                            return hy;
                        case GO.CODE:
                        case GO.NEGATIVE_CODE:
                            return GO;
                        case ty.CODE:
                            return ty;
                        case QO.CODE:
                        case QO.NEGATIVE_CODE:
                            return QO;
                        case ny.CODE:
                        case ny.NEGATIVE_CODE:
                            return ny;
                        case PO.CODE:
                        case PO.NEGATIVE_CODE:
                            return PO;
                        case BO.CODE:
                        case BO.NEGATIVE_CODE:
                            return BO;
                        case kO.CODE:
                        case kO.NEGATIVE_CODE:
                            return kO;
                        case KO.CODE:
                            return KO;
                        case WO.CODE:
                            return WO;
                        case LO.CODE:
                            return LO
                    }
                    return null
                }
                _Str_15652(t) {
                    return this._Str_9781(t)
                }
                _Str_14545(t) {
                    return t instanceof Ga
                }
                _Str_1196() {
                    return "condition"
                }
            }
            class dy extends UO {}
            let gy = (() => {
                class t {}
                return t.AVATAR_SAYS_SOMETHING = 0, t.AVATAR_WALKS_ON_FURNI = 1, t.AVATAR_WALKS_OFF_FURNI = 2, t.TRIGGER_ONCE = 3, t.TOGGLE_FURNI = 4, t.TRIGGER_PERIODICALLY = 6, t.AVATAR_ENTERS_ROOM = 7, t.GAME_STARTS = 8, t.GAME_ENDS = 9, t.SCORE_ACHIEVED = 10, t.COLLISION = 11, t.TRIGGER_PERIODICALLY_LONG = 12, t.BOT_REACHED_STUFF = 13, t.BOT_REACHED_AVATAR = 14, t
            })();

            function my(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div"), i.Zb(1, "input", 7), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().keyword = e
                    })), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngModel", t.keyword)
                }
            }
            let py = (() => {
                class t extends dy {
                    constructor() {
                        super(...arguments), this.keyword = "", this.avatar = "0"
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.keyword = t.stringData || "", this.avatar = this.keyword.length > 0 ? "1" : "0"
                    }
                    readStringParamFromForm() {
                        return "1" === this.avatar && this.keyword.length > 0 ? this.keyword : ""
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = gy.AVATAR_ENTERS_ROOM, t.\u0275fac = function(e) {
                    return by(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 16,
                    vars: 12,
                    consts: [
                        [1, "select-trigger-user"],
                        [1, "wired-subheader"],
                        [1, "rs-select_container-radio"],
                        ["type", "radio", "name", "radio", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["type", "radio", "name", "radio", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [4, "ngIf"],
                        ["type", "text", 1, "designated-user-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 2), i.Zb(6, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.avatar = t
                        })), i.Yb(), i.Zb(7, "label", 4), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Yb(), i.Zb(10, "div", 2), i.Zb(11, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.avatar = t
                        })), i.Yb(), i.Zb(12, "label", 4), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Rc(15, my, 2, 1, "div", 6), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 6, "wiredfurni.params.picktriggerer")), i.Gb(3), i.tc("ngModel", e.avatar), i.Gb(2), i.Uc(i.oc(9, 8, "wiredfurni.params.anyavatar")), i.Gb(3), i.tc("ngModel", e.avatar), i.Gb(2), i.Uc(i.oc(14, 10, "wiredfurni.params.certainavatar")), i.Gb(2), i.tc("ngIf", "1" === e.avatar))
                    },
                    encapsulation: 2
                }), t
            })();
            const by = i.bc(py);
            let Ey = (() => {
                class t extends dy {
                    constructor() {
                        super(...arguments), this.keyword = "", this.avatar = "0"
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.keyword = t.stringData || "", this.avatar = t.intData.length > 0 && 1 === t.intData[0] ? "1" : "0"
                    }
                    readIntegerParamsFromForm() {
                        return ["1" === this.avatar ? 1 : 0]
                    }
                    readStringParamFromForm() {
                        return this.keyword
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get username() {
                        return cp.instance.sessionDataManager.userName
                    }
                }
                return t.CODE = gy.AVATAR_SAYS_SOMETHING, t.\u0275fac = function(e) {
                    return fy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 19,
                    vars: 13,
                    consts: [
                        [1, "what-was-said-box"],
                        [1, "wired-subheader"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"],
                        [1, "select-trigger-user"],
                        [1, "rs-select_container-radio"],
                        ["type", "radio", "name", "radio", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["type", "radio", "name", "radio", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.keyword = t
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 3), i.Zb(7, "p", 1), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "div", 4), i.Zb(11, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.avatar = t
                        })), i.Yb(), i.Zb(12, "label", 6), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Zb(15, "div", 4), i.Zb(16, "input", 7), i.jc("ngModelChange", (function(t) {
                            return e.avatar = t
                        })), i.Yb(), i.Zb(17, "label", 6), i.Tc(18), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 7, "wiredfurni.params.whatissaid")), i.Gb(2), i.tc("ngModel", e.keyword), i.Gb(3), i.Uc(i.oc(9, 9, "wiredfurni.params.picktriggerer")), i.Gb(3), i.tc("ngModel", e.avatar), i.Gb(2), i.Uc(i.oc(14, 11, "wiredfurni.params.anyavatar")), i.Gb(3), i.tc("ngModel", e.avatar), i.Gb(2), i.Uc(e.username))
                    },
                    encapsulation: 2
                }), t
            })();
            const fy = i.bc(Ey);
            let Sy = (() => {
                class t extends dy {
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4991
                    }
                }
                return t.CODE = gy.AVATAR_WALKS_OFF_FURNI, t.\u0275fac = function(e) {
                    return Iy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const Iy = i.bc(Sy);
            let Ry = (() => {
                class t extends dy {
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4991
                    }
                }
                return t.CODE = gy.AVATAR_WALKS_ON_FURNI, t.\u0275fac = function(e) {
                    return vy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const vy = i.bc(Ry);
            let Ty = (() => {
                class t extends dy {
                    constructor() {
                        super(...arguments), this.keyword = ""
                    }
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_5431
                    }
                    onEditStart(t) {
                        this.keyword = t.stringData
                    }
                    readStringParamFromForm() {
                        return this.keyword
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = gy.BOT_REACHED_AVATAR, t.\u0275fac = function(e) {
                    return Oy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 6,
                    vars: 4,
                    consts: [
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.keyword = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 2, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.keyword))
                    },
                    encapsulation: 2
                }), t
            })();
            const Oy = i.bc(Ty);
            let yy = (() => {
                class t extends dy {
                    constructor() {
                        super(...arguments), this.keyword = ""
                    }
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4991
                    }
                    onEditStart(t) {
                        this.keyword = t.stringData
                    }
                    readStringParamFromForm() {
                        return this.keyword
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = gy.BOT_REACHED_STUFF, t.\u0275fac = function(e) {
                    return Ay(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 6,
                    vars: 4,
                    consts: [
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.keyword = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 2, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.keyword))
                    },
                    encapsulation: 2
                }), t
            })();
            const Ay = i.bc(yy);
            let Cy = (() => {
                class t extends dy {
                    get code() {
                        return t.CODE
                    }
                }
                return t.CODE = gy.COLLISION, t.\u0275fac = function(e) {
                    return My(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const My = i.bc(Cy);
            let Uy = (() => {
                class t extends dy {
                    get code() {
                        return t.CODE
                    }
                }
                return t.CODE = gy.GAME_ENDS, t.\u0275fac = function(e) {
                    return Dy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const Dy = i.bc(Uy);
            let Ny = (() => {
                class t extends dy {
                    get code() {
                        return t.CODE
                    }
                }
                return t.CODE = gy.GAME_STARTS, t.\u0275fac = function(e) {
                    return wy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const wy = i.bc(Ny);
            let Ly = (() => {
                class t extends dy {
                    constructor() {
                        super(...arguments), this.score = 0
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.score = t.intData[0] || 0
                    }
                    readIntegerParamsFromForm() {
                        return [this.score]
                    }
                    decrease() {
                        this.score -= 1, this.score < t.MINIMUM_VALUE && (this.score = t.MINIMUM_VALUE)
                    }
                    increase() {
                        this.score += 1, this.score > t.MAXIMUM_VALUE && (this.score = t.MAXIMUM_VALUE)
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get sliderOptions() {
                        return {
                            floor: t.MINIMUM_VALUE,
                            ceil: t.MAXIMUM_VALUE,
                            step: t.STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.MINIMUM_VALUE = 1, t.MAXIMUM_VALUE = 1e3, t.STEPPER_VALUE = 1, t.CODE = gy.SCORE_ACHIEVED, t.\u0275fac = function(e) {
                    return xy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 9,
                    vars: 7,
                    consts: [
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "time", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 2), i.Zb(6, "div", 3), i.jc("click", (function() {
                            return e.decrease()
                        })), i.Yb(), i.Zb(7, "ngx-slider", 4), i.jc("valueChange", (function(t) {
                            return e.score = t
                        })), i.Yb(), i.Zb(8, "div", 5), i.jc("click", (function() {
                            return e.increase()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.qc(4, 3, "wiredfurni.params.setscore", "points", e.score)), i.Gb(4), i.tc("options", e.sliderOptions)("value", e.score))
                    },
                    encapsulation: 2
                }), t
            })();
            const xy = i.bc(Ly);
            let Py = (() => {
                class t extends dy {
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_4991
                    }
                }
                return t.CODE = gy.TOGGLE_FURNI, t.\u0275fac = function(e) {
                    return Fy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 0,
                    template: function(t, e) {
                        1 & t && i.Vb(0, "nitro-wired-base-component")
                    },
                    encapsulation: 2
                }), t
            })();
            const Fy = i.bc(Py);
            let Gy = (() => {
                class t extends dy {
                    constructor() {
                        super(...arguments), this.time = 0, this.timeLocale = ""
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.time = t.intData[0] || 1, this.updateLocaleParameter()
                    }
                    readIntegerParamsFromForm() {
                        return [this.time]
                    }
                    onSliderChange() {
                        this.updateLocaleParameter()
                    }
                    decrease() {
                        this.time -= 1, this.time < t.MINIMUM_VALUE && (this.time = t.MINIMUM_VALUE)
                    }
                    increase() {
                        this.time += 1, this.time > t.MAXIMUM_VALUE && (this.time = t.MAXIMUM_VALUE)
                    }
                    updateLocaleParameter() {
                        this.timeLocale = cp.instance.getLocalizationWithParameter("wiredfurni.params.settime", "seconds", UO.getLocaleName(this.time))
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get sliderOptions() {
                        return {
                            floor: t.MINIMUM_VALUE,
                            ceil: t.MAXIMUM_VALUE,
                            step: t.STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.MINIMUM_VALUE = 1, t.MAXIMUM_VALUE = 1200, t.STEPPER_VALUE = 1, t.CODE = gy.TRIGGER_ONCE, t.\u0275fac = function(e) {
                    return Yy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 8,
                    vars: 3,
                    consts: [
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "time", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.Yb(), i.Zb(4, "div", 2), i.Zb(5, "div", 3), i.jc("click", (function() {
                            return e.decrease()
                        })), i.Yb(), i.Zb(6, "ngx-slider", 4), i.jc("valueChange", (function(t) {
                            return e.time = t
                        }))("valueChange", (function() {
                            return e.onSliderChange()
                        })), i.Yb(), i.Zb(7, "div", 5), i.jc("click", (function() {
                            return e.increase()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(e.timeLocale), i.Gb(3), i.tc("options", e.sliderOptions)("value", e.time))
                    },
                    encapsulation: 2
                }), t
            })();
            const Yy = i.bc(Gy);
            let ky = (() => {
                    class t {
                        static format(e, s = "", i = 3) {
                            return e > i * t.YEAR ? t.getLocalization("friendlytime.years" + s, Math.round(e / t.YEAR)) : e > i * t.MONTH ? t.getLocalization("friendlytime.months" + s, Math.round(e / t.MONTH)) : e > i * t.DAY ? t.getLocalization("friendlytime.days" + s, Math.round(e / t.DAY)) : e > i * t.HOUR ? t.getLocalization("friendlytime.hours" + s, Math.round(e / t.HOUR)) : e > i * t.MINUTE ? t.getLocalization("friendlytime.minutes" + s, Math.round(e / t.MINUTE)) : t.getLocalization("friendlytime.seconds" + s, Math.round(e))
                        }
                        static shortFormat(e, s = "", i = 3) {
                            return e > i * t.YEAR ? t.getLocalization("friendlytime.years.short" + s, Math.round(e / t.YEAR)) : e > i * t.MONTH ? t.getLocalization("friendlytime.months.short" + s, Math.round(e / t.MONTH)) : e > i * t.DAY ? t.getLocalization("friendlytime.days.short" + s, Math.round(e / t.DAY)) : e > i * t.HOUR ? t.getLocalization("friendlytime.hours.short" + s, Math.round(e / t.HOUR)) : e > i * t.MINUTE ? t.getLocalization("friendlytime.minutes.short" + s, Math.round(e / t.MINUTE)) : t.getLocalization("friendlytime.seconds.short" + s, Math.round(e))
                        }
                        static getLocalization(t, e) {
                            return cp.instance.getLocalizationWithParameter(t, "amount", e.toString())
                        }
                    }
                    return t.MINUTE = 60, t.HOUR = 60 * t.MINUTE, t.DAY = 24 * t.HOUR, t.WEEK = 7 * t.DAY, t.MONTH = 30 * t.DAY, t.YEAR = 365 * t.DAY, t
                })(),
                Vy = (() => {
                    class t extends Gy {
                        get code() {
                            return t.CODE
                        }
                        increase() {
                            this.time += 1, this.time > t.MAXIMUM_VALUE && (this.time = t.MAXIMUM_VALUE)
                        }
                        get sliderOptions() {
                            return {
                                floor: t.MINIMUM_VALUE,
                                ceil: t.MAXIMUM_VALUE,
                                step: t.STEPPER_VALUE,
                                hidePointerLabels: !0,
                                hideLimitLabels: !0
                            }
                        }
                    }
                    return t.MAXIMUM_VALUE = 120, t.CODE = gy.TRIGGER_PERIODICALLY, t.\u0275fac = function(e) {
                        return Zy(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["ng-component"]
                        ],
                        features: [i.Db],
                        decls: 8,
                        vars: 3,
                        consts: [
                            [1, "wiredrange-box"],
                            [1, "wired-subheader"],
                            [1, "wiredrange_box"],
                            [1, "decrease-number", 3, "click"],
                            ["name", "time", 3, "options", "value", "valueChange"],
                            [1, "increase-number", 3, "click"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.Yb(), i.Zb(4, "div", 2), i.Zb(5, "div", 3), i.jc("click", (function() {
                                return e.decrease()
                            })), i.Yb(), i.Zb(6, "ngx-slider", 4), i.jc("valueChange", (function(t) {
                                return e.time = t
                            }))("valueChange", (function() {
                                return e.onSliderChange()
                            })), i.Yb(), i.Zb(7, "div", 5), i.jc("click", (function() {
                                return e.increase()
                            })), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(e.timeLocale), i.Gb(3), i.tc("options", e.sliderOptions)("value", e.time))
                        },
                        encapsulation: 2
                    }), t
                })();
            const Zy = i.bc(Vy);
            let jy = (() => {
                class t extends Vy {
                    get code() {
                        return t.CODE
                    }
                    updateLocaleParameter() {
                        this.timeLocale = cp.instance.getLocalizationWithParameter("wiredfurni.params.setlongtime", "time", ky.format(5 * this.time))
                    }
                }
                return t.CODE = gy.TRIGGER_PERIODICALLY_LONG, t.\u0275fac = function(e) {
                    return By(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 8,
                    vars: 3,
                    consts: [
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "time", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-base-component"), i.Zb(1, "div", 0), i.Zb(2, "p", 1), i.Tc(3), i.Yb(), i.Zb(4, "div", 2), i.Zb(5, "div", 3), i.jc("click", (function() {
                            return e.decrease()
                        })), i.Yb(), i.Zb(6, "ngx-slider", 4), i.jc("valueChange", (function(t) {
                            return e.time = t
                        }))("valueChange", (function() {
                            return e.onSliderChange()
                        })), i.Yb(), i.Zb(7, "div", 5), i.jc("click", (function() {
                            return e.increase()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(e.timeLocale), i.Gb(3), i.tc("options", e.sliderOptions)("value", e.time))
                    },
                    encapsulation: 2
                }), t
            })();
            const By = i.bc(jy);
            class Hy {
                _Str_9781(t) {
                    switch (t) {
                        case Ey.CODE:
                            return Ey;
                        case Ry.CODE:
                            return Ry;
                        case Sy.CODE:
                            return Sy;
                        case Gy.CODE:
                            return Gy;
                        case Py.CODE:
                            return Py;
                        case Vy.CODE:
                            return Vy;
                        case py.CODE:
                            return py;
                        case Ny.CODE:
                            return Ny;
                        case Uy.CODE:
                            return Uy;
                        case Ly.CODE:
                            return Ly;
                        case Cy.CODE:
                            return Cy;
                        case jy.CODE:
                            return jy;
                        case yy.CODE:
                            return yy;
                        case Ty.CODE:
                            return Ty
                    }
                    return null
                }
                _Str_15652(t) {
                    return this._Str_9781(t)
                }
                _Str_14545(t) {
                    return t instanceof Va
                }
                _Str_1196() {
                    return "trigger"
                }
            }
            let Wy = (() => {
                    class t {}
                    return t.TOGGLE_FURNI_STATE = 0, t.RESET = 1, t.SET_FURNI_STATE = 3, t.MOVE_FURNI = 4, t.GIVE_SCORE = 6, t.CHAT = 7, t.TELEPORT = 8, t.JOIN_TEAM = 9, t.LEAVE_TEAM = 10, t.CHASE = 11, t.FLEE = 12, t.MOVE_TO_DIRECTION = 13, t.GIVE_SCORE_TO_PREDEFINED_TEAM = 14, t.TOGGLE_TO_RANDOM_STATE = 15, t.MOVE_FURNI_TO = 16, t.GIVE_REWARD = 17, t.CALL_ANOTHER_STACK = 18, t.KICK_FROM_ROOM = 19, t.MUTE_USER = 20, t.BOT_TELEPORT = 21, t.BOT_MOVE = 22, t.BOT_TALK = 23, t.BOT_GIVE_HAND_ITEM = 24, t.BOT_FOLLOW_AVATAR = 25, t.BOT_CHANGE_FIGURE = 26, t.BOT_TALK_DIRECT_TO_AVTR = 27, t
                })(),
                zy = (() => {
                    class t extends DO {
                        constructor() {
                            super(...arguments), this.defaultFigure = "hd-180-1.ch-210-66.lg-270-82.sh-290-81"
                        }
                        get code() {
                            return t.CODE
                        }
                        onEditStart(e) {
                            const s = e.stringData.split(t.DELIMETER);
                            s.length > 0 && (this.botName = s[0]), s.length > 1 && (this.figure = s[1].length > 0 ? s[1] : this.defaultFigure), super.onEditStart(e)
                        }
                        readStringParamFromForm() {
                            return this.botName + t.DELIMETER + this.figure
                        }
                        get hasSpecialInputs() {
                            return !0
                        }
                        get requiresFurni() {
                            return JA._Str_5431
                        }
                        copyLook() {
                            this.figure = cp.instance.sessionDataManager.figure
                        }
                    }
                    return t.CODE = Wy.BOT_CHANGE_FIGURE, t.DELIMETER = "\t", t.\u0275fac = function(e) {
                        return Ky(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["ng-component"]
                        ],
                        features: [i.Db],
                        decls: 13,
                        vars: 10,
                        consts: [
                            [3, "delay", "delayChange"],
                            [1, "wired-options-box"],
                            [1, "wired-subheader"],
                            ["type", "text", "maxlength", "32", 1, "wpanel-input", 3, "ngModel", "ngModelChange"],
                            [1, "wiredavatar"],
                            ["nitro-avatar-image", "", 3, "figure", "direction"],
                            [1, "wiredavatar-buton"],
                            ["type", "button", 1, "wabuttonbox", 3, "click"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                                return e.delay = t
                            })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                                return e.botName = t
                            })), i.Yb(), i.Yb(), i.Zb(6, "div", 1), i.Zb(7, "div", 4), i.Vb(8, "div", 5), i.Yb(), i.Zb(9, "div", 6), i.Zb(10, "button", 7), i.jc("click", (function() {
                                return e.copyLook()
                            })), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 6, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.botName), i.Gb(3), i.tc("figure", e.figure)("direction", 2), i.Gb(3), i.Uc(i.oc(12, 8, "wiredfurni.params.capture.figure")))
                        },
                        encapsulation: 2
                    }), t
                })();
            const Ky = i.bc(zy);
            let Xy = (() => {
                class t extends DO {
                    constructor() {
                        super(...arguments), this.followMode = "0"
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.botName = t.stringData, this.followMode = t.intData.length > 0 ? t.intData[0].toString() : "0", super.onEditStart(t)
                    }
                    readStringParamFromForm() {
                        return this.botName
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.followMode)]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = Wy.BOT_FOLLOW_AVATAR, t.\u0275fac = function(e) {
                    return qy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 17,
                    vars: 13,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", "maxlength", "32", 1, "wpanel-input", 3, "ngModel", "ngModelChange"],
                        [1, "rs-select_container-radio"],
                        ["type", "radio", "name", "radio", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["type", "radio", "name", "radio", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "wired_hr"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.botName = t
                        })), i.Yb(), i.Zb(6, "div", 4), i.Zb(7, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.followMode = t
                        })), i.Yb(), i.Zb(8, "label", 6), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Yb(), i.Zb(11, "div", 4), i.Zb(12, "input", 7), i.jc("ngModelChange", (function(t) {
                            return e.followMode = t
                        })), i.Yb(), i.Zb(13, "label", 6), i.Tc(14), i.nc(15, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Vb(16, "div", 8), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 7, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.botName), i.Gb(2), i.tc("ngModel", e.followMode), i.Gb(2), i.Uc(i.oc(10, 9, "wiredfurni.params.start.following")), i.Gb(3), i.tc("ngModel", e.followMode), i.Gb(2), i.Uc(i.oc(15, 11, "wiredfurni.params.stop.following")))
                    },
                    encapsulation: 2
                }), t
            })();
            const qy = i.bc(Xy);
            let Jy = (() => {
                class t extends DO {
                    constructor() {
                        super(...arguments), this.allowedHanditemIds = ["2", "5", "7", "8", "9", "10", "27"], this.handitemId = "0"
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.botName = t.stringData, this.handitemId = t.intData.length > 0 && this.allowedHanditemIds.includes(t.intData[0].toString()) ? t.intData[0].toString() : "0", super.onEditStart(t)
                    }
                    readStringParamFromForm() {
                        return this.botName
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.handitemId)]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = Wy.BOT_GIVE_HAND_ITEM, t.\u0275fac = function(e) {
                    return Qy(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 35,
                    vars: 41,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", "maxlength", "32", 1, "wpanel-input", 3, "ngModel", "ngModelChange"],
                        [1, "wiredselectbox", 3, "ngModel", "ngModelChange"],
                        ["value", "0", 3, "selected"],
                        ["value", "2", 3, "selected"],
                        ["value", "5", 3, "selected"],
                        ["value", "7", 3, "selected"],
                        ["value", "8", 3, "selected"],
                        ["value", "9", 3, "selected"],
                        ["value", "10", 3, "selected"],
                        ["value", "27", 3, "selected"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.botName = t
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 1), i.Zb(7, "p", 2), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "select", 4), i.jc("ngModelChange", (function(t) {
                            return e.handitemId = t
                        })), i.Zb(11, "option", 5), i.Tc(12), i.nc(13, "translate"), i.Yb(), i.Zb(14, "option", 6), i.Tc(15), i.nc(16, "translate"), i.Yb(), i.Zb(17, "option", 7), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Zb(20, "option", 8), i.Tc(21), i.nc(22, "translate"), i.Yb(), i.Zb(23, "option", 9), i.Tc(24), i.nc(25, "translate"), i.Yb(), i.Zb(26, "option", 10), i.Tc(27), i.nc(28, "translate"), i.Yb(), i.Zb(29, "option", 11), i.Tc(30), i.nc(31, "translate"), i.Yb(), i.Zb(32, "option", 12), i.Tc(33), i.nc(34, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 21, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.botName), i.Gb(3), i.Uc(i.oc(9, 23, "wiredfurni.params.handitem")), i.Gb(2), i.tc("ngModel", e.handitemId), i.Gb(1), i.tc("selected", "0" == e.handitemId), i.Gb(1), i.Uc(i.oc(13, 25, "wiredfurni.tooltip.handitem")), i.Gb(2), i.tc("selected", "2" == e.handitemId), i.Gb(1), i.Uc(i.oc(16, 27, "handitem2")), i.Gb(2), i.tc("selected", "5" == e.handitemId), i.Gb(1), i.Uc(i.oc(19, 29, "handitem5")), i.Gb(2), i.tc("selected", "7" == e.handitemId), i.Gb(1), i.Uc(i.oc(22, 31, "handitem7")), i.Gb(2), i.tc("selected", "8" == e.handitemId), i.Gb(1), i.Uc(i.oc(25, 33, "handitem8")), i.Gb(2), i.tc("selected", "9" == e.handitemId), i.Gb(1), i.Uc(i.oc(28, 35, "handitem9")), i.Gb(2), i.tc("selected", "10" == e.handitemId), i.Gb(1), i.Uc(i.oc(31, 37, "handitem10")), i.Gb(2), i.tc("selected", "27" == e.handitemId), i.Gb(1), i.Uc(i.oc(34, 39, "handitem27")))
                    },
                    encapsulation: 2
                }), t
            })();
            const Qy = i.bc(Jy);
            let $y = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.botName = t.stringData, super.onEditStart(t)
                    }
                    readStringParamFromForm() {
                        return this.botName
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                }
                return t.CODE = Wy.BOT_MOVE, t.\u0275fac = function(e) {
                    return tA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 6,
                    vars: 5,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", "maxlength", "32", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.botName = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 3, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.botName))
                    },
                    encapsulation: 2
                }), t
            })();
            const tA = i.bc($y);
            let eA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(e) {
                        const s = e.stringData.split(t.DELIMETER);
                        this.botName = s.length >= 1 ? s[0] : "", this.message = 2 == s.length ? s[1] : "", this.mode = e.intData.length > 0 ? e.intData[0].toString() : "0", super.onEditStart(e)
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get requiresFurni() {
                        return JA._Str_5431
                    }
                    readStringParamFromForm() {
                        return this.botName + t.DELIMETER + this.message
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.mode)]
                    }
                }
                return t.CODE = Wy.BOT_TALK_DIRECT_TO_AVTR, t.DELIMETER = "\t", t.\u0275fac = function(e) {
                    return sA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 21,
                    vars: 17,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", "maxlength", "32", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.botName = t
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 1), i.Zb(7, "p", 2), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.message = t
                        })), i.Yb(), i.Yb(), i.Zb(11, "div", 1), i.Zb(12, "p", 2), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.mode = t
                        })), i.Yb(), i.Yb(), i.Zb(16, "div", 1), i.Zb(17, "p", 2), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Zb(20, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.mode = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 9, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.botName), i.Gb(3), i.Uc(i.oc(9, 11, "wiredfurni.params.message")), i.Gb(2), i.tc("ngModel", e.message), i.Gb(3), i.Uc(i.oc(14, 13, "wiredfurni.params.whisper")), i.Gb(2), i.tc("ngModel", e.mode), i.Gb(3), i.Uc(i.oc(19, 15, "wiredfurni.params.talk")), i.Gb(2), i.tc("ngModel", e.mode))
                    },
                    encapsulation: 2
                }), t
            })();
            const sA = i.bc(eA);
            let iA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(e) {
                        const s = e.stringData.split(t.DELIMETER);
                        this.botName = s.length >= 1 ? s[0] : "", this.message = 2 == s.length ? s[1] : "", this.mode = e.intData.length > 0 ? e.intData[0].toString() : "0", super.onEditStart(e)
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get requiresFurni() {
                        return JA._Str_5431
                    }
                    readStringParamFromForm() {
                        return this.botName + t.DELIMETER + this.message
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.mode)]
                    }
                }
                return t.CODE = Wy.BOT_TALK, t.DELIMETER = "\t", t.\u0275fac = function(e) {
                    return nA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 21,
                    vars: 17,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", "maxlength", "32", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.botName = t
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 1), i.Zb(7, "p", 2), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.message = t
                        })), i.Yb(), i.Yb(), i.Zb(11, "div", 1), i.Zb(12, "p", 2), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.mode = t
                        })), i.Yb(), i.Yb(), i.Zb(16, "div", 1), i.Zb(17, "p", 2), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Zb(20, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.mode = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 9, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.botName), i.Gb(3), i.Uc(i.oc(9, 11, "wiredfurni.params.message")), i.Gb(2), i.tc("ngModel", e.message), i.Gb(3), i.Uc(i.oc(14, 13, "wiredfurni.params.talk")), i.Gb(2), i.tc("ngModel", e.mode), i.Gb(3), i.Uc(i.oc(19, 15, "wiredfurni.params.shout")), i.Gb(2), i.tc("ngModel", e.mode))
                    },
                    encapsulation: 2
                }), t
            })();
            const nA = i.bc(iA);
            let rA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.botName = t.stringData, super.onEditStart(t)
                    }
                    readStringParamFromForm() {
                        return this.botName
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                }
                return t.CODE = Wy.BOT_TELEPORT, t.\u0275fac = function(e) {
                    return oA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 6,
                    vars: 5,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", "maxlength", "32", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.botName = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 3, "wiredfurni.params.bot.name")), i.Gb(2), i.tc("ngModel", e.botName))
                    },
                    encapsulation: 2
                }), t
            })();
            const oA = i.bc(rA);
            let aA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_5430
                    }
                }
                return t.CODE = Wy.CALL_ANOTHER_STACK, t.\u0275fac = function(e) {
                    return cA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "delay", "delayChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Yb()), 2 & t && i.tc("delay", e.delay)
                    },
                    encapsulation: 2
                }), t
            })();
            const cA = i.bc(aA);
            let _A = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_5430
                    }
                }
                return t.CODE = Wy.CHASE, t.\u0275fac = function(e) {
                    return hA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "delay", "delayChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Yb()), 2 & t && i.tc("delay", e.delay)
                    },
                    encapsulation: 2
                }), t
            })();
            const hA = i.bc(_A);
            let lA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    readStringParamFromForm() {
                        return this.message
                    }
                    onEditStart(t) {
                        this.message = t.stringData, super.onEditStart(t)
                    }
                    validate() {
                        return this.message.length > 100 ? cp.instance.localization.getValue("wiredfurni.chatmsgtoolong", !1) : null
                    }
                }
                return t.CODE = Wy.CHAT, t.\u0275fac = function(e) {
                    return uA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 6,
                    vars: 5,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.message = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 3, "wiredfurni.params.message")), i.Gb(2), i.tc("ngModel", e.message))
                    },
                    encapsulation: 2
                }), t
            })();
            const uA = i.bc(lA);
            let dA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_5430
                    }
                }
                return t.CODE = Wy.FLEE, t.\u0275fac = function(e) {
                    return gA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "delay", "delayChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Yb()), 2 & t && i.tc("delay", e.delay)
                    },
                    encapsulation: 2
                }), t
            })();
            const gA = i.bc(dA);

            function mA(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 17), i.Zb(1, "div", 18), i.Zb(2, "div", 19), i.jc("click", (function() {
                        return i.Gc(t), i.mc().decreaseLimit()
                    })), i.Yb(), i.Zb(3, "ngx-slider", 20), i.jc("valueChange", (function(e) {
                        return i.Gc(t), i.mc().rewardsLimit = e
                    })), i.Yb(), i.Zb(4, "div", 21), i.jc("click", (function() {
                        return i.Gc(t), i.mc().increaseLimit()
                    })), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.tc("options", t.limitSliderOptions)("value", t.rewardsLimit)
                }
            }

            function pA(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 6), i.Zb(1, "p", 7), i.Tc(2, "Interval value"), i.Yb(), i.Zb(3, "input", 22), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().limitationInterval = e
                    })), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.tc("ngModel", t.limitationInterval)
                }
            }

            function bA(t, e) {
                1 & t && (i.Zb(0, "td"), i.Zb(1, "small"), i.Tc(2, "Probability"), i.Yb(), i.Yb())
            }

            function EA(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "td"), i.Zb(1, "input", 24), i.jc("ngModelChange", (function(e) {
                        i.Gc(t);
                        const s = i.mc().index;
                        return i.mc().rewardRows[s].probability = e
                    })), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc().index,
                        e = i.mc();
                    i.Gb(1), i.tc("ngModel", e.rewardRows[t].probability)
                }
            }

            function fA(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "tr"), i.Zb(1, "td"), i.Zb(2, "input", 23), i.jc("ngModelChange", (function(s) {
                        i.Gc(t);
                        const n = e.index;
                        return i.mc().rewardRows[n].badge = s
                    })), i.Yb(), i.Yb(), i.Zb(3, "td"), i.Zb(4, "input", 24), i.jc("ngModelChange", (function(s) {
                        i.Gc(t);
                        const n = e.index;
                        return i.mc().rewardRows[n].itemCode = s
                    })), i.Yb(), i.Yb(), i.Rc(5, EA, 2, 1, "td", 13), i.Yb()
                }
                if (2 & t) {
                    const t = e.index,
                        s = i.mc();
                    i.Gb(2), i.tc("ngModel", s.rewardRows[t].badge), i.Gb(2), i.tc("ngModel", s.rewardRows[t].itemCode), i.Gb(1), i.tc("ngIf", 0 == s.uniqueRewards)
                }
            }
            let SA = (() => {
                class t extends DO {
                    constructor() {
                        super(...arguments), this.SETTING_ONCE = "0", this.SETTING_N_MINS = "3", this.SETTING_N_HOURS = "2", this.SETTING_N_DAYS = "1", this.limitationInterval = "1", this.uniqueRewards = !1, this.rewardRows = []
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        if (this.rewardTime = (t.intData.length > 0 ? t.intData[0] : 0).toString(), this.uniqueRewards = t.intData.length > 1 && 1 == t.intData[1], this.rewardsLimit = t.intData.length > 2 ? t.intData[2] : 0, this.limitationInterval = t.intData.length > 3 ? t.intData[3].toString() : "", this.limitEnabled = this.limitationInterval.length > 0, t.stringData.length > 0 && t.stringData.includes(";") && t.stringData.split(";").forEach(t => {
                                if (t.length > 0 && t.includes(",")) {
                                    const e = t.split(",");
                                    3 == e.length && this.rewardRows.push({
                                        badge: "0" == e[0],
                                        itemCode: e[1],
                                        probability: e[2]
                                    })
                                }
                            }), this.rewardRows.length < 4)
                            for (let e = this.rewardRows.length; e < 4; e++) this.rewardRows.push({
                                badge: !1,
                                itemCode: "",
                                probability: ""
                            });
                        super.onEditStart(t)
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.rewardTime), this.uniqueRewards ? 1 : 0, this.rewardsLimit, Number.parseInt(this.limitationInterval)]
                    }
                    readStringParamFromForm() {
                        let t = "";
                        for (let e = 0; e < this.rewardRows.length; e++) {
                            const s = this.rewardRows[e];
                            "" != s.itemCode && (t = t + ("" == t ? "" : ";") + [s.badge ? 0 : 1, s.itemCode, s.probability.toString()].join(","))
                        }
                        return t
                    }
                    decreaseLimit() {
                        this.rewardsLimit -= 1, this.rewardsLimit < t.LIMIT_MINIMUM_VALUE && (this.rewardsLimit = t.LIMIT_MINIMUM_VALUE)
                    }
                    increaseLimit() {
                        this.rewardsLimit += 1, this.rewardsLimit > t.LIMIT_MAXIMUM_VALUE && (this.rewardsLimit = t.LIMIT_MAXIMUM_VALUE)
                    }
                    increaseRewardsCount() {
                        this.rewardRows.push({
                            badge: !1,
                            itemCode: "",
                            probability: ""
                        })
                    }
                    get limitSliderOptions() {
                        return {
                            floor: t.LIMIT_MINIMUM_VALUE,
                            ceil: t.LIMIT_MAXIMUM_VALUE,
                            step: t.LIMIT_STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                    get hasIntervalValue() {
                        return this.rewardTime == this.SETTING_N_DAYS || this.rewardTime == this.SETTING_N_HOURS || this.rewardTime == this.SETTING_N_MINS
                    }
                    validate() {
                        let t = 0;
                        if (this.limitationInterval.trim().length > 0 && isNaN(Number.parseInt(this.limitationInterval))) return "The interval value has to be a number.";
                        for (let e = 0; e < this.rewardRows.length; e++) {
                            const s = this.rewardRows[e];
                            if (0 != s.itemCode.trim().length || 0 != s.probability.trim().length) {
                                if (s.itemCode.includes(",")) return "Product/badge codes must not contain ',' characters.";
                                if (s.itemCode.includes(";")) return "Product/badge codes must not contain ';' characters.";
                                if (s.itemCode.length > 100) return "Product/badge codes cannot contain more than 100 characters.";
                                if ("" == s.itemCode) return "Remember to define product/badge codes for all rewards (fill all fields or leave all fields empty).";
                                if (!this.uniqueRewards) {
                                    if ("" == s.probability) return "Remember to define probabilities for all rewards (fill all fields or leave all fields empty).";
                                    const e = Number.parseInt(s.probability);
                                    if (isNaN(e)) return "Make sure all probabilities are numbers.";
                                    if (e < 1 || e > 100) return "Make sure all probabilities are numbers between 1 and 100.";
                                    t += e
                                }
                            }
                        }
                        return t > 100 ? `The sum of probabilities cannot exceed 100. You now have ${t}.` : null
                    }
                }
                return t.LIMIT_MINIMUM_VALUE = 1, t.LIMIT_MAXIMUM_VALUE = 1e3, t.LIMIT_STEPPER_VALUE = 1, t.CODE = Wy.GIVE_REWARD, t.\u0275fac = function(e) {
                    return IA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 47,
                    vars: 23,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "rs-select_container-radio"],
                        ["type", "checkbox", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        [1, "wired_hr"],
                        ["class", "wiredrange-box", 4, "ngIf"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        [1, "wiredselectbox", 3, "ngModel", "ngModelChange"],
                        [3, "value", "selected"],
                        ["class", "wired-options-box", 4, "ngIf"],
                        [1, "form-row", "mb-2"],
                        [2, "min-height", "200px", "max-height", "200px"],
                        [4, "ngIf"],
                        [4, "ngFor", "ngForOf"],
                        ["type", "button", 1, "btn", "btn-primary", "btn-sm", "mb-2", 3, "click"],
                        [1, "fas", "fa-plus"],
                        [1, "wiredrange-box"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "limit", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"],
                        ["type", "checkbox", 3, "ngModel", "ngModelChange"],
                        ["type", "text", 1, "form-control", "form-control-sm", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.limitEnabled = t
                        })), i.Yb(), i.Zb(3, "label", 3), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Yb(), i.Vb(6, "div", 4), i.Rc(7, mA, 5, 2, "div", 5), i.Vb(8, "div", 4), i.Zb(9, "div", 6), i.Zb(10, "p", 7), i.Tc(11, "How often can a user be rewarded"), i.Yb(), i.Zb(12, "select", 8), i.jc("ngModelChange", (function(t) {
                            return e.rewardTime = t
                        })), i.Zb(13, "option", 9), i.Tc(14, "Once"), i.Yb(), i.Zb(15, "option", 9), i.Tc(16, "1/n minutes"), i.Yb(), i.Zb(17, "option", 9), i.Tc(18, "1/n hours"), i.Yb(), i.Zb(19, "option", 9), i.Tc(20, "1/n days"), i.Yb(), i.Yb(), i.Yb(), i.Vb(21, "div", 4), i.Rc(22, pA, 4, 1, "div", 10), i.Vb(23, "div", 4), i.Zb(24, "div", 1), i.Zb(25, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.uniqueRewards = t
                        })), i.Yb(), i.Zb(26, "label", 3), i.Tc(27, "Unique Rewards"), i.Yb(), i.Yb(), i.Vb(28, "div", 4), i.Zb(29, "div", 6), i.Zb(30, "p", 7), i.Tc(31, "If checked each reward will be given once to each user. This will disable the probabilities option."), i.Yb(), i.Yb(), i.Vb(32, "div", 4), i.Zb(33, "div", 11), i.Zb(34, "perfect-scrollbar", 12), i.Zb(35, "table"), i.Zb(36, "tr"), i.Zb(37, "td"), i.Zb(38, "small"), i.Tc(39, "Badge"), i.Yb(), i.Yb(), i.Zb(40, "td"), i.Zb(41, "small"), i.Tc(42, "Item code"), i.Yb(), i.Yb(), i.Rc(43, bA, 3, 0, "td", 13), i.Yb(), i.Rc(44, fA, 6, 3, "tr", 14), i.Yb(), i.Yb(), i.Yb(), i.Zb(45, "button", 15), i.jc("click", (function() {
                            return e.increaseRewardsCount()
                        })), i.Vb(46, "i", 16), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(2), i.tc("ngModel", e.limitEnabled), i.Gb(2), i.Uc(i.qc(5, 19, "wiredfurni.params.prizelimit", "amount", e.rewardsLimit > 0 ? e.rewardsLimit : "")), i.Gb(3), i.tc("ngIf", e.limitEnabled), i.Gb(5), i.Mb("mb-2", !e.hasIntervalValue), i.tc("ngModel", e.rewardTime), i.Gb(1), i.tc("value", e.SETTING_ONCE)("selected", e.rewardTime == e.SETTING_ONCE), i.Gb(2), i.tc("value", e.SETTING_N_MINS)("selected", e.rewardTime == e.SETTING_N_MINS), i.Gb(2), i.tc("value", e.SETTING_N_HOURS)("selected", e.rewardTime == e.SETTING_N_HOURS), i.Gb(2), i.tc("value", e.SETTING_N_DAYS)("selected", e.rewardTime == e.SETTING_N_DAYS), i.Gb(3), i.tc("ngIf", e.hasIntervalValue), i.Gb(3), i.tc("ngModel", e.uniqueRewards), i.Gb(18), i.tc("ngIf", 0 == e.uniqueRewards), i.Gb(1), i.tc("ngForOf", e.rewardRows))
                    },
                    encapsulation: 2
                }), t
            })();
            const IA = i.bc(SA);
            let RA = (() => {
                class t extends DO {
                    constructor() {
                        super(...arguments), this.points = 1, this.times = 1
                    }
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.points = t.intData.length > 0 ? t.intData[0] : 1, this.times = t.intData.length > 1 ? t.intData[1] : 1, super.onEditStart(t)
                    }
                    readIntegerParamsFromForm() {
                        return [this.points, this.times]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    decreasePoints() {
                        this.points -= 1, this.points < t.MINIMUM_VALUE && (this.points = t.MINIMUM_VALUE)
                    }
                    increasePoints() {
                        this.points += 1, this.points > t.POINTS_MAXIMUM_VALUE && (this.points = t.POINTS_MAXIMUM_VALUE)
                    }
                    decreaseTimes() {
                        this.times -= 1, this.times < t.MINIMUM_VALUE && (this.times = t.MINIMUM_VALUE)
                    }
                    increaseTimes() {
                        this.times += 1, this.times > t.TIMES_MAXIMUM_VALUE && (this.times = t.TIMES_MAXIMUM_VALUE)
                    }
                    get pointsSliderOptions() {
                        return {
                            floor: t.MINIMUM_VALUE,
                            ceil: t.POINTS_MAXIMUM_VALUE,
                            step: t.STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                    get timesSliderOptions() {
                        return {
                            floor: t.MINIMUM_VALUE,
                            ceil: t.TIMES_MAXIMUM_VALUE,
                            step: t.STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.MINIMUM_VALUE = 1, t.STEPPER_VALUE = 1, t.POINTS_MAXIMUM_VALUE = 100, t.TIMES_MAXIMUM_VALUE = 10, t.CODE = Wy.GIVE_SCORE, t.\u0275fac = function(e) {
                    return vA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 19,
                    vars: 15,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "points", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"],
                        [1, "wired_hr"],
                        ["name", "times", 3, "options", "value", "valueChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.Zb(6, "div", 4), i.jc("click", (function() {
                            return e.decreasePoints()
                        })), i.Yb(), i.Zb(7, "ngx-slider", 5), i.jc("valueChange", (function(t) {
                            return e.points = t
                        })), i.Yb(), i.Zb(8, "div", 6), i.jc("click", (function() {
                            return e.increasePoints()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Vb(9, "div", 7), i.Zb(10, "div", 1), i.Zb(11, "p", 2), i.Tc(12), i.nc(13, "translate"), i.Yb(), i.Zb(14, "div", 3), i.Zb(15, "div", 4), i.jc("click", (function() {
                            return e.decreaseTimes()
                        })), i.Yb(), i.Zb(16, "ngx-slider", 8), i.jc("valueChange", (function(t) {
                            return e.times = t
                        })), i.Yb(), i.Zb(17, "div", 6), i.jc("click", (function() {
                            return e.increaseTimes()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Vb(18, "div", 7), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.qc(4, 7, "wiredfurni.params.setpoints", "points", e.points)), i.Gb(4), i.tc("options", e.pointsSliderOptions)("value", e.points), i.Gb(5), i.Uc(i.qc(13, 11, "wiredfurni.params.settimesingame", "times", e.times)), i.Gb(4), i.tc("options", e.timesSliderOptions)("value", e.times))
                    },
                    encapsulation: 2
                }), t
            })();
            const vA = i.bc(RA);
            let TA = (() => {
                class t extends RA {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.team = (t.intData.length > 2 ? t.intData[2] : 1).toString(), super.onEditStart(t)
                    }
                    readIntegerParamsFromForm() {
                        return [this.points, this.times, parseInt(this.team)]
                    }
                }
                return t.CODE = Wy.GIVE_SCORE_TO_PREDEFINED_TEAM, t.\u0275fac = function(e) {
                    return OA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 36,
                    vars: 35,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "points", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"],
                        [1, "wired_hr"],
                        ["name", "times", 3, "options", "value", "valueChange"],
                        [1, "wired-options-box"],
                        [1, "wiredselectbox", 3, "ngModel", "ngModelChange"],
                        ["value", "1", 3, "selected"],
                        ["value", "2", 3, "selected"],
                        ["value", "3", 3, "selected"],
                        ["value", "4", 3, "selected"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.Zb(6, "div", 4), i.jc("click", (function() {
                            return e.decreasePoints()
                        })), i.Yb(), i.Zb(7, "ngx-slider", 5), i.jc("valueChange", (function(t) {
                            return e.points = t
                        })), i.Yb(), i.Zb(8, "div", 6), i.jc("click", (function() {
                            return e.increasePoints()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Vb(9, "div", 7), i.Zb(10, "div", 1), i.Zb(11, "p", 2), i.Tc(12), i.nc(13, "translate"), i.Yb(), i.Zb(14, "div", 3), i.Zb(15, "div", 4), i.jc("click", (function() {
                            return e.decreaseTimes()
                        })), i.Yb(), i.Zb(16, "ngx-slider", 8), i.jc("valueChange", (function(t) {
                            return e.times = t
                        })), i.Yb(), i.Zb(17, "div", 6), i.jc("click", (function() {
                            return e.increaseTimes()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Vb(18, "div", 7), i.Zb(19, "div", 9), i.Zb(20, "p", 2), i.Tc(21), i.nc(22, "translate"), i.Yb(), i.Zb(23, "select", 10), i.jc("ngModelChange", (function(t) {
                            return e.team = t
                        })), i.Zb(24, "option", 11), i.Tc(25), i.nc(26, "translate"), i.Yb(), i.Zb(27, "option", 12), i.Tc(28), i.nc(29, "translate"), i.Yb(), i.Zb(30, "option", 13), i.Tc(31), i.nc(32, "translate"), i.Yb(), i.Zb(33, "option", 14), i.Tc(34), i.nc(35, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.qc(4, 17, "wiredfurni.params.setpoints", "points", e.points)), i.Gb(4), i.tc("options", e.pointsSliderOptions)("value", e.points), i.Gb(5), i.Uc(i.qc(13, 21, "wiredfurni.params.settimesingame", "times", e.times)), i.Gb(4), i.tc("options", e.timesSliderOptions)("value", e.times), i.Gb(5), i.Uc(i.oc(22, 25, "wiredfurni.params.team")), i.Gb(2), i.tc("ngModel", e.team), i.Gb(1), i.tc("selected", "1" == e.team), i.Gb(1), i.Uc(i.oc(26, 27, "wiredfurni.params.team.1")), i.Gb(2), i.tc("selected", "2" == e.team), i.Gb(1), i.Uc(i.oc(29, 29, "wiredfurni.params.team.2")), i.Gb(2), i.tc("selected", "3" == e.team), i.Gb(1), i.Uc(i.oc(32, 31, "wiredfurni.params.team.3")), i.Gb(2), i.tc("selected", "4" == e.team), i.Gb(1), i.Uc(i.oc(35, 33, "wiredfurni.params.team.4")))
                    },
                    encapsulation: 2
                }), t
            })();
            const OA = i.bc(TA);
            let yA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.team = (t.intData.length > 0 ? t.intData[0] : 1).toString(), super.onEditStart(t)
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.team)]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                }
                return t.CODE = Wy.JOIN_TEAM, t.\u0275fac = function(e) {
                    return AA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 18,
                    vars: 21,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        [1, "wiredselectbox", 3, "ngModel", "ngModelChange"],
                        ["value", "1", 3, "selected"],
                        ["value", "2", 3, "selected"],
                        ["value", "3", 3, "selected"],
                        ["value", "4", 3, "selected"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "select", 3), i.jc("ngModelChange", (function(t) {
                            return e.team = t
                        })), i.Zb(6, "option", 4), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Zb(9, "option", 5), i.Tc(10), i.nc(11, "translate"), i.Yb(), i.Zb(12, "option", 6), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "option", 7), i.Tc(16), i.nc(17, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 11, "wiredfurni.params.team")), i.Gb(2), i.tc("ngModel", e.team), i.Gb(1), i.tc("selected", "1" == e.team), i.Gb(1), i.Uc(i.oc(8, 13, "wiredfurni.params.team.1")), i.Gb(2), i.tc("selected", "2" == e.team), i.Gb(1), i.Uc(i.oc(11, 15, "wiredfurni.params.team.2")), i.Gb(2), i.tc("selected", "3" == e.team), i.Gb(1), i.Uc(i.oc(14, 17, "wiredfurni.params.team.3")), i.Gb(2), i.tc("selected", "4" == e.team), i.Gb(1), i.Uc(i.oc(17, 19, "wiredfurni.params.team.4")))
                    },
                    encapsulation: 2
                }), t
            })();
            const AA = i.bc(yA);
            let CA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    readStringParamFromForm() {
                        return this.message
                    }
                    onEditStart(t) {
                        this.message = t.stringData, super.onEditStart(t)
                    }
                    validate() {
                        return this.message.length > 100 ? cp.instance.localization.getValue("wiredfurni.chatmsgtoolong", !1) : null
                    }
                }
                return t.CODE = Wy.KICK_FROM_ROOM, t.\u0275fac = function(e) {
                    return MA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 6,
                    vars: 5,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 3), i.jc("ngModelChange", (function(t) {
                            return e.message = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 3, "wiredfurni.params.message")), i.Gb(2), i.tc("ngModel", e.message))
                    },
                    encapsulation: 2
                }), t
            })();
            const MA = i.bc(CA);
            let UA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                }
                return t.CODE = Wy.LEAVE_TEAM, t.\u0275fac = function(e) {
                    return DA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "delay", "delayChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Yb()), 2 & t && i.tc("delay", e.delay)
                    },
                    encapsulation: 2
                }), t
            })();
            const DA = i.bc(UA);
            let NA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.movement = (t.intData.length > 0 ? t.intData[0] : 0).toString(), this.spacing = t.intData.length > 1 ? t.intData[1] : 1, super.onEditStart(t)
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.movement), this.spacing]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get requiresFurni() {
                        return JA._Str_4991
                    }
                    decreaseSpacing() {
                        this.spacing -= 1, this.spacing < t.SPACING_MINIMUM_VALUE && (this.spacing = t.SPACING_MINIMUM_VALUE)
                    }
                    increaseSpacing() {
                        this.spacing += 1, this.spacing > t.SPACING_MAXIMUM_VALUE && (this.spacing = t.SPACING_MAXIMUM_VALUE)
                    }
                    get spacingSliderOptions() {
                        return {
                            floor: t.SPACING_MINIMUM_VALUE,
                            ceil: t.SPACING_MAXIMUM_VALUE,
                            step: t.SPACING_STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.SPACING_MINIMUM_VALUE = 1, t.SPACING_MAXIMUM_VALUE = 5, t.SPACING_STEPPER_VALUE = 1, t.CODE = Wy.MOVE_FURNI_TO, t.\u0275fac = function(e) {
                    return wA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 30,
                    vars: 15,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange-box"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "spacing", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"],
                        [1, "wired-options-box", 2, "margin-bottom", "5px"],
                        [1, "rs-select_container-radiosmall"],
                        ["type", "radio", "name", "movement", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["src", "/assets/images/wiredpanel/right-up.png"],
                        ["type", "radio", "name", "movement", "value", "2", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/right-down.png"],
                        ["type", "radio", "name", "movement", "value", "4", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/left-down.png"],
                        ["type", "radio", "name", "movement", "value", "6", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/left-up.png"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.Zb(6, "div", 4), i.Zb(7, "div", 5), i.jc("click", (function() {
                            return e.decreaseSpacing()
                        })), i.Yb(), i.Zb(8, "ngx-slider", 6), i.jc("valueChange", (function(t) {
                            return e.spacing = t
                        })), i.Yb(), i.Zb(9, "div", 7), i.jc("click", (function() {
                            return e.increaseSpacing()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Zb(10, "div", 8), i.Zb(11, "p", 2), i.Tc(12), i.nc(13, "translate"), i.Yb(), i.Zb(14, "div", 9), i.Zb(15, "input", 10), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(16, "label", 11), i.Vb(17, "img", 12), i.Yb(), i.Yb(), i.Zb(18, "div", 9), i.Zb(19, "input", 13), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(20, "label", 11), i.Vb(21, "img", 14), i.Yb(), i.Yb(), i.Zb(22, "div", 9), i.Zb(23, "input", 15), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(24, "label", 11), i.Vb(25, "img", 16), i.Yb(), i.Yb(), i.Zb(26, "div", 9), i.Zb(27, "input", 17), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(28, "label", 11), i.Vb(29, "img", 18), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.qc(4, 9, "wiredfurni.params.emptytiles", "tiles", e.spacing)), i.Gb(5), i.tc("options", e.spacingSliderOptions)("value", e.spacing), i.Gb(4), i.Uc(i.oc(13, 13, "wiredfurni.params.startdir")), i.Gb(3), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement))
                    },
                    encapsulation: 2
                }), t
            })();
            const wA = i.bc(NA);
            let LA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.movement = (t.intData.length > 0 ? t.intData[0] : 0).toString(), this.rotation = (t.intData.length > 1 ? t.intData[1] : 0).toString(), super.onEditStart(t)
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.movement), Number.parseInt(this.rotation)]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get requiresFurni() {
                        return JA._Str_5430
                    }
                }
                return t.CODE = Wy.MOVE_FURNI, t.\u0275fac = function(e) {
                    return xA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 65,
                    vars: 34,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box", 2, "margin-bottom", "5px"],
                        [1, "wired-subheader"],
                        [1, "rs-select_container-radio", 2, "margin-top", "2px"],
                        ["type", "radio", "name", "movement", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        [1, "rs-select_container-radiosmall"],
                        ["type", "radio", "name", "movement", "value", "4", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/right-up.png"],
                        ["type", "radio", "name", "movement", "value", "5", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/right-down.png"],
                        ["type", "radio", "name", "movement", "value", "6", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/left-down.png"],
                        ["type", "radio", "name", "movement", "value", "7", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/left-up.png"],
                        ["type", "radio", "name", "movement", "value", "2", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/left-up_right-down.png"],
                        ["type", "radio", "name", "movement", "value", "3", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/left-down_right-up.png"],
                        ["type", "radio", "name", "movement", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/all-directions.png"],
                        [1, "wired_hr"],
                        [1, "wired-options-box"],
                        [1, "rs-select_container-radio", 2, "margin-top", "-2px"],
                        ["type", "radio", "name", "rotation", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "rs-select_container-radio"],
                        ["type", "radio", "name", "rotation", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/clockwise.png", 2, "margin", "3px 4px 3px -2px"],
                        ["type", "radio", "name", "rotation", "value", "2", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/counter_clockwise.png", 2, "margin", "3px 4px 3px -2px"],
                        ["type", "radio", "name", "rotation", "value", "3", 1, "form-check-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.Zb(6, "input", 4), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(7, "label", 5), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Yb(), i.Zb(10, "div", 6), i.Zb(11, "input", 7), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(12, "label", 5), i.Vb(13, "img", 8), i.Yb(), i.Yb(), i.Zb(14, "div", 6), i.Zb(15, "input", 9), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(16, "label", 5), i.Vb(17, "img", 10), i.Yb(), i.Yb(), i.Zb(18, "div", 6), i.Zb(19, "input", 11), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(20, "label", 5), i.Vb(21, "img", 12), i.Yb(), i.Yb(), i.Zb(22, "div", 6), i.Zb(23, "input", 13), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(24, "label", 5), i.Vb(25, "img", 14), i.Yb(), i.Yb(), i.Zb(26, "div", 6), i.Zb(27, "input", 15), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(28, "label", 5), i.Vb(29, "img", 16), i.Yb(), i.Yb(), i.Zb(30, "div", 6), i.Zb(31, "input", 17), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(32, "label", 5), i.Vb(33, "img", 18), i.Yb(), i.Yb(), i.Zb(34, "div", 6), i.Zb(35, "input", 19), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(36, "label", 5), i.Vb(37, "img", 20), i.Yb(), i.Yb(), i.Yb(), i.Vb(38, "div", 21), i.Zb(39, "div", 22), i.Zb(40, "p", 2), i.Tc(41), i.nc(42, "translate"), i.Yb(), i.Zb(43, "div", 23), i.Zb(44, "input", 24), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(45, "label", 5), i.Tc(46), i.nc(47, "translate"), i.Yb(), i.Yb(), i.Zb(48, "div", 25), i.Zb(49, "input", 26), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(50, "label", 5), i.Vb(51, "img", 27), i.Tc(52), i.nc(53, "translate"), i.Yb(), i.Yb(), i.Zb(54, "div", 25), i.Zb(55, "input", 28), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(56, "label", 5), i.Vb(57, "img", 29), i.Tc(58), i.nc(59, "translate"), i.Yb(), i.Yb(), i.Zb(60, "div", 25), i.Zb(61, "input", 30), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(62, "label", 5), i.Tc(63), i.nc(64, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 20, "wiredfurni.params.movefurni")), i.Gb(3), i.tc("ngModel", e.movement), i.Gb(2), i.Uc(i.oc(9, 22, "wiredfurni.params.movefurni.0")), i.Gb(3), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(6), i.Uc(i.oc(42, 24, "wiredfurni.params.rotatefurni")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(47, 26, "wiredfurni.params.rotatefurni.0")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(3), i.Vc(" ", i.oc(53, 28, "wiredfurni.params.rotatefurni.1"), ""), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(3), i.Vc(" ", i.oc(59, 30, "wiredfurni.params.rotatefurni.2"), ""), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(64, 32, "wiredfurni.params.rotatefurni.3")))
                    },
                    encapsulation: 2
                }), t
            })();
            const xA = i.bc(LA);
            let PA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.movement = (t.intData.length > 0 ? t.intData[0] : 0).toString(), this.rotation = (t.intData.length > 1 ? t.intData[1] : 0).toString(), super.onEditStart(t)
                    }
                    readIntegerParamsFromForm() {
                        return [Number.parseInt(this.movement), Number.parseInt(this.rotation)]
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    get requiresFurni() {
                        return JA._Str_5430
                    }
                }
                return t.CODE = Wy.MOVE_TO_DIRECTION, t.\u0275fac = function(e) {
                    return FA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 62,
                    vars: 39,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wired-options-box"],
                        [1, "wired-subheader"],
                        [1, "rs-select_container-radiosmall"],
                        ["type", "radio", "name", "movement", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["src", "/assets/images/wiredpanel/right-up.png"],
                        ["type", "radio", "name", "movement", "value", "2", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/right-down.png"],
                        ["type", "radio", "name", "movement", "value", "4", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/left-down.png"],
                        ["type", "radio", "name", "movement", "value", "6", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["src", "/assets/images/wiredpanel/left-up.png"],
                        [1, "wired_hr"],
                        [1, "rs-select_container-radio"],
                        ["type", "radio", "name", "rotation", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "rotation", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "rotation", "value", "2", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "rotation", "value", "3", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "rotation", "value", "4", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "rotation", "value", "5", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "rotation", "value", "6", 1, "form-check-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.Zb(6, "input", 4), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(7, "label", 5), i.Vb(8, "img", 6), i.Yb(), i.Yb(), i.Zb(9, "div", 3), i.Zb(10, "input", 7), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(11, "label", 5), i.Vb(12, "img", 8), i.Yb(), i.Yb(), i.Zb(13, "div", 3), i.Zb(14, "input", 9), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(15, "label", 5), i.Vb(16, "img", 10), i.Yb(), i.Yb(), i.Zb(17, "div", 3), i.Zb(18, "input", 11), i.jc("ngModelChange", (function(t) {
                            return e.movement = t
                        })), i.Yb(), i.Zb(19, "label", 5), i.Vb(20, "img", 12), i.Yb(), i.Yb(), i.Yb(), i.Vb(21, "div", 13), i.Zb(22, "div", 1), i.Zb(23, "p", 2), i.Tc(24), i.nc(25, "translate"), i.Yb(), i.Zb(26, "div", 14), i.Zb(27, "input", 15), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(28, "label", 5), i.Tc(29), i.nc(30, "translate"), i.Yb(), i.Yb(), i.Zb(31, "div", 14), i.Zb(32, "input", 16), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(33, "label", 5), i.Tc(34), i.nc(35, "translate"), i.Yb(), i.Yb(), i.Zb(36, "div", 14), i.Zb(37, "input", 17), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(38, "label", 5), i.Tc(39), i.nc(40, "translate"), i.Yb(), i.Yb(), i.Zb(41, "div", 14), i.Zb(42, "input", 18), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(43, "label", 5), i.Tc(44), i.nc(45, "translate"), i.Yb(), i.Yb(), i.Zb(46, "div", 14), i.Zb(47, "input", 19), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(48, "label", 5), i.Tc(49), i.nc(50, "translate"), i.Yb(), i.Yb(), i.Zb(51, "div", 14), i.Zb(52, "input", 20), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(53, "label", 5), i.Tc(54), i.nc(55, "translate"), i.Yb(), i.Yb(), i.Zb(56, "div", 14), i.Zb(57, "input", 21), i.jc("ngModelChange", (function(t) {
                            return e.rotation = t
                        })), i.Yb(), i.Zb(58, "label", 5), i.Tc(59), i.nc(60, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Vb(61, "div", 13), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 21, "wiredfurni.params.startdir")), i.Gb(3), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(4), i.tc("ngModel", e.movement), i.Gb(6), i.Uc(i.oc(25, 23, "wiredfurni.params.turn")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(30, 25, "wiredfurni.params.turn.0")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(35, 27, "wiredfurni.params.turn.1")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(40, 29, "wiredfurni.params.turn.2")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(45, 31, "wiredfurni.params.turn.3")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(50, 33, "wiredfurni.params.turn.4")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(55, 35, "wiredfurni.params.turn.5")), i.Gb(3), i.tc("ngModel", e.rotation), i.Gb(2), i.Uc(i.oc(60, 37, "wiredfurni.params.turn.6")))
                    },
                    encapsulation: 2
                }), t
            })();
            const FA = i.bc(PA);
            let GA = (() => {
                class t extends DO {
                    constructor() {
                        super(...arguments), this.length = 0
                    }
                    get code() {
                        return t.CODE
                    }
                    get hasSpecialInputs() {
                        return !0
                    }
                    readStringParamFromForm() {
                        return this.message
                    }
                    readIntegerParamsFromForm() {
                        return [this.length]
                    }
                    onEditStart(t) {
                        this.message = t.stringData, this.length = t.intData.length > 0 ? t.intData[0] : 10, super.onEditStart(t)
                    }
                    validate() {
                        return this.message.length > 100 ? cp.instance.localization.getValue("wiredfurni.chatmsgtoolong", !1) : null
                    }
                    decreaseLength() {
                        this.length -= 1, this.length < t.LENGTH_MINIMUM_VALUE && (this.length = t.LENGTH_MINIMUM_VALUE)
                    }
                    increaseLength() {
                        this.length += 1, this.length > t.LENGTH_MAXIMUM_VALUE && (this.length = t.LENGTH_MAXIMUM_VALUE)
                    }
                    get lengthSliderOptions() {
                        return {
                            floor: t.LENGTH_MINIMUM_VALUE,
                            ceil: t.LENGTH_MAXIMUM_VALUE,
                            step: t.LENGTH_STEPPER_VALUE,
                            hidePointerLabels: !0,
                            hideLimitLabels: !0
                        }
                    }
                }
                return t.LENGTH_MINIMUM_VALUE = 1, t.LENGTH_MAXIMUM_VALUE = 10, t.LENGTH_STEPPER_VALUE = 1, t.CODE = Wy.MUTE_USER, t.\u0275fac = function(e) {
                    return YA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 16,
                    vars: 12,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "wiredrange-box"],
                        [1, "wired-subheader"],
                        [1, "wiredrange_box"],
                        [1, "decrease-number", 3, "click"],
                        ["name", "length", 3, "options", "value", "valueChange"],
                        [1, "increase-number", 3, "click"],
                        [1, "wired_hr"],
                        [1, "wired-options-box"],
                        ["type", "text", 1, "wpanel-input", 3, "ngModel", "ngModelChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 1), i.Zb(6, "div", 3), i.Zb(7, "div", 4), i.jc("click", (function() {
                            return e.decreaseLength()
                        })), i.Yb(), i.Zb(8, "ngx-slider", 5), i.jc("valueChange", (function(t) {
                            return e.length = t
                        })), i.Yb(), i.Zb(9, "div", 6), i.jc("click", (function() {
                            return e.increaseLength()
                        })), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Vb(10, "div", 7), i.Zb(11, "div", 8), i.Zb(12, "p", 2), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "input", 9), i.jc("ngModelChange", (function(t) {
                            return e.message = t
                        })), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.qc(4, 6, "wiredfurni.params.length.minutes", "minutes", e.length)), i.Gb(5), i.tc("options", e.lengthSliderOptions)("value", e.length), i.Gb(5), i.Uc(i.oc(14, 10, "wiredfurni.params.message")), i.Gb(2), i.tc("ngModel", e.message))
                    },
                    encapsulation: 2
                }), t
            })();
            const YA = i.bc(GA);
            let kA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                }
                return t.CODE = Wy.RESET, t.\u0275fac = function(e) {
                    return VA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "delay", "delayChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Yb()), 2 & t && i.tc("delay", e.delay)
                    },
                    encapsulation: 2
                }), t
            })();
            const VA = i.bc(kA);
            let ZA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    onEditStart(t) {
                        this.state = t.getBoolean(0), this.direction = t.getBoolean(1), this.position = t.getBoolean(2), super.onEditStart(t)
                    }
                    readIntegerParamsFromForm() {
                        return [this.state ? 1 : 0, this.direction ? 1 : 0, this.position ? 1 : 0]
                    }
                    get requiresFurni() {
                        return JA._Str_4873
                    }
                    get hasStateSnapshot() {
                        return !0
                    }
                }
                return t.CODE = Wy.SET_FURNI_STATE, t.\u0275fac = function(e) {
                    return jA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 23,
                    vars: 16,
                    consts: [
                        [3, "delay", "delayChange"],
                        [1, "mobi-criteria-to-be-met"],
                        [1, "wired-subheader"],
                        [1, "wpanel-select_container2"],
                        [2, "margin-top", "-2px", "float", "left"],
                        ["type", "checkbox", 3, "ngModel", "ngModelChange"],
                        [1, "checkmark2"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "label", 3), i.Zb(6, "p", 4), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Zb(9, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.state = t
                        })), i.Yb(), i.Vb(10, "span", 6), i.Yb(), i.Zb(11, "label", 3), i.Zb(12, "p", 4), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Zb(15, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.direction = t
                        })), i.Yb(), i.Vb(16, "span", 6), i.Yb(), i.Zb(17, "label", 3), i.Zb(18, "p", 4), i.Tc(19), i.nc(20, "translate"), i.Yb(), i.Zb(21, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.position = t
                        })), i.Yb(), i.Vb(22, "span", 6), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("delay", e.delay), i.Gb(3), i.Uc(i.oc(4, 8, "wiredfurni.params.conditions")), i.Gb(4), i.Uc(i.oc(8, 10, "wiredfurni.params.condition.state")), i.Gb(2), i.tc("ngModel", e.state), i.Gb(4), i.Uc(i.oc(14, 12, "wiredfurni.params.condition.direction")), i.Gb(2), i.tc("ngModel", e.direction), i.Gb(4), i.Uc(i.oc(20, 14, "wiredfurni.params.condition.position")), i.Gb(2), i.tc("ngModel", e.position))
                    },
                    encapsulation: 2
                }), t
            })();
            const jA = i.bc(ZA);
            let BA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_5430
                    }
                }
                return t.CODE = Wy.TELEPORT, t.\u0275fac = function(e) {
                    return HA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "delay", "delayChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Yb()), 2 & t && i.tc("delay", e.delay)
                    },
                    encapsulation: 2
                }), t
            })();
            const HA = i.bc(BA);
            let WA = (() => {
                class t extends DO {
                    get code() {
                        return t.CODE
                    }
                    get requiresFurni() {
                        return JA._Str_5430
                    }
                }
                return t.CODE = Wy.TOGGLE_FURNI_STATE, t.\u0275fac = function(e) {
                    return zA(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 1,
                    vars: 1,
                    consts: [
                        [3, "delay", "delayChange"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "nitro-wired-action-base-component", 0), i.jc("delayChange", (function(t) {
                            return e.delay = t
                        })), i.Yb()), 2 & t && i.tc("delay", e.delay)
                    },
                    encapsulation: 2
                }), t
            })();
            const zA = i.bc(WA);
            class KA {
                _Str_9781(t) {
                    switch (t) {
                        case WA.CODE:
                            return WA;
                        case BA.CODE:
                            return BA;
                        case _A.CODE:
                            return _A;
                        case dA.CODE:
                            return dA;
                        case aA.CODE:
                            return aA;
                        case lA.CODE:
                            return lA;
                        case Jy.CODE:
                            return Jy;
                        case Xy.CODE:
                            return Xy;
                        case UA.CODE:
                            return UA;
                        case kA.CODE:
                            return kA;
                        case CA.CODE:
                            return CA;
                        case rA.CODE:
                            return rA;
                        case ZA.CODE:
                            return ZA;
                        case $y.CODE:
                            return $y;
                        case GA.CODE:
                            return GA;
                        case zy.CODE:
                            return zy;
                        case eA.CODE:
                            return eA;
                        case iA.CODE:
                            return iA;
                        case LA.CODE:
                            return LA;
                        case PA.CODE:
                            return PA;
                        case yA.CODE:
                            return yA;
                        case TA.CODE:
                            return TA;
                        case RA.CODE:
                            return RA;
                        case NA.CODE:
                            return NA;
                        case SA.CODE:
                            return SA
                    }
                    return null
                }
                _Str_15652(t) {
                    return this._Str_9781(t)
                }
                _Str_14545(t) {
                    return t instanceof xa
                }
                _Str_1196() {
                    return "action"
                }
            }
            const XA = ["inputsContainer"];

            function qA(t, e) {}
            let JA = (() => {
                    class t {
                        constructor(t, e, s, i, n) {
                            this._settingsService = t, this._notificationService = e, this._wiredService = s, this._componentFactoryResolver = i, this._ngZone = n, this._updated = null, this._lastComponent = null, this._furniSelectedIds = []
                        }
                        ngOnInit() {
                            this._wiredService.component = this, this._triggerConfs = new Hy, this._actionTypes = new KA, this._conditionTypes = new uy, this._selectionVisualizer = new MO(this)
                        }
                        ngOnDestroy() {
                            this._wiredService.component = null
                        }
                        setupTrigger(t) {
                            this._updated = t;
                            const e = this._Str_3959();
                            this._selectionVisualizer.clearSelectionShaderFromFurni(this._furniSelectedIds), this._furniSelectedIds = [...this._updated.selectedItems], e.onEditStart(this._updated), this._selectionVisualizer.applySelectionShaderToFurni(this._furniSelectedIds)
                        }
                        _Str_19071() {
                            return this._updated instanceof Va ? this._triggerConfs : this._updated instanceof xa ? this._actionTypes : this._updated instanceof Ga ? this._conditionTypes : null
                        }
                        _Str_3959() {
                            const t = this._Str_19071()._Str_15652(this._updated.code);
                            if (!t) return null;
                            if (this._lastComponent && this._lastComponent.instance instanceof t) return this._lastComponent.instance;
                            this.inputsContainer.length && this.inputsContainer.remove();
                            const e = this._componentFactoryResolver.resolveComponentFactory(t);
                            let s = null;
                            return e && (s = this.inputsContainer.createComponent(e)), this._lastComponent = s, s ? (s.instance.onInitStart(), s.instance) : null
                        }
                        close() {
                            this.inputsContainer.length && this.inputsContainer.remove(), this._selectionVisualizer.clearSelectionShaderFromFurni(this._furniSelectedIds), this._updated = null, this._lastComponent = null, this._furniSelectedIds = []
                        }
                        save() {
                            this.isOwnerOfFurniture(this._updated.id) ? this.update() : this._notificationService.alertWithConfirm("${wiredfurni.nonowner.change.confirm.body}", "${wiredfurni.nonowner.change.confirm.title}", () => {
                                this.update()
                            })
                        }
                        update() {
                            const t = this._Str_3959().validate();
                            t ? this._notificationService.alert(t, "Update failed") : this._updated instanceof Va ? cp.instance.communication.connection.send(new Ph(this._updated.id, this.readIntegerParams(), this.readStringParam(), this.readFurniSelectionIds(), this.readFurniSelectionCode())) : this._updated instanceof xa ? cp.instance.communication.connection.send(new Lh(this._updated.id, this.readIntegerParams(), this.readStringParam(), this.readFurniSelectionIds(), this.getActionDelay(), this.readFurniSelectionCode())) : this._updated instanceof Ga && cp.instance.communication.connection.send(new xh(this._updated.id, this.readIntegerParams(), this.readStringParam(), this.readFurniSelectionIds(), this.readFurniSelectionCode()))
                        }
                        getActionDelay() {
                            const t = this._Str_3959();
                            return t && t instanceof DO ? t.delay : 0
                        }
                        readIntegerParams() {
                            const t = this._Str_3959();
                            return t ? t.readIntegerParamsFromForm() : []
                        }
                        readStringParam() {
                            const t = this._Str_3959();
                            return t ? t.readStringParamFromForm() : ""
                        }
                        readFurniSelectionIds() {
                            return [...this._furniSelectedIds]
                        }
                        readFurniSelectionCode() {
                            if (!this._updated._Str_21824) return 0;
                            const e = this._Str_3959();
                            return !e || e.requiresFurni !== t._Str_4991 && e.requiresFurni !== t._Str_5430 ? 0 : this._updated._Str_6040
                        }
                        getFurniName() {
                            const t = this._updated && this._updated.spriteId || -1,
                                e = cp.instance.sessionDataManager.getFloorItemData(t);
                            return e ? e.name : "NAME: " + t
                        }
                        getFurniDescription() {
                            const t = this._updated && this._updated.spriteId || -1,
                                e = cp.instance.sessionDataManager.getFloorItemData(t);
                            return e ? e.description : "NAME: " + t
                        }
                        _Str_19885() {
                            return this._Str_3959().requiresFurni !== t._Str_5431
                        }
                        toggleFurniSelected(t, e) {
                            if (!this._updated || !this._Str_19885()) return;
                            const s = this._furniSelectedIds.indexOf(t);
                            s >= 0 ? (this._furniSelectedIds.splice(s, 1), this._selectionVisualizer.hide(t)) : this._furniSelectedIds.length < this._updated.maximumItemSelectionCount && (this._furniSelectedIds.push(t), this._selectionVisualizer.show(t)), cp.instance.localization.registerParameter("wiredfurni.pickfurnis.caption", "count", this._furniSelectedIds.length.toString())
                        }
                        isOwnerOfFurniture(t) {
                            const e = cp.instance.roomEngine.getRoomObject(this._wiredService.roomId, t, V.FLOOR);
                            return !!e && e.model.getValue(j.FURNITURE_OWNER_ID) === cp.instance.sessionDataManager.userId
                        }
                        get roomId() {
                            return this._wiredService.roomId
                        }
                        get furniSelectedIds() {
                            return this._furniSelectedIds
                        }
                        get maximumItemSelectionCount() {
                            return this._updated.maximumItemSelectionCount
                        }
                    }
                    return t._Str_5431 = 0, t._Str_4873 = 1, t._Str_4991 = 2, t._Str_5430 = 3, t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(_p), i.Ub(xb), i.Ub(Pb), i.Ub(i.l), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-wired-main-component"]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && i.Zc(XA, !0, i.W), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.inputsContainer = t.first)
                            }
                        },
                        decls: 2,
                        vars: 0,
                        consts: [
                            ["inputsContainer", ""]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, qA, 0, 0, "ng-template", null, 0, i.Sc)
                        },
                        encapsulation: 2
                    }), t
                })(),
                QA = (() => {
                    class t {
                        transform(t, e) {
                            if (isNaN(t)) return 0;
                            if (null === t) return 0;
                            if (0 === t) return 0;
                            let s = Math.abs(t);
                            const i = Math.pow(10, 1),
                                n = t < 0;
                            let r = "";
                            const o = [{
                                key: "Q",
                                value: Math.pow(10, 15)
                            }, {
                                key: "T",
                                value: Math.pow(10, 12)
                            }, {
                                key: "B",
                                value: Math.pow(10, 9)
                            }, {
                                key: "M",
                                value: Math.pow(10, 6)
                            }, {
                                key: "K",
                                value: 1e3
                            }];
                            for (let a = 0; a < o.length; a++) {
                                let t = s / o[a].value;
                                if (t = Math.round(t * i) / i, t >= 1) {
                                    s = t, r = o[a].key;
                                    break
                                }
                            }
                            return (n ? "-" : "") + s + r
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275pipe = i.Tb({
                        name: "shortNumber",
                        type: t,
                        pure: !0
                    }), t
                })();
            const $A = function(t, e, s) {
                    return {
                        ordekrenk: t,
                        kredirenk: e,
                        elmasrenk: s
                    }
                },
                tC = function(t, e, s) {
                    return {
                        "pi-ordekrenk": t,
                        "pi-kredirenk": e,
                        "pi-elmasrenk": s
                    }
                },
                eC = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function sC(t, e) {
                if (1 & t && (i.Zb(0, "div", 2), i.Zb(1, "div", 14), i.Tc(2), i.Yb(), i.Zb(3, "div", 15), i.Vb(4, "div", 16), i.Yb(), i.Zb(5, "div", 12), i.Tc(6), i.nc(7, "shortNumber"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit,
                        e = i.mc();
                    i.Gb(1), i.tc("ngClass", i.zc(7, $A, 0 == t.key, -1 == t.key, 5 == t.key)), i.Gb(1), i.Uc(e.getCurrencyName(t.key)), i.Gb(1), i.tc("ngClass", i.zc(11, tC, 0 == t.key, -1 == t.key, 5 == t.key)), i.Gb(1), i.tc("ngStyle", i.xc(15, eC, "url(./assets/images/credibar/" + t.key.toString() + ".png)")), i.Gb(2), i.Uc(i.oc(7, 5, t.value))
                }
            }

            function iC(t, e) {
                if (1 & t && (i.Xb(0), i.Rc(1, sC, 8, 17, "div", 13), i.Wb()), 2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.Gb(1), i.tc("ngIf", s.isVisible(t.key))
                }
            }
            let nC = (() => {
                    class t {
                        constructor(t) {
                            this._purseService = t
                        }
                        ngOnInit() {
                            this._purseService.requestUpdate()
                        }
                        isVisible(t) {
                            return -1 !== this._purseService.visibleCurrencies.indexOf(t)
                        }
                        getCurrencyUrl(t) {
                            return cp.instance.getConfiguration("currency.asset.icon.url").replace("%type%", t)
                        }
                        get currencies() {
                            return this._purseService.currencies
                        }
                        get hcDay() {
                            if (!this._purseService.hcSub) return;
                            const t = ky.shortFormat(60 * this._purseService.hcSub.totalSeconds);
                            return this._purseService.hcSub.totalSeconds ? t : cp.instance.localization.getValue("purse.clubdays.zero.amount.text")
                        }
                        get isReady() {
                            return this._purseService.isReady
                        }
                        getCurrencyName(t) {
                            switch (t) {
                                case -1:
                                    return "Credits";
                                case 0:
                                    return "Duckets";
                                case 5:
                                    return "Diamonds"
                            }
                            return "currency." + t
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(Xv))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-purse-main-component"]
                        ],
                        decls: 18,
                        vars: 4,
                        consts: [
                            [1, "nitro-purse-component", "float-right"],
                            [4, "ngFor", "ngForOf"],
                            [1, "corelo-pursebox"],
                            [1, "cb-help-buton"],
                            [1, "cb-buton-text"],
                            [1, "cb-exit-buton"],
                            ["src", "./assets/images/credibar/cb-exit.png", 1, "cb-buton-ico"],
                            [1, "cb-settings-buton"],
                            ["src", "./assets/images/credibar/cb-settings.png", 1, "cb-buton-ico"],
                            [1, "cpurse-name", "hcrenk"],
                            [1, "purseicon-detail", "pi-hcrenk"],
                            [1, "cp-hcico"],
                            [1, "cpurse-miktar"],
                            ["class", "corelo-pursebox", 4, "ngIf"],
                            [1, "cpurse-name", "kredirenk", 3, "ngClass"],
                            [1, "purseicon-detail", 3, "ngClass"],
                            [1, "currency-icon", 3, "ngStyle"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Rc(1, iC, 2, 1, "ng-container", 1), i.nc(2, "keyvalue"), i.Zb(3, "div", 2), i.Zb(11, "div", 2), i.Zb(12, "div", 9), i.Tc(13, "Habbo Club"), i.Yb(), i.Zb(14, "div", 10), i.Vb(15, "div", 11), i.Yb(), i.Zb(16, "div", 12), i.Tc(17), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(1), i.tc("ngForOf", i.oc(2, 2, e.currencies)), i.Gb(16), i.Uc(e.hcDay))
                        },
                        directives: [hp.m, hp.n, hp.l, hp.o],
                        pipes: [hp.h, QA],
                        encapsulation: 2
                    }), t
                })(),
                rC = (() => {
                    class t {
                        constructor(t) {
                            this._notificationService = t, this.type = null, this.parameters = null, this.removing = !1
                        }
                        hide() {
                            this.removing = !0, setTimeout(() => this.close(), 300)
                        }
                        close() {
                            this._notificationService.closeNotification(this)
                        }
                        interpolate(t, e = null) {
                            e || (e = new RegExp(/%(.*?)%/g));
                            const s = t.match(e);
                            if (s && s.length)
                                for (const i of s) {
                                    const e = this.parameters.get(this.removeInterpolateKey(i));
                                    e && (t = t.replace(i, e))
                                }
                            return t
                        }
                        removeInterpolateKey(t) {
                            return t.replace(/%/g, "")
                        }
                        getDefaultImage() {
                            const t = this.notificationLocaleKey + ".image";
                            let e = cp.instance.getLocalization(t) || null;
                            return e === t ? (e = cp.instance.getConfiguration("image.library.notifications.url"), e = e.replace("%image%", this.type), e) : (e && e.length && (e = this.interpolate(e), e = cp.instance.core.configuration.interpolate(e)), e)
                        }
                        getDefaultLinkTitle() {
                            let t = cp.instance.getLocalization(this.notificationLocaleKey + ".linkTitle") || null;
                            return t && t.length && (t = this.interpolate(t)), t
                        }
                        getDefaultLinkUrl() {
                            let t = cp.instance.getLocalization(this.notificationLocaleKey + ".linkUrl") || null;
                            return t && t.length && (t = this.interpolate(t)), t
                        }
                        getDefaultMessage() {
                            let t = cp.instance.getLocalization(this.notificationLocaleKey + ".message") || null;
                            return t && t.length && (t = this.interpolate(t)), t
                        }
                        getDefaultTitle() {
                            let t = cp.instance.getLocalization(this.notificationLocaleKey + ".title") || null;
                            return t && t.length && (t = this.interpolate(t)), t
                        }
                        get notificationLocaleKey() {
                            return "notification." + this.type
                        }
                        get timeout() {
                            return 0
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(xb))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["ng-component"]
                        ],
                        decls: 0,
                        vars: 0,
                        template: function(t, e) {},
                        encapsulation: 2
                    }), t
                })();
            const oC = function(t) {
                return {
                    "background-image": t
                }
            };

            function aC(t, e) {
                if (1 & t && i.Vb(0, "div", 3), 2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.xc(1, oC, "url(" + t.getDefaultImage() + ")"))
                }
            }
            let cC = (() => {
                class t extends rC {
                    clickNotification() {
                        this.visitUrl(), this.hide()
                    }
                    visitUrl() {
                        const t = this.getDefaultLinkUrl();
                        if (!t || !t.length) return;
                        const e = t.split(":");
                        !e || e.length < 2 || ("event" === e[0] ? cp.instance.createLinkEvent(e[1]) : window.open(t, "_blank"))
                    }
                    getDefaultImage() {
                        let t = this.parameters.get("image") || null;
                        return t ? (t = cp.instance.core.configuration.interpolate(t), t) : super.getDefaultImage()
                    }
                    getDefaultLinkTitle() {
                        let t = this.parameters.get("linkTitle") || null;
                        return t ? (t = cp.instance.getLocalization(t), t) : super.getDefaultLinkTitle()
                    }
                    getDefaultLinkUrl() {
                        return this.parameters.get("linkUrl") || super.getDefaultLinkUrl()
                    }
                    getDefaultMessage() {
                        let t = this.parameters.get("message") || null;
                        return t ? (t = cp.instance.getLocalization(t), t) : super.getDefaultMessage()
                    }
                    getDefaultTitle() {
                        let t = this.parameters.get("title") || null;
                        return t ? (t = cp.instance.getLocalization(t), t) : super.getDefaultTitle()
                    }
                    get timeout() {
                        return 5e3
                    }
                }
                return t.\u0275fac = function(e) {
                    return _C(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 3,
                    vars: 4,
                    consts: [
                        [1, "notification-oldhabbo", 3, "click"],
                        ["class", "notification-resim", 3, "ngStyle", 4, "ngIf"],
                        [1, "notification-mesajyazi", 3, "innerHTML"],
                        [1, "notification-resim", 3, "ngStyle"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.jc("click", (function() {
                            return e.clickNotification()
                        })), i.Rc(1, aC, 1, 3, "div", 1), i.Vb(2, "p", 2), i.Yb()), 2 & t && (i.Mb("removing", e.removing), i.Gb(1), i.tc("ngIf", e.getDefaultImage()), i.Gb(1), i.tc("innerHTML", e.getDefaultMessage(), i.Hc))
                    },
                    directives: [hp.n, hp.o],
                    encapsulation: 2
                }), t
            })();
            const _C = i.bc(cC),
                hC = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function lC(t, e) {
                if (1 & t && i.Vb(0, "div", 7), 2 & t) {
                    const t = i.mc();
                    i.tc("ngStyle", i.xc(1, hC, "url(" + t.getDefaultImage() + ")"))
                }
            }
            let uC = (() => {
                class t extends cC {
                    get timeout() {
                        return 0
                    }
                }
                return t.\u0275fac = function(e) {
                    return dC(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    features: [i.Db],
                    decls: 10,
                    vars: 8,
                    consts: [
                        [1, "d-flex", "flex-column", "justify-content-center", "align-items-center", "nitro-notification-bubble", "bubble-event", "bg-primary", "rounded", "border", "shadow"],
                        [1, "d-flex", "w-100"],
                        [1, "bubble-message", "text-center", "w-100", "mb-0", 3, "innerHTML"],
                        ["class", "bubble-image bg-secondary rounded", 3, "ngStyle", 4, "ngIf"],
                        [1, "d-flex", "btn-group", "w-100", "mt-2"],
                        ["type", "button", 1, "btn", "btn-sm", "btn-secondary", 3, "click"],
                        ["type", "button", 1, "btn", "btn-sm", "btn-success", 3, "click"],
                        [1, "bubble-image", "bg-secondary", "rounded", 3, "ngStyle"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Vb(2, "p", 2), i.Rc(3, lC, 1, 3, "div", 3), i.Yb(), i.Zb(4, "div", 4), i.Zb(5, "button", 5), i.jc("click", (function() {
                            return e.hide()
                        })), i.Tc(6), i.nc(7, "translate"), i.Yb(), i.Zb(8, "button", 6), i.jc("click", (function() {
                            return e.clickNotification()
                        })), i.Tc(9), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Mb("removing", e.removing), i.Gb(2), i.tc("innerHTML", e.getDefaultMessage(), i.Hc), i.Gb(1), i.tc("ngIf", e.getDefaultImage()), i.Gb(3), i.Uc(i.oc(7, 6, "alert.close.button")), i.Gb(3), i.Uc(e.getDefaultLinkTitle()))
                    },
                    directives: [hp.n, hp.o],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const dC = i.bc(uC),
                gC = ["notificationsContainer"];

            function mC(t, e) {}
            let pC = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._notificationService = t, this._componentFactoryResolver = e, this._ngZone = s, this._notifications = new Map
                        }
                        ngOnInit() {
                            this._notificationService.notificationCenter = this
                        }
                        ngOnDestroy() {
                            this.closeAllNotifications(), this._notificationService.notificationCenter = null
                        }
                        displayNotification(t, e) {
                            let s = null;
                            switch (t) {
                                case "hotel.event":
                                    s = uC;
                                    break;
                                default:
                                    s = cC
                            }
                            const i = this.buildNotification(s);
                            return i ? (i.type = t, i.parameters = e, i.timeout > 0 && setTimeout(() => i && i.hide(), i.timeout), i) : null
                        }
                        buildNotification(t) {
                            let e = null;
                            return this._ngZone.run(() => {
                                e = this.createNotificationComponent(t)
                            }), e || null
                        }
                        createNotificationComponent(t) {
                            if (!t) return null;
                            let e = null;
                            const s = this._componentFactoryResolver.resolveComponentFactory(t);
                            let i = null;
                            return s && (i = this.notificationsContainer.createComponent(s), this._notifications.set(i.instance, i)), e = i.instance, e
                        }
                        closeNotification(t) {
                            if (!t) return;
                            const e = this._notifications.get(t);
                            e && (this._notifications.delete(t), this.removeNotificationView(e.hostView))
                        }
                        closeAllNotifications() {
                            for (const t of this._notifications.keys()) this.closeNotification(t)
                        }
                        removeNotificationView(t) {
                            if (!t) return;
                            const e = this.notificationsContainer.indexOf(t); - 1 !== e && this.notificationsContainer.remove(e)
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(xb), i.Ub(i.l), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-notification-center-component"]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && i.Zc(gC, !0, i.W), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.notificationsContainer = t.first)
                            }
                        },
                        decls: 3,
                        vars: 0,
                        consts: [
                            [1, "d-flex", "flex-column-reverse"],
                            ["notificationsContainer", ""]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Rc(1, mC, 0, 0, "ng-template", null, 1, i.Sc), i.Yb())
                        },
                        encapsulation: 2
                    }), t
                })(),
                bC = (() => {
                    class t {
                        constructor(t) {
                            this.sessionService = t
                        }
                        get figure() {
                            return this.sessionService.figure
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(_O))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-hotelview-component"]
                        ],
                        decls: 44,
                        vars: 2,
                        consts: [
                            [1, "hotel-bosluk", 2, "background-image", "url(./assets/images/reception/doublecredit_background_gradient.png)"],
                            [1, "habbo-drape"],
                            [1, "hotel-view-haber-box"],
                            [1, "view-haber"],
                            [1, "hv-haber-gorsel"],
                            ["src", "./assets/images/reception/spromo1.png"],
                            [1, "hv-haber-baslik"],
                            [1, "hv-haber-aciklama"],
                            [1, "view-buton"],
                            [1, "vb-text"],
                            ["src", "./assets/images/reception/spromo2.png"],
                            [1, "hw-haber-ex2"],
                            [1, "bosluk-sol"],
                            ["nitro-avatar-image", "", 1, "hotelview_habbo-avatar", 3, "figure", "direction"],
                            ["src", "./assets/images/reception/doublecredit_2014_background_left.png"],
                            [1, "bosluk-sag"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Vb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Zb(4, "div", 4), i.Vb(5, "img", 5), i.Yb(), i.Zb(6, "div", 6), i.Tc(7, "Texte 1"), i.Yb(), i.Zb(8, "div", 7), i.Tc(9, "text 2"), i.Yb(), i.Zb(10, "div", 8), i.Zb(11, "p", 9), i.Tc(12, "text 3"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Zb(23, "div", 11), i.Zb(24, "div", 3), i.Zb(25, "div", 6), i.Yb(), i.Yb(), i.Zb(32, "div", 3),  i.Zb(37, "div", 8), i.Zb(38, "p", 9), i.Tc(39, "Habbo Hotel"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Zb(40, "div", 12), i.Vb(41, "div", 13), i.Vb(42, "img", 14), i.Yb(), i.Vb(43, "div", 15), i.Yb()), 2 & t && (i.Gb(41), i.tc("figure", e.figure)("direction", 2))
                        },
                        directives: [cf],
                        encapsulation: 2
                    }), t
                })();
            class EC {
                constructor(t) {
                    this._complete = !0, this._target = t
                }
                get running() {
                    return this._running && !!this._target
                }
                get complete() {
                    return this._complete
                }
                set target(t) {
                    this._target = t
                }
                get target() {
                    return this._target
                }
                set tag(t) {
                    this._tag = t
                }
                get tag() {
                    return this._tag
                }
                start() {
                    this._running = !0
                }
                update(t) {}
                stop() {
                    this._target = null, this._running = !1
                }
                tick(t) {}
            }
            class fC extends EC {
                constructor(t) {
                    super(t)
                }
                tick(t) {
                    super.tick(t), this.target && (this.target.remove(), this.target = null)
                }
            }
            class SC extends EC {
                constructor(t, e) {
                    super(t), this._complete = !1, this._duration = e
                }
                get duration() {
                    return this._duration
                }
                start() {
                    super.start(), this._complete = !1, this._startTimeMs = cp.instance.time
                }
                tick(t) {
                    super.tick(t);
                    const e = (t - this._startTimeMs) / this._duration;
                    e < 1 ? this.update(e) : (this.update(1), this._complete = !0)
                }
            }
            class IC extends SC {
                constructor(t, e, s) {
                    super(t, e), this._height = s
                }
                start() {
                    super.start(), this._offset = 0, this.target.style.top = this._offset - this._height + "px"
                }
                update(t) {
                    super.update(t), this.target.style.top = this._offset - this._height + this.getBounceOffset(t) * this._height + "px"
                }
                getBounceOffset(t) {
                    return t < .364 ? 7.5625 * t * t : t < .727 ? 7.5625 * (t -= .545) * t + .75 : t < .909 ? 7.5625 * (t -= .9091) * t + .9375 : 7.5625 * (t -= .955) * t + .984375
                }
                stop() {
                    this.target.style.top = this._offset + "px", super.stop()
                }
            }
            class RC extends SC {
                constructor(t) {
                    super(t.target, t.duration), this._interval = t
                }
                start() {
                    super.start(), this._interval.start()
                }
                update(t) {
                    super.update(t), this._interval.update(t)
                }
                stop() {
                    super.stop(), this._interval.stop()
                }
            }
            class vC extends RC {
                constructor(t, e) {
                    super(t), this._Str_21638 = e
                }
            }
            class TC extends vC {
                constructor(t, e) {
                    super(t, e)
                }
                update(t) {
                    this._interval.update(Math.pow(t, 1 / this._Str_21638))
                }
            }
            class OC extends SC {
                constructor(t, e, s, i, n, r) {
                    super(t, e), this._deltaX = s, this._deltaY = i, this._height = -n, this._numJumps = r
                }
                start() {
                    super.start(), this._startX = this.target.offsetLeft, this._startY = this.target.offsetTop
                }
                update(t) {
                    super.update(t), this.target.style.left = this._startX + this._deltaX * t + "px", this.target.style.top = this._startY + this._height * Math.abs(Math.sin(t * Math.PI * this._numJumps)) + this._deltaY * t + "px"
                }
            }
            let yC = (() => {
                class t {
                    static get TIMER_TIME() {
                        return 1e3 / cp.instance.ticker.FPS
                    }
                    static _Str_4598(e) {
                        return -1 === t._Str_3932.indexOf(e) && -1 === t._Str_5358.indexOf(e) && (t._Str_7507 ? t._Str_5358.push(e) : (t._Str_3932.push(e), e.start()), t._Str_12757()), e
                    }
                    static _Str_15790(e) {
                        let s = t._Str_3932.indexOf(e);
                        s > -1 ? t._Str_7507 ? (s = t._Str_10731.indexOf(e), -1 == s && t._Str_10731.push(e)) : (t._Str_3932.splice(s, 1), e.running && e.stop(), t._Str_3932.length || t._Str_7465()) : (s = t._Str_5358.indexOf(e), s > -1 && t._Str_5358.splice(s, 1))
                    }
                    static _Str_19320(e) {
                        for (const s of t._Str_3932)
                            if (s.tag == e) return s;
                        for (const s of t._Str_5358)
                            if (s.tag == e) return s;
                        return null
                    }
                    static _Str_9810(e) {
                        for (const s of t._Str_3932)
                            if (s.target == e) return s;
                        for (const s of t._Str_5358)
                            if (s.target == e) return s;
                        return null
                    }
                    static _Str_26365(e, s) {
                        for (const i of t._Str_3932)
                            if (i.tag == e && i.target == s) return i;
                        for (const i of t._Str_5358)
                            if (i.tag == e && i.target == s) return i;
                        return null
                    }
                    static get _Str_1349() {
                        return !!t._Str_5307
                    }
                    static get _Str_26314() {
                        return t._Str_7507
                    }
                    static _Str_21055() {
                        t._Str_7507 = !0;
                        const e = cp.instance.time;
                        let s = null;
                        for (; s = t._Str_5358.pop();) t._Str_3932.push(s);
                        for (; s = t._Str_10731.pop();) t._Str_3932.splice(t._Str_3932.indexOf(s), 1), s.running && s.stop();
                        for (s of t._Str_3932) s.running ? (s.tick(e), s.complete && t._Str_15790(s)) : t._Str_15790(s);
                        t._Str_3932.length || t._Str_7465(), t._Str_7507 = !1
                    }
                    static _Str_12757() {
                        t._Str_5307 || (t._Str_5307 = setInterval(t._Str_21055, t.TIMER_TIME))
                    }
                    static _Str_7465() {
                        t._Str_5307 && (clearInterval(t._Str_5307), t._Str_5307 = null)
                    }
                    _Str_25883(e) {
                        let s = 0;
                        for (const i of t._Str_3932) i.target === e && s++;
                        return s
                    }
                }
                return t._Str_5358 = [], t._Str_3932 = [], t._Str_10731 = [], t._Str_5307 = null, t._Str_7507 = !1, t
            })();
            class AC extends EC {
                constructor(...t) {
                    super(t ? t[0].target : null), this._queue = [];
                    for (const e of t) this._queue.push(e);
                    this._motion = t[0], this._complete = !this._motion
                }
                get running() {
                    return !(!this._running || !this._motion) && this._motion.running
                }
                start() {
                    super.start(), this._motion.start()
                }
                update(t) {
                    super.update(t), this._motion.running && this._motion.update(t)
                }
                stop() {
                    super.stop(), this._motion.stop()
                }
                tick(t) {
                    if (super.tick(t), this._motion.tick(t), this._motion.complete) {
                        this._motion.stop();
                        const t = this._queue.indexOf(this._motion);
                        t < this._queue.length - 1 ? (this._motion = this._queue[t + 1], this._target = this._motion.target, this._motion.start()) : this._complete = !0
                    }
                }
            }
            class CC extends EC {
                constructor(t) {
                    super(null), this._waitTimeMs = t
                }
                get running() {
                    return this._running
                }
                start() {
                    super.start(), this._complete = !1, this._startTimeMs = cp.instance.time
                }
                tick(t) {
                    super.tick(t), this._complete = t - this._startTimeMs >= this._waitTimeMs, this._complete && this.stop()
                }
            }

            function MC(t, e) {
                if (1 & t && (i.Zb(0, "div", 8), i.Zb(1, "p", 9), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(2), i.Uc(t.unseenAchievementsCount)
                }
            }

            function UC(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.jc("click", (function() {
                        return i.Gc(t), i.mc().toggleAchievements()
                    })), i.Rc(2, MC, 3, 1, "div", 3), i.Zb(3, "p", 4), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "p", 4), i.Tc(8, "Profil"), i.Yb(), i.Yb(), i.Zb(9, "div", 6), i.jc("click", (function() {
                        return i.Gc(t), i.mc().toggleNavigator()
                    })), i.Zb(10, "p", 4), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Yb(), i.Zb(13, "div", 7), i.jc("click", (function() {
                        return i.Gc(t), i.mc().toggleAvatarEditor()
                    })), i.Zb(14, "p", 4), i.Tc(15), i.nc(16, "translate"), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.tc("ngIf", t.unseenAchievementsCount), i.Gb(2), i.Uc(i.oc(5, 4, "widget.memenu.achievements")), i.Gb(7), i.Uc(i.oc(12, 6, "widget.memenu.myrooms")), i.Gb(4), i.Uc(i.oc(16, 8, "widget.memenu.editavatar"))
                }
            }
            let DC = (() => {
                class t {
                    constructor(t, e, s, i, n) {
                        this._avatarEditorService = t, this.settingsService = e, this.navigatorService = s, this._achievementService = i, this._ngZone = n
                    }
                    ngOnInit() {}
                    ngOnDestroy() {}
                    get isVisible() {
                        return this.settingsService.meMenuVisible || !1
                    }
                    toggleAvatarEditor() {
                        this._avatarEditorService.loadOwnAvatarInEditor(), this.settingsService.toggleAvatarEditor()
                    }
                    toggleAchievements() {
                        this.settingsService.toggleAchievements()
                    }
                    toggleNavigator() {
                        this.settingsService.toggleNavigator(), this.navigatorService.setCurrentContextByCode("myworld_view")
                    }
                    get unseenAchievementsCount() {
                        return this._achievementService.unseenCount
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(vE), i.Ub(_p), i.Ub(WS), i.Ub(II), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-toolbar-me-menu-component"]
                    ],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["id", "avatar_menu", 4, "ngIf"],
                        ["id", "avatar_menu"],
                        [1, "amenu-ico", 2, "background-image", "url(./assets/images/bottombar/basarilar.png)", 3, "click"],
                        ["class", "mobicountbox count", "style", "top: 5px;", 4, "ngIf"],
                        [1, "amenu-text"],
                        [1, "amenu-ico", 2, "background-image", "url(./assets/images/bottombar/profilim.png)"],
                        [1, "amenu-ico", 2, "background-image", "url(./assets/images/bottombar/odalarim.png)", 3, "click"],
                        [1, "amenu-ico", 2, "background-image", "url(./assets/images/bottombar/avatareditor.png)", 3, "click"],
                        [1, "mobicountbox", "count", 2, "top", "5px"],
                        [1, "count-txt"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, UC, 17, 10, "div", 0), 2 & t && i.tc("ngIf", e.isVisible)
                    },
                    directives: [hp.n],
                    pipes: [tE],
                    encapsulation: 2,
                    data: {
                        animation: [Object(pp.j)("inOutAnimation", [Object(pp.i)(":enter", [Object(pp.h)({
                            left: 0,
                            opacity: 0
                        }), Object(pp.e)(".3s ease-out", Object(pp.h)({
                            left: 72,
                            opacity: 1
                        }))]), Object(pp.i)(":leave", [Object(pp.h)({
                            left: 72,
                            opacity: 1
                        }), Object(pp.e)(".3s ease-in", Object(pp.h)({
                            left: 0,
                            opacity: 0
                        }))])])]
                    }
                }), t
            })();
            const NC = ["navigationList"],
                wC = ["listeitem"];

            function LC(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 36), i.jc("click", (function() {
                        return i.Gc(t), i.mc().clickIcon("home_room")
                    })), i.Vb(1, "img", 37), i.Yb()
                }
            }

            function xC(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 38), i.jc("click", (function() {
                        return i.Gc(t), i.mc().clickIcon("hotel_view")
                    })), i.Vb(1, "img", 39), i.Yb()
                }
            }

            function PC(t, e) {
                if (1 & t && (i.Zb(0, "div", 40), i.Zb(1, "p", 41), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.unseenInventoryCount)
                }
            }

            function FC(t, e) {
                if (1 & t && (i.Zb(0, "div", 42), i.Zb(1, "p", 43), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.unseenAchievementsCount)
                }
            }

            function GC(t, e) {
                if (1 & t && (i.Zb(0, "div", 44), i.Vb(1, "img", 45), i.Zb(2, "p", 28), i.Tc(3), i.Yb(), i.Zb(4, "div", 46), i.Vb(5, "div", 47), i.Vb(6, "div", 48), i.Vb(7, "div", 49), i.Yb(), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.vc("src", "https://www.habbo.com/habbo-imaging/avatarimage?figure=", t.figure, "&action=std&gesture=std&direction=2&head_direction=2&size=n&headonly=1&img_format=png", i.Ic), i.Gb(2), i.Uc(t.name)
                }
            }

            function YC(t, e) {
                if (1 & t && (i.Zb(0, "div", 40), i.Zb(1, "p", 41), i.Tc(2), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.unseenFriendListCount)
                }
            }
            let kC = (() => {
                class t {
                    constructor(t, e, s, i, n, r, o) {
                        this._inventoryService = t, this._navigatorService = e, this._friendListService = s, this._achievementService = i, this.sessionService = n, this.settingsService = r, this.ngZone = o, this.isInRoom = !1, this.acac = "friend-box-kapali", this.acikMi = !1, this.onNitroToolbarEvent = this.onNitroToolbarEvent.bind(this)
                    }
                    ngAfterContentInit() {
                        lp(".online-friends-box").click((function() {
                            "70px" == lp(this).css("height") ? lp(this).css({
                                height: "",
                                bottom: ""
                            }) : (lp(".online-friends-box").css({
                                height: "",
                                bottom: ""
                            }), lp(this).css({
                                height: "70px",
                                bottom: "34px"
                            }))
                        }))
                    }
                    ngOnInit() {
                        this.ngZone.runOutsideAngular(() => {
                            cp.instance.roomEngine.events.addEventListener(Il.TOOLBAR_CLICK, this.onNitroToolbarEvent), cp.instance.roomEngine.events.addEventListener(Rl.ANIMATE_ICON, this.onNitroToolbarEvent)
                        });
                        const t = document.querySelector(".bottombar-friends-list");
                        lp(".friends-right-box").click((function() {
                            console.log("xx"), t.scrollLeft += 130
                        })), lp(".friends-left-box").click((function() {
                            console.log("xx"), t.scrollLeft -= 130
                        }));
                        var e = 0;
                        lp(".bri-slide-box").click((function() {
                            ++e % 2 == 0 ? (lp(this).css({
                                height: "172px",
                                top: "0px",
                                "background-image": 'url("./assets/images/bottombar/bri-close.png")'
                            }), lp(".bri-room-options").css("display", "block"), lp(".bri-room-name_and_owner-box").css("display", "block")) : (lp(this).css({
                                height: "108px",
                                top: "0px",
                                "background-image": 'url("./assets/images/bottombar/bri-open.png")'
                            }), lp(".bri-room-options").css("display", "none"), lp(".bri-room-name_and_owner-box").css("display", "none"))
                        })), lp(".bottom-right-ufalt").click((function() {
                            ++e % 2 == 0 ? (lp(this).css({
                                "background-image": 'url("./assets/images/bottombar/sag-kapat.png")'
                            }), lp(".bottombar-friends-list-box").css("display", "block")) : (lp(this).css({
                                "background-image": 'url("./assets/images/bottombar/sag-ac.png")'
                            }), lp(".bottombar-friends-list-box").css("display", "none"))
                        }))
                    }
                    ngOnDestroy() {
                        this.ngZone.runOutsideAngular(() => {
                            cp.instance.roomEngine.events.removeEventListener(Il.TOOLBAR_CLICK, this.onNitroToolbarEvent), cp.instance.roomEngine.events.removeEventListener(Rl.ANIMATE_ICON, this.onNitroToolbarEvent)
                        })
                    }
                    onNitroToolbarEvent(t) {
                        if (t) switch (t.type) {
                            case Il.TOOLBAR_CLICK:
                                return void this.clickIcon(t.iconName);
                            case Rl.ANIMATE_ICON:
                                return void this.animateToIcon(t.iconName, t.image, t.x, t.y)
                        }
                    }
                    clickIcon(t) {
                        if (t && "" !== t) switch (t) {
                            case Sl.HOTEL_VIEW:
                                return void this.visitDesktop();
                            case Sl.HOME_ROOM:
                                return void this.visitHomeRoom();
                            case Sl.NAVIGATOR:
                                return void this.toggleNavigator();
                            case Sl.CATALOG:
                                return void this.toggleCatalog();
                            case Sl.INVENTORY:
                                return void this.toggleInventory();
                            case Sl.FRIEND_LIST:
                                return void this.toggleFriendList();
                            case Sl.ME_MENU:
                                return this.toggleMeMenu(), void cp.instance.roomEngine.events.dispatchEvent(new Il(Il.SELECT_OWN_AVATAR))
                        }
                    }
                    animateToIcon(t, e, s, i) {
                        if (!t || !e || !this.navigationListElement) return;
                        if ("" === (t = this.getIconName(t))) return;
                        const n = this.navigationListElement.getElementsByClassName(t)[0];
                        if (n) {
                            e.className = "toolbar-icon-animation", e.style.visibility = "visible", e.style.left = s + "px", e.style.top = i + "px", document.body.append(e);
                            const r = n.getBoundingClientRect(),
                                o = e.getBoundingClientRect(),
                                a = o.x - r.x,
                                c = o.y - r.y,
                                _ = Math.sqrt(a * a + c * c),
                                h = 500 - Math.abs(1 / _ * 100 * 500 * .5),
                                l = 20,
                                u = `ToolbarBouncing[${t}]`;
                            yC._Str_19320(u) || (yC._Str_4598(new AC(new CC(h + 8), new IC(n, 400, 12))).tag = u);
                            const d = new AC(new TC(new OC(e, h, r.x - o.x + l, r.y - o.y, 100, 1), 1), new fC(e));
                            yC._Str_4598(d)
                        }
                    }
                    getIconName(t) {
                        switch (t) {
                            case Sl.HOTEL_VIEW:
                                return "icon-hotelview";
                            case Sl.NAVIGATOR:
                                return "icon-navigator";
                            case Sl.CATALOG:
                                return "icon-catalog";
                            case Sl.INVENTORY:
                                return "icon-inventory";
                            default:
                                return ""
                        }
                    }
                    toggleCatalog() {
                        this.settingsService.toggleCatalog()
                    }
                    toggleInventory() {
                        this.settingsService.toggleInventory()
                    }
                    toggleFriendList() {
                        this.settingsService.toggleFriendList()
                    }
                    toggleNavigator() {
                        this.settingsService.toggleNavigator()
                    }
                    toggleMeMenu() {
                        this.settingsService.toggleMeMenu()
                    }
                    visitDesktop() {
                        cp.instance.roomSessionManager.getSession(-1) && (cp.instance.communication.connection.send(new Gc), cp.instance.roomSessionManager.removeSession(-1))
                    }
                    visitHomeRoom() {
                        this._navigatorService.goToHomeRoom()
                    }
                    get figure() {
                        return this.sessionService.figure
                    }
                    get navigationListElement() {
                        return this.navigationList && this.navigationList.nativeElement || null
                    }
                    get unseenInventoryCount() {
                        return this._inventoryService.unseenCount
                    }
                    get unseenFriendListCount() {
                        return this._friendListService.notificationCount
                    }
                    get unseenAchievementsCount() {
                        return this._achievementService.unseenCount
                    }
                    yukselt() {
                        0 == this.acikMi ? (this.acac = "friends-box-acik", this.acikMi = !0) : (this.acac = "friends-box-kapali", this.acikMi = !1)
                    }
                    get friends() {
                        return Array.from(this._friendListService.friends.values()).filter(t => t.online)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(df), i.Ub(WS), i.Ub(jb), i.Ub(II), i.Ub(_O), i.Ub(_p), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-toolbar-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && (i.Zc(NC, !0), i.Zc(wC, !0)), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.navigationList = t.first), i.Cc(t = i.kc()) && (e.div = t.first)
                        }
                    },
                    inputs: {
                        isInRoom: "isInRoom"
                    },
                    decls: 47,
                    vars: 9,
                    consts: [
                        ["id", "bottom-bar"],
                        [1, "bar-left"],
                        ["navigationList", ""],
                        ["src", "./assets/images/bottombar/sol-kapat.png", 1, "bottom-left-ufalt"],
                        ["class", "barico-left ev-icon", 3, "click", 4, "ngIf"],
                        ["class", "barico-left habbo-icon", 3, "click", 4, "ngIf"],
                        [1, "barico-left", "navigator-icon", 3, "click"],
                        ["src", "./assets/images/bottombar/nav.png?0"],
                        [1, "barico-left", "magaza-icon", 3, "click"],
                        ["src", "./assets/images/bottombar/magaza.png"],
                        [1, "barico-left", "envanter-icon", 3, "click"],
                        ["src", "./assets/images/bottombar/envanter.png"],
                        ["class", "mobicountbox", 4, "ngIf"],
                        [1, "barico-left", "bar-avatar", 3, "click"],
                        ["nitro-avatar-image", "", 1, "bar_habbo-avatar", 3, "figure", "headOnly", "direction"],
                        ["class", "mobicountbox count", "style", "top: 4px;right: 0px;", 4, "ngIf"],
                        [1, "barico-left", "kamera-icon"],
                        ["src", "./assets/images/bottombar/kamera.png"],
                        [1, "bottom-bar-ayirici"],
                        [1, "bar-right"],
                        [1, "bottom-right-ufalt", 2, "background-image", "url(./assets/images/bottombar/sag-kapat.png)"],
                        [1, "bottombar-friends-list-box"],
                        [1, "friends-left-box"],
                        [1, "bottombar-friends-list"],
                        [1, "bottom-fl-content"],
                        ["class", "online-friends-box", "id", "friends", 4, "ngFor", "ngForOf"],
                        [1, "add-friends-box"],
                        ["src", "./assets/images/bottombar/addfriends.png", 1, "add-avatar-head"],
                        [1, "onfriends-username"],
                        [1, "friends-right-box"],
                        [1, "barico-right", "sohbet-icon"],
                        ["src", "./assets/images/bottombar/sohbet.png"],
                        [1, "barico-right", "arkadas-ara-icon", 3, "click"],
                        ["src", "./assets/images/bottombar/arkadas-ara.png"],
                        [1, "barico-right", "arkadas-liste-icon", 3, "click"],
                        ["src", "./assets/images/bottombar/arkadas-liste.png"],
                        [1, "barico-left", "ev-icon", 3, "click"],
                        ["src", "./assets/images/bottombar/house.png"],
                        [1, "barico-left", "habbo-icon", 3, "click"],
                        ["src", "./assets/images/bottombar/habbo.png"],
                        [1, "mobicountbox"],
                        [1, "count-txt"],
                        [1, "mobicountbox", "count", 2, "top", "4px", "right", "0px"],
                        [1, "count-txt", "ng-tns-c168-1"],
                        ["id", "friends", 1, "online-friends-box"],
                        [1, "onfriends-avatar-head", 3, "src"],
                        [1, "bottombar-user-options"],
                        [1, "buopt-chatico"],
                        [1, "buopt-goroomico"],
                        [1, "buopt-profileico"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Vb(1, "nitro-toolbar-me-menu-component"), i.Zb(2, "div", 1, 2), i.Vb(4, "img", 3), i.Rc(5, LC, 2, 0, "div", 4), i.Rc(6, xC, 2, 0, "div", 5), i.Zb(7, "div", 6), i.jc("click", (function() {
                            return e.clickIcon("navigator")
                        })), i.Vb(8, "img", 7), i.Yb(), i.Zb(9, "div", 8), i.jc("click", (function() {
                            return e.clickIcon("catalog")
                        })), i.Vb(10, "img", 9), i.Yb(), i.Zb(11, "div", 10), i.jc("click", (function() {
                            return e.clickIcon("inventory")
                        })), i.Vb(12, "img", 11), i.Rc(13, PC, 3, 1, "div", 12), i.Yb(), i.Zb(14, "div", 13), i.jc("click", (function() {
                            return e.clickIcon("me_menu")
                        })), i.Vb(15, "div", 14), i.Rc(16, FC, 3, 1, "div", 15), i.Yb(), i.Zb(17, "div", 16), i.Vb(18, "img", 17), i.Yb(), i.Vb(19, "div", 18), i.Yb(), i.Zb(20, "div", 19), i.Vb(21, "div", 20), i.Zb(22, "div", 21), i.Vb(23, "div", 22), i.Zb(24, "div", 23), i.Zb(25, "div", 24), i.Rc(26, GC, 8, 2, "div", 25), i.Zb(27, "div", 26), i.Vb(28, "img", 27), i.Zb(29, "p", 28), i.Tc(30, "Ajouter un ami"), i.Yb(), i.Yb(), i.Zb(31, "div", 26), i.Vb(32, "img", 27), i.Zb(33, "p", 28), i.Tc(34, "Ajouter un ami"), i.Yb(), i.Yb(), i.Zb(35, "div", 26), i.Vb(36, "img", 27), i.Zb(37, "p", 28), i.Tc(38, "Ajouter un ami"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Vb(39, "div", 29), i.Yb(), i.Zb(40, "div", 30), i.Vb(41, "img", 31), i.Yb(), i.Zb(42, "div", 32), i.jc("click", (function() {
                            return e.clickIcon("friendlist")
                        })), i.Vb(43, "img", 33), i.Yb(), i.Zb(44, "div", 34), i.jc("click", (function() {
                            return e.clickIcon("friendlist")
                        })), i.Vb(45, "img", 35), i.Rc(46, YC, 3, 1, "div", 12), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(5), i.tc("ngIf", !e.isInRoom), i.Gb(1), i.tc("ngIf", e.isInRoom), i.Gb(7), i.tc("ngIf", e.unseenInventoryCount), i.Gb(2), i.tc("figure", e.figure)("headOnly", !1)("direction", 2), i.Gb(1), i.tc("ngIf", e.unseenAchievementsCount), i.Gb(10), i.tc("ngForOf", e.friends), i.Gb(20), i.tc("ngIf", e.unseenFriendListCount))
                    },
                    directives: [DC, hp.n, cf, hp.m],
                    encapsulation: 2,
                    data: {
                        animation: [Object(pp.j)("inOutAnimation", [Object(pp.i)(":enter", [Object(pp.h)({
                            left: "-100%"
                        }), Object(pp.e)("1s ease-out", Object(pp.h)({
                            left: 10
                        }))])])]
                    }
                }), t
            })();

            function VC(t, e) {
                1 & t && (i.Zb(0, "div", 5), i.Zb(1, "div", 6), i.Vb(2, "nitro-purse-main-component"), i.Vb(3, "nitro-notification-center-component"), i.Yb(), i.Yb()), 2 & t && i.tc("@inOutAnimation", void 0)
            }

            function ZC(t, e) {
                1 & t && i.Vb(0, "nitro-hotelview-component")
            }

            function jC(t, e) {
                if (1 & t && i.Vb(0, "nitro-toolbar-component", 7), 2 & t) {
                    const t = i.mc();
                    i.tc("isInRoom", !t.landingViewVisible)
                }
            }
            let BC = (() => {
                class t {
                    constructor(t, e) {
                        this._settingsService = t, this._ngZone = e, this.roomComponent = null, this._landingViewVisible = !0, this.onRoomEngineEvent = this.onRoomEngineEvent.bind(this), this.onInterstitialEvent = this.onInterstitialEvent.bind(this), this.onRoomEngineObjectEvent = this.onRoomEngineObjectEvent.bind(this), this.onRoomSessionEvent = this.onRoomSessionEvent.bind(this)
                    }
                    ngOnInit() {
                        this._ngZone.runOutsideAngular(() => {
                            cp.instance.roomEngine.events && (cp.instance.roomEngine.events.addEventListener(Qh.INITIALIZED, this.onRoomEngineEvent), cp.instance.roomEngine.events.addEventListener(Qh.DISPOSED, this.onRoomEngineEvent), cp.instance.roomEngine.events.addEventListener(Qh.ENGINE_INITIALIZED, this.onInterstitialEvent), cp.instance.roomEngine.events.addEventListener(Qh.OBJECTS_INITIALIZED, this.onInterstitialEvent), cp.instance.roomEngine.events.addEventListener(Qh.NORMAL_MODE, this.onInterstitialEvent), cp.instance.roomEngine.events.addEventListener(Qh.GAME_MODE, this.onInterstitialEvent), cp.instance.roomEngine.events.addEventListener(bp.ROOM_ZOOM, this.onRoomEngineEvent), cp.instance.roomEngine.events.addEventListener(mg.ROOM_BACKGROUND_COLOR, this.onRoomEngineEvent), cp.instance.roomEngine.events.addEventListener(yl.ROOM_COLOR, this.onRoomEngineEvent), cp.instance.roomEngine.events.addEventListener(cg.ROOM_COLOR, this.onRoomEngineEvent), cp.instance.roomEngine.events.addEventListener(Al.SELECTED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Al.DESELECTED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Al.ADDED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Al.REMOVED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Al.PLACED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Al.REQUEST_MOVE, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Al.REQUEST_ROTATE, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Al.MOUSE_ENTER, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Al.MOUSE_LEAVE, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.OPEN_WIDGET, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.CLOSE_WIDGET, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.REQUEST_INTERNAL_LINK, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.REQUEST_ROOM_LINK, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.REQUEST_TROPHY, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.REQUEST_CREDITFURNI, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(Ig.OPEN_FURNI_CONTEXT_MENU, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.REQUEST_STICKIE, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.REQUEST_DIMMER, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.REQUEST_BACKGROUND_COLOR, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.addEventListener(lg.REQUEST_FRIEND_FURNITURE_ENGRAVING, this.onRoomEngineObjectEvent)), cp.instance.roomSessionManager.events && (cp.instance.roomSessionManager.events.addEventListener(Tl.CREATED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Tl.STARTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Tl.ROOM_DATA, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Tl.ENDED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Lm.CHAT_EVENT, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Hm.RSDE_DANCE, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(Wm.RSUBE_BADGES, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(jm.DOORBELL, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(jm.RSDE_REJECTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(jm.RSDE_ACCEPTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.addEventListener(km.RSDPE_PRESETS, this.onRoomSessionEvent))
                        })
                    }
                    ngOnDestroy() {
                        this._ngZone.runOutsideAngular(() => {
                            cp.instance.roomEngine.events && (cp.instance.roomEngine.events.removeEventListener(Qh.INITIALIZED, this.onRoomEngineEvent), cp.instance.roomEngine.events.removeEventListener(Qh.DISPOSED, this.onRoomEngineEvent), cp.instance.roomEngine.events.removeEventListener(bp.ROOM_ZOOM, this.onRoomEngineEvent), cp.instance.roomEngine.events.removeEventListener(mg.ROOM_BACKGROUND_COLOR, this.onRoomEngineEvent), cp.instance.roomEngine.events.removeEventListener(yl.ROOM_COLOR, this.onRoomEngineEvent), cp.instance.roomEngine.events.removeEventListener(cg.ROOM_COLOR, this.onRoomEngineEvent), cp.instance.roomEngine.events.removeEventListener(Al.SELECTED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Al.DESELECTED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Al.ADDED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Al.REMOVED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Al.PLACED, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Al.REQUEST_MOVE, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Al.REQUEST_ROTATE, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Al.MOUSE_ENTER, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Al.MOUSE_LEAVE, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.OPEN_WIDGET, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.CLOSE_WIDGET, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.REQUEST_INTERNAL_LINK, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.REQUEST_ROOM_LINK, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.REQUEST_TROPHY, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.REQUEST_CREDITFURNI, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(Ig.OPEN_FURNI_CONTEXT_MENU, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.REQUEST_STICKIE, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.REQUEST_DIMMER, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.REQUEST_BACKGROUND_COLOR, this.onRoomEngineObjectEvent), cp.instance.roomEngine.events.removeEventListener(lg.REQUEST_FRIEND_FURNITURE_ENGRAVING, this.onRoomEngineObjectEvent)), cp.instance.roomSessionManager.events && (cp.instance.roomSessionManager.events.removeEventListener(Tl.CREATED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Tl.STARTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Tl.ROOM_DATA, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Tl.ENDED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Lm.CHAT_EVENT, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Hm.RSDE_DANCE, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(Wm.RSUBE_BADGES, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(jm.DOORBELL, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(jm.RSDE_REJECTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(jm.RSDE_ACCEPTED, this.onRoomSessionEvent), cp.instance.roomSessionManager.events.removeEventListener(km.RSDPE_PRESETS, this.onRoomSessionEvent))
                        })
                    }
                    onRoomEngineEvent(t) {
                        if (!t) return;
                        if (Ep.isRoomPreviewerId(t.roomId)) return;
                        const e = cp.instance.roomSessionManager.getSession(t.roomId);
                        if (e) switch (t.type) {
                            case Qh.INITIALIZED:
                                return void(this.roomComponent && (this.roomComponent.prepareRoom(e), cp.instance.roomEngine.setActiveRoomId(t.roomId), this.roomComponent.createWidget(Fg.CHAT_WIDGET, BS), this.roomComponent.createWidget(Fg.INFOSTAND, US), this.roomComponent.createWidget(Fg.LOCATION_WIDGET, null), this.roomComponent.createWidget(Fg.INTERNAL_LINK, null), this.roomComponent.createWidget(Fg.ROOM_LINK, null), this.roomComponent.createWidget(Fg.CUSTOM_STACK_HEIGHT, Sf), this.roomComponent.createWidget(Fg.ROOM_DIMMER, Cf), this.roomComponent.createWidget(Fg.FURNI_STICKIE_WIDGET, kf), this.roomComponent.createWidget(Fg.DOORBELL, wS), this.roomComponent.createWidget(Fg.FURNI_TROPHY_WIDGET, Zf), this.roomComponent.createWidget(Fg.FURNI_CREDIT_WIDGET, bf), this.roomComponent.createWidget(Fg.FURNITURE_CONTEXT_MENU, mf), this.roomComponent.createWidget(Fg.ROOM_BACKGROUND_COLOR, nf), this.roomComponent.createWidget(Fg.FRIEND_FURNI_CONFIRM, Uf), this.roomComponent.createWidget(Fg.FRIEND_FURNI_ENGRAVING, Lf), this.roomComponent.createWidget(Fg.ROOM_TOOLS, sI), this.roomComponent.roomSession.isSpectator || (this.roomComponent.createWidget(Fg.CHAT_INPUT_WIDGET, LE), this.roomComponent.createWidget(Fg.AVATAR_INFO, yE), this.roomComponent.createWidget(Fg.FURNI_CHOOSER, qE), this.roomComponent.createWidget(Fg.USER_CHOOSER, tf))));
                            case Qh.DISPOSED:
                                return void(this.roomComponent && this.roomComponent.endRoom());
                            case bp.ROOM_ZOOM:
                                {
                                    const e = t;
                                    let s = e.level < 1 ? .5 : 1 << Math.floor(e.level) - 1;
                                    return (e.forceFlip || e.asDelta) && (s = e.level),
                                    void(this.roomComponent && cp.instance.roomEngine.setRoomInstanceRenderingCanvasScale(this.roomComponent.roomSession.roomId, this.roomComponent.getFirstCanvasId(), s, null, null, !1, e.asDelta))
                                }
                            case yl.ROOM_COLOR:
                                if (this.roomComponent) {
                                    const e = t;
                                    e._Str_11464 ? this.roomComponent.setRoomColorizerColor(16711680, 255) : this.roomComponent.setRoomColorizerColor(e.color, e._Str_5123)
                                }
                                return;
                            case cg.ROOM_COLOR:
                                return void(this.roomComponent && this.roomComponent._Str_2485(t));
                            case mg.ROOM_BACKGROUND_COLOR:
                                if (this.roomComponent) {
                                    const e = t;
                                    e.enable ? this.roomComponent.setRoomBackgroundColor(e.hue, e.saturation, e.lightness) : this.roomComponent.setRoomBackgroundColor(0, 0, 0)
                                }
                                return
                        }
                    }
                    onInterstitialEvent(t) {
                        t && (t.type !== Qh.GAME_MODE && t.type !== Qh.NORMAL_MODE || this.roomComponent && this.roomComponent.onRoomEngineEvent(t))
                    }
                    onRoomEngineObjectEvent(t) {
                        this.roomComponent && this.roomComponent.onRoomEngineObjectEvent(t)
                    }
                    onRoomSessionEvent(t) {
                        if (t) switch (t.type) {
                            case Tl.CREATED:
                                return this._ngZone.run(() => {
                                    this._landingViewVisible = !1
                                }), void cp.instance.roomSessionManager.startSession(t.session);
                            case Tl.STARTED:
                            case Tl.ROOM_DATA:
                                return;
                            case Tl.ENDED:
                                return this.roomComponent && this.roomComponent.endRoom(), void this._ngZone.run(() => {
                                    this._landingViewVisible = t.openLandingView
                                });
                            default:
                                return void(this.roomComponent && this.roomComponent.processEvent(t))
                        }
                    }
                    get landingViewVisible() {
                        return this._landingViewVisible
                    }
                    get avatarEditorVisible() {
                        return this._settingsService.avatarEditorVisible
                    }
                    get catalogVisible() {
                        return this._settingsService.catalogVisible
                    }
                    get navigatorVisible() {
                        return this._settingsService.navigatorVisible
                    }
                    get inventoryVisible() {
                        return this._settingsService.inventoryVisible
                    }
                    get friendListVisible() {
                        return this._settingsService.friendListVisible
                    }
                    get achievementsVisible() {
                        return this._settingsService.achievementsVisible
                    }
                    get chatHistoryVisible() {
                        return this._settingsService.chatHistoryVisible
                    }
                    get isReady() {
                        return this._settingsService.isReady
                    }
                    get modToolVisible() {
                        return cp.instance.sessionDataManager.isModerator
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(_p), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-main-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(Xb, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.roomComponent = t.first)
                        }
                    },
                    decls: 18,
                    vars: 11,
                    consts: [
                        [1, "nitro-main-component"],
                        ["class", "nitro-right-side", 4, "ngIf"],
                        [3, "visible"],
                        [4, "ngIf"],
                        [3, "isInRoom", 4, "ngIf"],
                        [1, "nitro-right-side"],
                        [1, "d-flex", "flex-column"],
                        [3, "isInRoom"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Vb(1, "nitro-alert-center-component"), i.Rc(2, VC, 4, 1, "div", 1), i.Vb(3, "nitro-achievements-main-component", 2), i.Vb(4, "nitro-call-for-help-main-component"), i.Vb(5, "nitro-pedia-main-component"), i.Vb(6, "nitro-avatar-editor-main-component", 2), i.Rc(7, ZC, 1, 0, "nitro-hotelview-component", 3), i.Rc(8, jC, 1, 1, "nitro-toolbar-component", 4), i.Vb(9, "nitro-mod-tool-main-component", 2), i.Vb(10, "nitro-friendlist-main-component", 2), i.Vb(11, "nitro-catalog-main-component", 2), i.Vb(12, "nitro-navigator-main-component", 2), i.Vb(13, "nitro-inventory-main-component", 2), i.Vb(14, "nitro-user-profile-component"), i.Vb(15, "nitro-chat-history-component", 2), i.Vb(16, "nitro-wired-main-component"), i.Vb(17, "nitro-room-component"), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngIf", e.isReady), i.Gb(1), i.tc("visible", e.achievementsVisible), i.Gb(3), i.tc("visible", e.avatarEditorVisible), i.Gb(1), i.tc("ngIf", e.landingViewVisible), i.Gb(1), i.tc("ngIf", e.isReady), i.Gb(1), i.tc("visible", e.modToolVisible), i.Gb(1), i.tc("visible", e.friendListVisible), i.Gb(1), i.tc("visible", e.catalogVisible), i.Gb(1), i.tc("visible", e.navigatorVisible), i.Gb(1), i.tc("visible", e.inventoryVisible), i.Gb(2), i.tc("visible", e.chatHistoryVisible))
                    },
                    directives: [fI, hp.n, ZI, BI, XI, uR, RR, CR, aT, wT, aO, mO, yO, JA, Xb, nC, pC, bC, kC],
                    encapsulation: 2,
                    data: {
                        animation: [Object(pp.j)("inOutAnimation", [Object(pp.i)(":enter", [Object(pp.h)({
                            top: "-100%"
                        }), Object(pp.e)("1s ease-out", Object(pp.h)({
                            top: 0
                        }))])])]
                    }
                }), t
            })();

            function HC(t, e) {
                if (1 & t && i.Vb(0, "nitro-loading", 3), 2 & t) {
                    const t = i.mc();
                    i.tc("message", t.message)("percentage", t.percentage)("hideProgress", t.hideProgress)
                }
            }

            function WC(t, e) {
                1 & t && i.Vb(0, "nitro-main-component")
            }
            let zC = (() => {
                class t {
                    constructor(t, e) {
                        this._settingsService = t, this._ngZone = e, this.message = "Starting", this.percentage = 0, this.hideProgress = !1, this.isLocalizationReady = !1, this.isRoomEngineReady = !1, this.isAvatarRenderReady = !1, this.isError = !1, this.onNitroEvent = this.onNitroEvent.bind(this)
                    }
                    ngOnInit() {
                        this._ngZone.runOutsideAngular(() => {
                            if (!NitroConfig) throw new Error("NitroConfig is not defined!");
                            (class {
                                static isWebGLAvailable() {
                                    if (window.WebGLRenderingContext) {
                                        const e = document.createElement("canvas"),
                                            s = ["webgl2", "webgl", "experimental-webgl", "moz-webgl", "webkit-3d"];
                                        for (const i of s) try {
                                            const t = e.getContext(i);
                                            if (t && "function" == typeof t.getParameter) return !0
                                        } catch (t) {
                                            continue
                                        }
                                        return !1
                                    }
                                    return !1
                                }
                            }).isWebGLAvailable() ? (cp.instance || cp.bootstrap(), cp.instance.events.addEventListener(_.CONNECTION_ESTABLISHED, this.onNitroEvent), cp.instance.events.addEventListener(_.CONNECTION_HANDSHAKING, this.onNitroEvent), cp.instance.events.addEventListener(_.CONNECTION_HANDSHAKE_FAILED, this.onNitroEvent), cp.instance.events.addEventListener(_.CONNECTION_AUTHENTICATED, this.onNitroEvent), cp.instance.events.addEventListener(_.CONNECTION_ERROR, this.onNitroEvent), cp.instance.events.addEventListener(_.CONNECTION_CLOSED, this.onNitroEvent), cp.instance.localization.events.addEventListener(l.LOADED, this.onNitroEvent), cp.instance.roomEngine.events.addEventListener(Qh.ENGINE_INITIALIZED, this.onNitroEvent), cp.instance.avatar.events.addEventListener(c.AVATAR_RENDER_READY, this.onNitroEvent), cp.instance.core.configuration.events.addEventListener(a.LOADED, this.onNitroEvent), cp.instance.core.configuration.events.addEventListener(a.FAILED, this.onNitroEvent), cp.instance.core.configuration.init(), this._connectionTimeout = setTimeout(this.onConnectionTimeout, 15e3)) : this.onNitroEvent(new o(cp.WEBGL_UNAVAILABLE))
                        })
                    }
                    ngOnDestroy() {
                        this._ngZone.runOutsideAngular(() => {
                            cp.instance.events.removeEventListener(_.CONNECTION_ESTABLISHED, this.onNitroEvent), cp.instance.events.removeEventListener(_.CONNECTION_HANDSHAKING, this.onNitroEvent), cp.instance.events.removeEventListener(_.CONNECTION_HANDSHAKE_FAILED, this.onNitroEvent), cp.instance.events.removeEventListener(_.CONNECTION_AUTHENTICATED, this.onNitroEvent), cp.instance.events.removeEventListener(_.CONNECTION_ERROR, this.onNitroEvent), cp.instance.events.removeEventListener(_.CONNECTION_CLOSED, this.onNitroEvent), cp.instance.localization.events.removeEventListener(l.LOADED, this.onNitroEvent), cp.instance.roomEngine.events.removeEventListener(Qh.ENGINE_INITIALIZED, this.onNitroEvent), cp.instance.avatar.events.removeEventListener(c.AVATAR_RENDER_READY, this.onNitroEvent), cp.instance.core.configuration.events.removeEventListener(a.LOADED, this.onNitroEvent), cp.instance.core.configuration.events.removeEventListener(a.FAILED, this.onNitroEvent), clearTimeout(this._connectionTimeout)
                        })
                    }
                    getPreloadAssetUrls() {
                        const t = [],
                            e = cp.instance.getConfiguration("preload.assets.urls");
                        if (e && e.length)
                            for (const s of e) t.push(cp.instance.core.configuration.interpolate(s));
                        return t
                    }
                    onNitroEvent(t) {
                        if (t) switch (t.type) {
                            case a.LOADED:
                                return void cp.instance.localization.init();
                            case a.FAILED:
                                return void this._ngZone.run(() => {
                                    this.isError = !0, this.message = "Configuration Failed", this.percentage = 0, this.hideProgress = !0
                                });
                            case cp.WEBGL_UNAVAILABLE:
                                return void this._ngZone.run(() => {
                                    this.isError = !0, this.message = "WebGL Required", this.percentage = 0, this.hideProgress = !0
                                });
                            case cp.WEBGL_CONTEXT_LOST:
                                return this._ngZone.run(() => {
                                    this.isError = !0, this.message = "WebGL Context Lost - Reloading", this.percentage = 0, this.hideProgress = !0
                                }), void setTimeout(() => location.reload(), 1500);
                            case _.CONNECTION_HANDSHAKING:
                                this._ngZone.run(() => {
                                    this.message = "Handshaking", this.percentage = this.percentage + 20, this.hideProgress = !1
                                }), clearTimeout(this._connectionTimeout);
                                break;
                            case _.CONNECTION_HANDSHAKE_FAILED:
                                this._ngZone.run(() => {
                                    this.isError = !0, this.message = "Handshake Failed", this.percentage = 0, this.hideProgress = !0
                                });
                                break;
                            case _.CONNECTION_AUTHENTICATED:
                                this._ngZone.run(() => {
                                    this.message = "Preparing Nitro", this.percentage = this.percentage + 20, this.hideProgress = !1
                                }), cp.instance.init(), clearTimeout(this._connectionTimeout);
                                break;
                            case _.CONNECTION_ERROR:
                                this._ngZone.run(() => {
                                    this.isError = !0, this.message = "Connection Error", this.percentage = 0, this.hideProgress = !0
                                });
                                break;
                            case _.CONNECTION_CLOSED:
                                cp.instance.roomEngine && cp.instance.roomEngine.dispose(), this._ngZone.run(() => {
                                    this.isError = !0, this.message = "Connection Closed", this.percentage = 0, this.hideProgress = !0
                                }), h.call("disconnect", -1, "client.init.handshake.fail");
                                break;
                            case l.LOADED:
                                this._ngZone.run(() => {
                                    this.isLocalizationReady = !0, this.percentage = this.percentage + 20, this.hideProgress = !1
                                }), cp.instance.core.asset.downloadAssets(this.getPreloadAssetUrls(), t => {
                                    cp.instance.communication.init()
                                });
                                break;
                            case Qh.ENGINE_INITIALIZED:
                                this._ngZone.run(() => {
                                    this.isRoomEngineReady = !0, this.percentage = this.percentage + 20, this.hideProgress = !1
                                }), cp.instance.communication.connection.onReady();
                                break;
                            case c.AVATAR_RENDER_READY:
                                this._ngZone.run(() => {
                                    this.isAvatarRenderReady = !0, this.percentage = this.percentage + 20, this.hideProgress = !1
                                })
                        }
                    }
                    get isReady() {
                        return this._settingsService.isReady = this.isLocalizationReady && this.isRoomEngineReady && this.isAvatarRenderReady, this.isLocalizationReady && this.isRoomEngineReady && this.isAvatarRenderReady || !1
                    }
                    onConnectionTimeout() {
                        h.call("logDebug", "TcpAuth control socket security error")
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(_p), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["app-root"]
                    ],
                    decls: 3,
                    vars: 2,
                    consts: [
                        ["id", "nitro"],
                        [3, "message", "percentage", "hideProgress", 4, "ngIf"],
                        [4, "ngIf"],
                        [3, "message", "percentage", "hideProgress"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Rc(1, HC, 1, 3, "nitro-loading", 1), i.Rc(2, WC, 1, 0, "nitro-main-component", 2), i.Yb()), 2 & t && (i.Gb(1), i.tc("ngIf", !e.isReady || e.isError), i.Gb(1), i.tc("ngIf", e.isReady && !e.isError))
                    },
                    directives: [hp.n, mp, BC],
                    encapsulation: 2
                }), t
            })();
            var KC = s("dbUT"),
                XC = s("eaoH"),
                qC = s("oOf3"),
                JC = s("5eHb");
            const QC = {
                suppressScrollX: !0
            };
            let $C = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [{
                            provide: kv.a,
                            useValue: QC
                        }, Zb],
                        imports: [
                            [n.a, r.a, hp.b, VE.f, VE.p, JC.a.forRoot(), _T.e, _T.i, _T.h, qC.a, ef.a, kv.c, KC.a.forRoot(), XC.a], hp.b, VE.f, VE.p, JC.a, _T.e, _T.i, _T.h, qC.a, ef.a, kv.c, KC.a, XC.a
                        ]
                    }), t
                })(),
                tM = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [II],
                        imports: [
                            [$C]
                        ]
                    }), t
                })();
            const eM = ["nitro-avatar-model-viewer-component", ""],
                sM = function(t) {
                    return {
                        active: t
                    }
                },
                iM = function(t) {
                    return {
                        selected: t
                    }
                };

            function nM(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 3), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(2).selectCategory(s.name)
                    })), i.Vb(1, "i", 4), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc(2);
                    i.tc("ngClass", i.xc(5, sM, s.activeCategory === t)), i.Gb(1), i.Jb("icon ", t.name, "-icon"), i.tc("ngClass", i.xc(7, iM, s.activeCategory === t))
                }
            }

            function rM(t, e) {
                if (1 & t && (i.Xb(0), i.Rc(1, nM, 2, 9, "div", 2), i.Wb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngForOf", t.categories.getValues())
                }
            }

            function oM(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "div", 5), i.jc("click", (function() {
                        return i.Gc(t), i.mc().selectGender("M")
                    })), i.Vb(2, "i", 6), i.Yb(), i.Zb(3, "p", 7), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Zb(6, "div", 8), i.jc("click", (function() {
                        return i.Gc(t), i.mc().selectGender("F")
                    })), i.Vb(7, "i", 9), i.Yb(), i.Zb(8, "p", 7), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngClass", i.xc(10, sM, "M" === t.gender)), i.Gb(1), i.tc("ngClass", i.xc(12, iM, "M" === t.gender)), i.Gb(2), i.Uc(i.oc(5, 6, "register.gender.male")), i.Gb(2), i.tc("ngClass", i.xc(14, sM, "F" === t.gender)), i.Gb(1), i.tc("ngClass", i.xc(16, iM, "F" === t.gender)), i.Gb(2), i.Uc(i.oc(10, 8, "register.gender.female"))
                }
            }
            const aM = function(t, e) {
                return {
                    "": t,
                    "flex-grow-1": e
                }
            };

            function cM(t, e) {
                if (1 & t && (i.Zb(0, "div", 4), i.Vb(1, "div", 13), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.tc("ngClass", i.yc(6, aM, t.maxPaletteCount >= 2, t.maxPaletteCount <= 1)), i.Gb(1), i.tc("model", t.model)("category", t.activeCategory)("paletteSet", t.activeCategory.getPalette(0))("paletteIndex", 0)("maxPaletteCount", t.maxPaletteCount)
                }
            }

            function _M(t, e) {
                if (1 & t && (i.Zb(0, "div"), i.Vb(1, "div", 13), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(1), i.tc("model", t.model)("category", t.activeCategory)("paletteSet", t.activeCategory.getPalette(1))("paletteIndex", 1)("maxPaletteCount", t.maxPaletteCount)
                }
            }

            function hM(t, e) {
                if (1 & t && (i.Xb(0), i.Zb(1, "div", 10), i.Vb(2, "div", 11), i.Yb(), i.Zb(3, "div"), i.Rc(4, cM, 2, 9, "div", 12), i.Rc(5, _M, 2, 5, "div", 1), i.Yb(), i.Wb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.tc("model", t.model)("category", t.activeCategory)("partSet", t.activeCategory.parts), i.Gb(2), i.tc("ngIf", t.maxPaletteCount >= 1), i.Gb(1), i.tc("ngIf", 2 === t.maxPaletteCount)
                }
            }
            let lM = (() => {
                class t {
                    constructor(t) {
                        this._avatarEditorService = t, this.model = null, this.gender = null
                    }
                    ngOnChanges(t) {
                        this.prepareModel()
                    }
                    prepareModel() {
                        this.model && (this.model.setViewer(this), this.model.init(), this._activeCategory = null, this.selectFirstCategory())
                    }
                    selectFirstCategory() {
                        if (this.model)
                            for (const t of this.model.categories.getKeys())
                                if (t) return void this.selectCategory(t)
                    }
                    selectCategory(t) {
                        if (!this.model || !t) return;
                        const e = this.model.categories.getValue(t);
                        if (e) {
                            e.init(), this._activeCategory = e;
                            for (const t of this._activeCategory.parts)
                                if (t && t.isSelected) {
                                    this.model.maxPaletteCount = t.colorLayerCount;
                                    break
                                }
                        }
                    }
                    selectGender(t) {
                        this.model && t && this._avatarEditorService.component && (this._avatarEditorService.component.gender = t)
                    }
                    get categories() {
                        return this.model.categories
                    }
                    get activeCategory() {
                        return this._activeCategory
                    }
                    get canSetGender() {
                        return this.model && this.model.canSetGender
                    }
                    get maxPaletteCount() {
                        return this.model && this.model.maxPaletteCount || 1
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(vE))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-avatar-model-viewer-component", ""]
                    ],
                    inputs: {
                        model: "model",
                        gender: "gender"
                    },
                    features: [i.Eb],
                    attrs: eM,
                    decls: 4,
                    vars: 3,
                    consts: [
                        [1, "builder_viewport-menu"],
                        [4, "ngIf"],
                        ["class", "bvm-icon", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [1, "bvm-icon", 3, "ngClass", "click"],
                        [3, "ngClass"],
                        ["id", "male-facebody", 1, "bvm-icon", 3, "ngClass", "click"],
                        [1, "icon", "male-icon", 3, "ngClass"],
                        [1, "avatareditor-bvm-name"],
                        ["id", "female-facebody", 1, "bvm-icon", 3, "ngClass", "click"],
                        [1, "icon", "female-icon", 3, "ngClass"],
                        [1, "d-flex"],
                        ["nitro-avatar-set-viewer-component", "", 1, "w-100", 3, "model", "category", "partSet"],
                        [3, "ngClass", 4, "ngIf"],
                        ["nitro-avatar-palette-viewer-component", "", 3, "model", "category", "paletteSet", "paletteIndex", "maxPaletteCount"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Rc(1, rM, 2, 1, "ng-container", 1), i.Rc(2, oM, 11, 18, "ng-container", 1), i.Yb(), i.Rc(3, hM, 6, 5, "ng-container", 1)), 2 & t && (i.Gb(1), i.tc("ngIf", e.categories.length > 1), i.Gb(1), i.tc("ngIf", e.canSetGender), i.Gb(1), i.tc("ngIf", e.activeCategory))
                    },
                    encapsulation: 2
                }), t
            })();
            const uM = ["nitro-avatar-palette-viewer-component", ""],
                dM = function(t) {
                    return {
                        "color-object-active": t
                    }
                },
                gM = function(t) {
                    return {
                        "background-color": t
                    }
                };

            function mM(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 4), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectPalette(s)
                    })), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.tc("ngClass", i.xc(2, dM, t.isSelected))("ngStyle", i.xc(4, gM, t.color))
                }
            }
            const pM = function(t, e) {
                return {
                    "corelotest-g6": t,
                    corelotest: e
                }
            };
            let bM = (() => {
                class t {
                    constructor() {
                        this.model = null, this.category = null, this.paletteSet = [], this.paletteIndex = -1, this.maxPaletteCount = 1
                    }
                    ngOnChanges(t) {
                        t.category && this.perfectScrollBar && this.perfectScrollBar.directiveRef && this.perfectScrollBar.directiveRef.scrollToTop()
                    }
                    selectPalette(t) {
                        if (!(this.model && this.category && this.paletteSet && t)) return;
                        if (!t || !this.model) return;
                        const e = this.paletteSet.indexOf(t); - 1 !== e && this.model.selectColor(this.category.name, e, this.paletteIndex)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-avatar-palette-viewer-component", ""]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(kv.b, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.perfectScrollBar = t.first)
                        }
                    },
                    inputs: {
                        model: "model",
                        category: "category",
                        paletteSet: "paletteSet",
                        paletteIndex: "paletteIndex",
                        maxPaletteCount: "maxPaletteCount"
                    },
                    features: [i.Eb],
                    attrs: uM,
                    decls: 4,
                    vars: 5,
                    consts: [
                        [1, "corelotest", 3, "ngClass"],
                        ["id", "clothes-color"],
                        [1, "ccolor-max-width"],
                        ["class", "color-object", 3, "ngClass", "ngStyle", "click", 4, "ngFor", "ngForOf"],
                        [1, "color-object", 3, "ngClass", "ngStyle", "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Rc(3, mM, 1, 6, "div", 3), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("ngClass", i.yc(2, pM, e.maxPaletteCount >= 2, e.maxPaletteCount <= 1)), i.Gb(3), i.tc("ngForOf", e.paletteSet))
                    },
                    directives: [hp.l, hp.m, hp.o],
                    encapsulation: 2
                }), t
            })();
            const EM = ["nitro-avatar-set-viewer-component", ""];

            function fM(t, e) {
                1 & t && i.Vb(0, "i", 5)
            }
            const SM = function(t) {
                    return {
                        "clothes-object-active": t
                    }
                },
                IM = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function RM(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 2), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectPart(s)
                    })), i.Zb(1, "div", 3), i.Rc(2, fM, 1, 0, "i", 4), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.tc("ngClass", i.xc(3, SM, t.isSelected)), i.Gb(1), i.tc("ngStyle", t.imageUrl && i.xc(5, IM, "url(" + t.imageUrl + ")")), i.Gb(1), i.tc("ngIf", t.isClear)
                }
            }
            let vM = (() => {
                    class t {
                        constructor() {
                            this.model = null, this.category = null, this.partSet = []
                        }
                        ngOnChanges(t) {
                            t.category && this.perfectScrollBar && this.perfectScrollBar.directiveRef && this.perfectScrollBar.directiveRef.scrollToTop()
                        }
                        selectPart(t) {
                            if (!(this.model && this.category && this.partSet && t)) return;
                            const e = this.partSet.indexOf(t); - 1 !== e && this.model.selectPart(this.category.name, e)
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["", "nitro-avatar-set-viewer-component", ""]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && i.Zc(kv.b, !0), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.perfectScrollBar = t.first)
                            }
                        },
                        inputs: {
                            model: "model",
                            category: "category",
                            partSet: "partSet"
                        },
                        features: [i.Eb],
                        attrs: EM,
                        decls: 2,
                        vars: 1,
                        consts: [
                            ["id", "clothes-box"],
                            ["class", "clothes-object", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                            [1, "clothes-object", 3, "ngClass", "click"],
                            [1, "corelo-view-generic-position", 3, "ngStyle"],
                            ["class", "i icon clear-icon", 4, "ngIf"],
                            [1, "i", "icon", "clear-icon"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Rc(1, RM, 3, 7, "div", 1), i.Yb()), 2 & t && (i.Gb(1), i.tc("ngForOf", e.partSet))
                        },
                        directives: [hp.m, hp.l, hp.o, hp.n],
                        encapsulation: 2
                    }), t
                })(),
                TM = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [vE],
                        imports: [
                            [$C]
                        ]
                    }), t
                })();
            i.Jc(uR, [hp.n, CE, kE, hp.m, hp.l, cf, lM], [tE]), i.Jc(lM, [hp.n, hp.m, hp.l, vM, bM], [tE]);
            let OM = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [jI],
                        imports: [
                            [$C]
                        ]
                    }), t
                })(),
                yM = (() => {
                    class t {
                        constructor(t, e) {
                            this._catalogService = t, this._ngZone = e
                        }
                        hide() {
                            this._catalogService.component && this._catalogService.component.setInsufficientFunds(!1)
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(NR), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-catalog-confirm-purchase-insufficient-funds"]
                        ],
                        decls: 20,
                        vars: 12,
                        consts: [
                            ["dragHandle", "#mobibuy-hatadrag", "id", "mobibuy-hata", 3, "bringToTop", "draggable"],
                            ["id", "mobibuy-hatadrag"],
                            [1, "mbh-baslik"],
                            [1, "old-kapat", 3, "click"],
                            [1, "mobibuy-hata-box"],
                            [1, "mbuy-hata-text-box"],
                            [1, "mbuyh-text"],
                            [1, "mobi-buy-iptal-et", 3, "click"],
                            [1, "mobi-buy-onayla"],
                            [1, "mb-islem-onayla-box"],
                            [1, "mb-tamam-text"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.jc("click", (function() {
                                return e.hide()
                            })), i.Yb(), i.Yb(), i.Zb(6, "div", 4), i.Zb(7, "div", 5), i.Zb(8, "p", 6), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Yb(), i.Zb(11, "div", 7), i.jc("click", (function() {
                                return e.hide()
                            })), i.Zb(12, "u"), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Zb(15, "div", 8), i.Zb(16, "div", 9), i.Zb(17, "p", 10), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 4, "catalog.alert.notenough.title")), i.Gb(6), i.Uc(i.oc(10, 6, "catalog.alert.notenough.credits.description")), i.Gb(4), i.Uc(i.oc(14, 8, "catalog.purchase_confirmation.cancel")), i.Gb(5), i.Uc(i.oc(19, 10, "generic.ok")))
                        },
                        directives: [CE, kE],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })();
            const AM = ["imageElement"];

            function CM(t, e) {
                if (1 & t && (i.Zb(0, "p", 22), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.Vc("x", t.quantity, " adet")
                }
            }

            function MM(t, e) {
                if (1 & t && (i.Zb(0, "div", 12), i.Zb(1, "p", 23), i.Tc(2), i.Yb(), i.Zb(3, "div", 24), i.Vb(4, "i", 25), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.costCredits)
                }
            }

            function UM(t, e) {
                1 & t && (i.Zb(0, "p", 26), i.Tc(1, "+"), i.Yb())
            }

            function DM(t, e) {
                if (1 & t && (i.Zb(0, "p", 23), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.Vc("", t.costPoints, " ")
                }
            }

            function NM(t, e) {
                if (1 & t && (i.Zb(0, "div", 24), i.Vb(1, "i"), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.Jb("icon icon-currencybig-", t.pointsType, "")
                }
            }
            const wM = function(t) {
                return {
                    "background-image": t
                }
            };
            let LM = (() => {
                class t {
                    constructor(t, e) {
                        this._catalogService = t, this._ngZone = e, this.page = null, this.offer = null, this.quantity = 1, this.extra = null, this.completed = !1, this.isGift = !1, this._imageUrl = ""
                    }
                    ngOnChanges(t) {
                        const e = t.offer.currentValue;
                        e && t.offer.previousValue !== e && this.refresh()
                    }
                    hide() {
                        this._catalogService.component && this._catalogService.component.hidePurchaseConfirmation()
                    }
                    refresh() {
                        this.refreshImage()
                    }
                    refreshImage() {
                        this._ngZone.runOutsideAngular(() => {
                            this._imageUrl = "";
                            const t = this._catalogService.component && this._catalogService.component.roomPreviewer;
                            if (!t) return;
                            const e = t.getRoomPreviewObject();
                            if (e) {
                                const t = e.visualization.getImage(16711680, -1),
                                    s = ot.generateImage(t);
                                s && (this._imageUrl = s.src)
                            }
                        })
                    }
                    purchase() {
                        this._catalogService.purchase(this.page, this.offer, this.quantity, this.extra)
                    }
                    completePurchase() {
                        this._ngZone.runOutsideAngular(() => {
                            const t = new HTMLImageElement;
                            t.className = "toolbar-icon-animation", t.src = this._imageUrl, t.style.visibility = "hidden", this.imageElement && this.imageElement.nativeElement.appendChild(t);
                            const e = t.getBoundingClientRect(),
                                s = new Rl(t, e.x, e.y);
                            s.iconName = Sl.INVENTORY, cp.instance.roomEngine.events.dispatchEvent(s)
                        })
                    }
                    get costCredits() {
                        return this.offer.priceCredits * this.quantity
                    }
                    get costPoints() {
                        return this.offer.priceActivityPoints * this.quantity
                    }
                    get pointsType() {
                        return this.offer.priceActivityPointsType
                    }
                    get imageUrl() {
                        return this._imageUrl
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(NR), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-catalog-confirm-purchase-component"]
                    ],
                    viewQuery: function(t, e) {
                        if (1 & t && i.Zc(AM, !0), 2 & t) {
                            let t;
                            i.Cc(t = i.kc()) && (e.imageElement = t.first)
                        }
                    },
                    inputs: {
                        page: "page",
                        offer: "offer",
                        quantity: "quantity",
                        extra: "extra",
                        completed: "completed",
                        isGift: "isGift"
                    },
                    features: [i.Eb],
                    decls: 30,
                    vars: 18,
                    consts: [
                        ["dragHandle", "#mobibuy-basarilidrag", "id", "mobibuy-basarili", 3, "bringToTop", "draggable"],
                        ["id", "mobibuy-basarilidrag"],
                        [1, "mbb-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "mobibuy-basarili-box"],
                        [1, "mbb-mobi_onizleme", 3, "ngStyle"],
                        ["imageElement", ""],
                        [1, "mbb-mobi_adi", "offer-name"],
                        ["class", "mbb-mobi_adet offer-quantity", 4, "ngIf"],
                        [1, "mbb-fiyat-text"],
                        [1, "mbb-fiyat-box"],
                        ["class", "mdb-fbox", 4, "ngIf"],
                        [1, "mdb-fbox"],
                        ["class", "plusprice", 4, "ngIf"],
                        ["class", "hc-fiyat-text", 4, "ngIf"],
                        ["class", "mobi-fiyat-birimico", 4, "ngIf"],
                        [1, "mobi-buy-iptal-et", 3, "click"],
                        [1, "mbb-islem-iptal-box"],
                        [1, "mbb-iptal-text"],
                        [1, "mobi-buy-onayla", 3, "click"],
                        [1, "mbb-islem-onayla-box"],
                        [1, "mbb-tamam-text"],
                        [1, "mbb-mobi_adet", "offer-quantity"],
                        [1, "hc-fiyat-text"],
                        [1, "mobi-fiyat-birimico"],
                        [1, "icon", "icon-currencybig-cc"],
                        [1, "plusprice"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.jc("click", (function() {
                            return e.hide()
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 4), i.Vb(7, "div", 5, 6), i.Zb(9, "p", 7), i.Tc(10), i.Yb(), i.Rc(11, CM, 2, 1, "p", 8), i.Zb(12, "p", 9), i.Tc(13, "\xdccret:"), i.Yb(), i.Zb(14, "div", 10), i.Rc(15, MM, 5, 1, "div", 11), i.Zb(16, "div", 12), i.Rc(17, UM, 2, 0, "p", 13), i.Rc(18, DM, 2, 1, "p", 14), i.Rc(19, NM, 2, 3, "div", 15), i.Yb(), i.Yb(), i.Zb(20, "div", 16), i.jc("click", (function() {
                            return e.hide()
                        })), i.Zb(21, "div", 17), i.Zb(22, "p", 18), i.Tc(23), i.nc(24, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Zb(25, "div", 19), i.jc("click", (function() {
                            return e.purchase()
                        })), i.Zb(26, "div", 20), i.Zb(27, "p", 21), i.Tc(28), i.nc(29, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 10, e.isGift ? "catalog.purchase_confirmation.gift.title" : "catalog.purchase_confirmation.title")), i.Gb(4), i.tc("ngStyle", i.xc(16, wM, "url(" + e.imageUrl + ")")), i.Gb(3), i.Uc(e.offer.localizationId), i.Gb(1), i.tc("ngIf", e.quantity), i.Gb(4), i.tc("ngIf", e.costCredits), i.Gb(2), i.tc("ngIf", e.costCredits && e.costPoints), i.Gb(1), i.tc("ngIf", e.costPoints), i.Gb(1), i.tc("ngIf", e.costPoints), i.Gb(4), i.Uc(i.oc(24, 12, "catalog.purchase_confirmation.cancel")), i.Gb(5), i.Uc(i.oc(29, 14, e.isGift ? "catalog.purchase_confirmation.gift" : "catalog.purchase_confirmation.buy")))
                    },
                    directives: [CE, kE, hp.o, hp.n],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();

            function xM(t, e) {
                if (1 & t && (i.Zb(0, "div", 12), i.Zb(1, "p", 23), i.Tc(2), i.Yb(), i.Zb(3, "div", 15), i.Vb(4, "i", 24), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.subscription.priceCredits)
                }
            }

            function PM(t, e) {
                if (1 & t && (i.Zb(0, "p", 23), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.Vc("", t.subscription.priceActivityPoints, " ")
                }
            }
            let FM = (() => {
                class t {
                    constructor(t, e) {
                        this._catalogService = t, this._ngZone = e, this.subscription = null
                    }
                    getSubscriptionText() {
                        let t = cp.instance.localization.getValue("catalog.vip.buy.confirm.end_date");
                        return t = t.replace("%month%", this.subscription.month.toString()), t = t.replace("%day%", this.subscription.day.toString()), t = t.replace("%year%", this.subscription.year.toString()), t
                    }
                    getSubscriptionHeader() {
                        const t = this._catalogService.purse,
                            e = 0 == this.subscription.months ? "days" : "months",
                            s = cp.instance.localization.getValue("catalog.vip.buy.confirm." + (t.clubDays > 0 || t.clubPeriods > 0 ? "extension." : "subscription.") + e),
                            i = 0 == this.subscription.months ? this.subscription.extraDays : this.subscription.months;
                        return s.replace("%NUM_" + e.toUpperCase() + "%", i.toString())
                    }
                    getCurrencyUrl(t) {
                        return cp.instance.getConfiguration("currency.asset.icon.url").replace("%type%", t.toString())
                    }
                    hide() {
                        this._catalogService.component && this._catalogService.component.hidePurchaseConfirmation()
                    }
                    purchase() {
                        this._catalogService.purchaseById(this._catalogService.activePage.pageId, this.subscription.offerId, 1)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(NR), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-catalog-confirm-vip-subscription-component"]
                    ],
                    inputs: {
                        subscription: "subscription"
                    },
                    decls: 33,
                    vars: 13,
                    consts: [
                        ["dragHandle", "#mobibuy-basarilidrag", "id", "mobibuy-basarili", 3, "bringToTop", "draggable"],
                        ["id", "mobibuy-basarilidrag"],
                        [1, "mbb-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "mobibuy-basarili-box"],
                        [1, "mbb-mobi_onizleme", 2, "display", "flex", "flex-direction", "column", "justify-content", "center", "align-items", "center"],
                        [1, "icon", "icon-catalogue-hc_big"],
                        [1, "mbb-mobi_adi", 2, "padding-top", "30px"],
                        [1, "mbb-mobi_adi", 2, "padding-top", "0px"],
                        [1, "mbb-fiyat-text"],
                        [1, "mbb-fiyat-box"],
                        ["class", "mdb-fbox", 4, "ngIf"],
                        [1, "mdb-fbox"],
                        [1, "plusprice"],
                        ["class", "hc-fiyat-text", 4, "ngIf"],
                        [1, "mobi-fiyat-birimico"],
                        [1, "icon", "icon-currencybig-5"],
                        [1, "mobi-buy-iptal-et", 3, "click"],
                        [1, "mbb-islem-iptal-box"],
                        [1, "mbb-iptal-text"],
                        [1, "mobi-buy-onayla", 3, "click"],
                        [1, "mbb-islem-onayla-box"],
                        [1, "mbb-tamam-text"],
                        [1, "hc-fiyat-text"],
                        [1, "icon", "icon-currencybig-cc"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.jc("click", (function() {
                            return e.hide()
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 4), i.Zb(7, "div", 5), i.Vb(8, "i", 6), i.Yb(), i.Zb(9, "p", 7), i.Tc(10), i.Yb(), i.Zb(11, "p", 8), i.Tc(12), i.Yb(), i.Zb(13, "p", 9), i.Tc(14, "\xdccret:"), i.Yb(), i.Zb(15, "div", 10), i.Rc(16, xM, 5, 1, "div", 11), i.Zb(17, "div", 12), i.Zb(18, "p", 13), i.Tc(19, "+"), i.Yb(), i.Rc(20, PM, 2, 1, "p", 14), i.Zb(21, "div", 15), i.Vb(22, "i", 16), i.Yb(), i.Yb(), i.Yb(), i.Zb(23, "div", 17), i.jc("click", (function() {
                            return e.hide()
                        })), i.Zb(24, "div", 18), i.Zb(25, "p", 19), i.Tc(26), i.nc(27, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Zb(28, "div", 20), i.jc("click", (function() {
                            return e.purchase()
                        })), i.Zb(29, "div", 21), i.Zb(30, "p", 22), i.Tc(31), i.nc(32, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 7, "catalog.club.buy.confirm")), i.Gb(7), i.Uc(e.getSubscriptionHeader()), i.Gb(2), i.Uc(e.getSubscriptionText()), i.Gb(4), i.tc("ngIf", e.subscription.priceCredits), i.Gb(4), i.tc("ngIf", e.subscription.priceActivityPoints), i.Gb(6), i.Uc(i.oc(27, 9, "catalog.purchase_confirmation.cancel")), i.Gb(5), i.Uc(i.oc(32, 11, "catalog.club.buy.subscribe")))
                    },
                    directives: [CE, kE, hp.n],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();

            function GM(t, e) {
                if (1 & t && i.Vb(0, "nitro-catalog-navigation-item-component", 3), 2 & t) {
                    const t = i.mc().$implicit;
                    i.tc("catalogPage", t)
                }
            }

            function YM(t, e) {
                if (1 & t && (i.Xb(0), i.Rc(1, GM, 1, 1, "nitro-catalog-navigation-item-component", 2), i.Wb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.tc("ngIf", t.visible)
                }
            }
            let kM = (() => {
                class t {
                    constructor(t) {
                        this._catalogService = t, this.catalogPage = null
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(NR))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-catalog-navigation-set-component"]
                    ],
                    inputs: {
                        catalogPage: "catalogPage"
                    },
                    decls: 2,
                    vars: 1,
                    consts: [
                        [1, "list-grouptest", "list-group-flush"],
                        [4, "ngFor", "ngForOf"],
                        [3, "catalogPage", 4, "ngIf"],
                        [3, "catalogPage"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "ul", 0), i.Rc(1, YM, 2, 1, "ng-container", 1), i.Yb()), 2 & t && (i.Gb(1), i.tc("ngForOf", e.catalogPage.children))
                    },
                    encapsulation: 2
                }), t
            })();
            const VM = function(t, e) {
                return {
                    "list-menu-ac": t,
                    "list-menu-kapat": e
                }
            };

            function ZM(t, e) {
                if (1 & t && i.Vb(0, "div", 8), 2 & t) {
                    const t = i.mc();
                    i.tc("ngClass", i.yc(1, VM, !t.isToggled, t.isToggled))
                }
            }

            function jM(t, e) {
                if (1 & t && i.Vb(0, "nitro-catalog-navigation-set-component", 9), 2 & t) {
                    const t = i.mc();
                    i.tc("catalogPage", t.catalogPage)
                }
            }
            const BM = function(t) {
                return {
                    ctlgmenuactive: t
                }
            };
            let HM = (() => {
                class t {
                    constructor(t) {
                        this._catalogService = t, this.catalogPage = null
                    }
                    selectPage() {
                        this.isActive ? this._catalogService.manuallyCollapsePage(this.catalogPage) : this._catalogService.component && this._catalogService.component.selectPage(this.catalogPage)
                    }
                    get activePage() {
                        return this._catalogService.activePage
                    }
                    get activePageData() {
                        return this._catalogService.activePageData
                    }
                    get isDescendant() {
                        return this._catalogService.isDescendant(this.catalogPage, this.activePageData)
                    }
                    get isActive() {
                        return this.catalogPage.pageId === (this.activePage && this.activePage.pageId) || this.isDescendant
                    }
                    get isCollapsed() {
                        return !!(this._catalogService.manuallyCollapsed.indexOf(this.catalogPage) >= 0)
                    }
                    get isToggled() {
                        return !this.isCollapsed && !!this.isActive
                    }
                    get iconUrl() {
                        return cp.instance.getConfiguration("catalog.asset.icon.url").replace("%name%", (this.catalogPage.icon || 0).toString())
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(NR))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-catalog-navigation-item-component"]
                    ],
                    inputs: {
                        catalogPage: "catalogPage"
                    },
                    decls: 9,
                    vars: 7,
                    consts: [
                        [1, "nav-item"],
                        [1, "cmenu-box", "corelo-listitem", 3, "ngClass", "click"],
                        [1, "menulist-pagebox"],
                        [1, "list-menu-ico"],
                        [1, "icon", 3, "src"],
                        [1, "list-menu-pagename"],
                        ["class", "list-menu-ac", 3, "ngClass", 4, "ngIf"],
                        [3, "catalogPage", 4, "ngIf"],
                        [1, "list-menu-ac", 3, "ngClass"],
                        [3, "catalogPage"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "li", 1), i.jc("click", (function() {
                            return e.selectPage()
                        })), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Vb(4, "img", 4), i.Yb(), i.Zb(5, "p", 5), i.Tc(6), i.Yb(), i.Rc(7, ZM, 1, 4, "div", 6), i.Yb(), i.Yb(), i.Rc(8, jM, 1, 1, "nitro-catalog-navigation-set-component", 7), i.Yb()), 2 & t && (i.Gb(1), i.tc("ngClass", i.xc(5, BM, e.isActive)), i.Gb(3), i.tc("src", e.iconUrl, i.Ic), i.Gb(2), i.Uc(e.catalogPage.localization), i.Gb(1), i.tc("ngIf", e.catalogPage.children && e.catalogPage.children.length), i.Gb(1), i.tc("ngIf", e.isToggled && e.catalogPage.children && e.catalogPage.children.length > 0))
                    },
                    directives: [hp.l, hp.n, kM],
                    encapsulation: 2
                }), t
            })();
            const WM = ["nitro-catalog-navigation-component", ""];

            function zM(t, e) {
                if (1 & t && i.Vb(0, "nitro-catalog-navigation-set-component", 3), 2 & t) {
                    const t = i.mc();
                    i.tc("catalogPage", t.catalogPage)
                }
            }
            let KM = (() => {
                class t {
                    constructor(t) {
                        this._catalogService = t
                    }
                    get catalogPage() {
                        return this._catalogService.component && this._catalogService.component.activeTab || null
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(NR))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-catalog-navigation-component", ""]
                    ],
                    attrs: WM,
                    decls: 3,
                    vars: 1,
                    consts: [
                        [1, "catalog-menubox"],
                        [1, "ctlg_menu-liste"],
                        [3, "catalogPage", 4, "ngIf"],
                        [3, "catalogPage"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Rc(2, zM, 1, 1, "nitro-catalog-navigation-set-component", 2), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngIf", e.catalogPage))
                    },
                    directives: [hp.n, kM],
                    encapsulation: 2
                }), t
            })();
            const XM = ["nitro-catalog-purchase-component", ""];

            function qM(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 10), i.Zb(1, "p", 11), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Zb(4, "input", 12), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().quantity = e
                    })), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(i.oc(3, 3, "catalog.bundlewidget.quantity")), i.Gb(2), i.tc("ngModel", t.quantity)("max", t.maxQuantity)
                }
            }

            function JM(t, e) {
                if (1 & t && (i.Zb(0, "div", 13), i.Zb(1, "p", 14), i.Tc(2, "+"), i.Yb(), i.Zb(3, "p", 15), i.Tc(4), i.Yb(), i.Zb(5, "div", 16), i.Vb(6, "i"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(4), i.Uc(t.costPoints), i.Gb(2), i.Jb("icon icon-currencybig-", t.pointsType, "")
                }
            }

            function QM(t, e) {
                if (1 & t && (i.Zb(0, "div", 17), i.Zb(1, "p", 18), i.Tc(2), i.Yb(), i.Vb(3, "div", 19), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(t.costCredits)
                }
            }
            const $M = function(t, e) {
                    return {
                        "flex-column": t,
                        "justify-content-between": e
                    }
                },
                tU = function(t) {
                    return [t]
                };
            let eU = (() => {
                    class t {
                        constructor(t) {
                            this._catalogService = t, this.activePage = null, this.activeOffer = null, this.quantityEnabled = !1, this.vertical = !1, this.quantity = 1
                        }
                        ngOnChanges(t) {
                            const e = t.activeOffer.currentValue;
                            e && e !== t.activeOffer.previousValue && this.resetOffer()
                        }
                        resetOffer() {
                            this.quantity = 1
                        }
                        purchase(t = !1) {
                            this._catalogService.component && this._catalogService.component.confirmPurchase(this.activePage, this.activeOffer, this.quantity, this.extra, t)
                        }
                        increase() {
                            this.quantity >= this.maxQuantity || this.quantity++
                        }
                        decrease() {
                            this.quantity--, this.quantity < 1 && (this.quantity = 1)
                        }
                        get costCredits() {
                            return this.activeOffer.priceCredits * this.quantity
                        }
                        get costPoints() {
                            return this.activeOffer.priceActivityPoints * this.quantity
                        }
                        get pointsType() {
                            return this.activeOffer.priceActivityPointsType
                        }
                        get extra() {
                            return this.activeOffer.products[0] && this.activeOffer.products[0].extraParam
                        }
                        get maxQuantity() {
                            return 99
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(NR))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["", "nitro-catalog-purchase-component", ""]
                        ],
                        inputs: {
                            activePage: "activePage",
                            activeOffer: "activeOffer",
                            quantityEnabled: "quantityEnabled",
                            vertical: "vertical"
                        },
                        features: [i.Eb],
                        attrs: XM,
                        decls: 16,
                        vars: 22,
                        consts: [
                            [1, "mobi-purchase-box", 3, "ngClass"],
                            ["class", "mobi-adet-box", 4, "ngIf"],
                            [1, "mobi-altfiyat-box", 3, "ngClass"],
                            [1, "mobifiyat-text"],
                            ["class", "mdb-fbox_bottom mobi-fiyat-dia", 4, "ngIf"],
                            ["class", "mdb-fbox_bottom mobi-fiyat-cc", 4, "ngIf"],
                            [1, "mobi-hediye-box", 3, "click"],
                            [1, "mobigift-text"],
                            [1, "mobi-buy-box", 3, "ngClass", "click"],
                            [1, "mobibuy-text"],
                            [1, "mobi-adet-box"],
                            [1, "mobiadet-text"],
                            ["type", "number", "min", "1", 1, "mobiadet", 3, "ngModel", "max", "ngModelChange"],
                            [1, "mdb-fbox_bottom", "mobi-fiyat-dia"],
                            [1, "plusprice"],
                            [1, "mobi-mapfbox-fiyat-text"],
                            [1, "mobi-fiyat-birimico", 2, "margin-left", "3px"],
                            [1, "mdb-fbox_bottom", "mobi-fiyat-cc"],
                            [1, "mobi-mapfbox-fiyat-text", 2, "padding-right", "5px"],
                            [1, "mobi-fiyat-birimico", 2, "background-image", "url(./assets/images/catalog/bigcc.png)", "height", "20px", "margin-top", "3px", "margin-left", "11px", "margin-right", "2px"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Rc(1, qM, 5, 5, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "p", 3), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Rc(6, JM, 7, 4, "div", 4), i.Rc(7, QM, 4, 1, "div", 5), i.Yb(), i.Zb(8, "div", 6), i.jc("click", (function() {
                                return e.purchase(!0)
                            })), i.Zb(9, "p", 7), i.Tc(10), i.nc(11, "translate"), i.Yb(), i.Yb(), i.Zb(12, "div", 8), i.jc("click", (function() {
                                return e.purchase()
                            })), i.Zb(13, "p", 9), i.Tc(14), i.nc(15, "translate"), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("ngClass", i.yc(15, $M, e.vertical, e.quantityEnabled)), i.Gb(1), i.tc("ngIf", e.quantityEnabled), i.Gb(1), i.tc("ngClass", i.xc(18, tU, "")), i.Gb(2), i.Uc(i.oc(5, 9, "catalog.bundlewidget.price")), i.Gb(2), i.tc("ngIf", e.costPoints), i.Gb(1), i.tc("ngIf", e.costCredits), i.Gb(3), i.Uc(i.oc(11, 11, "catalog.purchase_confirmation.gift")), i.Gb(2), i.tc("ngClass", i.xc(20, tU, e.vertical ? "flex-column" : "")), i.Gb(2), i.Uc(i.oc(15, 13, "buy")))
                        },
                        directives: [hp.l, hp.n, VE.n, VE.b, VE.j, VE.l],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                sU = (() => {
                    class t {
                        constructor(t) {
                            this._catalogService = t, this.localization = null, this.voucherCode = ""
                        }
                        ngOnInit() {}
                        redeem() {
                            this._catalogService.redeemVoucher(this.voucherCode), this.voucherCode = ""
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(NR))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["redeem-voucher-component"]
                        ],
                        inputs: {
                            localization: "localization"
                        },
                        decls: 8,
                        vars: 5,
                        consts: [
                            [1, "fiskodu_box"],
                            [1, "fiskodu-aciklama"],
                            [1, "fis-kod", 3, "ngModel", "placeholder", "ngModelChange"],
                            [1, "fis-bozdur_box", 3, "click"],
                            [1, "fbozdur-butontext"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "p", 1), i.Tc(2, "Metter un code:"), i.Yb(), i.Zb(3, "input", 2), i.jc("ngModelChange", (function(t) {
                                return e.voucherCode = t
                            })), i.Yb(), i.Zb(4, "div", 3), i.jc("click", (function() {
                                return e.redeem()
                            })), i.Zb(5, "p", 4), i.Tc(6), i.nc(7, "translate"), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.uc("placeholder", e.localization.texts[1]), i.tc("ngModel", e.voucherCode), i.Gb(3), i.Uc(i.oc(7, 3, "redeem")))
                        },
                        directives: [VE.b, VE.j, VE.l],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })();
            const iU = ["previewImage"],
                nU = ["nitro-room-preview-component", ""];
            let rU = (() => {
                    class t {
                        constructor(t, e) {
                            this._elementRef = t, this.ngZone = e, this.roomPreviewer = null, this.width = 1, this.height = 1, this.renderingCanvas = null, this.displayObject = null, this.imageUrl = null, this.isRunning = !1, this.onClick = this.onClick.bind(this)
                        }
                        ngOnInit() {
                            this.roomPreviewer && (1 === this.width && (this.width = Math.trunc(this._elementRef.nativeElement.offsetWidth)), 1 === this.height && (this.height = Math.trunc(this._elementRef.nativeElement.offsetHeight)), this._elementRef.nativeElement.style.minWidth = this.width + "px", this._elementRef.nativeElement.style.minHeight = this.height + "px")
                        }
                        ngOnDestroy() {
                            this.stop()
                        }
                        ngAfterViewInit() {
                            this.roomPreviewer && (this.displayObject = this.roomPreviewer.getRoomCanvas(this.width, this.height), this.renderingCanvas = this.roomPreviewer.getRenderingCanvas()), this.start()
                        }
                        start() {
                            this.isRunning || (this.ngZone.runOutsideAngular(() => {
                                this.previewImageElement.addEventListener("click", this.onClick), cp.instance.ticker.add(this.update, this)
                            }), this.isRunning = !0)
                        }
                        stop() {
                            this.isRunning && (this.ngZone.runOutsideAngular(() => {
                                this.previewImageElement.removeEventListener("click", this.onClick), cp.instance.ticker.remove(this.update, this)
                            }), this.isRunning = !1)
                        }
                        update(t) {
                            if (this.roomPreviewer && this.renderingCanvas && this.displayObject && (this.roomPreviewer.updatePreviewRoomView(), this.renderingCanvas.canvasUpdated)) {
                                const t = cp.instance.renderer.extract.base64(this.displayObject);
                                this.previewImageElement.src = t
                            }
                        }
                        onClick(t) {
                            t && this.isRunning && this.roomPreviewer && (t.shiftKey ? this.roomPreviewer.changeRoomObjectDirection() : this.roomPreviewer.changeRoomObjectState())
                        }
                        get previewImageElement() {
                            return this.previewImage && this.previewImage.nativeElement || null
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(i.o), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["", "nitro-room-preview-component", ""]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && i.Zc(iU, !0), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.previewImage = t.first)
                            }
                        },
                        inputs: {
                            roomPreviewer: "roomPreviewer",
                            width: "width",
                            height: "height"
                        },
                        attrs: nU,
                        decls: 2,
                        vars: 0,
                        consts: [
                            [1, "room-preview-image"],
                            ["previewImage", ""]
                        ],
                        template: function(t, e) {
                            1 & t && i.Vb(0, "img", 0, 1)
                        },
                        encapsulation: 2
                    }), t
                })(),
                oU = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [NR],
                        imports: [
                            [$C]
                        ]
                    }), t
                })();
            i.Jc(QR, [hp.n, rU, hp.m, hp.l, hp.o, eU], [tE]), i.Jc(av, [hp.n, hp.o, sU], []), i.Jc(VR, [hp.n, cf, hp.m, hp.l, eU], []), i.Jc(yv, [hp.n, rU, hp.l, hp.m, hp.o, eU], [tE]), i.Jc(aT, [hp.n, CE, kE, hp.m, hp.l, hp.o, KM, LM, FM, yM], [tE]), i.Jc(kM, [hp.m, hp.n, HM], []);
            let aU = (() => {
                class t {}
                return t.\u0275mod = i.Sb({
                    type: t
                }), t.\u0275inj = i.Rb({
                    factory: function(e) {
                        return new(e || t)
                    },
                    providers: [Hb],
                    imports: [
                        [$C]
                    ]
                }), t
            })();
            const cU = ["nitro-friendlist-friends-list-component", ""];

            function _U(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().removeFriend(s)
                    })), i.Yb(), i.Zb(2, "div", 3), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().openFriendProfile(s)
                    })), i.Yb(), i.Zb(3, "div", 4), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectThread(s)
                    })), i.Zb(4, "p", 5), i.Tc(5, "Send message: "), i.Zb(6, "u", 6), i.Tc(7), i.Yb(), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(7), i.Uc(t.name)
                }
            }
            let hU = (() => {
                class t {
                    constructor(t, e) {
                        this._friendListService = t, this._ngZone = e, this.threadSelector = null, this.onlineOnly = !1
                    }
                    selectThread(t) {
                        if (!t) return;
                        const e = this._friendListService.getMessageThread(t.id);
                        e && this.threadSelector && this.threadSelector(e)
                    }
                    removeFriend(t) {
                        t && (cp.instance.communication.connection.send(new zc(t.id)), this._friendListService.friends.delete(t.id))
                    }
                    openFriendProfile(t) {
                        t && cp.instance.communication.connection.send(new Vh(t.id))
                    }
                    get friends() {
                        const t = Array.from(this._friendListService.friends.values());
                        return this.onlineOnly ? t.filter(t => t.online) : t
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(jb), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-friendlist-friends-list-component", ""]
                    ],
                    inputs: {
                        threadSelector: "threadSelector",
                        onlineOnly: "onlineOnly"
                    },
                    attrs: cU,
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "fbuttonbox", 4, "ngFor", "ngForOf"],
                        [1, "fbuttonbox"],
                        [1, "fb-userdeleted-box", 3, "click"],
                        [1, "fb-userprofil-box", 3, "click"],
                        [1, "fb-username-box", 3, "click"],
                        [1, "username-ad"],
                        [2, "color", "#9a1d1a"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, _U, 8, 1, "div", 0), 2 & t && i.tc("ngForOf", e.friends)
                    },
                    directives: [hp.m],
                    encapsulation: 2
                }), t
            })();
            const lU = ["nitro-friendlist-requests-list-component", ""];

            function uU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "div", 3), i.Zb(2, "div", 4), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(2).declineRequest(s.value)
                    })), i.Yb(), i.Zb(3, "div", 5), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(2).acceptRequest(s.value)
                    })), i.Yb(), i.Zb(4, "div", 6), i.Zb(5, "p", 7), i.Tc(6, "A new request from "), i.Zb(7, "u", 8), i.Tc(8), i.Yb(), i.Tc(9, "!"), i.Yb(), i.Yb(), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(8), i.Vc("(", t.value.requesterName, ")")
                }
            }

            function dU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "button", 1), i.jc("click", (function() {
                        return i.Gc(t), i.mc().declineAllRequests()
                    })), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Rc(4, uU, 10, 1, "ng-container", 2), i.nc(5, "keyvalue"), i.Wb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(i.oc(3, 2, "friendbar.requests.discard")), i.Gb(2), i.tc("ngForOf", i.oc(5, 4, t.requests))
                }
            }
            let gU = (() => {
                class t {
                    constructor(t) {
                        this._friendListService = t
                    }
                    acceptRequest(t) {
                        t && this._friendListService.acceptFriendRequest(t)
                    }
                    declineRequest(t) {
                        t && this._friendListService.removeFriendRequest(t)
                    }
                    declineAllRequests() {
                        this._friendListService.removeAllFriendRequests()
                    }
                    get requests() {
                        return this._friendListService.requests
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(jb))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-friendlist-requests-list-component", ""]
                    ],
                    attrs: lU,
                    decls: 1,
                    vars: 1,
                    consts: [
                        [4, "ngIf"],
                        ["type", "button", 1, "all-reddet", 3, "click"],
                        [4, "ngFor", "ngForOf"],
                        [1, "fbuttonbox"],
                        [1, "fb-userdeleted-box", 3, "click"],
                        [1, "fb-useronay-box", 3, "click"],
                        [1, "fb-username-box"],
                        [1, "username-ad"],
                        [2, "color", "#9a1d1a"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, dU, 6, 6, "ng-container", 0), 2 & t && i.tc("ngIf", e.requests.size > 0)
                    },
                    directives: [hp.n, hp.m],
                    pipes: [tE, hp.h],
                    encapsulation: 2
                }), t
            })();
            const mU = ["nitro-friendlist-friends-viewer-component", ""];

            function pU(t, e) {
                if (1 & t && (i.Zb(0, "div", 11), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.Uc(t.totalFriendRequests)
                }
            }

            function bU(t, e) {
                if (1 & t && i.Vb(0, "div", 12), 2 & t) {
                    const t = i.mc();
                    i.tc("threadSelector", t.threadSelector)("onlineOnly", t.onlineOnly)
                }
            }

            function EU(t, e) {
                1 & t && i.Vb(0, "div", 13)
            }
            const fU = function(t) {
                return {
                    "friendsbutton-active": t
                }
            };
            let SU = (() => {
                class t {
                    constructor(t, e) {
                        this._friendListService = t, this._ngZone = e, this.threadSelector = null, this._requestsShowing = !1, this._friendsShowing = !0, this._onlineOnly = !0
                    }
                    showOnlineFriends() {
                        this.showFriends(), this._onlineOnly = !0
                    }
                    showFriends() {
                        this._requestsShowing = !1, this._friendsShowing = !0, this._onlineOnly = !1
                    }
                    showRequests() {
                        this._requestsShowing = !0, this._friendsShowing = !1, this._onlineOnly = !1
                    }
                    get requestsShowing() {
                        return this._requestsShowing
                    }
                    get friendsShowing() {
                        return this._friendsShowing
                    }
                    get onlineOnly() {
                        return this._onlineOnly
                    }
                    get totalFriendRequests() {
                        return this._friendListService.requests.size
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(jb), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-friendlist-friends-viewer-component", ""]
                    ],
                    inputs: {
                        threadSelector: "threadSelector"
                    },
                    attrs: mU,
                    decls: 23,
                    vars: 24,
                    consts: [
                        [1, "friendsbuttongrup"],
                        [1, "friendsbutton", 3, "ngClass", "click"],
                        [1, "fbuttontxt"],
                        ["class", "bildirim", 4, "ngIf"],
                        [1, "friendsbutton", "fbsearch"],
                        [1, "fbuttontxt", "fbsearchcolor"],
                        [1, "friendsbuttongrup-hr"],
                        [1, "d-flex", "w-100"],
                        [1, "fbutton-list"],
                        ["nitro-friendlist-friends-list-component", "", "class", "fb-buttonbox", 3, "threadSelector", "onlineOnly", 4, "ngIf"],
                        ["nitro-friendlist-requests-list-component", "", "class", "fb-buttonbox", 4, "ngIf"],
                        [1, "bildirim"],
                        ["nitro-friendlist-friends-list-component", "", 1, "fb-buttonbox", 3, "threadSelector", "onlineOnly"],
                        ["nitro-friendlist-requests-list-component", "", 1, "fb-buttonbox"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.jc("click", (function() {
                            return e.showOnlineFriends()
                        })), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Yb(), i.Zb(5, "div", 1), i.jc("click", (function() {
                            return e.showFriends()
                        })), i.Zb(6, "p", 2), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Yb(), i.Zb(9, "div", 1), i.jc("click", (function() {
                            return e.showRequests()
                        })), i.Zb(10, "p", 2), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Rc(13, pU, 2, 1, "div", 3), i.Yb(), i.Zb(14, "div", 4), i.Zb(15, "p", 5), i.Tc(16), i.nc(17, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Vb(18, "div", 6), i.Zb(19, "div", 7), i.Zb(20, "div", 8), i.Rc(21, bU, 1, 2, "div", 9), i.Rc(22, EU, 1, 0, "div", 10), i.Yb(), i.Yb()), 2 & t && (i.Gb(1), i.tc("ngClass", i.xc(18, fU, e.friendsShowing && e.onlineOnly)), i.Gb(2), i.Uc(i.oc(4, 10, "friendlist.online")), i.Gb(2), i.tc("ngClass", i.xc(20, fU, e.friendsShowing && !e.onlineOnly)), i.Gb(2), i.Uc(i.oc(8, 12, "friendlist.friends.all")), i.Gb(2), i.tc("ngClass", i.xc(22, fU, e.requestsShowing)), i.Gb(2), i.Uc(i.oc(12, 14, "friendbar.requests.title")), i.Gb(2), i.tc("ngIf", e.totalFriendRequests > 0), i.Gb(3), i.Uc(i.oc(17, 16, "generic.search")), i.Gb(5), i.tc("ngIf", e.friendsShowing), i.Gb(1), i.tc("ngIf", e.requestsShowing))
                    },
                    directives: [hp.l, hp.n, hU, gU],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const IU = ["nitro-friendlist-thread-list-component", ""],
                RU = function(t) {
                    return {
                        "active-chat-menu-box-active": t
                    }
                };

            function vU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().selectThread(s)
                    })), i.Zb(1, "div", 2), i.Vb(2, "img", 3), i.Vb(3, "div", 4), i.Yb(), i.Zb(4, "div", 5), i.Tc(5), i.Yb(), i.Zb(6, "div", 6), i.Tc(7, "user_status"), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.tc("ngClass", i.xc(2, RU, s.currentThread === t)), i.Gb(5), i.Uc(t.participant.name)
                }
            }
            let TU = (() => {
                class t {
                    constructor(t, e) {
                        this._friendListService = t, this._ngZone = e, this.currentThread = null, this.threadSelector = null
                    }
                    selectThread(t) {
                        t && this.threadSelector && this.threadSelector(t)
                    }
                    get threads() {
                        const t = Array.from(this._friendListService.threads.values());
                        return t.sort((t, e) => e.lastUpdated - t.lastUpdated), t
                    }
                }
                return t.THREAD_SELECTED = "FLTLC_THREAD_SELECTED", t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(jb), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-friendlist-thread-list-component", ""]
                    ],
                    inputs: {
                        currentThread: "currentThread",
                        threadSelector: "threadSelector"
                    },
                    attrs: IU,
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "active-chat-menu-box", 3, "ngClass", "click", 4, "ngFor", "ngForOf"],
                        [1, "active-chat-menu-box", 3, "ngClass", "click"],
                        [1, "drcmsg-activechat_user-avatar"],
                        ["src", "https://www.habbo.com/habbo-imaging/avatarimage?figure=hd-180-1.ch-255-66.lg-280-110.sh-305-62.ha-1012-110.hr-828-61&action=std&gesture=std&direction=2&head_direction=2&size=s&headonly=1&img_format=png", 1, "drcmsg-uavatar-position"],
                        [1, "user-onof-status", "online"],
                        [1, "drcmsg-username"],
                        [1, "user-status"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, vU, 8, 4, "div", 0), 2 & t && i.tc("ngForOf", e.threads)
                    },
                    directives: [hp.m, hp.l],
                    encapsulation: 2
                }), t
            })();
            var OU = s("3E0/");
            const yU = ["threadScroller"],
                AU = ["nitro-friendlist-thread-viewer-component", ""];

            function CU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 25), i.jc("click", (function() {
                        return i.Gc(t), i.mc().followParticipant()
                    })), i.Yb()
                }
            }

            function MU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 26), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.index;
                        return i.mc().changeRelation(s)
                    })), i.Zb(1, "p", 27), i.Tc(2), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(2), i.Uc(t)
                }
            }
            const UU = function(t) {
                return [t]
            };

            function DU(t, e) {
                if (1 & t && (i.Zb(0, "div", 6), i.Zb(1, "div", 28), i.Zb(2, "div", 29), i.Tc(3, " username "), i.Yb(), i.Zb(4, "div", 30), i.Tc(5, " message-time"), i.Yb(), i.Yb(), i.Vb(6, "div", 6), i.Zb(7, "div", 31), i.Tc(8), i.Yb(), i.Yb()), 2 & t) {
                    const t = e.$implicit,
                        s = i.mc();
                    i.tc("ngClass", i.xc(7, UU, t.senderId === s.participant.id ? "chat-message-box" : "gonderilen-chat-message-box")), i.Gb(1), i.tc("ngClass", i.xc(9, UU, t.senderId === s.participant.id ? "sendmsg-user-information" : "gonderilen-sendmsg-user-information")), i.Gb(1), i.tc("ngClass", i.xc(11, UU, t.senderId === s.participant.id ? "sendmsg-username" : "gonderilen-sendmsg-username")), i.Gb(2), i.tc("ngClass", i.xc(13, UU, t.senderId === s.participant.id ? "message-time" : "gonderilen-message-time")), i.Gb(2), i.tc("ngClass", i.xc(15, UU, t.senderId === s.participant.id ? "leftok" : "rightok")), i.Gb(1), i.tc("ngClass", i.xc(17, UU, t.senderId === s.participant.id ? "sendmsg-chat-box" : "gonderilen-sendmsg-chat-box")), i.Gb(1), i.Vc(" ", t.message, "")
                }
            }
            let NU = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._friendListService = t, this._settingsService = e, this._ngZone = s, this.thread = null, this._subscription = null
                        }
                        ngOnChanges(t) {
                            const e = t.thread.previousValue,
                                s = t.thread.currentValue;
                            s && s !== e ? this.prepareThread() : s || s === e || this.unsubscribe()
                        }
                        ngOnDestroy() {
                            this.unsubscribe()
                        }
                        ngAfterViewInit() {
                            this.scrollToBottom()
                        }
                        unsubscribe() {
                            this._subscription && (this._subscription.unsubscribe(), this._subscription = null)
                        }
                        prepareThread() {
                            this.unsubscribe(), this._subscription = this.thread.emitter.asObservable().pipe(Object(OU.a)(1)).subscribe(t => {
                                switch (t) {
                                    case Vb.MESSAGE_RECEIVED:
                                        return void this.messageReceived()
                                }
                            })
                        }
                        messageReceived() {
                            this.scrollToBottom()
                        }
                        sendMessage(t) {
                            t && t.length && (this._ngZone.run(() => {
                                this.thread.insertChat(cp.instance.sessionDataManager.userId, t, 0, null), this.thread.setRead()
                            }), cp.instance.communication.connection.send(new Xc(this.participant.id, t)))
                        }
                        changeRelation(t) {
                            this.participant && -1 !== gc.RELATIONSHIP_TYPES.indexOf(t) && cp.instance.communication.connection.send(new Jc(this.participant.id, t))
                        }
                        followParticipant() {
                            this.participant && (this._settingsService.toggleFriendList(), cp.instance.communication.connection.send(new Zc(this.participant.id)))
                        }
                        onKeyDownEvent(t) {
                            if (!t) return;
                            const e = t.target;
                            if (e) switch (t.key) {
                                case "Enter":
                                    return this.sendMessage(e.value), void(e.value = "")
                            }
                        }
                        scrollToBottom() {
                            this.threadScroller && this.threadScroller.directiveRef.scrollToBottom(0, 200)
                        }
                        get participant() {
                            return this.thread.participant
                        }
                        get chats() {
                            return this.thread.chats
                        }
                        get relations() {
                            return gc.RELATIONSHIP_NAMES
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(jb), i.Ub(_p), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["", "nitro-friendlist-thread-viewer-component", ""]
                        ],
                        viewQuery: function(t, e) {
                            if (1 & t && i.Zc(yU, !0), 2 & t) {
                                let t;
                                i.Cc(t = i.kc()) && (e.threadScroller = t.first)
                            }
                        },
                        inputs: {
                            thread: "thread"
                        },
                        features: [i.Eb],
                        attrs: AU,
                        decls: 32,
                        vars: 15,
                        consts: [
                            [1, "messenger-chat-box"],
                            [1, "chatted-user"],
                            [1, "message-user-info"],
                            [1, "avatar-box"],
                            ["nitro-avatar-image", "", 1, "drcmsg-uavatar-position", 2, "margin", "-39px -31px", 3, "headOnly", "figure", "direction"],
                            [1, "messenger-info_chated-username"],
                            [3, "ngClass"],
                            [1, "messenger-info_chated-user-status"],
                            [1, "message-action"],
                            ["class", "goroom-user", 3, "click", 4, "ngIf"],
                            [1, "user-ticket"],
                            [1, "uticket_txt"],
                            ["ngbDropdown", "", 1, "user-ticket"],
                            ["ngbDropdownToggle", ""],
                            ["ngbDropdownMenu", "", 1, "user-friendship-status"],
                            ["class", "fs-box", "ngbDropdownItem", "", 3, "click", 4, "ngFor", "ngForOf"],
                            [1, "fs-bottom"],
                            [1, "messenger-chat"],
                            [1, "all-message-list"],
                            ["threadScroller", ""],
                            [3, "ngClass", 4, "ngFor", "ngForOf"],
                            [1, "write-message"],
                            ["placeholder", "Aa..", 1, "send-message", 3, "keydown.enter"],
                            [1, "send-button"],
                            [1, "send-txt"],
                            [1, "goroom-user", 3, "click"],
                            ["ngbDropdownItem", "", 1, "fs-box", 3, "click"],
                            [1, "activity-fs-txt"],
                            [1, "sendmsg-user-information", 3, "ngClass"],
                            [1, "sendmsg-username", 3, "ngClass"],
                            [1, "message-time", 3, "ngClass"],
                            [1, "sendmsg-chat-box", 3, "ngClass"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "div", 3), i.Vb(4, "div", 4), i.Yb(), i.Zb(5, "div", 5), i.Tc(6), i.Vb(7, "div", 6), i.Yb(), i.Zb(8, "div", 7), i.Tc(9), i.Yb(), i.Yb(), i.Zb(10, "div", 8), i.Rc(11, CU, 1, 0, "div", 9), i.Zb(12, "div", 10), i.Zb(13, "p", 11), i.Tc(14, "\u015eikayet"), i.Yb(), i.Yb(), i.Zb(15, "div", 12), i.Zb(16, "div", 13), i.Zb(17, "p", 11), i.Tc(18), i.Yb(), i.Yb(), i.Zb(19, "div", 14), i.Rc(20, MU, 3, 1, "div", 15), i.Vb(21, "div", 16), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Zb(22, "div", 17), i.Zb(23, "div", 18, 19), i.Rc(25, DU, 9, 19, "div", 20), i.Yb(), i.Yb(), i.Zb(26, "div", 21), i.Zb(27, "input", 22), i.jc("keydown.enter", (function(t) {
                                return e.onKeyDownEvent(t)
                            })), i.Yb(), i.Zb(28, "div", 23), i.Zb(29, "p", 24), i.Tc(30), i.nc(31, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.tc("headOnly", 1)("figure", e.thread.participant.figure)("direction", 2), i.Gb(2), i.Vc(" ", e.participant.name, " "), i.Gb(1), i.tc("ngClass", i.xc(13, UU, e.participant.online ? "chatonline" : "chatoffline")), i.Gb(2), i.Uc(e.participant.motto), i.Gb(2), i.tc("ngIf", e.participant.online), i.Gb(7), i.Vc("\u0130li\u015fki: ", e.relations[e.thread.participant.relationshipStatus], ""), i.Gb(2), i.tc("ngForOf", e.relations), i.Gb(5), i.tc("ngForOf", e.chats), i.Gb(5), i.Uc(i.oc(31, 11, "connection.password.reminder")))
                        },
                        directives: [cf, hp.l, hp.n, _T.b, _T.f, _T.d, hp.m, _T.c],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                wU = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [jb],
                        imports: [
                            [$C]
                        ]
                    }), t
                })();
            i.Jc(CR, [hp.n, CE, kE, hp.l, TU, SU, NU], [tE]);
            let LU = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [HI],
                        imports: [
                            []
                        ]
                    }), t
                })(),
                xU = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        imports: [
                            [$C]
                        ]
                    }), t
                })();
            const PU = ["nitro-inventory-bots-component", ""];

            function FU(t, e) {
                1 & t && (i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Tc(2, " bots "), i.Yb(), i.Yb())
            }
            let GU = (() => {
                class t {
                    constructor(t, e) {
                        this._inventoryService = t, this._ngZone = e, this.visible = !1
                    }
                    ngOnInit() {
                        this._inventoryService.botsController = this
                    }
                    ngOnDestroy() {
                        this._inventoryService.botsController = null
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(df), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-inventory-bots-component", ""]
                    ],
                    inputs: {
                        visible: "visible"
                    },
                    attrs: PU,
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["class", "nitro-inventory-bots-component", 4, "ngIf"],
                        [1, "nitro-inventory-bots-component"],
                        [1, "container"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, FU, 3, 0, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n],
                    encapsulation: 2
                }), t
            })();
            const YU = ["nitro-inventory-furniture-component", ""];

            function kU(t, e) {
                1 & t && (i.Zb(0, "div", 4), i.Vb(1, "div", 5), i.Zb(2, "div", 6), i.Zb(3, "p", 7), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Zb(6, "p", 8), i.Tc(7), i.nc(8, "translate"), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.Uc(i.oc(5, 2, "inventory.empty.title")), i.Gb(3), i.Uc(i.oc(8, 4, "inventory.empty.desc")))
            }

            function VU(t, e) {
                if (1 & t && (i.Zb(0, "p", 23), i.Tc(1), i.Yb()), 2 & t) {
                    const t = i.mc().$implicit;
                    i.Gb(1), i.Uc(t.stuffData.uniqueNumber)
                }
            }
            const ZU = function(t, e) {
                    return {
                        "item-detail-box-active": t,
                        unseen: e
                    }
                },
                jU = function(t) {
                    return {
                        opacity: t
                    }
                },
                BU = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function HU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 20), i.jc("mousedown", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(3).onMouseDown(s)
                    }))("mouseout", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc(3).onMouseOut(s)
                    })), i.Vb(1, "div", 21), i.Zb(2, "div", 22), i.Zb(3, "p", 23), i.Tc(4), i.Yb(), i.Rc(5, VU, 2, 1, "p", 24), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit,
                        s = i.mc(3);
                    i.tc("ngClass", i.yc(5, ZU, s.selectedGroup === t, t.hasUnseenItems))("ngStyle", i.xc(8, jU, t.getUnlockedCount() ? "1" : "0.5")), i.Gb(1), i.tc("ngStyle", i.xc(10, BU, "url(" + s.getIconUrl(t) + ")")), i.Gb(3), i.Vc("x", t.getUnlockedCount(), ""), i.Gb(1), i.tc("ngIf", t.stuffData.uniqueNumber)
                }
            }

            function WU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 29), i.jc("click", (function() {
                        return i.Gc(t), i.mc(4).attemptItemPlacement()
                    })), i.Zb(1, "p", 30), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                2 & t && (i.Gb(2), i.Uc(i.oc(3, 1, "inventory.furni.placetoroom")))
            }
            const zU = function(t) {
                return {
                    disabled: t
                }
            };

            function KU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 31), i.jc("click", (function() {
                        return i.Gc(t), i.mc(4).attemptItemOffer()
                    })), i.Zb(1, "p", 30), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(4);
                    i.tc("ngClass", i.xc(4, zU, !t.selectedGroup.getUnlockedCount())), i.Gb(2), i.Uc(i.oc(3, 2, "inventory.trading.offer"))
                }
            }

            function XU(t, e) {
                if (1 & t && (i.Zb(0, "div", 25), i.Zb(1, "p", 26), i.Tc(2), i.Yb(), i.Rc(3, WU, 4, 3, "div", 27), i.Rc(4, KU, 4, 6, "div", 28), i.Yb()), 2 & t) {
                    const t = i.mc(3);
                    i.Gb(2), i.Uc(t.selectedGroup.name), i.Gb(1), i.tc("ngIf", !t.tradeRunning && t.canPlace), i.Gb(1), i.tc("ngIf", t.tradeRunning)
                }
            }

            function qU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Xb(0), i.Zb(1, "div", 9), i.Zb(2, "input", 10), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc(2).search = e
                    })), i.Yb(), i.Zb(3, "select", 11), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc(2).searchType = e
                    })), i.Zb(4, "option", 12), i.Tc(5), i.nc(6, "translate"), i.Yb(), i.Zb(7, "option", 12), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "option", 12), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Zb(13, "div", 13), i.Rc(14, HU, 6, 12, "div", 14), i.nc(15, "paginate"), i.Yb(), i.Zb(16, "div", 15), i.Zb(17, "div", 16), i.Vb(18, "div", 17), i.Vb(19, "div", 18), i.Yb(), i.Rc(20, XU, 5, 3, "div", 19), i.Yb(), i.Wb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.Gb(2), i.tc("ngModel", t.search), i.Gb(1), i.tc("ngModel", t.searchType), i.Gb(1), i.tc("value", ""), i.Gb(1), i.Uc(i.oc(6, 13, "inventory.filter.option.everything")), i.Gb(2), i.tc("value", "s"), i.Gb(1), i.Uc(i.oc(9, 15, "inventory.furni.tab.floor")), i.Gb(2), i.tc("value", "i"), i.Gb(1), i.Uc(i.oc(12, 17, "inventory.furni.tab.wall")), i.Gb(3), i.tc("ngForOf", t.groupItems)("ngForTrackBy", i.pc(15, 19, t.trackByType, t.paginateConfig)), i.Gb(3), i.tc("roomPreviewer", t.roomPreviewer)("height", 140), i.Gb(3), i.tc("ngIf", t.selectedGroup)
                }
            }

            function JU(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.jc("mouseup", (function() {
                        return i.Gc(t), i.mc().onMouseUp()
                    })), i.Rc(1, kU, 9, 6, "div", 2), i.Rc(2, qU, 21, 22, "ng-container", 3), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngIf", !t.hasGroupItems), i.Gb(1), i.tc("ngIf", t.hasGroupItems)
                }
            }
            let QU = (() => {
                    class t {
                        constructor(t, e, s) {
                            this._notificationService = t, this._inventoryService = e, this._ngZone = s, this.visible = !1, this.roomPreviewer = null, this.selectedGroup = null, this.mouseDown = !1, this._filteredItems = [], this._search = "", this._searchType = "", this._subscription = null, this._hasGroupItems = !1
                        }
                        ngOnInit() {
                            this._inventoryService.controller.furnitureService.isInitalized && this.selectExistingGroupOrDefault(), this._inventoryService.furniController = this, this._subscription = this._inventoryService.events.subscribe(t => {
                                switch (t) {
                                    case FT.INVENTORY_UPDATED:
                                        return void this.refreshInventory()
                                }
                            })
                        }
                        ngOnChanges(t) {
                            const e = t.visible.currentValue;
                            e !== (t.visible.previousValue || !1) && (e ? this.prepareInventory() : this._inventoryService.controller.setAllFurnitureSeen())
                        }
                        ngOnDestroy() {
                            this._subscription && (this._subscription.unsubscribe(), this._subscription = null), this._inventoryService.furniController = null
                        }
                        refreshInventory() {
                            let t = this._inventoryService.controller.furnitureService.groupItems;
                            if (t.length && (this._hasGroupItems = !0), this._search && this._search.length || this._searchType && this._searchType.length) {
                                const e = this._search.toLocaleLowerCase();
                                t = t.filter(t => {
                                    let s = !0;
                                    return this._searchType && 1 === this._searchType.length && ("s" === this._searchType ? s = !t.isWallItem : "i" === this._searchType && (s = t.isWallItem)), e && e.length && (s = t.name.toLocaleLowerCase().includes(e)), s
                                })
                            }
                            this._filteredItems = t
                        }
                        prepareInventory() {
                            !this._inventoryService.controller.furnitureService.isInitalized || this._inventoryService.controller.furnitureService.needsUpdate ? this._inventoryService.controller.furnitureService.requestLoad() : (this.refreshInventory(), this.selectExistingGroupOrDefault())
                        }
                        selectExistingGroupOrDefault() {
                            this.selectedGroup && this.groupItems.indexOf(this.selectedGroup) > -1 ? this.selectGroup(this.selectedGroup) : this.selectFirstGroup()
                        }
                        selectFirstGroup() {
                            let t = null;
                            for (const e of this.groupItems)
                                if (e && !e.locked) {
                                    t = e;
                                    break
                                }
                            this.selectGroup(t)
                        }
                        selectGroup(t) {
                            if (this._inventoryService.controller.furnitureService.unselectAllGroupItems(), this.selectedGroup = t, this.selectedGroup) {
                                this.selectedGroup.selected = !0, this.selectedGroup.hasUnseenItems && (this.selectedGroup.hasUnseenItems = !1);
                                const e = this.selectedGroup.getItemByIndex(0);
                                if (!e) return;
                                this._ngZone.runOutsideAngular(() => {
                                    if (this.roomPreviewer) {
                                        let s = cp.instance.roomEngine.getRoomInstanceVariable(cp.instance.roomEngine.activeRoomId, j.ROOM_WALL_TYPE),
                                            i = cp.instance.roomEngine.getRoomInstanceVariable(cp.instance.roomEngine.activeRoomId, j.ROOM_FLOOR_TYPE),
                                            n = cp.instance.roomEngine.getRoomInstanceVariable(cp.instance.roomEngine.activeRoomId, j.ROOM_LANDSCAPE_TYPE);
                                        s = s && s.length ? s : "101", i = i && i.length ? i : "101", n = n && n.length ? n : "1.1", this.roomPreviewer.reset(!1), this.roomPreviewer.updateObjectRoom(i, s, n), e.category === LT._Str_3639 || e.category === LT._Str_3683 || e.category === LT._Str_3432 ? (this.roomPreviewer.updateRoomWallsAndFloorVisibility(!0, !0), i = e.category === LT._Str_3683 ? this.selectedGroup.stuffData.getLegacyString() : i, s = e.category === LT._Str_3639 ? this.selectedGroup.stuffData.getLegacyString() : s, n = e.category === LT._Str_3432 ? this.selectedGroup.stuffData.getLegacyString() : n, this.roomPreviewer.updateObjectRoom(i, s, n)) : t.isWallItem ? (this.roomPreviewer.updateRoomWallsAndFloorVisibility(!0, !0), this.roomPreviewer.addWallItemIntoRoom(this.selectedGroup.type, new K(90), e.stuffData.getLegacyString())) : (this.roomPreviewer.updateRoomWallsAndFloorVisibility(!1, !0), this.roomPreviewer.addFurnitureIntoRoom(this.selectedGroup.type, new K(90), this.selectedGroup.stuffData, this.selectedGroup.extra.toString()))
                                    }
                                })
                            } else this._ngZone.runOutsideAngular(() => this.roomPreviewer && this.roomPreviewer.reset(!1))
                        }
                        onMouseDown(t) {
                            t && (this.selectGroup(t), this.mouseDown = !0)
                        }
                        onMouseUp(t) {
                            this.mouseDown = !1
                        }
                        onMouseOut(t) {
                            this.mouseDown && this.selectedGroup === t && this.attemptItemPlacement()
                        }
                        attemptItemPlacement() {
                            this.canPlace && !this.tradeRunning && (this._ngZone.runOutsideAngular(() => this._inventoryService.controller.furnitureService.attemptItemPlacement()), this._inventoryService.hideWindow())
                        }
                        attemptItemOffer(t = 1) {
                            if (!this.selectedGroup || !this.tradeRunning) return;
                            const e = this.selectedGroup;
                            if (!e) return;
                            const s = e.getTradeItems(t);
                            if (!s || !s.length) return;
                            let i = null;
                            const n = [];
                            for (const r of s) n.push(r.id), i || (i = r);
                            i && this.tradeRunning && (this._inventoryService.controller.tradeService.getOwnTradingItemIds().length + n.length <= 1500 ? this._inventoryService.controller.tradeService.offerItems(n, i.isWallItem, i.type, i.category, i.isGroupable, i.stuffData) : this._notificationService.alert("${trading.items.too_many_items.desc}", "${trading.items.too_many_items.title}"))
                        }
                        getIconUrl(t) {
                            return t && t.iconUrl || null
                        }
                        trackByType(t, e) {
                            return e.type
                        }
                        get groupItems() {
                            return this._filteredItems
                        }
                        get tradeRunning() {
                            return this._inventoryService.controller.tradeService.running
                        }
                        get canPlace() {
                            return !!this._inventoryService.roomSession
                        }
                        get paginateConfig() {
                            return {
                                id: "custom",
                                itemsPerPage: 5,
                                currentPage: 1
                            }
                        }
                        get search() {
                            return this._search
                        }
                        set search(t) {
                            this._search = t, this.refreshInventory()
                        }
                        get searchType() {
                            return this._searchType
                        }
                        set searchType(t) {
                            this._searchType = t, this.refreshInventory()
                        }
                        get hasGroupItems() {
                            return this._hasGroupItems
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(xb), i.Ub(df), i.Ub(i.E))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["", "nitro-inventory-furniture-component", ""]
                        ],
                        inputs: {
                            visible: "visible",
                            roomPreviewer: "roomPreviewer"
                        },
                        features: [i.Eb],
                        attrs: YU,
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["id", "envanter-mobi", 3, "mouseup", 4, "ngIf"],
                            ["id", "envanter-mobi", 3, "mouseup"],
                            ["class", "envanterbos", 4, "ngIf"],
                            [4, "ngIf"],
                            [1, "envanterbos"],
                            [1, "envantersolimg"],
                            [1, "envantersagaciklama"],
                            [1, "ebos-hood"],
                            [1, "ebos-desc"],
                            [1, "envanter-options"],
                            [1, "envanter_mobi-search", 3, "ngModel", "ngModelChange"],
                            [1, "envanter_select-kategori", 3, "ngModel", "ngModelChange"],
                            [3, "value"],
                            [1, "envanter_mobi-list"],
                            ["class", "item-detail-box", 3, "ngClass", "ngStyle", "mousedown", "mouseout", 4, "ngFor", "ngForOf", "ngForTrackBy"],
                            [1, "item-container"],
                            ["nitro-room-preview-component", "", 1, "room-furni-preview", 2, "position", "relative", "z-index", "1", 3, "roomPreviewer", "height"],
                            [1, "cannot-traded"],
                            [1, "is-traded", 2, "display", "none"],
                            ["class", "inv-mobiinfobox", 4, "ngIf"],
                            [1, "item-detail-box", 3, "ngClass", "ngStyle", "mousedown", "mouseout"],
                            [1, "inv-mobiview", 3, "ngStyle"],
                            [1, "items-part-number"],
                            [1, "ipn-text"],
                            ["class", "ipn-text", 4, "ngIf"],
                            [1, "inv-mobiinfobox"],
                            [1, "envanter-items_name"],
                            ["class", "place-it-the-room", 3, "click", 4, "ngIf"],
                            ["class", "place-it-the-room", 3, "ngClass", "click", 4, "ngIf"],
                            [1, "place-it-the-room", 3, "click"],
                            [1, "place-text"],
                            [1, "place-it-the-room", 3, "ngClass", "click"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, JU, 3, 2, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        directives: [hp.n, VE.b, VE.j, VE.l, VE.q, VE.m, VE.s, hp.m, rU, hp.l, hp.o],
                        pipes: [tE, qC.b],
                        encapsulation: 2
                    }), t
                })(),
                $U = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [df, FT, nO],
                        imports: [
                            [$C]
                        ]
                    }), t
                })();
            i.Jc(aO, [hp.n, CE, kE, hp.l, GU, QU, iO], [tE]);
            let tD = (() => {
                class t {
                    constructor() {
                        this.visible = !1, this.visibleChange = new i.q
                    }
                    ngOnInit() {}
                    ngOnDestroy() {}
                    hideTool() {
                        this.visible = !1, this.visibleChange.emit(this.visible)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["ng-component"]
                    ],
                    inputs: {
                        visible: "visible"
                    },
                    outputs: {
                        visibleChange: "visibleChange"
                    },
                    decls: 0,
                    vars: 0,
                    template: function(t, e) {},
                    encapsulation: 2
                }), t
            })();

            function eD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 5), i.Zb(1, "div", 6), i.Zb(2, "p", 7), i.Tc(3), i.Yb(), i.Zb(4, "p", 8), i.Tc(5), i.Yb(), i.Yb(), i.Zb(6, "div", 9), i.Zb(7, "div", 10), i.Zb(8, "div", 11), i.Zb(9, "p", 12), i.Tc(10, "Owner:"), i.Yb(), i.Zb(11, "p", 13), i.Tc(12), i.Yb(), i.Yb(), i.Zb(13, "div", 11), i.Zb(14, "p", 14), i.Tc(15, "Users inside:"), i.Yb(), i.Zb(16, "p", 15), i.Tc(17), i.Yb(), i.Yb(), i.Zb(18, "div", 11), i.Zb(19, "p", 14), i.Tc(20, "Owner inside:"), i.Yb(), i.Zb(21, "p", 15), i.Tc(22), i.Yb(), i.Yb(), i.Zb(23, "div", 11), i.Zb(24, "p", 14), i.Tc(25, "Activity?"), i.Yb(), i.Zb(26, "p", 15), i.Tc(27, "no"), i.Yb(), i.Yb(), i.Yb(), i.Zb(28, "div", 16), i.Zb(29, "div", 17), i.Zb(30, "p", 18), i.Tc(31, "Enter "), i.Yb(), i.Yb(), i.Zb(32, "div", 17), i.Zb(33, "p", 18), i.Tc(34, "View chat "), i.Yb(), i.Yb(), i.Zb(35, "div", 17), i.Zb(36, "a", 19), i.Zb(37, "p", 18), i.Tc(38, "Open HK"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Zb(39, "div", 20), i.Zb(40, "label", 21), i.Zb(41, "p", 22), i.Tc(42, "Get all users out of the room (paralyzes if there is an incident)"), i.Yb(), i.Zb(43, "input", 23), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().kickUsers = e
                    })), i.Yb(), i.Vb(44, "span", 24), i.Yb(), i.Zb(45, "label", 21), i.Zb(46, "p", 25), i.Tc(47, "Put a doorbell in the room"), i.Yb(), i.Zb(48, "input", 23), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().lockDoor = e
                    })), i.Yb(), i.Vb(49, "span", 24), i.Yb(), i.Zb(50, "label", 26), i.Zb(51, "p", 27), i.Tc(52, "Change the room name to (Inappropriate for Managers Management)."), i.Yb(), i.Zb(53, "input", 23), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().changeTitle = e
                    })), i.Yb(), i.Vb(54, "span", 24), i.Yb(), i.Yb(), i.Zb(55, "select", 28), i.Zb(56, "option", 29), i.Tc(57, "alert message 1"), i.Yb(), i.Zb(58, "option", 30), i.Tc(59, "alert message 2"), i.Yb(), i.Yb(), i.Vb(60, "textarea", 31), i.Zb(61, "select", 32), i.Zb(62, "option", 33), i.Tc(63, "alert message 1"), i.Yb(), i.Zb(64, "option", 34), i.Tc(65, "alert message 2"), i.Yb(), i.Yb(), i.Zb(66, "div", 35), i.Zb(67, "p", 18), i.Tc(68, "Warn"), i.Yb(), i.Yb(), i.Zb(69, "div", 36), i.jc("click", (function() {
                        return i.Gc(t), i.mc().saveRoom()
                    })), i.Zb(70, "p", 18), i.Tc(71, "Save"), i.Yb(), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(t.room.name), i.Gb(2), i.Uc(t.room.description), i.Gb(7), i.Uc(t.room.ownerName), i.Gb(5), i.Uc(t.room.playerAmount + 1), i.Gb(5), i.Uc(t.room.owner ? "yes" : "no"), i.Gb(14), i.vc("href", "", t.housekeepingUrl, "/housekeeping/rooms/1", i.Ic), i.Gb(7), i.tc("ngModel", t.kickUsers), i.Gb(5), i.tc("ngModel", t.lockDoor), i.Gb(5), i.tc("ngModel", t.changeTitle)
                }
            }
            let sD = (() => {
                class t extends tD {
                    constructor(t) {
                        super(), this._modToolService = t, this.index = null, this.room = null, this.lockDoor = !1, this.changeTitle = !1, this.kickUsers = !1, this._housekeepingUrl = cp.instance.getConfiguration("modtools.housekeeping.url", "http://localhost")
                    }
                    ngOnInit() {}
                    ngOnDestroy() {}
                    close() {
                        this._modToolService.closeRoomTool(this.index)
                    }
                    saveRoom() {
                        cp.instance.communication.connection.send(new u_(cp.instance.roomSessionManager.viewerSession.roomId, this.lockDoor ? 1 : 0, this.changeTitle ? 1 : 0, this.kickUsers ? 1 : 0))
                    }
                    get inRoom() {
                        return null !== cp.instance.roomSessionManager.viewerSession
                    }
                    get housekeepingUrl() {
                        return this._housekeepingUrl
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(pR))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-mod-tool-room-component"]
                    ],
                    inputs: {
                        index: "index",
                        room: "room"
                    },
                    features: [i.Db],
                    decls: 6,
                    vars: 2,
                    consts: [
                        ["dragHandle", "#modt-roominfodrag", "id", "modt-roominfo", 3, "draggable", "center"],
                        ["id", "modt-roominfodrag"],
                        [1, "mtri-baslik"],
                        [1, "old-kapat", 3, "click"],
                        ["class", "modt-ribox", 4, "ngIf"],
                        [1, "modt-ribox"],
                        [1, "ri-roomnamebox"],
                        [1, "rirntxt"],
                        [1, "rirdtxt"],
                        [1, "ri-roominfobox"],
                        [1, "ribleft"],
                        [1, "rib-infobox"],
                        [1, "rib-hood", 2, "width", "65px"],
                        [1, "rib-reply", 2, "text-decoration", "underline"],
                        [1, "rib-hood"],
                        [1, "rib-reply"],
                        [1, "ribright"],
                        [1, "rib-button"],
                        [1, "ribbutton-txt"],
                        ["target", "_blank", 3, "href"],
                        [1, "rib-apply_action_to_room"],
                        [1, "mt-select_container"],
                        ["for", "kick-users", 1, "mt-sctxt", 2, "padding-top", "0px"],
                        ["type", "checkbox", 3, "ngModel", "ngModelChange"],
                        [1, "checkmarkmt"],
                        ["for", "lock-room", 1, "mt-sctxt"],
                        [1, "mt-select_container", 2, "margin-top", "11px"],
                        ["for", "change-title", 1, "mt-sctxt", 2, "padding-top", "0px"],
                        ["id", "modt-select"],
                        ["value", "alert type 1", "selected", ""],
                        ["value", "alert type 2"],
                        [1, "mt-room_warning_message"],
                        ["id", "modt-select", 2, "margin-top", "-1px", "float", "left"],
                        ["value", "alert text 1", "selected", ""],
                        ["value", "alert text 2"],
                        [1, "rib-button2"],
                        [1, "rib-button2", 2, "float", "right", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3, "Room Information"), i.Yb(), i.Zb(4, "div", 3), i.jc("click", (function() {
                            return e.close()
                        })), i.Yb(), i.Yb(), i.Rc(5, eD, 72, 9, "div", 4), i.Yb()), 2 & t && (i.tc("center", !1), i.Gb(5), i.tc("ngIf", e.inRoom))
                    },
                    directives: [kE, hp.n, VE.a, VE.j, VE.l, VE.m, VE.s],
                    encapsulation: 2
                }), t
            })();

            function iD(t, e) {
                if (1 & t && (i.Zb(0, "div", 14), i.Zb(1, "p", 15), i.Tc(2), i.Yb(), i.Zb(3, "p", 16), i.Tc(4), i.Yb(), i.Zb(5, "p", 17), i.Tc(6), i.Yb(), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(2), i.Vc("", t.timestamp, " "), i.Gb(2), i.Vc("", t.username, " "), i.Gb(2), i.Vc("", t.message, " ")
                }
            }

            function nD(t, e) {
                if (1 & t && (i.Zb(0, "div"), i.Rc(1, iD, 7, 3, "div", 13), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(1), i.tc("ngForOf", t.roomChatlogs.chatlogs)
                }
            }

            function rD(t, e) {
                if (1 & t && (i.Zb(0, "div", 11), i.Rc(1, nD, 2, 1, "div", 12), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngIf", t.roomChatlogs)
                }
            }

            function oD(t, e) {
                1 & t && (i.Zb(0, "div", 18), i.Tc(1, " Not in a room "), i.Yb())
            }

            function aD(t, e) {
                if (1 & t && (i.Zb(0, "div", 14), i.Zb(1, "p", 15), i.Tc(2), i.Yb(), i.Zb(3, "p", 16), i.Tc(4), i.Yb(), i.Zb(5, "p", 17), i.Tc(6), i.Yb(), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(2), i.Vc("", t.timestamp, " "), i.Gb(2), i.Vc("", t.username, " "), i.Gb(2), i.Vc("", t.message, " ")
                }
            }

            function cD(t, e) {
                if (1 & t && (i.Zb(0, "div"), i.Rc(1, aD, 7, 3, "div", 13), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.tc("ngForOf", t.chatlogs)
                }
            }

            function _D(t, e) {
                if (1 & t && (i.Zb(0, "div"), i.Rc(1, cD, 2, 1, "div", 21), i.Yb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(1), i.tc("ngForOf", t.visits)
                }
            }

            function hD(t, e) {
                if (1 & t && (i.Zb(0, "div", 11), i.Zb(1, "div", 19), i.Zb(2, "span", 20), i.Tc(3), i.Yb(), i.Yb(), i.Rc(4, _D, 2, 1, "div", 12), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Wc(" [", t.visit.roomId, "]", t.visit.roomName, " "), i.Gb(1), i.tc("ngIf", t.roomChatlogs)
                }
            }

            function lD(t, e) {
                1 & t && (i.Zb(0, "div", 22), i.Tc(1, " No user selected "), i.Yb())
            }
            let uD = (() => {
                    class t extends tD {
                        constructor(t) {
                            super(), this._modToolService = t, this.index = null, this.roomChatlogs = null, this._showUserChatlogs = !1, this._showRoomChatlogs = !0
                        }
                        ngOnInit() {}
                        ngOnDestroy() {}
                        close() {
                            this._modToolService.closeChatlogTool(this.index)
                        }
                        get visits() {
                            return this._modToolService.roomVisits
                        }
                        showUserChatlogs() {
                            return this._showUserChatlogs
                        }
                        showRoomChatlogs() {
                            return this._showRoomChatlogs
                        }
                        toggleChatlogWindows() {
                            this._showRoomChatlogs = !this._showRoomChatlogs, this._showUserChatlogs = !this._showUserChatlogs
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(pR))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-mod-tool-chatlog-component"]
                        ],
                        inputs: {
                            index: "index",
                            roomChatlogs: "roomChatlogs"
                        },
                        features: [i.Db],
                        decls: 20,
                        vars: 7,
                        consts: [
                            ["dragHandle", "#modt-roomchatdrag", "id", "modt-roomchat", 3, "draggable", "center"],
                            ["id", "modt-roomchatdrag"],
                            [1, "oldhabbo-headhood"],
                            [1, "old-kapat", 3, "click"],
                            [1, "roomchatlog-infobox"],
                            [1, "rc-roomname"],
                            [1, "rc-button"],
                            [1, "rcbutton-txt"],
                            ["class", "room-conversation-recordings-list", 4, "ngIf"],
                            ["class", "log-list", 4, "ngIf"],
                            ["class", "old-loglist", "style", "display: none;", 4, "ngIf"],
                            [1, "room-conversation-recordings-list"],
                            [4, "ngIf"],
                            ["class", "talk-box", 4, "ngFor", "ngForOf"],
                            [1, "talk-box"],
                            [1, "message-clock"],
                            [1, "user-who-sent-message"],
                            [1, "message-sent"],
                            [1, "log-list"],
                            [1, "col"],
                            [2, "font-size", "13px"],
                            [4, "ngFor", "ngForOf"],
                            [1, "old-loglist", 2, "display", "none"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3, "Room Chatlog: "), i.Zb(4, "b"), i.Tc(5), i.Yb(), i.Yb(), i.Zb(6, "div", 3), i.jc("click", (function() {
                                return e.close()
                            })), i.Yb(), i.Yb(), i.Zb(7, "div", 4), i.Zb(8, "p", 5), i.Tc(9), i.Yb(), i.Zb(10, "div", 6), i.Zb(11, "p", 7), i.Tc(12, "Room information "), i.Yb(), i.Yb(), i.Zb(13, "div", 6), i.Zb(14, "p", 7), i.Tc(15, "Go to room"), i.Yb(), i.Yb(), i.Yb(), i.Rc(16, rD, 2, 1, "div", 8), i.Rc(17, oD, 2, 0, "div", 9), i.Rc(18, hD, 5, 3, "div", 8), i.Rc(19, lD, 2, 0, "div", 10), i.Yb()), 2 & t && (i.tc("center", !1), i.Gb(5), i.Uc(e.roomChatlogs.name), i.Gb(4), i.Vc("Room: ", e.roomChatlogs.name, ""), i.Gb(7), i.tc("ngIf", e.showRoomChatlogs()), i.Gb(1), i.tc("ngIf", !e.roomChatlogs), i.Gb(1), i.tc("ngIf", e.showUserChatlogs()), i.Gb(1), i.tc("ngIf", !e.visits))
                        },
                        directives: [kE, hp.n, hp.m],
                        encapsulation: 2
                    }), t
                })(),
                dD = (() => {
                    class t extends tD {
                        constructor(t) {
                            super(), this._modToolService = t, this.index = null, this.user = null
                        }
                        ngOnInit() {}
                        ngOnDestroy() {}
                        close() {
                            this._modToolService.closeUserTool(this.index)
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(pR))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-mod-tool-user-component"]
                        ],
                        inputs: {
                            index: "index",
                            user: "user"
                        },
                        features: [i.Db],
                        decls: 11,
                        vars: 3,
                        consts: [
                            ["dragHandle", ".card-header", 1, "card", "user-tool-card", 2, "display", "none", 3, "draggable", "center"],
                            [1, "card-header"],
                            [1, "icon", "modtool-user-icon", 2, "margin-right", "5px"],
                            ["type", "button", 1, "close", 3, "click"],
                            [1, "fas", "fa-times"],
                            [1, "card-body"],
                            [1, "list-group"],
                            [1, "list-group-item"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "span"), i.Vb(3, "i", 2), i.Tc(4), i.Yb(), i.Zb(5, "button", 3), i.jc("click", (function() {
                                return e.hideTool()
                            })), i.Vb(6, "i", 4), i.Yb(), i.Yb(), i.Zb(7, "div", 5), i.Zb(8, "ul", 6), i.Zb(9, "li", 7), i.Tc(10), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.tc("center", !1), i.Gb(4), i.Vc(" ", e.user.username, " "), i.Gb(6), i.Vc("Username: ", e.user.username, ""))
                        },
                        directives: [kE],
                        encapsulation: 2
                    }), t
                })();

            function gD(t, e) {
                1 & t && (i.Zb(0, "table", 10), i.Zb(1, "thead"), i.Zb(2, "tr"), i.Zb(3, "th"), i.Tc(4, "Category"), i.Yb(), i.Zb(5, "th"), i.Tc(6, "Type"), i.Yb(), i.Zb(7, "th"), i.Tc(8, "Player"), i.Yb(), i.Zb(9, "th"), i.Tc(10, "Open"), i.Yb(), i.Yb(), i.Yb(), i.Vb(11, "tbody"), i.Yb())
            }

            function mD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "span"), i.Vb(3, "i", 3), i.Tc(4, " Reports "), i.Yb(), i.Zb(5, "button", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hideTool()
                    })), i.Vb(6, "i", 5), i.Yb(), i.Yb(), i.Zb(7, "div", 6), i.Zb(8, "div", 7), i.Zb(9, "button", 8), i.jc("click", (function() {
                        return i.Gc(t), i.mc().setTab(0)
                    })), i.Tc(10, "Open Issues"), i.Yb(), i.Zb(11, "button", 8), i.jc("click", (function() {
                        return i.Gc(t), i.mc().setTab(1)
                    })), i.Tc(12, "My Issues"), i.Yb(), i.Zb(13, "button", 8), i.jc("click", (function() {
                        return i.Gc(t), i.mc().setTab(2)
                    })), i.Tc(14, "Picked Issues"), i.Yb(), i.Yb(), i.Rc(15, gD, 12, 0, "table", 9), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.tc("center", !1), i.Gb(15), i.tc("ngIf", 0 === t.tab)
                }
            }
            let pD = (() => {
                    class t extends tD {
                        constructor() {
                            super(), this._tab = 0
                        }
                        ngOnInit() {}
                        ngOnDestroy() {}
                        get tab() {
                            return this._tab
                        }
                        set tab(t) {
                            this._tab = t
                        }
                        setTab(t) {
                            this.tab = t
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-mod-tool-reports-component"]
                        ],
                        features: [i.Db],
                        decls: 1,
                        vars: 1,
                        consts: [
                            ["dragHandle", ".card-header", "class", "card reports-tool-card", 3, "draggable", "center", 4, "ngIf"],
                            ["dragHandle", ".card-header", 1, "card", "reports-tool-card", 3, "draggable", "center"],
                            [1, "card-header"],
                            [1, "icon", "modtool-reports-icon", 2, "margin-right", "5px"],
                            ["type", "button", 1, "close", 3, "click"],
                            [1, "fas", "fa-times"],
                            [1, "card-body"],
                            [1, "btn-group", "w-100"],
                            [1, "btn", "btn-sm", "btn-secondary", 3, "click"],
                            ["class", "table table-striped", 4, "ngIf"],
                            [1, "table", "table-striped"]
                        ],
                        template: function(t, e) {
                            1 & t && i.Rc(0, mD, 16, 2, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                        },
                        directives: [hp.n, kE],
                        encapsulation: 2
                    }), t
                })(),
                bD = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [pR],
                        imports: [
                            [$C, n.a]
                        ]
                    }), t
                })();
            i.Jc(RR, [hp.n, kE, hp.m, sD, uD, dD, pD], []);
            class ED {
                constructor(t) {
                    this._ngZone = t, this.roomName = null, this.roomDescription = null, this.categoryId = "0", this.userCount = "0", this.tags = [], this.tradeState = "0", this.allowWalkthrough = !1, this.lockState = "0", this.password = null, this.confirmPassword = null, this.allowPets = !1, this.allowPetsEat = !1, this.usersWithRights = new Map, this.friendsWithoutRights = new Map, this.hideWalls = !1, this.wallThickness = "0", this.floorThickness = "0", this.chatBubbleMode = "0", this.chatBubbleWeight = "0", this.chatBubbleSpeed = "0", this.chatFloodProtection = "0", this.chatDistance = 0, this.muteState = "0", this.kickState = "0", this.banState = "0", this.bannedUsers = new Map, this.selectedUserToUnban = 0
                }
                selectUserToUnban(t) {
                    this._ngZone.run(() => {
                        this.selectedUserToUnban = this.selectedUserToUnban === t ? 0 : t
                    })
                }
                get isValidPassword() {
                    return "2" !== this.lockState || this.password && this.password.length > 0 && this.password === this.confirmPassword
                }
                get selectedUsernameToUnban() {
                    return this.selectedUserToUnban > 0 ? this.bannedUsers.get(this.selectedUserToUnban) : null
                }
            }

            function fD(t, e) {
                if (1 & t && (i.Zb(0, "option", 21), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.tc("value", t.id), i.Gb(1), i.Uc(i.oc(2, 2, t.name))
                }
            }

            function SD(t, e) {
                if (1 & t && (i.Zb(0, "option", 21), i.Tc(1), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.tc("value", t), i.Gb(1), i.Uc(t)
                }
            }

            function ID(t, e) {
                if (1 & t && (i.Zb(0, "option", 21), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t) {
                    const t = e.$implicit;
                    i.tc("value", t.key), i.Gb(1), i.Uc(i.oc(2, 2, t.value))
                }
            }
            let RD = (() => {
                class t {
                    constructor() {
                        this.onSave = new i.q, this.onDeleteRoom = new i.q
                    }
                    save() {
                        this.onSave.emit(this.roomSettings)
                    }
                    deleteRoom() {
                        this.onDeleteRoom.emit()
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-navigator-roomsettings-tab-basic-component"]
                    ],
                    inputs: {
                        roomSettings: "roomSettings",
                        categories: "categories",
                        maxVisitors: "maxVisitors",
                        tradeSettings: "tradeSettings"
                    },
                    outputs: {
                        onSave: "onSave",
                        onDeleteRoom: "onDeleteRoom"
                    },
                    decls: 45,
                    vars: 32,
                    consts: [
                        ["id", "rsbasic-box"],
                        [1, "rssettings_txt"],
                        [1, "rs-room_name", 3, "ngModel", "ngModelChange", "blur"],
                        [1, "rssettings_txt", "t2", 2, "margin-bottom", "-1px"],
                        [1, "rs-room_desc", 3, "ngModel", "ngModelChange", "blur"],
                        [1, "rssettings_txt", "t4", 2, "margin-bottom", "-1px"],
                        ["id", "category-select", 3, "ngModel", "ngModelChange"],
                        [3, "value", 4, "ngFor", "ngForOf"],
                        [1, "rssettings_txt", "t5", 2, "margin-bottom", "-1px"],
                        [1, "rssettings_txt", "t8", 2, "margin-bottom", "-3px"],
                        [1, "rs-label1"],
                        [1, "rs-label2"],
                        [1, "rs-select_container2", 2, "margin-top", "20px"],
                        [1, "rs-sctxt"],
                        ["type", "checkbox"],
                        [1, "checkmarkrs2"],
                        [1, "rs-select_container2", 2, "margin-top", "-5px"],
                        ["type", "checkbox", 3, "ngModel", "ngModelChange"],
                        [1, "rs-room_delete"],
                        [1, "rdeletetxt", 3, "click"],
                        ["src", "assets/images/roomsettings/delete.png", 1, "deletebtn"],
                        [3, "value"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Zb(4, "input", 2), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.roomName = t
                        }))("blur", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(5, "div", 3), i.Tc(6), i.nc(7, "translate"), i.Yb(), i.Zb(8, "textarea", 4), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.roomDescription = t
                        }))("blur", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(9, "div", 5), i.Tc(10), i.nc(11, "translate"), i.Yb(), i.Zb(12, "select", 6), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.categoryId = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Rc(13, fD, 3, 4, "option", 7), i.Yb(), i.Zb(14, "div", 8), i.Tc(15), i.nc(16, "translate"), i.Yb(), i.Zb(17, "select", 6), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.userCount = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Rc(18, SD, 2, 2, "option", 7), i.Yb(), i.Zb(19, "div", 8), i.Tc(20), i.nc(21, "translate"), i.Yb(), i.Zb(22, "select", 6), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.tradeState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Rc(23, ID, 3, 4, "option", 7), i.nc(24, "keyvalue"), i.Yb(), i.Zb(25, "div", 9), i.Tc(26, "Tags"), i.Yb(), i.Vb(27, "input", 10), i.Vb(28, "input", 11), i.Zb(29, "label", 12), i.Zb(30, "p", 13), i.Tc(31, "Afficher dans les top listes par contenu de mobi"), i.Yb(), i.Vb(32, "input", 14), i.Vb(33, "span", 15), i.Yb(), i.Zb(34, "label", 16), i.Zb(35, "p", 13), i.Tc(36), i.nc(37, "translate"), i.Yb(), i.Zb(38, "input", 17), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.allowWalkthrough = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Vb(39, "span", 15), i.Yb(), i.Zb(40, "div", 18), i.Zb(41, "p", 19), i.jc("click", (function() {
                            return e.deleteRoom()
                        })), i.Vb(42, "img", 20), i.Tc(43), i.nc(44, "translate"), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Uc(i.oc(3, 16, "navigator.roomname")), i.Gb(2), i.tc("ngModel", e.roomSettings.roomName), i.Gb(2), i.Uc(i.oc(7, 18, "navigator.roomsettings.desc")), i.Gb(2), i.tc("ngModel", e.roomSettings.roomDescription), i.Gb(2), i.Uc(i.oc(11, 20, "navigator.category")), i.Gb(2), i.tc("ngModel", e.roomSettings.categoryId), i.Gb(1), i.tc("ngForOf", e.categories), i.Gb(2), i.Uc(i.oc(16, 22, "navigator.maxvisitors")), i.Gb(2), i.tc("ngModel", e.roomSettings.userCount), i.Gb(1), i.tc("ngForOf", e.maxVisitors), i.Gb(2), i.Uc(i.oc(21, 24, "navigator.tradesettings")), i.Gb(2), i.tc("ngModel", e.roomSettings.tradeState), i.Gb(1), i.tc("ngForOf", i.oc(24, 26, e.tradeSettings)), i.Gb(13), i.Uc(i.oc(37, 28, "navigator.roomsettings.allow_walk_through")), i.Gb(2), i.tc("ngModel", e.roomSettings.allowWalkthrough), i.Gb(5), i.Uc(i.oc(44, 30, "navigator.roomsettings.delete")))
                    },
                    directives: [VE.b, VE.j, VE.l, VE.q, hp.m, VE.a, VE.m, VE.s],
                    pipes: [tE, hp.h],
                    encapsulation: 2
                }), t
            })();

            function vD(t, e) {
                1 & t && (i.Zb(0, "p", 23), i.Tc(1), i.nc(2, "translate"), i.Yb()), 2 & t && (i.Gb(1), i.Uc(i.oc(2, 1, "navigator.roomsettings.invalidconfirm")))
            }

            function TD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div"), i.Zb(1, "div"), i.Zb(2, "p", 19), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "input", 20), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().roomSettings.password = e
                    }))("blur", (function() {
                        return i.Gc(t), i.mc().save()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 21), i.Zb(7, "p", 19), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "input", 20), i.jc("ngModelChange", (function(e) {
                        return i.Gc(t), i.mc().roomSettings.confirmPassword = e
                    }))("blur", (function() {
                        return i.Gc(t), i.mc().save()
                    })), i.Yb(), i.Rc(11, vD, 3, 3, "p", 22), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 5, "navigator.roomsettings.password")), i.Gb(2), i.tc("ngModel", t.roomSettings.password), i.Gb(3), i.Uc(i.oc(9, 7, "navigator.roomsettings.passwordconfirm")), i.Gb(2), i.tc("ngModel", t.roomSettings.confirmPassword), i.Gb(1), i.tc("ngIf", !t.roomSettings.isValidPassword)
                }
            }
            let OD = (() => {
                class t {
                    constructor() {
                        this.onSave = new i.q
                    }
                    save() {
                        this.onSave.emit(this.roomSettings)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-navigator-roomsettings-tab-access-component"]
                    ],
                    inputs: {
                        roomSettings: "roomSettings"
                    },
                    outputs: {
                        onSave: "onSave"
                    },
                    decls: 47,
                    vars: 37,
                    consts: [
                        ["id", "rsaccess-box", 1, "custom-radios"],
                        [1, "rssettings_txt"],
                        [1, "rssettings_desc"],
                        [1, "rssettings_txt", 2, "margin-top", "10px"],
                        [1, "rs-select_container-radio", 2, "margin-top", "2px"],
                        ["type", "radio", "name", "doormode", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label", 2, "margin-top", "0px", "float", "left"],
                        ["type", "radio", "name", "doormode", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["type", "radio", "name", "doormode", "value", "3", 1, "form-check-input", 2, "margin-top", "4px", "float", "left", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "doormode", "value", "2", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label", "rs-sctxt"],
                        [4, "ngIf"],
                        [1, "sabitbox"],
                        [1, "rssettings_txt", 2, "margin-bottom", "7px"],
                        [1, "rs-select_container2"],
                        [1, "rs-sctxt"],
                        ["type", "checkbox", 3, "ngModel", "ngModelChange"],
                        [1, "checkmarkrs2"],
                        [1, "rsithood"],
                        ["type", "password", "placeholder", "*****", 1, "rs-inputtxt", 3, "ngModel", "ngModelChange", "blur"],
                        [1, "form-group", "mb-3"],
                        ["class", "rsithood", "style", "color: red !important", 4, "ngIf"],
                        [1, "rsithood", 2, "color", "red !important"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Zb(4, "div", 2), i.Tc(5), i.nc(6, "translate"), i.Yb(), i.Zb(7, "div", 3), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "div", 4), i.Zb(11, "input", 5), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.lockState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(12, "label", 6), i.Tc(13), i.nc(14, "translate"), i.Yb(), i.Yb(), i.Zb(15, "div", 4), i.Zb(16, "input", 7), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.lockState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(17, "label", 8), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Yb(), i.Zb(20, "div", 4), i.Zb(21, "input", 9), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.lockState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(22, "label", 8), i.Tc(23), i.nc(24, "translate"), i.Yb(), i.Yb(), i.Zb(25, "div", 4), i.Zb(26, "input", 10), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.lockState = t
                        })), i.Yb(), i.Zb(27, "label", 11), i.Tc(28), i.nc(29, "translate"), i.Yb(), i.Yb(), i.Rc(30, TD, 12, 9, "div", 12), i.Zb(31, "div", 13), i.Zb(32, "div", 14), i.Tc(33), i.nc(34, "translate"), i.Yb(), i.Zb(35, "label", 15), i.Zb(36, "p", 16), i.Tc(37), i.nc(38, "translate"), i.Yb(), i.Zb(39, "input", 17), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.allowPets = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Vb(40, "span", 18), i.Yb(), i.Zb(41, "label", 15), i.Zb(42, "p", 16), i.Tc(43), i.nc(44, "translate"), i.Yb(), i.Zb(45, "input", 17), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.allowPetsEat = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Vb(46, "span", 18), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Uc(i.oc(3, 17, "navigator.roomsettings.roomaccess.caption")), i.Gb(3), i.Uc(i.oc(6, 19, "navigator.roomsettings.roomaccess.info")), i.Gb(3), i.Uc(i.oc(9, 21, "navigator.roomsettings.doormode")), i.Gb(3), i.tc("ngModel", e.roomSettings.lockState), i.Gb(2), i.Uc(i.oc(14, 23, "navigator.roomsettings.doormode.open")), i.Gb(3), i.tc("ngModel", e.roomSettings.lockState), i.Gb(2), i.Uc(i.oc(19, 25, "navigator.roomsettings.doormode.doorbell")), i.Gb(3), i.tc("ngModel", e.roomSettings.lockState), i.Gb(2), i.Uc(i.oc(24, 27, "navigator.roomsettings.doormode.invisible")), i.Gb(3), i.tc("ngModel", e.roomSettings.lockState), i.Gb(2), i.Uc(i.oc(29, 29, "navigator.roomsettings.doormode.password")), i.Gb(2), i.tc("ngIf", "2" == e.roomSettings.lockState), i.Gb(3), i.Uc(i.oc(34, 31, "navigator.roomsettings.pets")), i.Gb(4), i.Uc(i.oc(38, 33, "navigator.roomsettings.allowpets")), i.Gb(2), i.tc("ngModel", e.roomSettings.allowPets), i.Gb(4), i.Uc(i.oc(44, 35, "navigator.roomsettings.allowfoodconsume")), i.Gb(2), i.tc("ngModel", e.roomSettings.allowPetsEat))
                    },
                    directives: [VE.o, VE.b, VE.j, VE.l, hp.n, VE.a],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();

            function yD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 16), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().takeRights(s.key)
                    })), i.Vb(1, "div", 17), i.Zb(2, "p", 18), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().openProfile(s.key)
                    })), i.Tc(3), i.Yb(), i.Vb(4, "div", 19), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(3), i.Uc(t.value)
                }
            }

            function AD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 16), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().giveRights(s.key)
                    })), i.Vb(1, "div", 20), i.Vb(2, "div", 17), i.Zb(3, "p", 18), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().openProfile(s.key)
                    })), i.Tc(4), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(4), i.Uc(t.value)
                }
            }
            const CD = function() {
                    return ["displayed", "total"]
                },
                MD = function(t, e) {
                    return [t, e]
                };
            let UD = (() => {
                    class t {
                        constructor() {
                            this.onSave = new i.q, this.onGiveRights = new i.q, this.onTakeRights = new i.q, this.onOpenProfile = new i.q
                        }
                        save() {
                            this.onSave.emit(this.roomSettings)
                        }
                        giveRights(t) {
                            this.onGiveRights.emit(t)
                        }
                        takeRights(t) {
                            this.onTakeRights.emit(t)
                        }
                        openProfile(t) {
                            this.onOpenProfile.emit(t)
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-navigator-roomsettings-tab-rights-component"]
                        ],
                        inputs: {
                            roomSettings: "roomSettings"
                        },
                        outputs: {
                            onSave: "onSave",
                            onGiveRights: "onGiveRights",
                            onTakeRights: "onTakeRights",
                            onOpenProfile: "onOpenProfile"
                        },
                        decls: 27,
                        vars: 30,
                        consts: [
                            ["id", "rsrights-box"],
                            [1, "rsrightsbg"],
                            [1, "filter-box"],
                            [1, "filtertxt"],
                            [1, "filter_user"],
                            [1, "rs-filter-left"],
                            [1, "users-with-rights_txt"],
                            [1, "users-with-rights_box"],
                            [1, "users-with-rights-list"],
                            ["class", "rs-filter-userbox", 3, "click", 4, "ngFor", "ngForOf"],
                            [1, "rs-clear-all"],
                            [1, "rsclear_txt"],
                            [1, "rs-filter-right"],
                            [1, "friends-without-rights_txt"],
                            [1, "friends-without-rights_box"],
                            [1, "friends-without-rights-list"],
                            [1, "rs-filter-userbox", 3, "click"],
                            [1, "rs-forumico"],
                            [1, "rs-username", 3, "click"],
                            [1, "rs-remove_user"],
                            [1, "rs-add_user"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.Zb(3, "p", 3), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Vb(6, "input", 4), i.Yb(), i.Zb(7, "div", 5), i.Zb(8, "p", 6), i.Tc(9), i.nc(10, "translate"), i.Yb(), i.Zb(11, "div", 7), i.Zb(12, "div", 8), i.Rc(13, yD, 5, 1, "div", 9), i.nc(14, "keyvalue"), i.Yb(), i.Yb(), i.Zb(15, "div", 10), i.Zb(16, "p", 11), i.Tc(17), i.nc(18, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Zb(19, "div", 12), i.Zb(20, "p", 13), i.Tc(21), i.nc(22, "translate"), i.Yb(), i.Zb(23, "div", 14), i.Zb(24, "div", 15), i.Rc(25, AD, 5, 1, "div", 9), i.nc(26, "keyvalue"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.Uc(i.oc(5, 6, "navigator.flatctrls.filter")), i.Gb(5), i.Uc(i.qc(10, 8, "navigator.flatctrls.userswithrights", i.wc(22, CD), i.yc(23, MD, e.roomSettings.usersWithRights.size.toString(), e.roomSettings.usersWithRights.size.toString()))), i.Gb(4), i.tc("ngForOf", i.oc(14, 12, e.roomSettings.usersWithRights)), i.Gb(4), i.Uc(i.oc(18, 14, "navigator.flatctrls.clear")), i.Gb(4), i.Uc(i.qc(22, 16, "navigator.flatctrls.friends", i.wc(26, CD), i.yc(27, MD, e.roomSettings.friendsWithoutRights.size.toString(), e.roomSettings.friendsWithoutRights.size.toString()))), i.Gb(4), i.tc("ngForOf", i.oc(26, 20, e.roomSettings.friendsWithoutRights)))
                        },
                        directives: [hp.m],
                        pipes: [tE, hp.h],
                        encapsulation: 2
                    }), t
                })(),
                DD = (() => {
                    class t {
                        constructor() {
                            this.onSave = new i.q
                        }
                        save() {
                            this.onSave.emit(this.roomSettings)
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-navigator-roomsettings-tab-vipchat-component"]
                        ],
                        inputs: {
                            roomSettings: "roomSettings"
                        },
                        outputs: {
                            onSave: "onSave"
                        },
                        decls: 89,
                        vars: 86,
                        consts: [
                            ["id", "rsvip-box"],
                            [1, "rssettings_txt"],
                            [1, "rssettings_desc"],
                            [1, "rssettings_txt", "t15", 2, "margin-bottom", "7px"],
                            [1, "rs-select_container2", 2, "margin-bottom", "-2px"],
                            [1, "rs-sctxt"],
                            ["type", "checkbox", 3, "ngModel", "ngModelChange"],
                            [1, "checkmarkrs2"],
                            ["id", "category-select", 2, "margin-top", "7px", 3, "ngModel", "ngModelChange"],
                            ["value", "0"],
                            ["value", "1"],
                            ["value", "-1"],
                            ["value", "-2"],
                            ["id", "category-select", 2, "margin-top", "5px", 3, "ngModel", "ngModelChange"],
                            [1, "rssettings_txt", "t15"],
                            [1, "rssettings_desc", 2, "float", "left", "padding-bottom", "10px"],
                            ["id", "category-select", 2, "margin-top", "-5px", 3, "ngModel", "ngModelChange"],
                            ["value", "2"],
                            ["type", "number", "min", "0", 1, "chat-hearing-distance", 3, "ngModel", "ngModelChange", "blur"],
                            [1, "rssettings_desc", "pf7"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Zb(4, "div", 2), i.Tc(5), i.nc(6, "translate"), i.Yb(), i.Zb(7, "div", 3), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "label", 4), i.Zb(11, "p", 5), i.Tc(12), i.nc(13, "translate"), i.Yb(), i.Zb(14, "input", 6), i.jc("ngModelChange", (function(t) {
                                return e.roomSettings.hideWalls = t
                            }))("ngModelChange", (function() {
                                return e.save()
                            })), i.Yb(), i.Vb(15, "span", 7), i.Yb(), i.Zb(16, "select", 8), i.jc("ngModelChange", (function(t) {
                                return e.roomSettings.wallThickness = t
                            }))("ngModelChange", (function() {
                                return e.save()
                            })), i.Zb(17, "option", 9), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Zb(20, "option", 10), i.Tc(21), i.nc(22, "translate"), i.Yb(), i.Zb(23, "option", 11), i.Tc(24), i.nc(25, "translate"), i.Yb(), i.Zb(26, "option", 12), i.Tc(27), i.nc(28, "translate"), i.Yb(), i.Yb(), i.Zb(29, "select", 13), i.jc("ngModelChange", (function(t) {
                                return e.roomSettings.floorThickness = t
                            }))("ngModelChange", (function() {
                                return e.save()
                            })), i.Zb(30, "option", 9), i.Tc(31), i.nc(32, "translate"), i.Yb(), i.Zb(33, "option", 10), i.Tc(34), i.nc(35, "translate"), i.Yb(), i.Zb(36, "option", 11), i.Tc(37), i.nc(38, "translate"), i.Yb(), i.Zb(39, "option", 12), i.Tc(40), i.nc(41, "translate"), i.Yb(), i.Yb(), i.Zb(42, "div", 14), i.Tc(43), i.nc(44, "translate"), i.Yb(), i.Zb(45, "div", 15), i.Tc(46), i.nc(47, "translate"), i.Yb(), i.Zb(48, "select", 16), i.jc("ngModelChange", (function(t) {
                                return e.roomSettings.chatBubbleMode = t
                            }))("ngModelChange", (function() {
                                return e.save()
                            })), i.Zb(49, "option", 9), i.Tc(50), i.nc(51, "translate"), i.Yb(), i.Zb(52, "option", 10), i.Tc(53), i.nc(54, "translate"), i.Yb(), i.Yb(), i.Zb(55, "select", 13), i.jc("ngModelChange", (function(t) {
                                return e.roomSettings.chatBubbleWeight = t
                            }))("ngModelChange", (function() {
                                return e.save()
                            })), i.Zb(56, "option", 9), i.Tc(57), i.nc(58, "translate"), i.Yb(), i.Zb(59, "option", 10), i.Tc(60), i.nc(61, "translate"), i.Yb(), i.Zb(62, "option", 17), i.Tc(63), i.nc(64, "translate"), i.Yb(), i.Yb(), i.Zb(65, "select", 13), i.jc("ngModelChange", (function(t) {
                                return e.roomSettings.chatBubbleSpeed = t
                            }))("ngModelChange", (function() {
                                return e.save()
                            })), i.Zb(66, "option", 9), i.Tc(67), i.nc(68, "translate"), i.Yb(), i.Zb(69, "option", 10), i.Tc(70), i.nc(71, "translate"), i.Yb(), i.Zb(72, "option", 17), i.Tc(73), i.nc(74, "translate"), i.Yb(), i.Yb(), i.Zb(75, "select", 13), i.jc("ngModelChange", (function(t) {
                                return e.roomSettings.chatFloodProtection = t
                            }))("ngModelChange", (function() {
                                return e.save()
                            })), i.Zb(76, "option", 9), i.Tc(77), i.nc(78, "translate"), i.Yb(), i.Zb(79, "option", 10), i.Tc(80), i.nc(81, "translate"), i.Yb(), i.Zb(82, "option", 17), i.Tc(83), i.nc(84, "translate"), i.Yb(), i.Yb(), i.Zb(85, "input", 18), i.jc("ngModelChange", (function(t) {
                                return e.roomSettings.chatDistance = t
                            }))("blur", (function() {
                                return e.save()
                            })), i.Yb(), i.Zb(86, "div", 19), i.Tc(87), i.nc(88, "translate"), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Uc(i.oc(3, 34, "navigator.roomsettings.vip.caption")), i.Gb(3), i.Uc(i.oc(6, 36, "navigator.roomsettings.vip.info")), i.Gb(3), i.Uc(i.oc(9, 38, "navigator.roomsettings.vip_settings")), i.Gb(4), i.Uc(i.oc(13, 40, "navigator.roomsettings.hide_walls")), i.Gb(2), i.tc("ngModel", e.roomSettings.hideWalls), i.Gb(2), i.tc("ngModel", e.roomSettings.wallThickness), i.Gb(2), i.Uc(i.oc(19, 42, "navigator.roomsettings.wall_thickness.normal")), i.Gb(3), i.Uc(i.oc(22, 44, "navigator.roomsettings.wall_thickness.thick")), i.Gb(3), i.Uc(i.oc(25, 46, "navigator.roomsettings.wall_thickness.thin")), i.Gb(3), i.Uc(i.oc(28, 48, "navigator.roomsettings.wall_thickness.thinnest")), i.Gb(2), i.tc("ngModel", e.roomSettings.floorThickness), i.Gb(2), i.Uc(i.oc(32, 50, "navigator.roomsettings.floor_thickness.normal")), i.Gb(3), i.Uc(i.oc(35, 52, "navigator.roomsettings.floor_thickness.thick")), i.Gb(3), i.Uc(i.oc(38, 54, "navigator.roomsettings.floor_thickness.thin")), i.Gb(3), i.Uc(i.oc(41, 56, "navigator.roomsettings.floor_thickness.thinnest")), i.Gb(3), i.Uc(i.oc(44, 58, "navigator.roomsettings.chat_settings")), i.Gb(3), i.Uc(i.oc(47, 60, "navigator.roomsettings.chat_settings.info")), i.Gb(2), i.tc("ngModel", e.roomSettings.chatBubbleMode), i.Gb(2), i.Uc(i.oc(51, 62, "navigator.roomsettings.chat.mode.free.flow")), i.Gb(3), i.Uc(i.oc(54, 64, "navigator.roomsettings.chat.mode.line.by.line")), i.Gb(2), i.tc("ngModel", e.roomSettings.chatBubbleWeight), i.Gb(2), i.Uc(i.oc(58, 66, "navigator.roomsettings.chat.bubbles.width.normal")), i.Gb(3), i.Uc(i.oc(61, 68, "navigator.roomsettings.chat.bubbles.width.thin")), i.Gb(3), i.Uc(i.oc(64, 70, "navigator.roomsettings.chat.bubbles.width.wide")), i.Gb(2), i.tc("ngModel", e.roomSettings.chatBubbleSpeed), i.Gb(2), i.Uc(i.oc(68, 72, "navigator.roomsettings.chat.speed.fast")), i.Gb(3), i.Uc(i.oc(71, 74, "navigator.roomsettings.chat.speed.normal")), i.Gb(3), i.Uc(i.oc(74, 76, "navigator.roomsettings.chat.speed.slow")), i.Gb(2), i.tc("ngModel", e.roomSettings.chatFloodProtection), i.Gb(2), i.Uc(i.oc(78, 78, "navigator.roomsettings.chat.flood.loose")), i.Gb(3), i.Uc(i.oc(81, 80, "navigator.roomsettings.chat.flood.normal")), i.Gb(3), i.Uc(i.oc(84, 82, "navigator.roomsettings.chat.flood.strict")), i.Gb(2), i.tc("ngModel", e.roomSettings.chatDistance), i.Gb(2), i.Uc(i.oc(88, 84, "navigator.roomsettings.chat_settings.hearing.distance")))
                        },
                        directives: [VE.a, VE.j, VE.l, VE.q, VE.m, VE.s, VE.n, VE.b],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })();

            function ND(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 20), i.Vb(1, "div", 21), i.Zb(2, "p", 22), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().openProfile(s.key)
                    })), i.Tc(3), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(3), i.Uc(t.value)
                }
            }
            const wD = function(t) {
                return {
                    disabled: t
                }
            };
            let LD = (() => {
                class t {
                    constructor() {
                        this.onSave = new i.q, this.onUnban = new i.q, this.onOpenProfile = new i.q
                    }
                    save() {
                        this.onSave.emit(this.roomSettings)
                    }
                    unban() {
                        this.onUnban.emit()
                    }
                    openProfile(t) {
                        this.onOpenProfile.emit(t)
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-navigator-roomsettings-tab-mod-component"]
                    ],
                    inputs: {
                        roomSettings: "roomSettings"
                    },
                    outputs: {
                        onSave: "onSave",
                        onUnban: "onUnban",
                        onOpenProfile: "onOpenProfile"
                    },
                    decls: 61,
                    vars: 54,
                    consts: [
                        ["id", "rsmanage-box", 1, "custom-radios"],
                        [1, "rssettings_desc"],
                        [1, "rssettings_txt", "t15"],
                        [1, "rs-select_container-radio2"],
                        ["type", "radio", "name", "moderation_mute", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "form-check-label"],
                        ["type", "radio", "name", "moderation_mute", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "moderation_kick", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "moderation_kick", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "moderation_kick", "value", "2", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "moderation_ban", "value", "0", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        ["type", "radio", "name", "moderation_ban", "value", "1", 1, "form-check-input", 3, "ngModel", "ngModelChange"],
                        [1, "banned-users-bg"],
                        [1, "banned-users_box"],
                        [1, "banned-users-list"],
                        ["class", "rs-bannedu-userbox", 4, "ngFor", "ngForOf"],
                        [1, "manage-bannedu-removeu"],
                        [1, "manage-banned-user-txt"],
                        [1, "mbu-remove-button", 3, "ngClass", "click"],
                        [1, "mng-btn-text"],
                        [1, "rs-bannedu-userbox"],
                        [1, "rs-forumico"],
                        [1, "rs-username", 3, "click"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Zb(4, "div", 2), i.Tc(5), i.nc(6, "translate"), i.Yb(), i.Zb(7, "div", 3), i.Zb(8, "input", 4), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.muteState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(9, "label", 5), i.Tc(10), i.nc(11, "translate"), i.Yb(), i.Yb(), i.Zb(12, "div", 3), i.Zb(13, "input", 6), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.muteState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(14, "label", 5), i.Tc(15), i.nc(16, "translate"), i.Yb(), i.Yb(), i.Zb(17, "div", 2), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Zb(20, "div", 3), i.Zb(21, "input", 7), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.kickState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(22, "label", 5), i.Tc(23), i.nc(24, "translate"), i.Yb(), i.Yb(), i.Zb(25, "div", 3), i.Zb(26, "input", 8), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.kickState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(27, "label", 5), i.Tc(28), i.nc(29, "translate"), i.Yb(), i.Yb(), i.Zb(30, "div", 3), i.Zb(31, "input", 9), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.kickState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(32, "label", 5), i.Tc(33), i.nc(34, "translate"), i.Yb(), i.Yb(), i.Zb(35, "div", 2), i.Tc(36), i.nc(37, "translate"), i.Yb(), i.Zb(38, "div", 3), i.Zb(39, "input", 10), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.banState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(40, "label", 5), i.Tc(41), i.nc(42, "translate"), i.Yb(), i.Yb(), i.Zb(43, "div", 3), i.Zb(44, "input", 11), i.jc("ngModelChange", (function(t) {
                            return e.roomSettings.banState = t
                        }))("ngModelChange", (function() {
                            return e.save()
                        })), i.Yb(), i.Zb(45, "label", 5), i.Tc(46), i.nc(47, "translate"), i.Yb(), i.Yb(), i.Zb(48, "div", 12), i.Zb(49, "div", 13), i.Zb(50, "div", 14), i.Rc(51, ND, 4, 1, "div", 15), i.nc(52, "keyvalue"), i.Yb(), i.Yb(), i.Zb(53, "div", 16), i.Zb(54, "p", 17), i.Tc(55), i.nc(56, "translate"), i.Yb(), i.Zb(57, "div", 18), i.jc("click", (function() {
                            return e.unban()
                        })), i.Zb(58, "p", 19), i.Tc(59), i.nc(60, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(2), i.Uc(i.oc(3, 24, "navigator.roomsettings.moderation.header")), i.Gb(3), i.Uc(i.oc(6, 26, "navigator.roomsettings.moderation.mute.header")), i.Gb(3), i.tc("ngModel", e.roomSettings.muteState), i.Gb(2), i.Uc(i.oc(11, 28, "navigator.roomsettings.moderation.none")), i.Gb(3), i.tc("ngModel", e.roomSettings.muteState), i.Gb(2), i.Uc(i.oc(16, 30, "navigator.roomsettings.moderation.rights")), i.Gb(3), i.Uc(i.oc(19, 32, "navigator.roomsettings.moderation.kick.header")), i.Gb(3), i.tc("ngModel", e.roomSettings.kickState), i.Gb(2), i.Uc(i.oc(24, 34, "navigator.roomsettings.moderation.all")), i.Gb(3), i.tc("ngModel", e.roomSettings.kickState), i.Gb(2), i.Uc(i.oc(29, 36, "navigator.roomsettings.moderation.rights")), i.Gb(3), i.tc("ngModel", e.roomSettings.kickState), i.Gb(2), i.Uc(i.oc(34, 38, "navigator.roomsettings.moderation.none")), i.Gb(3), i.Uc(i.oc(37, 40, "navigator.roomsettings.moderation.ban.header")), i.Gb(3), i.tc("ngModel", e.roomSettings.banState), i.Gb(2), i.Uc(i.oc(42, 42, "navigator.roomsettings.moderation.none")), i.Gb(3), i.tc("ngModel", e.roomSettings.banState), i.Gb(2), i.Uc(i.oc(47, 44, "navigator.roomsettings.moderation.rights")), i.Gb(5), i.tc("ngForOf", i.oc(52, 46, e.roomSettings.bannedUsers)), i.Gb(4), i.Wc("", i.oc(56, 48, "navigator.roomsettings.moderation.banned.users"), " (", e.roomSettings.bannedUsers.size, ")"), i.Gb(2), i.tc("ngClass", i.xc(52, wD, 0 === e.roomSettings.selectedUserToUnban)), i.Gb(2), i.Wc("", i.oc(60, 50, "navigator.roomsettings.moderation.unban"), " ", e.roomSettings.selectedUsernameToUnban, ""))
                    },
                    directives: [VE.o, VE.b, VE.j, VE.l, hp.m, hp.l],
                    pipes: [tE, hp.h],
                    encapsulation: 2
                }), t
            })();

            function xD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "nitro-navigator-roomsettings-tab-basic-component", 12), i.jc("onSave", (function(e) {
                        return i.Gc(t), i.mc(2).onSave(e)
                    }))("onDeleteRoom", (function() {
                        return i.Gc(t), i.mc(2).onDeleteRoom()
                    })), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.tc("roomSettings", t.roomSettings)("categories", t.categories)("maxVisitors", t.maxVisitors)("tradeSettings", t.tradeSettings)
                }
            }

            function PD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "nitro-navigator-roomsettings-tab-access-component", 13), i.jc("onSave", (function(e) {
                        return i.Gc(t), i.mc(2).onSave(e)
                    })), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.tc("roomSettings", t.roomSettings)
                }
            }

            function FD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "nitro-navigator-roomsettings-tab-rights-component", 14), i.jc("onSave", (function(e) {
                        return i.Gc(t), i.mc(2).onSave(e)
                    }))("onGiveRights", (function(e) {
                        return i.Gc(t), i.mc(2).onGiveRights(e)
                    }))("onTakeRights", (function(e) {
                        return i.Gc(t), i.mc(2).onTakeRights(e)
                    }))("onOpenProfile", (function(e) {
                        return i.Gc(t), i.mc(2).onOpenProfile(e)
                    })), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.tc("roomSettings", t.roomSettings)
                }
            }

            function GD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "nitro-navigator-roomsettings-tab-vipchat-component", 13), i.jc("onSave", (function(e) {
                        return i.Gc(t), i.mc(2).onSave(e)
                    })), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.tc("roomSettings", t.roomSettings)
                }
            }

            function YD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "nitro-navigator-roomsettings-tab-mod-component", 15), i.jc("onSave", (function(e) {
                        return i.Gc(t), i.mc(2).onSave(e)
                    }))("onUnban", (function(e) {
                        return i.Gc(t), i.mc(2).onUnban(e)
                    }))("onOpenProfile", (function(e) {
                        return i.Gc(t), i.mc(2).onOpenProfile(e)
                    })), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc(2);
                    i.tc("roomSettings", t.roomSettings)
                }
            }
            const kD = function(t) {
                return {
                    "rstbutton-active": t
                }
            };

            function VD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 1), i.Zb(1, "div", 2), i.Zb(2, "p", 3), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 4), i.jc("click", (function() {
                        return i.Gc(t), i.mc().hide()
                    })), i.Yb(), i.Yb(), i.Zb(6, "div", 5), i.Zb(7, "div", 6), i.jc("click", (function() {
                        return i.Gc(t), i.mc().changeTab(1)
                    })), i.Tc(8), i.nc(9, "translate"), i.Yb(), i.Zb(10, "div", 6), i.jc("click", (function() {
                        return i.Gc(t), i.mc().changeTab(2)
                    })), i.Tc(11), i.nc(12, "translate"), i.Yb(), i.Zb(13, "div", 6), i.jc("click", (function() {
                        return i.Gc(t), i.mc().changeTab(3)
                    })), i.Tc(14), i.nc(15, "translate"), i.Yb(), i.Zb(16, "div", 6), i.jc("click", (function() {
                        return i.Gc(t), i.mc().changeTab(4)
                    })), i.Tc(17), i.nc(18, "translate"), i.Yb(), i.Zb(19, "div", 6), i.jc("click", (function() {
                        return i.Gc(t), i.mc().changeTab(5)
                    })), i.Tc(20), i.nc(21, "translate"), i.Yb(), i.Yb(), i.Zb(22, "div", 7), i.Rc(23, xD, 1, 4, "nitro-navigator-roomsettings-tab-basic-component", 8), i.Rc(24, PD, 1, 1, "nitro-navigator-roomsettings-tab-access-component", 9), i.Rc(25, FD, 1, 1, "nitro-navigator-roomsettings-tab-rights-component", 10), i.Rc(26, GD, 1, 1, "nitro-navigator-roomsettings-tab-vipchat-component", 9), i.Rc(27, YD, 1, 1, "nitro-navigator-roomsettings-tab-mod-component", 11), i.Yb(), i.Yb()
                }
                if (2 & t) {
                    const t = i.mc();
                    i.Gb(3), i.Uc(i.oc(4, 16, "navigator.roomsettings")), i.Gb(4), i.tc("ngClass", i.xc(28, kD, 1 === t.currentTab)), i.Gb(1), i.Uc(i.oc(9, 18, "navigator.roomsettings.tab.1")), i.Gb(2), i.tc("ngClass", i.xc(30, kD, 2 === t.currentTab)), i.Gb(1), i.Uc(i.oc(12, 20, "navigator.roomsettings.tab.2")), i.Gb(2), i.tc("ngClass", i.xc(32, kD, 3 === t.currentTab)), i.Gb(1), i.Uc(i.oc(15, 22, "navigator.roomsettings.tab.3")), i.Gb(2), i.tc("ngClass", i.xc(34, kD, 4 === t.currentTab)), i.Gb(1), i.Uc(i.oc(18, 24, "navigator.roomsettings.tab.4")), i.Gb(2), i.tc("ngClass", i.xc(36, kD, 5 === t.currentTab)), i.Gb(1), i.Uc(i.oc(21, 26, "navigator.roomsettings.tab.5")), i.Gb(3), i.tc("ngIf", 1 === t.currentTab), i.Gb(1), i.tc("ngIf", 2 === t.currentTab), i.Gb(1), i.tc("ngIf", 3 === t.currentTab), i.Gb(1), i.tc("ngIf", 4 === t.currentTab), i.Gb(1), i.tc("ngIf", 5 === t.currentTab)
                }
            }
            let ZD = (() => {
                class t {
                    constructor(t, e, s, i) {
                        this._navigatorService = t, this._friendListService = e, this._notificationService = s, this._ngZone = i, this._currentTab = 1, this._messages = [], this._maxVisitors = [], this.onRoomSettingsEvent = this.onRoomSettingsEvent.bind(this), this.onRoomUsersWithRightsEvent = this.onRoomUsersWithRightsEvent.bind(this), this.onRoomBannedUsersEvent = this.onRoomBannedUsersEvent.bind(this), this.clear(), this.registerMessages()
                    }
                    clear() {
                        this._currentTab = 1, this.roomSettings = new ED(this._ngZone), this._roomId = 0, this._oldRoomName = null, this._visible = !1
                    }
                    ngOnDestroy() {
                        this.clear(), this.unregisterMessages()
                    }
                    registerMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            this._messages = [new xr(this.onRoomSettingsEvent), new kr(this.onRoomUsersWithRightsEvent), new Ir(this.onRoomBannedUsersEvent)];
                            for (const t of this._messages) cp.instance.communication.registerMessageEvent(t)
                        })
                    }
                    unregisterMessages() {
                        this._ngZone.runOutsideAngular(() => {
                            for (const t of this._messages) cp.instance.communication.removeMessageEvent(t);
                            this._messages = []
                        })
                    }
                    onRoomSettingsEvent(t) {
                        if (!(t instanceof xr)) return;
                        const e = t.getParser();
                        e && (this.clear(), this._roomId = e.roomId, this._ngZone.run(() => {
                            this.roomSettings.roomName = e.name, this.roomSettings.roomDescription = e.description, this.roomSettings.categoryId = e.categoryId.toString(), this.roomSettings.userCount = e.userCount.toString(), this.roomSettings.tradeState = e.tradeMode.toString(), this.roomSettings.allowWalkthrough = e.allowWalkthrough, this.roomSettings.lockState = e.state.toString(), this.roomSettings.allowPets = e.allowPets, this.roomSettings.hideWalls = e.hideWalls, this.roomSettings.wallThickness = e.thicknessWall.toString(), this.roomSettings.floorThickness = e.thicknessFloor.toString(), this.roomSettings.chatBubbleMode = e.chatSettings.mode.toString(), this.roomSettings.chatBubbleWeight = e.chatSettings.weight.toString(), this.roomSettings.chatBubbleSpeed = e.chatSettings.speed.toString(), this.roomSettings.chatFloodProtection = e.chatSettings.protection.toString(), this.roomSettings.chatDistance = e.chatSettings.distance, this.roomSettings.muteState = e.moderationSettings.allowMute.toString(), this.roomSettings.kickState = e.moderationSettings.allowKick.toString(), this.roomSettings.banState = e.moderationSettings.allowBan.toString(), this._maxVisitors = this._navigatorService.getMaxVisitors(50), this._oldRoomName = e.name, this._oldLockState = e.state.toString(), this._visible = !0
                        }), cp.instance.communication.connection.send(new V_(this._roomId)), cp.instance.communication.connection.send(new G_(this._roomId)))
                    }
                    onRoomUsersWithRightsEvent(t) {
                        if (!(t instanceof kr)) return;
                        const e = t.getParser();
                        e && (this.roomSettings.usersWithRights = new Map(e.users), this.getFriendsWithoutRights())
                    }
                    onRoomBannedUsersEvent(t) {
                        if (!(t instanceof Ir)) return;
                        const e = t.getParser();
                        e && (this.roomSettings.bannedUsers = new Map(e.users))
                    }
                    getFriendsWithoutRights() {
                        this._friendListService.friends.forEach((t, e) => {
                            this.roomSettings.usersWithRights.has(e) || this.roomSettings.friendsWithoutRights.set(e, t.name)
                        })
                    }
                    changeTab(t) {
                        this._currentTab = t
                    }
                    onDeleteRoom() {
                        const t = cp.instance.localization.getValue("navigator.roomsettings.deleteroom.confirm.title"),
                            e = cp.instance.localization.getValueWithParameter("navigator.roomsettings.deleteroom.confirm.message", "room_name", "<b>" + this.roomSettings.roomName + "</b>"),
                            s = [new aI("navigator.roomsettings.delete", () => {
                                cp.instance.communication.connection.send(new D_(this._roomId)), this.hide()
                            }, ["btn-danger"]), new aI("generic.close", () => {}, ["btn-primary"])];
                        this._notificationService.alertWithChoices(e, s, t)
                    }
                    onOpenProfile(t) {}
                    onGiveRights(t) {
                        this.roomSettings.friendsWithoutRights.has(t) && (this._ngZone.run(() => {
                            this.roomSettings.usersWithRights.set(t, this.roomSettings.friendsWithoutRights.get(t)), this.roomSettings.friendsWithoutRights.delete(t)
                        }), cp.instance.communication.connection.send(new N_(t)))
                    }
                    onTakeRights(t) {
                        this.roomSettings.usersWithRights.has(t) && (this._ngZone.run(() => {
                            this.roomSettings.friendsWithoutRights.set(t, this.roomSettings.usersWithRights.get(t)), this.roomSettings.usersWithRights.delete(t)
                        }), cp.instance.communication.connection.send(new P_(t)))
                    }
                    onUnban() {
                        if (0 === this.roomSettings.selectedUserToUnban) return;
                        if (!this.roomSettings.bannedUsers.has(this.roomSettings.selectedUserToUnban)) return;
                        const t = this.roomSettings.selectedUserToUnban;
                        this._ngZone.run(() => {
                            this.roomSettings.bannedUsers.delete(this.roomSettings.selectedUserToUnban), this.roomSettings.selectedUserToUnban = 0
                        }), cp.instance.communication.connection.send(new F_(t, this._roomId))
                    }
                    hide() {
                        this._visible = !1, this.clear()
                    }
                    onSave(t) {
                        this._ngZone.run(() => {
                            this.roomSettings = t
                        });
                        let e = t.lockState,
                            s = t.password;
                        t.isValidPassword ? this._oldLockState = e : (e = this._oldLockState, s = null), t.roomName.length < 1 && (t.roomName = this._oldRoomName), parseInt(t.userCount) < 0 && (t.userCount = "10");
                        const i = new Z_(this._roomId, t.roomName, t.roomDescription, parseInt(e), s, parseInt(t.userCount), parseInt(t.categoryId), t.tags.length, t.tags, parseInt(t.tradeState), t.allowPets, t.allowPetsEat, t.allowWalkthrough, t.hideWalls, parseInt(t.wallThickness), parseInt(t.floorThickness), parseInt(t.muteState), parseInt(t.kickState), parseInt(t.banState), parseInt(t.chatBubbleMode), parseInt(t.chatBubbleWeight), parseInt(t.chatBubbleSpeed), t.chatDistance, parseInt(t.chatFloodProtection));
                        cp.instance.communication.connection.send(i)
                    }
                    get currentTab() {
                        return this._currentTab
                    }
                    get categories() {
                        return this._navigatorService.categories
                    }
                    get maxVisitors() {
                        return this._maxVisitors
                    }
                    get tradeSettings() {
                        return this._navigatorService.tradeSettings
                    }
                    get visible() {
                        return this._visible
                    }
                    get usersWithRights() {
                        return this.roomSettings.usersWithRights
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(WS), i.Ub(jb), i.Ub(xb), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-navigator-roomsettings-component"]
                    ],
                    decls: 1,
                    vars: 1,
                    consts: [
                        ["dragHandle", ".drag-handler", "id", "roomsettings", 3, "bringToTop", "draggable", 4, "ngIf"],
                        ["dragHandle", ".drag-handler", "id", "roomsettings", 3, "bringToTop", "draggable"],
                        ["id", "roomsettingsdrag", 1, "drag-handler"],
                        [1, "rs-baslik"],
                        [1, "old-kapat", 3, "click"],
                        [1, "rs-menu"],
                        [1, "rsmenu-button", 3, "ngClass", "click"],
                        [1, "rs-box"],
                        [3, "roomSettings", "categories", "maxVisitors", "tradeSettings", "onSave", "onDeleteRoom", 4, "ngIf"],
                        [3, "roomSettings", "onSave", 4, "ngIf"],
                        [3, "roomSettings", "onSave", "onGiveRights", "onTakeRights", "onOpenProfile", 4, "ngIf"],
                        [3, "roomSettings", "onSave", "onUnban", "onOpenProfile", 4, "ngIf"],
                        [3, "roomSettings", "categories", "maxVisitors", "tradeSettings", "onSave", "onDeleteRoom"],
                        [3, "roomSettings", "onSave"],
                        [3, "roomSettings", "onSave", "onGiveRights", "onTakeRights", "onOpenProfile"],
                        [3, "roomSettings", "onSave", "onUnban", "onOpenProfile"]
                    ],
                    template: function(t, e) {
                        1 & t && i.Rc(0, VD, 28, 38, "div", 0), 2 & t && i.tc("ngIf", e.visible)
                    },
                    directives: [hp.n, CE, kE, hp.l, RD, OD, UD, DD, LD],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const jD = ["nitro-navigator-search-component", ""];

            function BD(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "button", 9), i.jc("click", (function() {
                        i.Gc(t);
                        const s = e.$implicit;
                        return i.mc().changeFilter(s)
                    })), i.Tc(1), i.nc(2, "translate"), i.Yb()
                }
                if (2 & t) {
                    const t = e.$implicit;
                    i.Gb(1), i.Uc(i.oc(2, 1, "navigator.filter." + t.name))
                }
            }
            let HD = (() => {
                    class t {
                        constructor(t, e) {
                            this._formBuilder = t, this._navigatorService = e
                        }
                        ngOnInit() {
                            this._form = this._formBuilder.group({
                                search: [""]
                            })
                        }
                        changeFilter(t) {
                            this._navigatorService.setCurrentFilter(t)
                        }
                        search(t) {
                            this._navigatorService.search(this.searchValue)
                        }
                        clearSearch() {}
                        get form() {
                            return this._form
                        }
                        get searchValue() {
                            return this._navigatorService.lastSearch
                        }
                        set searchValue(t) {
                            this._navigatorService.lastSearch = t
                        }
                        get currentFilter() {
                            return this._navigatorService.filter
                        }
                        get searchFilters() {
                            return WS.SEARCH_FILTERS
                        }
                        get hasSearchResults() {
                            return this._navigatorService.lastSearchResults && this._navigatorService.lastSearchResults.length > 0
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)(i.Ub(VE.c), i.Ub(WS))
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["", "nitro-navigator-search-component", ""]
                        ],
                        attrs: jD,
                        decls: 12,
                        vars: 8,
                        consts: [
                            [1, "nav-search"],
                            ["src", "./assets/images/nav/nroom-filtre_ico.png", 1, "nroom-filtre_ico"],
                            ["ngbDropdown", ""],
                            ["ngbDropdownToggle", "", 1, "nroom-filtre", 2, "outline", "0", "float", "left", "text-align", "left"],
                            ["ngbDropdownMenu", "", 1, "dropdown-menu"],
                            ["class", "dropdown-item", "ngbDropdownItem", "", 3, "click", 4, "ngFor", "ngForOf"],
                            ["type", "text", 1, "nroom-search", 3, "ngModel", "placeholder", "ngModelChange", "keydown.enter"],
                            [1, "icoText"],
                            [1, "reloadSearch"],
                            ["ngbDropdownItem", "", 1, "dropdown-item", 3, "click"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Vb(1, "img", 1), i.Zb(2, "div", 2), i.Zb(3, "button", 3), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Zb(6, "div", 4), i.Rc(7, BD, 3, 3, "button", 5), i.Yb(), i.Yb(), i.Zb(8, "input", 6), i.jc("ngModelChange", (function(t) {
                                return e.searchValue = t
                            }))("keydown.enter", (function(t) {
                                return e.search(t)
                            })), i.nc(9, "translate"), i.Yb(), i.Vb(10, "div", 7), i.Vb(11, "div", 8), i.Yb()), 2 & t && (i.Gb(4), i.Uc(i.oc(5, 4, "navigator.filter." + e.currentFilter.name)), i.Gb(3), i.tc("ngForOf", e.searchFilters), i.Gb(1), i.tc("ngModel", e.searchValue)("placeholder", i.oc(9, 6, "navigator.filter.input.placeholder")))
                        },
                        directives: [_T.b, _T.f, _T.d, hp.m, VE.b, VE.j, VE.l, _T.c],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                WD = (() => {
                    class t {}
                    return t.LIST = 0, t.THUMBNAILS = 1, t.FORCED_THUMBNAILS = 2, t
                })();
            const zD = ["nitro-navigator-search-result-item-component", ""],
                KD = function(t) {
                    return {
                        "background-image": t
                    }
                };

            function XD(t, e) {
                if (1 & t && (i.Zb(0, "div", 4), i.Zb(1, "div", 5), i.Zb(2, "div", 6), i.Vb(3, "img", 7), i.Zb(4, "p", 8), i.Tc(5), i.Yb(), i.Yb(), i.Vb(6, "img", 9), i.Yb(), i.Zb(7, "div", 10), i.Tc(8), i.Yb(), i.Vb(9, "img", 11), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngStyle", t.thumbnail && i.xc(4, KD, "url(" + t.thumbnail + ")")), i.Gb(1), i.tc("ngClass", t.entryBg), i.Gb(3), i.Uc(t.room.userCount), i.Gb(3), i.Vc("", t.room.roomName, " ")
                }
            }

            function qD(t, e) {
                1 & t && i.Vb(0, "img", 19)
            }

            function JD(t, e) {
                1 & t && i.Vb(0, "img", 20)
            }

            function QD(t, e) {
                1 & t && i.Vb(0, "img", 20)
            }

            function $D(t, e) {
                if (1 & t && (i.Xb(0), i.Rc(1, qD, 1, 0, "img", 17), i.Rc(2, JD, 1, 0, "img", 18), i.Rc(3, QD, 1, 0, "img", 18), i.Wb()), 2 & t) {
                    const t = i.mc(2);
                    i.Gb(1), i.tc("ngIf", t.isGroup), i.Gb(1), i.tc("ngIf", t.isDoorbell), i.Gb(1), i.tc("ngIf", t.isPassword)
                }
            }

            function tN(t, e) {
                if (1 & t && (i.Zb(0, "div", 12), i.Zb(1, "div", 13), i.Vb(2, "img", 7), i.Zb(3, "p", 8), i.Tc(4), i.Yb(), i.Yb(), i.Zb(5, "div", 14), i.Tc(6), i.Yb(), i.Vb(7, "img", 15), i.Rc(8, $D, 4, 3, "ng-container", 16), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngClass", t.entryBg), i.Gb(3), i.Uc(t.room.userCount), i.Gb(2), i.Uc(t.room.roomName), i.Gb(2), i.tc("ngIf", 0 === t.displayMode)
                }
            }
            const eN = function(t) {
                return {
                    "": t
                }
            };
            let sN = (() => {
                class t {
                    constructor(t, e) {
                        this._navigatorService = t, this._ngZone = e, this._thumbnailUrl = null, this._didRequestUrl = !1
                    }
                    visit() {
                        if (this.room.ownerId !== cp.instance.sessionDataManager.userId) {
                            if (0 !== this.room.habboGroupId) return void this._navigatorService.goToPrivateRoom(this.room.roomId);
                            switch (this.room.doorMode) {
                                case Gn.DOORBELL_STATE:
                                    return void this._navigatorService.openRoomDoorbell(this.room);
                                case Gn.PASSWORD_STATE:
                                    return void this._navigatorService.openRoomPassword(this.room)
                            }
                        }
                        this._navigatorService.goToRoom(this.room.roomId)
                    }
                    get isGroup() {
                        return this.room && this.room.habboGroupId > 0
                    }
                    get isDoorbell() {
                        return this.room && this.room.doorMode === Gn.DOORBELL_STATE
                    }
                    get isPassword() {
                        return this.room && this.room.doorMode === Gn.PASSWORD_STATE
                    }
                    get thumbnail() {
                        if (this._thumbnailUrl) return this._thumbnailUrl;
                        if (!this.room || this._didRequestUrl) return null;
                        let t = cp.instance.core.configuration.getValue("thumbnails.url");
                        t = t.replace("%thumbnail%", this.room.roomId.toString());
                        const e = new XMLHttpRequest;
                        return e.open("GET", t, !0), e.onreadystatechange = () => {
                            4 === e.readyState && 200 === e.status && (this._thumbnailUrl = t)
                        }, e.send(), this._didRequestUrl = !0, null
                    }
                    get entryBg() {
                        const t = this.room.userCount / this.room.maxUserCount * 100;
                        let e = "roomGray";
                        return t >= 92 ? e = "roomRed" : t >= 50 ? e = "roomOrange" : t > 0 && (e = "roomGreen"), e
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(WS), i.Ub(i.E))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["", "nitro-navigator-search-result-item-component", ""]
                    ],
                    inputs: {
                        room: "room",
                        displayMode: "displayMode"
                    },
                    attrs: zD,
                    decls: 4,
                    vars: 8,
                    consts: [
                        [3, "ngClass", "click"],
                        [3, "ngClass"],
                        ["class", "big-room-box", 4, "ngIf"],
                        ["class", "small-room-box", 4, "ngIf"],
                        [1, "big-room-box"],
                        [1, "oda-picture", 3, "ngStyle"],
                        [1, "room-aktifUser", 3, "ngClass"],
                        ["src", "./assets/images/nav/roomUser.png", 1, "roomUser"],
                        [1, "roomUser-number"],
                        ["src", "./assets/images/roomimg.png"],
                        [1, "b_box-roomname"],
                        ["src", "./assets/images/nav/roominfo.png", 1, "b_box-odainfo"],
                        [1, "small-room-box"],
                        [1, "smallroombox-aktifUser", 3, "ngClass"],
                        [1, "small_box-roomname"],
                        ["src", "./assets/images/nav/roominfo.png?0", 1, "b_box-odainfo"],
                        [4, "ngIf"],
                        ["class", "there-is-group", "src", "./assets/images/nav/oda-grup.png", 4, "ngIf"],
                        ["class", "there-is-lock", "src", "./assets/images/nav/oda-kilit.png", 4, "ngIf"],
                        ["src", "./assets/images/nav/oda-grup.png", 1, "there-is-group"],
                        ["src", "./assets/images/nav/oda-kilit.png", 1, "there-is-lock"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.Zb(0, "div", 0), i.jc("click", (function() {
                            return e.visit()
                        })), i.Zb(1, "div", 1), i.Rc(2, XD, 10, 6, "div", 2), i.Rc(3, tN, 9, 4, "div", 3), i.Yb(), i.Yb()), 2 & t && (i.tc("ngClass", i.xc(4, eN, 0 === e.displayMode)), i.Gb(1), i.tc("ngClass", i.xc(6, eN, e.displayMode >= 1)), i.Gb(1), i.tc("ngIf", e.displayMode >= 1), i.Gb(1), i.tc("ngIf", 0 === e.displayMode))
                    },
                    directives: [hp.l, hp.n, hp.o],
                    encapsulation: 2
                }), t
            })();
            const iN = ["nitro-navigator-search-result-component", ""];

            function nN(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 8), i.jc("click", (function() {
                        return i.Gc(t), i.mc().toggleListMode()
                    })), i.Yb()
                }
            }

            function rN(t, e) {
                if (1 & t) {
                    const t = i.ac();
                    i.Zb(0, "div", 9), i.jc("click", (function() {
                        return i.Gc(t), i.mc().toggleListMode()
                    })), i.Yb()
                }
            }

            function oN(t, e) {
                if (1 & t && i.Vb(0, "div", 13), 2 & t) {
                    const t = e.$implicit,
                        s = i.mc(2);
                    i.tc("room", t)("displayMode", s.displayMode)
                }
            }
            const aN = function(t) {
                return {
                    "grid-1": t
                }
            };

            function cN(t, e) {
                if (1 & t && (i.Zb(0, "div", 10), i.Zb(1, "div", 11), i.Rc(2, oN, 1, 2, "div", 12), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(1), i.tc("ngClass", i.xc(2, aN, 0 === t.displayMode)), i.Gb(1), i.tc("ngForOf", t.result.rooms)
                }
            }
            const _N = function(t, e) {
                return {
                    "room-box-active": t,
                    "room-box-notactive": e
                }
            };
            let hN = (() => {
                    class t {
                        ngOnInit() {
                            this._displayMode = this.result.mode, this._isCollapsed = this.result.closed
                        }
                        toggleListMode() {
                            this._displayMode !== WD.FORCED_THUMBNAILS && (this._displayMode = this._displayMode !== WD.LIST ? WD.LIST : WD.THUMBNAILS)
                        }
                        toggleCollapsed() {
                            this._isCollapsed = !this._isCollapsed
                        }
                        get resultCode() {
                            let t = this.result.code;
                            return t = this.result.code.startsWith("${") ? t.substr(2, t.length - 3) : "navigator.searchcode.title." + t, t
                        }
                        get displayMode() {
                            return this._displayMode
                        }
                        get isCollapsed() {
                            return !this._isCollapsed
                        }
                    }
                    return t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["", "nitro-navigator-search-result-component", ""]
                        ],
                        inputs: {
                            result: "result"
                        },
                        attrs: iN,
                        decls: 10,
                        vars: 10,
                        consts: [
                            [1, "actvroom-box"],
                            [1, "aroom_b-head"],
                            [1, "room-box-active", 3, "ngClass", "click"],
                            [1, "navhead-baslik"],
                            [1, "room-navico_ex"],
                            ["class", "room-navico4", 3, "click", 4, "ngIf"],
                            ["class", "room-navico3", 3, "click", 4, "ngIf"],
                            ["class", "navigator-grid-container position-relative mt-1", 4, "ngIf"],
                            [1, "room-navico4", 3, "click"],
                            [1, "room-navico3", 3, "click"],
                            [1, "navigator-grid-container", "position-relative", "mt-1"],
                            [3, "ngClass"],
                            ["nitro-navigator-search-result-item-component", "", 3, "room", "displayMode", 4, "ngFor", "ngForOf"],
                            ["nitro-navigator-search-result-item-component", "", 3, "room", "displayMode"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "div", 2), i.jc("click", (function() {
                                return e.toggleCollapsed()
                            })), i.Yb(), i.Zb(3, "p", 3), i.Tc(4), i.nc(5, "translate"), i.Yb(), i.Vb(6, "div", 4), i.Rc(7, nN, 1, 0, "div", 5), i.Rc(8, rN, 1, 0, "div", 6), i.Yb(), i.Rc(9, cN, 3, 4, "div", 7), i.Yb()), 2 & t && (i.Gb(2), i.tc("ngClass", i.yc(7, _N, e.isCollapsed, !e.isCollapsed)), i.Gb(2), i.Uc(i.oc(5, 5, e.resultCode)), i.Gb(3), i.tc("ngIf", 2 !== e.displayMode), i.Gb(1), i.tc("ngIf", 2 !== e.displayMode), i.Gb(1), i.tc("ngIf", e.isCollapsed && e.result.rooms.length > 0))
                        },
                        directives: [hp.l, hp.n, hp.m, sN],
                        pipes: [tE],
                        encapsulation: 2
                    }), t
                })(),
                lN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [WS, HS],
                        imports: [
                            [$C]
                        ]
                    }), t
                })();
            i.Jc(wT, [hp.n, CE, kE, hp.m, hp.l, HD, hN, ZD], [tE]);
            let uN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [xb],
                        imports: [
                            [$C]
                        ]
                    }), t
                })(),
                dN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [Xv],
                        imports: [
                            [$C]
                        ]
                    }), t
                })(),
                gN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        imports: [
                            [$C]
                        ]
                    }), t
                })(),
                mN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [],
                        imports: [
                            [$C]
                        ]
                    }), t
                })(),
                pN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [cO],
                        imports: [
                            [$C]
                        ]
                    }), t
                })();
            const bN = function() {
                    return ["count", "limit"]
                },
                EN = function(t, e) {
                    return [t, e]
                };

            function fN(t, e) {
                if (1 & t && (i.Zb(0, "div", 15), i.Zb(1, "p", 16), i.Tc(2), i.nc(3, "translate"), i.Yb(), i.Zb(4, "p", 17), i.Tc(5), i.nc(6, "translate"), i.Yb(), i.Yb()), 2 & t) {
                    const t = i.mc();
                    i.Gb(2), i.Uc(i.qc(3, 2, "wiredfurni.pickfurnis.caption", i.wc(8, bN), i.yc(9, EN, t.furniSelectionCount, t.maximumFurniSelectionCount))), i.Gb(3), i.Uc(i.oc(6, 6, "wiredfurni.pickfurnis.desc"))
                }
            }
            const SN = ["*"];
            let IN = (() => {
                class t {
                    constructor(t) {
                        this._wiredService = t
                    }
                    save() {
                        this._wiredService.component.save()
                    }
                    hide() {
                        this._wiredService.component.close()
                    }
                    get furniName() {
                        return this._wiredService.component.getFurniName()
                    }
                    get furniDescription() {
                        return this._wiredService.component.getFurniDescription()
                    }
                    get requiresFurni() {
                        return this._wiredService.component._Str_19885()
                    }
                    get furniSelectionCount() {
                        return this._wiredService.component.furniSelectedIds.length
                    }
                    get maximumFurniSelectionCount() {
                        return this._wiredService.component.maximumItemSelectionCount
                    }
                    get wiredType() {
                        const t = this._wiredService.component._Str_19071();
                        return t ? t._Str_1196() : ""
                    }
                }
                return t.\u0275fac = function(e) {
                    return new(e || t)(i.Ub(Pb))
                }, t.\u0275cmp = i.Ob({
                    type: t,
                    selectors: [
                        ["nitro-wired-base-component"]
                    ],
                    ngContentSelectors: SN,
                    decls: 24,
                    vars: 11,
                    consts: [
                        [1, "wiredpanel", 3, "bringToTop", "draggable"],
                        [1, "wpanel-top", "drag-handler"],
                        [1, "wpanel-hood"],
                        [1, "wpanel-close", 3, "click"],
                        [1, "wpanel-middle"],
                        [1, "wiredico"],
                        [1, "wpanel-wired_name"],
                        [1, "wired_hr"],
                        ["class", "select-mobi-box", 4, "ngIf"],
                        [1, "wired-help"],
                        [1, "wpanel-bottom"],
                        [1, "wpanel-ready_button", 3, "click"],
                        [1, "wpanel-ready_button-text"],
                        [1, "wpanel-close_button", 3, "click"],
                        [1, "wpanel-close_button-text"],
                        [1, "select-mobi-box"],
                        [1, "number-of-selected-mobi"],
                        [1, "nosm-descripton"]
                    ],
                    template: function(t, e) {
                        1 & t && (i.sc(), i.Zb(0, "div", 0), i.Zb(1, "div", 1), i.Zb(2, "p", 2), i.Tc(3), i.nc(4, "translate"), i.Yb(), i.Zb(5, "div", 3), i.jc("click", (function() {
                            return e.hide()
                        })), i.Yb(), i.Yb(), i.Zb(6, "div", 4), i.Vb(7, "div", 5), i.Zb(8, "div", 6), i.Tc(9), i.Yb(), i.Vb(10, "div", 7), i.rc(11), i.Rc(12, fN, 7, 12, "div", 8), i.Zb(13, "div", 9), i.Tc(14, "En savoir plus"), i.Yb(), i.Yb(), i.Zb(15, "div", 10), i.Zb(16, "div", 11), i.jc("click", (function() {
                            return e.save()
                        })), i.Zb(17, "p", 12), i.Tc(18), i.nc(19, "translate"), i.Yb(), i.Yb(), i.Zb(20, "div", 13), i.jc("click", (function() {
                            return e.hide()
                        })), i.Zb(21, "p", 14), i.Tc(22), i.nc(23, "translate"), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(3), i.Uc(i.oc(4, 5, "wiredfurni.title")), i.Gb(6), i.Uc(e.furniName), i.Gb(3), i.tc("ngIf", e.requiresFurni), i.Gb(6), i.Uc(i.oc(19, 7, "wiredfurni.ready")), i.Gb(4), i.Uc(i.oc(23, 9, "cancel")))
                    },
                    directives: [CE, kE, hp.n],
                    pipes: [tE],
                    encapsulation: 2
                }), t
            })();
            const RN = ["*"];
            let vN = (() => {
                    class t {
                        constructor() {
                            this.delay = 0, this.delayChange = new i.q, this.delayLocale = ""
                        }
                        ngOnChanges(t) {
                            t.delay.currentValue !== t.delay.previousValue && this.updateLocaleParameter()
                        }
                        onSliderChange() {
                            this.delayChange.emit(this.delay)
                        }
                        decreaseDelay() {
                            this.delay -= 1, this.delay < t.DELAY_MINIMUM_VALUE && (this.delay = t.DELAY_MINIMUM_VALUE), this.delayChange.emit(this.delay)
                        }
                        increaseDelay() {
                            this.delay += 1, this.delay > t.DELAY_MAXIMUM_VALUE && (this.delay = t.DELAY_MAXIMUM_VALUE), this.delayChange.emit(this.delay)
                        }
                        updateLocaleParameter() {
                            this.delayLocale = cp.instance.getLocalizationWithParameter("wiredfurni.params.delay", "seconds", UO.getLocaleName(this.delay))
                        }
                        get delaySliderOptions() {
                            return {
                                floor: t.DELAY_MINIMUM_VALUE,
                                ceil: t.DELAY_MAXIMUM_VALUE,
                                step: t.DELAY_STEPPER_VALUE,
                                hidePointerLabels: !0,
                                hideLimitLabels: !0
                            }
                        }
                    }
                    return t.DELAY_MINIMUM_VALUE = 0, t.DELAY_MAXIMUM_VALUE = 20, t.DELAY_STEPPER_VALUE = 1, t.\u0275fac = function(e) {
                        return new(e || t)
                    }, t.\u0275cmp = i.Ob({
                        type: t,
                        selectors: [
                            ["nitro-wired-action-base-component"]
                        ],
                        inputs: {
                            delay: "delay"
                        },
                        outputs: {
                            delayChange: "delayChange"
                        },
                        features: [i.Eb],
                        ngContentSelectors: RN,
                        decls: 9,
                        vars: 3,
                        consts: [
                            [1, "wiredrange-box"],
                            [1, "wired-subheader"],
                            [1, "wiredrange_box"],
                            [1, "decrease-number", 3, "click"],
                            ["name", "delay", 3, "options", "value", "valueChange"],
                            [1, "increase-number", 3, "click"]
                        ],
                        template: function(t, e) {
                            1 & t && (i.sc(), i.Zb(0, "nitro-wired-base-component"), i.rc(1), i.Zb(2, "div", 0), i.Zb(3, "p", 1), i.Tc(4), i.Yb(), i.Zb(5, "div", 2), i.Zb(6, "div", 3), i.jc("click", (function() {
                                return e.decreaseDelay()
                            })), i.Yb(), i.Zb(7, "ngx-slider", 4), i.jc("valueChange", (function(t) {
                                return e.delay = t
                            }))("valueChange", (function() {
                                return e.onSliderChange()
                            })), i.Yb(), i.Zb(8, "div", 5), i.jc("click", (function() {
                                return e.increaseDelay()
                            })), i.Yb(), i.Yb(), i.Yb(), i.Yb()), 2 & t && (i.Gb(4), i.Uc(e.delayLocale), i.Gb(3), i.tc("options", e.delaySliderOptions)("value", e.delay))
                        },
                        directives: [IN, ef.b],
                        encapsulation: 2
                    }), t
                })(),
                TN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [Pb],
                        imports: [
                            [$C, hp.b]
                        ]
                    }), t
                })();
            i.Jc(LO, [IN, VE.q, VE.j, VE.l, VE.m, VE.s], [tE]), i.Jc(PO, [IN], []), i.Jc(GO, [IN, VE.o, VE.b, VE.j, VE.l], [tE]), i.Jc(kO, [IN, VE.b, VE.j, VE.l], [tE]), i.Jc(ZO, [IN], []), i.Jc(BO, [IN, VE.b, VE.j, VE.l], [tE]), i.Jc(WO, [IN, VE.b, VE.j, VE.l], [tE]), i.Jc(KO, [IN, VE.o, VE.b, VE.j, VE.l], [tE]), i.Jc(qO, [IN], []), i.Jc(QO, [IN], []), i.Jc(ty, [IN, VE.o, VE.b, VE.j, VE.l], [tE]), i.Jc(sy, [IN, VE.a, VE.j, VE.l], [tE]), i.Jc(ny, [IN], []), i.Jc(oy, [IN, ef.b], []), i.Jc(cy, [IN, ef.b], []), i.Jc(hy, [IN, ef.b], [tE]), i.Jc(py, [IN, VE.o, VE.b, VE.j, VE.l, hp.n], [tE]), i.Jc(Ey, [IN, VE.b, VE.j, VE.l, VE.o], [tE]), i.Jc(Sy, [IN], []), i.Jc(Ry, [IN], []), i.Jc(Ty, [IN, VE.b, VE.j, VE.l], [tE]), i.Jc(yy, [IN, VE.b, VE.j, VE.l], [tE]), i.Jc(Cy, [IN], []), i.Jc(Uy, [IN], []), i.Jc(Ny, [IN], []), i.Jc(Ly, [IN, ef.b], [tE]), i.Jc(Py, [IN], []), i.Jc(Gy, [IN, ef.b], []), i.Jc(Vy, [IN, ef.b], []), i.Jc(jy, [IN, ef.b], []), i.Jc(WA, [vN], []), i.Jc(BA, [vN], []), i.Jc(_A, [vN], []), i.Jc(dA, [vN], []), i.Jc(aA, [vN], []), i.Jc(lA, [vN, VE.b, VE.j, VE.l], [tE]), i.Jc(Jy, [vN, VE.b, VE.g, VE.j, VE.l, VE.q, VE.m, VE.s], [tE]), i.Jc(Xy, [vN, VE.b, VE.g, VE.j, VE.l, VE.o], [tE]), i.Jc(UA, [vN], []), i.Jc(kA, [vN], []), i.Jc(CA, [vN, VE.b, VE.j, VE.l], [tE]), i.Jc(rA, [vN, VE.b, VE.g, VE.j, VE.l], [tE]), i.Jc(ZA, [vN, VE.a, VE.j, VE.l], [tE]), i.Jc($y, [vN, VE.b, VE.g, VE.j, VE.l], [tE]), i.Jc(GA, [vN, ef.b, VE.b, VE.j, VE.l], [tE]), i.Jc(zy, [vN, VE.b, VE.g, VE.j, VE.l, cf], [tE]), i.Jc(eA, [vN, VE.b, VE.g, VE.j, VE.l], [tE]), i.Jc(iA, [vN, VE.b, VE.g, VE.j, VE.l], [tE]), i.Jc(LA, [vN, VE.o, VE.b, VE.j, VE.l], [tE]), i.Jc(PA, [vN, VE.o, VE.b, VE.j, VE.l], [tE]), i.Jc(yA, [vN, VE.q, VE.j, VE.l, VE.m, VE.s], [tE]), i.Jc(TA, [vN, ef.b, VE.q, VE.j, VE.l, VE.m, VE.s], [tE]), i.Jc(RA, [vN, ef.b], [tE]), i.Jc(NA, [vN, ef.b, VE.o, VE.b, VE.j, VE.l], [tE]), i.Jc(SA, [vN, VE.a, VE.j, VE.l, hp.n, ef.b, VE.q, VE.m, VE.s, VE.b, kv.b, hp.m], [tE]);
            let ON = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        imports: [
                            [$C, tM, TM, OM, oU, wU, LU, xU, $U, lN, uN, dN, gN, mN, pN, TN, bD, aU]
                        ]
                    }), t
                })(),
                yN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [_p]
                    }), t
                })(),
                AN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        providers: [_O]
                    }), t
                })(),
                CN = (() => {
                    class t {}
                    return t.\u0275mod = i.Sb({
                        type: t,
                        bootstrap: [zC]
                    }), t.\u0275inj = i.Rb({
                        factory: function(e) {
                            return new(e || t)
                        },
                        imports: [
                            [$C, yN, AN, ON, n.a, r.a]
                        ]
                    }), t
                })();
            Object(i.Z)(), n.c().bootstrapModule(CN).catch(t => console.log(t))
        },
        zn8P: function(t, e) {
            function s(t) {
                return Promise.resolve().then((function() {
                    var e = new Error("Cannot find module '" + t + "'");
                    throw e.code = "MODULE_NOT_FOUND", e
                }))
            }
            s.keys = function() {
                return []
            }, s.resolve = s, t.exports = s, s.id = "zn8P"
        }
    },
    [
        [0, 0, 4]
    ]
]);